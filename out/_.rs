// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayerBasicInfo {
    #[prost(string, tag = "1")]
    pub nickname: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub level: u32,
    #[prost(uint32, tag = "3")]
    pub exp: u32,
    #[prost(uint32, tag = "4")]
    pub stamina: u32,
    #[prost(uint32, tag = "5")]
    pub mcoin: u32,
    #[prost(uint32, tag = "6")]
    pub hcoin: u32,
    #[prost(uint32, tag = "7")]
    pub scoin: u32,
    #[prost(uint32, tag = "8")]
    pub world_level: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AmountInfo {
    #[prost(uint32, tag = "1")]
    pub cur_amount: u32,
    #[prost(uint32, tag = "2")]
    pub max_amount: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BlackInfo {
    #[prost(int64, tag = "1")]
    pub begin_time: i64,
    #[prost(int64, tag = "2")]
    pub end_time: i64,
    #[prost(uint32, tag = "3")]
    pub limit_level: u32,
    #[prost(uint32, tag = "4")]
    pub ban_type: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FeverTimeAvatar {
    #[prost(enumeration = "AvatarType", tag = "1")]
    pub avatar_type: i32,
    #[prost(uint32, tag = "2")]
    pub id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct VersionCount {
    #[prost(uint32, tag = "1")]
    pub version: u32,
    #[prost(uint32, tag = "2")]
    pub count: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClientDownloadData {
    #[prost(uint32, tag = "1")]
    pub version: u32,
    #[prost(int64, tag = "2")]
    pub time: i64,
    /// uint32 HAEHHCPOAPP = 4;
    #[prost(bytes = "vec", tag = "3")]
    pub data: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClientObjDownloadData {
    #[prost(bytes = "vec", tag = "1")]
    pub bidjpeimllf: ::prost::alloc::vec::Vec<u8>,
    #[prost(message, optional, tag = "2")]
    pub client_obj_download_data: ::core::option::Option<ClientDownloadData>,
    #[prost(message, repeated, tag = "3")]
    pub jedhnejhgnp: ::prost::alloc::vec::Vec<ClientDownloadData>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClientUploadData {
    #[prost(string, tag = "1")]
    pub tag: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub value: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FeatureSwitchParam {
    #[prost(uint32, repeated, tag = "1")]
    pub switch_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FeatureSwitchInfo {
    #[prost(enumeration = "FeatureSwitchType", tag = "1")]
    pub r#type: i32,
    #[prost(message, repeated, tag = "2")]
    pub switch_list: ::prost::alloc::vec::Vec<FeatureSwitchParam>,
    #[prost(bool, tag = "3")]
    pub is_all_closed: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExtraDeviceInfo {
    #[prost(string, tag = "1")]
    pub fdkgfdicmfd: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub mdjcaoagcko: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub gioohoomjho: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub fbmllnkcfen: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub dgoohibaoee: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub fkbamboodkj: ::prost::alloc::string::String,
    #[prost(string, tag = "7")]
    pub mac: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReplayInfo {
    #[prost(uint64, tag = "1")]
    pub dknpkjmahcm: u64,
    #[prost(enumeration = "ReplayType", tag = "2")]
    pub replay_type: i32,
    #[prost(uint32, tag = "3")]
    pub stage_id: u32,
    #[prost(uint32, tag = "4")]
    pub uid: u32,
    #[prost(string, tag = "5")]
    pub nickname: ::prost::alloc::string::String,
    #[prost(uint32, tag = "6")]
    pub head_icon: u32,
    #[prost(string, tag = "7")]
    pub hciibppifbg: ::prost::alloc::string::String,
    #[prost(uint64, tag = "8")]
    pub timestamp: u64,
    #[prost(uint32, tag = "9")]
    pub afehlmfibmd: u32,
    #[prost(uint32, tag = "10")]
    pub cmpbkbbkaoa: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PunkLordBattleAvatar {
    #[prost(uint32, tag = "1")]
    pub avatar_id: u32,
    #[prost(uint32, tag = "2")]
    pub avatar_level: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PunkLordBattleRecord {
    #[prost(uint32, tag = "1")]
    pub uid: u32,
    #[prost(uint32, tag = "2")]
    pub damage_hp: u32,
    #[prost(bool, tag = "3")]
    pub is_final_hit: bool,
    #[prost(uint32, tag = "4")]
    pub over_kill_damage_hp: u32,
    #[prost(string, tag = "5")]
    pub battle_replay_key: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "6")]
    pub avatar_list: ::prost::alloc::vec::Vec<PunkLordBattleAvatar>,
    #[prost(uint32, tag = "7")]
    pub assist_score: u32,
    #[prost(uint32, tag = "8")]
    pub damage_score: u32,
    #[prost(uint32, tag = "9")]
    pub final_hit_score: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PunkLordBattleRecordList {
    #[prost(message, repeated, tag = "1")]
    pub battle_record_list: ::prost::alloc::vec::Vec<PunkLordBattleRecord>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PunkLordMonsterKey {
    #[prost(uint32, tag = "1")]
    pub uid: u32,
    #[prost(uint32, tag = "2")]
    pub monster_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PunkLordMonsterBasicInfo {
    #[prost(uint32, tag = "1")]
    pub uid: u32,
    #[prost(uint32, tag = "2")]
    pub monster_id: u32,
    #[prost(uint32, tag = "3")]
    pub config_id: u32,
    #[prost(uint32, tag = "4")]
    pub world_level: u32,
    #[prost(int64, tag = "5")]
    pub timestamp: i64,
    #[prost(uint32, tag = "6")]
    pub left_hp: u32,
    #[prost(uint32, tag = "7")]
    pub pjdcnahgahc: u32,
    #[prost(enumeration = "PunkLordShareType", tag = "8")]
    pub felggjmhono: i32,
    #[prost(bool, tag = "9")]
    pub ppboceckcah: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PunkLordBattleReplay {
    #[prost(string, tag = "1")]
    pub battle_replay_key: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub replay_info: ::core::option::Option<ReplayInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ildhfmhbknc {
    #[prost(uint64, tag = "1")]
    pub infhikbljla: u64,
    #[prost(uint32, tag = "2")]
    pub nbdlpgbidlc: u32,
    #[prost(uint32, tag = "3")]
    pub ahbemdlggeo: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pedlphdbnaf {
    #[prost(oneof = "pedlphdbnaf::Gahlglnkafc", tags = "101")]
    pub gahlglnkafc: ::core::option::Option<pedlphdbnaf::Gahlglnkafc>,
}
/// Nested message and enum types in `PEDLPHDBNAF`.
pub mod pedlphdbnaf {
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum Gahlglnkafc {
        #[prost(message, tag = "101")]
        Lfcphajcekf(super::Ildhfmhbknc),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ServerData {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub title: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub dispatch_url: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub env_type: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub display_name: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub msg: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GlobalDispatchData {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(string, tag = "2")]
    pub msg: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub top_sever_region_name: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "4")]
    pub server_list: ::prost::alloc::vec::Vec<ServerData>,
    #[prost(string, tag = "5")]
    pub stop_desc: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RelicFilterPlanSettings {
    #[prost(uint32, tag = "1")]
    pub rarity_bitset: u32,
    #[prost(uint32, repeated, tag = "2")]
    pub relic_set_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "3")]
    pub body_main_property_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "4")]
    pub foot_main_property_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "5")]
    pub sphere_main_property_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "6")]
    pub rope_main_property_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, tag = "7")]
    pub is_include_filter_sub_property: bool,
    #[prost(uint32, tag = "8")]
    pub sub_property_num: u32,
    #[prost(uint32, repeated, tag = "9")]
    pub sub_property_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "10")]
    pub head_main_property_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "11")]
    pub hand_main_property_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BattleOp {
    #[prost(uint32, tag = "1")]
    pub turn_counter: u32,
    #[prost(uint32, tag = "2")]
    pub state: u32,
    #[prost(uint32, tag = "3")]
    pub action_entity_id: u32,
    #[prost(uint32, tag = "4")]
    pub target_entity_id: u32,
    #[prost(uint32, tag = "5")]
    pub op_type: u32,
    #[prost(uint32, tag = "6")]
    pub skill_index: u32,
    #[prost(uint32, tag = "7")]
    pub operation_counter: u32,
    #[prost(string, tag = "8")]
    pub nplieiphcbf: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BattleEquipment {
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(uint32, tag = "2")]
    pub level: u32,
    #[prost(uint32, tag = "3")]
    pub promotion: u32,
    #[prost(uint32, tag = "4")]
    pub rank: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BattleRelic {
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(uint32, tag = "2")]
    pub level: u32,
    #[prost(uint32, tag = "3")]
    pub main_affix_id: u32,
    #[prost(message, repeated, tag = "4")]
    pub sub_affix_list: ::prost::alloc::vec::Vec<RelicAffix>,
    #[prost(uint32, tag = "5")]
    pub unique_id: u32,
    #[prost(uint32, tag = "6")]
    pub set_id: u32,
    #[prost(uint32, tag = "7")]
    pub r#type: u32,
    #[prost(uint32, tag = "8")]
    pub rarity: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AvatarSkillTree {
    #[prost(uint32, tag = "1")]
    pub point_id: u32,
    #[prost(uint32, tag = "2")]
    pub level: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RelicAffix {
    #[prost(uint32, tag = "1")]
    pub affix_id: u32,
    #[prost(uint32, tag = "2")]
    pub cnt: u32,
    #[prost(uint32, tag = "3")]
    pub step: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bjhebccbana {
    #[prost(bool, tag = "1")]
    pub ljpadncgloc: bool,
    #[prost(uint32, repeated, tag = "2")]
    pub dddhnaklmhf: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "3")]
    pub jgjcdmjimnn: u32,
    #[prost(uint32, tag = "4")]
    pub pofmkdabehd: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BattleAvatar {
    #[prost(enumeration = "AvatarType", tag = "1")]
    pub avatar_type: i32,
    #[prost(uint32, tag = "2")]
    pub id: u32,
    #[prost(uint32, tag = "3")]
    pub level: u32,
    #[prost(uint32, tag = "4")]
    pub rank: u32,
    #[prost(uint32, tag = "5")]
    pub index: u32,
    #[prost(message, repeated, tag = "6")]
    pub skilltree_list: ::prost::alloc::vec::Vec<AvatarSkillTree>,
    #[prost(message, repeated, tag = "7")]
    pub equipment_list: ::prost::alloc::vec::Vec<BattleEquipment>,
    #[prost(uint32, tag = "8")]
    pub hp: u32,
    #[prost(uint32, tag = "10")]
    pub promotion: u32,
    #[prost(message, repeated, tag = "11")]
    pub relic_list: ::prost::alloc::vec::Vec<BattleRelic>,
    #[prost(uint32, tag = "12")]
    pub world_level: u32,
    #[prost(uint32, tag = "13")]
    pub assist_uid: u32,
    #[prost(message, optional, tag = "15")]
    pub ecifjlakhcl: ::core::option::Option<Bjhebccbana>,
    #[prost(message, optional, tag = "16")]
    pub sp: ::core::option::Option<AmountInfo>,
    #[prost(uint32, tag = "17")]
    pub gmobaocefce: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BattleMonsterParam {
    #[prost(uint32, tag = "1")]
    pub hard_level_group: u32,
    #[prost(uint32, tag = "2")]
    pub level: u32,
    #[prost(uint32, tag = "3")]
    pub elite_group: u32,
    #[prost(uint32, tag = "4")]
    pub dneampllfme: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BattleMonster {
    #[prost(uint32, tag = "1")]
    pub monster_id: u32,
    #[prost(uint32, tag = "2")]
    pub cur_hp: u32,
    #[prost(uint32, tag = "3")]
    pub max_hp: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BattleMonsterWave {
    #[prost(message, repeated, tag = "1")]
    pub monster_list: ::prost::alloc::vec::Vec<BattleMonster>,
    #[prost(message, optional, tag = "2")]
    pub wave_param: ::core::option::Option<BattleMonsterParam>,
    #[prost(uint32, tag = "3")]
    pub battle_stage_id: u32,
    #[prost(uint32, tag = "4")]
    pub battle_wave_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BattleBuff {
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(uint32, tag = "2")]
    pub level: u32,
    #[prost(uint32, tag = "3")]
    pub owner_index: u32,
    #[prost(uint32, tag = "4")]
    pub wave_flag: u32,
    #[prost(uint32, repeated, tag = "5")]
    pub target_index_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(map = "string, float", tag = "6")]
    pub dynamic_values: ::std::collections::HashMap<::prost::alloc::string::String, f32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Illcdmocldo {
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(uint32, tag = "2")]
    pub hfaljihkecn: u32,
    #[prost(uint32, tag = "3")]
    pub laejdghmkdb: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ljgiaglfhhc {
    #[prost(uint32, tag = "1")]
    pub fenmmmkoocf: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Enflfbdaoij {
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(uint32, tag = "2")]
    pub hfaljihkecn: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gmgjcihdfma {
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(uint32, tag = "2")]
    pub progress: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BattleTarget {
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(uint32, tag = "2")]
    pub progress: u32,
    #[prost(uint32, tag = "3")]
    pub total_progress: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BattleTargetList {
    #[prost(message, repeated, tag = "1")]
    pub battle_target_list: ::prost::alloc::vec::Vec<BattleTarget>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BattleLineup {
    #[prost(message, repeated, tag = "1")]
    pub avatar_list: ::prost::alloc::vec::Vec<BattleAvatar>,
    #[prost(message, repeated, tag = "2")]
    pub monster_wave_list: ::prost::alloc::vec::Vec<BattleMonsterWave>,
    #[prost(message, repeated, tag = "3")]
    pub buff_list: ::prost::alloc::vec::Vec<BattleBuff>,
    #[prost(uint32, tag = "7")]
    pub world_level: u32,
    #[prost(map = "uint32, message", tag = "9")]
    pub battle_target_info: ::std::collections::HashMap<u32, BattleTargetList>,
    #[prost(message, optional, tag = "10")]
    pub ajgpjglpmio: ::core::option::Option<Ljgiaglfhhc>,
    #[prost(message, repeated, tag = "11")]
    pub ejcljldendm: ::prost::alloc::vec::Vec<BattleAvatar>,
    #[prost(message, optional, tag = "12")]
    pub jpgifchjdlk: ::core::option::Option<EvolveBuildBattleInfo>,
    #[prost(message, optional, tag = "13")]
    pub mfkjokajjmj: ::core::option::Option<Gieibeacbao>,
    #[prost(message, optional, tag = "14")]
    pub battle_rogue_magic_info: ::core::option::Option<BattleRogueMagicInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gieibeacbao {
    #[prost(map = "uint32, uint32", tag = "1")]
    pub gccjdhkhmnk: ::std::collections::HashMap<u32, u32>,
    #[prost(uint32, tag = "2")]
    pub fpbnipmhanh: u32,
    #[prost(uint32, tag = "3")]
    pub aagiancieeg: u32,
    #[prost(uint32, tag = "4")]
    pub elpfomlcobm: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AetherAvatarInfo {
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(uint32, tag = "2")]
    pub index: u32,
    #[prost(uint32, tag = "3")]
    pub promotion: u32,
    #[prost(uint32, repeated, tag = "4")]
    pub passive_skill: ::prost::alloc::vec::Vec<u32>,
    #[prost(enumeration = "AetherdivideSpiritLineupType", tag = "5")]
    pub spirit_lineup_type: i32,
    #[prost(message, optional, tag = "6")]
    pub sp: ::core::option::Option<AmountInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pndfmbjfgim {
    #[prost(message, repeated, tag = "1")]
    pub avatar_list: ::prost::alloc::vec::Vec<AetherAvatarInfo>,
    #[prost(message, repeated, tag = "2")]
    pub monster_wave_list: ::prost::alloc::vec::Vec<BattleMonsterWave>,
    #[prost(message, repeated, tag = "3")]
    pub buff_list: ::prost::alloc::vec::Vec<BattleBuff>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClientTurnSnapshot {
    #[prost(uint32, tag = "1")]
    pub turn_counter: u32,
    #[prost(uint32, tag = "2")]
    pub random_counter: u32,
    #[prost(uint32, tag = "3")]
    pub anim_event_counter: u32,
    #[prost(message, repeated, tag = "4")]
    pub snapshot_list: ::prost::alloc::vec::Vec<CharacterSnapshot>,
    #[prost(message, repeated, tag = "5")]
    pub anim_event_list: ::prost::alloc::vec::Vec<AnimEventSnapshot>,
    #[prost(uint32, tag = "6")]
    pub jeinbmlfcbp: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GamecoreConfig {
    #[prost(bool, tag = "1")]
    pub is_skip_verify: bool,
    #[prost(uint32, tag = "2")]
    pub max_turn_cnt: u32,
    #[prost(bool, tag = "3")]
    pub is_auto_fight: bool,
    #[prost(string, tag = "4")]
    pub csv_path: ::prost::alloc::string::String,
    #[prost(bool, tag = "5")]
    pub lkfdpdldmib: bool,
    #[prost(bool, tag = "6")]
    pub mnalpnfnmio: bool,
    #[prost(uint32, tag = "7")]
    pub ggfcojflkbp: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BattleBuffMsg {
    #[prost(uint32, repeated, tag = "1")]
    pub buff_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "2")]
    pub buff_index_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "3")]
    pub buff_level_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "4")]
    pub buff_flag_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dkflaljdifl {
    #[prost(uint32, tag = "1")]
    pub mbbchgenggl: u32,
    #[prost(uint32, tag = "2")]
    pub hfcdphchfgk: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mbmcfoliolo {
    #[prost(bool, tag = "1")]
    pub cdnojcacelj: bool,
    #[prost(map = "string, message", tag = "2")]
    pub haneginlani: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        Dkflaljdifl,
    >,
    #[prost(bytes = "vec", tag = "3")]
    pub cjkmgenojbe: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Miaidaildkm {
    #[prost(message, repeated, tag = "1")]
    pub eeflghcobml: ::prost::alloc::vec::Vec<ClientTurnSnapshot>,
    #[prost(string, tag = "2")]
    pub kgbhehhfmpi: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub cpcljgpdnan: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "4")]
    pub hlagimenbjg: ::prost::alloc::vec::Vec<BattleReplayStringHash>,
    #[prost(uint32, tag = "5")]
    pub plane_id: u32,
    #[prost(uint32, tag = "6")]
    pub floor_id: u32,
    #[prost(uint32, tag = "7")]
    pub ebhlfaeglcd: u32,
    #[prost(uint32, tag = "8")]
    pub bnjmmlkofcp: u32,
    #[prost(message, optional, tag = "9")]
    pub edhbgdeicnc: ::core::option::Option<Mbmcfoliolo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BattleReplay {
    #[prost(uint32, tag = "1")]
    pub version: u32,
    #[prost(uint32, tag = "2")]
    pub logic_random_seed: u32,
    #[prost(uint32, tag = "3")]
    pub stage_id: u32,
    #[prost(message, optional, tag = "4")]
    pub lineup: ::core::option::Option<BattleLineup>,
    #[prost(message, repeated, tag = "5")]
    pub op_list: ::prost::alloc::vec::Vec<BattleOp>,
    #[prost(bytes = "vec", tag = "6")]
    pub turn_snapshot_hash: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint32, tag = "7")]
    pub maze_plane_id: u32,
    #[prost(uint32, repeated, tag = "8")]
    pub extra_ability_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, tag = "9")]
    pub is_ai_consider_ultra_skill: bool,
    #[prost(enumeration = "BattleCheckStrategyType", tag = "10")]
    pub check_strategy: i32,
    #[prost(enumeration = "BattleModuleType", tag = "11")]
    pub battle_module_type: i32,
    #[prost(message, repeated, tag = "12")]
    pub battle_event: ::prost::alloc::vec::Vec<BattleEventBattleInfo>,
    #[prost(uint32, tag = "14")]
    pub cycle_count: u32,
    #[prost(message, optional, tag = "15")]
    pub config: ::core::option::Option<GamecoreConfig>,
    #[prost(bytes = "vec", tag = "16")]
    pub game_core_log_encode: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint32, tag = "17")]
    pub client_version: u32,
    #[prost(uint32, tag = "18")]
    pub ddogjokeccl: u32,
    #[prost(message, optional, tag = "19")]
    pub gmpcfgedhki: ::core::option::Option<Pndfmbjfgim>,
    #[prost(message, optional, tag = "100")]
    pub bnmiiahadjh: ::core::option::Option<Miaidaildkm>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BattleReplayStringHash {
    #[prost(int32, tag = "1")]
    pub hash: i32,
    #[prost(string, tag = "2")]
    pub value: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AvatarProperty {
    #[prost(double, tag = "1")]
    pub max_hp: f64,
    #[prost(double, tag = "2")]
    pub attack: f64,
    #[prost(double, tag = "3")]
    pub defence: f64,
    #[prost(double, tag = "4")]
    pub speed: f64,
    #[prost(double, tag = "5")]
    pub left_hp: f64,
    #[prost(double, tag = "6")]
    pub left_sp: f64,
    #[prost(double, tag = "7")]
    pub max_amount: f64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EquipmentProperty {
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(uint32, tag = "2")]
    pub rank: u32,
    #[prost(uint32, tag = "3")]
    pub promotion: u32,
    #[prost(uint32, tag = "4")]
    pub level: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AttackDamageProperty {
    #[prost(string, tag = "1")]
    pub attack_type: ::prost::alloc::string::String,
    #[prost(double, tag = "2")]
    pub damage: f64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SkillUseProperty {
    #[prost(uint32, tag = "1")]
    pub skill_id: u32,
    #[prost(string, tag = "2")]
    pub skill_type: ::prost::alloc::string::String,
    #[prost(uint32, tag = "3")]
    pub skill_level: u32,
    #[prost(uint32, tag = "4")]
    pub skill_use_count: u32,
    #[prost(uint32, tag = "5")]
    pub ifejkalhopi: u32,
    #[prost(uint32, tag = "6")]
    pub jhdhlcncdnc: u32,
    #[prost(uint32, tag = "7")]
    pub hoafnnijoom: u32,
    #[prost(uint32, tag = "8")]
    pub mdeadclnjcj: u32,
    #[prost(uint32, tag = "9")]
    pub ohnppjemkde: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gaagehabinm {
    #[prost(uint32, tag = "1")]
    pub skill_id: u32,
    #[prost(double, tag = "2")]
    pub hgflpenkiii: f64,
    #[prost(uint32, repeated, tag = "3")]
    pub battle_target_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(double, tag = "4")]
    pub damage: f64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SpAddSource {
    #[prost(string, tag = "1")]
    pub source: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub sp_add: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AbilityUseStt {
    #[prost(string, tag = "1")]
    pub fkhhobbfmeh: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub count: u32,
    #[prost(double, tag = "3")]
    pub total_damage: f64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AvatarBattleInfo {
    #[prost(enumeration = "AvatarType", tag = "1")]
    pub avatar_type: i32,
    #[prost(uint32, tag = "2")]
    pub id: u32,
    #[prost(uint32, tag = "3")]
    pub avatar_level: u32,
    #[prost(uint32, tag = "4")]
    pub avatar_rank: u32,
    #[prost(uint32, tag = "5")]
    pub avatar_promotion: u32,
    #[prost(message, optional, tag = "6")]
    pub avatar_status: ::core::option::Option<AvatarProperty>,
    #[prost(message, repeated, tag = "7")]
    pub avatar_skill: ::prost::alloc::vec::Vec<AvatarSkillTree>,
    #[prost(message, repeated, tag = "8")]
    pub avatar_equipment: ::prost::alloc::vec::Vec<EquipmentProperty>,
    #[prost(uint32, tag = "9")]
    pub total_turns: u32,
    #[prost(double, tag = "10")]
    pub total_damage: f64,
    #[prost(double, tag = "11")]
    pub total_heal: f64,
    #[prost(double, tag = "12")]
    pub total_damage_taken: f64,
    #[prost(double, tag = "13")]
    pub total_hp_recover: f64,
    #[prost(double, tag = "14")]
    pub total_sp_cost: f64,
    #[prost(uint32, tag = "15")]
    pub stage_id: u32,
    #[prost(uint32, tag = "16")]
    pub stage_type: u32,
    #[prost(double, tag = "17")]
    pub total_break_damage: f64,
    #[prost(message, repeated, tag = "18")]
    pub aiomeahjhdi: ::prost::alloc::vec::Vec<AttackDamageProperty>,
    #[prost(message, repeated, tag = "19")]
    pub nepfmblihik: ::prost::alloc::vec::Vec<AttackDamageProperty>,
    #[prost(message, repeated, tag = "20")]
    pub ogoajmdmmdg: ::prost::alloc::vec::Vec<AttackDamageProperty>,
    #[prost(message, repeated, tag = "21")]
    pub ebefolnjphi: ::prost::alloc::vec::Vec<SkillUseProperty>,
    #[prost(double, tag = "22")]
    pub mhjdacjccgh: f64,
    #[prost(uint32, tag = "23")]
    pub total_sp_add: u32,
    #[prost(message, repeated, tag = "24")]
    pub dlhgdggbkok: ::prost::alloc::vec::Vec<SpAddSource>,
    #[prost(uint32, tag = "25")]
    pub ajjmgnfgoje: u32,
    #[prost(uint32, tag = "26")]
    pub die_times: u32,
    #[prost(uint32, tag = "27")]
    pub dcncboepohb: u32,
    #[prost(uint32, tag = "28")]
    pub break_times: u32,
    #[prost(uint32, tag = "29")]
    pub ekmmcifnffg: u32,
    #[prost(double, tag = "30")]
    pub fonhedeflom: f64,
    #[prost(double, tag = "31")]
    pub hjidhcjnibe: f64,
    #[prost(double, tag = "32")]
    pub phdedfbljfi: f64,
    #[prost(message, optional, tag = "33")]
    pub efgkjmhckap: ::core::option::Option<AvatarProperty>,
    #[prost(message, repeated, tag = "34")]
    pub relics: ::prost::alloc::vec::Vec<BattleRelic>,
    #[prost(uint32, tag = "35")]
    pub assist_uid: u32,
    #[prost(message, repeated, tag = "36")]
    pub aadgflpbpdf: ::prost::alloc::vec::Vec<AttackDamageProperty>,
    #[prost(double, tag = "37")]
    pub fpfbmimbbhj: f64,
    #[prost(double, tag = "38")]
    pub ggpjohnocpc: f64,
    #[prost(double, tag = "39")]
    pub lackcjhhimk: f64,
    #[prost(double, tag = "40")]
    pub fmodlgobnpe: f64,
    #[prost(message, repeated, tag = "41")]
    pub lhkabnickjn: ::prost::alloc::vec::Vec<AbilityUseStt>,
    #[prost(uint32, tag = "42")]
    pub ncjhdjjdjnl: u32,
    #[prost(uint32, tag = "43")]
    pub lkmgdiadopb: u32,
    #[prost(double, tag = "44")]
    pub iblgmcipckm: f64,
    #[prost(double, tag = "45")]
    pub hacjdjigmgp: f64,
    #[prost(double, tag = "46")]
    pub imdjahajgcf: f64,
    #[prost(double, tag = "47")]
    pub jdolkdbiclj: f64,
    #[prost(double, tag = "48")]
    pub caccoddcjhi: f64,
    #[prost(uint32, tag = "49")]
    pub lldmlohbflo: u32,
    #[prost(uint32, tag = "50")]
    pub chnikkcibeg: u32,
    #[prost(uint32, tag = "51")]
    pub lbnjhhhlpmo: u32,
    #[prost(double, tag = "52")]
    pub pdlilfichil: f64,
    #[prost(uint32, tag = "53")]
    pub pmklphjiohc: u32,
    #[prost(uint32, tag = "54")]
    pub mpfaenekfdc: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MonsterProperty {
    #[prost(double, tag = "1")]
    pub max_hp: f64,
    #[prost(double, tag = "2")]
    pub attack: f64,
    #[prost(double, tag = "3")]
    pub defence: f64,
    #[prost(double, tag = "4")]
    pub shield: f64,
    #[prost(double, tag = "5")]
    pub speed: f64,
    #[prost(double, tag = "6")]
    pub left_hp: f64,
    #[prost(double, tag = "7")]
    pub enter_battle_hp: f64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MonsterPhaseStt {
    #[prost(uint32, tag = "1")]
    pub ndbojandnjn: u32,
    #[prost(double, tag = "2")]
    pub mmcphlpecdj: f64,
    #[prost(uint32, tag = "3")]
    pub doiadgdbohf: u32,
    #[prost(uint32, tag = "4")]
    pub break_times: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MonsterBattleInfo {
    #[prost(uint32, tag = "1")]
    pub entity_id: u32,
    #[prost(uint32, tag = "2")]
    pub monster_id: u32,
    #[prost(uint32, tag = "3")]
    pub oakilfgdacj: u32,
    #[prost(uint32, tag = "4")]
    pub bfpaoanbjon: u32,
    #[prost(message, optional, tag = "5")]
    pub nkcmcmhafaf: ::core::option::Option<MonsterProperty>,
    #[prost(uint32, tag = "6")]
    pub total_turns: u32,
    #[prost(double, tag = "7")]
    pub total_damage: f64,
    #[prost(double, tag = "8")]
    pub total_heal: f64,
    #[prost(double, tag = "9")]
    pub total_damage_taken: f64,
    #[prost(double, tag = "10")]
    pub akgfcpfaolp: f64,
    #[prost(double, tag = "11")]
    pub total_hp_recover: f64,
    #[prost(uint32, tag = "12")]
    pub stage_id: u32,
    #[prost(uint32, tag = "13")]
    pub battle_id: u32,
    #[prost(uint32, tag = "14")]
    pub jbcdlfjjjdg: u32,
    #[prost(message, repeated, tag = "15")]
    pub aiomeahjhdi: ::prost::alloc::vec::Vec<AttackDamageProperty>,
    #[prost(message, repeated, tag = "16")]
    pub ebefolnjphi: ::prost::alloc::vec::Vec<SkillUseProperty>,
    #[prost(uint32, tag = "17")]
    pub stage_type: u32,
    #[prost(double, tag = "18")]
    pub acofippjkbi: f64,
    #[prost(double, tag = "19")]
    pub mhjdacjccgh: f64,
    #[prost(enumeration = "DeathSource", tag = "20")]
    pub fiedknkiebh: i32,
    #[prost(uint32, tag = "21")]
    pub wave: u32,
    #[prost(int32, tag = "22")]
    pub jhaogjjdbhl: i32,
    #[prost(uint32, tag = "23")]
    pub halgpjmcmfp: u32,
    #[prost(uint32, tag = "24")]
    pub dcmohecbolk: u32,
    #[prost(enumeration = "BattleTag", tag = "25")]
    pub jedahlgbiem: i32,
    #[prost(message, repeated, tag = "26")]
    pub skill_info: ::prost::alloc::vec::Vec<Gaagehabinm>,
    #[prost(uint32, tag = "27")]
    pub lanfclolbof: u32,
    #[prost(message, repeated, tag = "28")]
    pub kfgjbiljgdp: ::prost::alloc::vec::Vec<MonsterPhaseStt>,
    #[prost(uint32, tag = "29")]
    pub fpkoniklica: u32,
    #[prost(uint32, tag = "30")]
    pub jeemgaeifae: u32,
    #[prost(enumeration = "Hembndjafda", tag = "31")]
    pub hbofdajjjme: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BattleEventProperty {
    #[prost(message, optional, tag = "2")]
    pub sp: ::core::option::Option<AmountInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BattleEventBattleInfo {
    #[prost(uint32, tag = "1")]
    pub battle_event_id: u32,
    #[prost(message, optional, tag = "2")]
    pub status: ::core::option::Option<BattleEventProperty>,
    #[prost(message, repeated, tag = "3")]
    pub skill_info: ::prost::alloc::vec::Vec<Gaagehabinm>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Icfcppichjb {
    #[prost(uint32, tag = "1")]
    pub fjjdfpkgopc: u32,
    #[prost(uint32, tag = "2")]
    pub score_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ibffajohkmo {
    #[prost(uint32, tag = "1")]
    pub equip_avatar_id: u32,
    #[prost(uint32, repeated, tag = "2")]
    pub leickpdifog: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "3")]
    pub source: u32,
    #[prost(double, tag = "4")]
    pub damage: f64,
    #[prost(uint32, repeated, tag = "5")]
    pub dikkhpfkapf: ::prost::alloc::vec::Vec<u32>,
    #[prost(int32, tag = "6")]
    pub eoofimegmfb: i32,
    #[prost(double, tag = "7")]
    pub bkjeampnank: f64,
    #[prost(uint32, tag = "8")]
    pub blfhkgpmndk: u32,
    #[prost(uint32, tag = "9")]
    pub wave: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kkmpkjpggcl {
    #[prost(uint32, tag = "1")]
    pub equip_avatar_id: u32,
    #[prost(int32, tag = "2")]
    pub abapdfgjnme: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cnpnnijglfi {
    #[prost(uint32, tag = "1")]
    pub dpdnnmbcpoi: u32,
    #[prost(uint32, tag = "2")]
    pub dbeljgbkbpa: u32,
    #[prost(uint32, tag = "3")]
    pub entity_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Iiiphjimnid {
    #[prost(uint32, tag = "1")]
    pub ndbojandnjn: u32,
    #[prost(uint32, tag = "2")]
    pub monster_id: u32,
    #[prost(message, repeated, tag = "3")]
    pub nglpbhmlehn: ::prost::alloc::vec::Vec<Kkmpkjpggcl>,
    #[prost(uint32, tag = "4")]
    pub hgflpenkiii: u32,
    #[prost(message, repeated, tag = "5")]
    pub akkggpadaoo: ::prost::alloc::vec::Vec<Cnpnnijglfi>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mmndjamebml {
    #[prost(enumeration = "BattleStaticticEventType", tag = "1")]
    pub r#type: i32,
    #[prost(uint32, tag = "2")]
    pub ocpppkddiml: u32,
    #[prost(uint32, tag = "3")]
    pub caoapdccpca: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kpkkkjpjcpc {
    #[prost(uint32, tag = "1")]
    pub lidgjndgbkm: u32,
    #[prost(uint32, tag = "2")]
    pub oaabadfkcoa: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Meoifioaecf {
    #[prost(uint32, tag = "1")]
    pub jjccjjinlfl: u32,
    #[prost(bool, tag = "2")]
    pub hemjhdoeebl: bool,
    #[prost(message, optional, tag = "3")]
    pub kacalgioedb: ::core::option::Option<Kpkkkjpjcpc>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bhgboojeopf {
    #[prost(uint32, tag = "1")]
    pub hplkcinapmf: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EvolveBuildGearDamageInfo {
    #[prost(uint32, tag = "1")]
    pub gear_id: u32,
    #[prost(double, tag = "2")]
    pub damage: f64,
    #[prost(double, tag = "3")]
    pub hp_damage: f64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lgifednkhon {
    #[prost(uint32, repeated, tag = "1")]
    pub dakijnbfkob: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mjkibjlobkd {
    #[prost(uint32, tag = "1")]
    pub wave: u32,
    #[prost(uint32, tag = "2")]
    pub score_id: u32,
    #[prost(uint32, tag = "3")]
    pub dchiolbfkjn: u32,
    #[prost(message, repeated, tag = "4")]
    pub bhjkmhmoeak: ::prost::alloc::vec::Vec<Kpkkkjpjcpc>,
    #[prost(float, tag = "5")]
    pub hgflpenkiii: f32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pmnhmamhgai {
    #[prost(uint32, tag = "1")]
    pub icphoomndka: u32,
    #[prost(message, repeated, tag = "2")]
    pub enbjcpkgcol: ::prost::alloc::vec::Vec<Mjkibjlobkd>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EvolveBuildBattleInfo {
    #[prost(uint32, tag = "1")]
    pub cur_level_id: u32,
    #[prost(uint32, tag = "2")]
    pub cur_period: u32,
    #[prost(uint32, tag = "3")]
    pub cur_coin: u32,
    #[prost(message, repeated, tag = "4")]
    pub weapon_slot_list: ::prost::alloc::vec::Vec<Meoifioaecf>,
    #[prost(message, repeated, tag = "5")]
    pub accessory_slot_list: ::prost::alloc::vec::Vec<Meoifioaecf>,
    #[prost(uint32, repeated, tag = "6")]
    pub ban_gear_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "7")]
    pub collection: ::core::option::Option<Lgifednkhon>,
    #[prost(uint32, repeated, tag = "8")]
    pub allowed_gear_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "9")]
    pub cur_exp: u32,
    #[prost(uint32, tag = "10")]
    pub cur_reroll: u32,
    #[prost(uint32, tag = "11")]
    pub cur_treasure_miss_cnt: u32,
    #[prost(uint32, repeated, tag = "12")]
    pub period_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "13")]
    pub cur_gear_lost_cnt: u32,
    #[prost(uint32, tag = "14")]
    pub cur_wave: u32,
    #[prost(bool, tag = "15")]
    pub is_unlock_gear_reroll: bool,
    #[prost(bool, tag = "16")]
    pub is_unlock_gear_ban: bool,
    #[prost(message, repeated, tag = "17")]
    pub card_list: ::prost::alloc::vec::Vec<Bhgboojeopf>,
    #[prost(message, repeated, tag = "18")]
    pub gear_damage_list: ::prost::alloc::vec::Vec<EvolveBuildGearDamageInfo>,
    #[prost(uint32, repeated, tag = "19")]
    pub stat_params: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, tag = "20")]
    pub is_giveup: bool,
    #[prost(uint32, tag = "21")]
    pub cur_unused_round_cnt: u32,
    #[prost(message, optional, tag = "22")]
    pub stat_log_info: ::core::option::Option<Pmnhmamhgai>,
    #[prost(uint32, tag = "23")]
    pub period_first_random_seed: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Plpnlibmnio {
    #[prost(string, tag = "1")]
    pub halgpjmcmfp: ::prost::alloc::string::String,
    #[prost(float, tag = "2")]
    pub dbdcnafoglf: f32,
    #[prost(float, tag = "3")]
    pub hdalbiancmf: f32,
    #[prost(uint32, tag = "4")]
    pub adjbbabehah: u32,
    #[prost(uint32, tag = "5")]
    pub pjbiaejecae: u32,
    #[prost(uint32, tag = "6")]
    pub kpnacghjalj: u32,
    #[prost(uint32, tag = "7")]
    pub fpjadbgohkm: u32,
    #[prost(uint32, tag = "8")]
    pub cjejofamdcd: u32,
    #[prost(uint32, repeated, tag = "9")]
    pub bgjcedeahgm: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "10")]
    pub aagjcjiofpa: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Chdonigoknm {
    #[prost(uint32, tag = "1")]
    pub heocpakcelm: u32,
    #[prost(uint32, tag = "2")]
    pub bghkbmfhmoj: u32,
    #[prost(uint32, tag = "3")]
    pub loollagmnlh: u32,
    #[prost(uint32, tag = "4")]
    pub hecjooobahc: u32,
    #[prost(uint32, tag = "5")]
    pub fkeaaipkpaa: u32,
    #[prost(uint32, tag = "6")]
    pub icleenhipoh: u32,
    #[prost(uint32, repeated, tag = "7")]
    pub boss_buff_info: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "8")]
    pub odbonkcmdmp: ::prost::alloc::vec::Vec<Plpnlibmnio>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jffndobbnfb {
    #[prost(uint32, tag = "1")]
    pub wave: u32,
    #[prost(double, tag = "2")]
    pub hfihdddiljb: f64,
    #[prost(double, tag = "3")]
    pub khgclcllecl: f64,
    #[prost(uint32, tag = "4")]
    pub ffpmjfhncho: u32,
    #[prost(uint32, tag = "5")]
    pub gmmbgamhbkb: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ekbagmomecl {
    #[prost(string, tag = "1")]
    pub key: ::prost::alloc::string::String,
    #[prost(double, tag = "2")]
    pub value: f64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Plgjihifpag {
    #[prost(uint32, tag = "1")]
    pub egmebanhhnf: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Popleajlpnb {
    #[prost(uint32, tag = "1")]
    pub gpojenhaiba: u32,
    #[prost(uint32, tag = "2")]
    pub kljklbmlefo: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ghkonloboih {
    #[prost(uint32, tag = "1")]
    pub ebaiipmhkoi: u32,
    #[prost(uint32, tag = "2")]
    pub level: u32,
    #[prost(bool, tag = "3")]
    pub hemjhdoeebl: bool,
    #[prost(uint32, tag = "4")]
    pub fpnodeepfki: u32,
    #[prost(map = "uint32, uint32", tag = "5")]
    pub ikddalcbafj: ::std::collections::HashMap<u32, u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ciojfbeobpo {
    #[prost(uint32, tag = "1")]
    pub gjkjfgeehcb: u32,
    #[prost(message, repeated, tag = "2")]
    pub bjabjjmmojk: ::prost::alloc::vec::Vec<Ghkonloboih>,
    #[prost(uint32, tag = "3")]
    pub level: u32,
    #[prost(map = "uint32, uint32", tag = "4")]
    pub eepojgnflpa: ::std::collections::HashMap<u32, u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dkgceelpnai {
    #[prost(message, optional, tag = "1")]
    pub almklfpmpbf: ::core::option::Option<Popleajlpnb>,
    #[prost(message, repeated, tag = "2")]
    pub oocoelamofa: ::prost::alloc::vec::Vec<Ciojfbeobpo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fkocboocdnl {
    #[prost(uint32, tag = "1")]
    pub poiiaiakilf: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mihmmjckfmd {
    #[prost(oneof = "mihmmjckfmd::Lofnlgcfgic", tags = "1, 2")]
    pub lofnlgcfgic: ::core::option::Option<mihmmjckfmd::Lofnlgcfgic>,
}
/// Nested message and enum types in `MIHMMJCKFMD`.
pub mod mihmmjckfmd {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Lofnlgcfgic {
        #[prost(message, tag = "1")]
        Bbgcabjijgc(super::Dkgceelpnai),
        #[prost(message, tag = "2")]
        Ennpjglcbem(super::Fkocboocdnl),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BattleRogueMagicInfo {
    #[prost(message, optional, tag = "1")]
    pub knihplngocl: ::core::option::Option<Plgjihifpag>,
    #[prost(message, optional, tag = "2")]
    pub detail_info: ::core::option::Option<Mihmmjckfmd>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ccccgjabbpm {
    #[prost(uint32, tag = "1")]
    pub gjkjfgeehcb: u32,
    #[prost(uint32, tag = "2")]
    pub level: u32,
    #[prost(double, tag = "3")]
    pub total_damage: f64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Aenpijcdbmh {
    #[prost(uint32, tag = "1")]
    pub klmcppbbooh: u32,
    #[prost(uint32, tag = "2")]
    pub kmoeadpmflg: u32,
    #[prost(message, repeated, tag = "3")]
    pub cicanokpnbm: ::prost::alloc::vec::Vec<Ccccgjabbpm>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gbncgkdnmil {
    #[prost(uint32, tag = "1")]
    pub aenkmaoabmp: u32,
    #[prost(uint32, tag = "2")]
    pub mcdpiabdigi: u32,
    #[prost(double, tag = "3")]
    pub jnimloiohnh: f64,
    #[prost(double, tag = "4")]
    pub iejjjkfedah: f64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mbjhfpcjaln {
    #[prost(message, optional, tag = "1")]
    pub ehnnecghjal: ::core::option::Option<Gbncgkdnmil>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Aigknhfanga {
    #[prost(message, optional, tag = "1")]
    pub eilaabldphm: ::core::option::Option<Aenpijcdbmh>,
    #[prost(message, optional, tag = "2")]
    pub inpkgdfmpea: ::core::option::Option<Mbjhfpcjaln>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lhlbianfohk {
    #[prost(uint32, tag = "1")]
    pub monster_id: u32,
    #[prost(uint32, tag = "2")]
    pub gmlfmpjpegg: u32,
    #[prost(uint32, tag = "3")]
    pub ffpmjfhncho: u32,
    #[prost(uint32, tag = "4")]
    pub gmmbgamhbkb: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Llbmaphbogd {
    #[prost(uint32, tag = "1")]
    pub acpbmmmcjip: u32,
    #[prost(double, tag = "2")]
    pub kkancjaljpo: f64,
    #[prost(double, tag = "3")]
    pub mfjkflgpgko: f64,
    #[prost(uint32, tag = "4")]
    pub wave: u32,
    #[prost(uint32, tag = "5")]
    pub gmlfmpjpegg: u32,
    #[prost(double, tag = "6")]
    pub abmnlnnoklo: f64,
    #[prost(double, tag = "7")]
    pub ihbbekcoeae: f64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dpndlhgemei {
    #[prost(uint32, tag = "1")]
    pub imcpkldfdog: u32,
    #[prost(uint32, tag = "2")]
    pub ajgeofiiddh: u32,
    #[prost(double, tag = "3")]
    pub omoenbakmhj: f64,
    #[prost(uint32, tag = "4")]
    pub wave: u32,
    #[prost(uint32, tag = "5")]
    pub gmlfmpjpegg: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cpfcbladmbh {
    #[prost(message, repeated, tag = "1")]
    pub haafhkiagkm: ::prost::alloc::vec::Vec<Lhlbianfohk>,
    #[prost(message, repeated, tag = "2")]
    pub oeagamjdlma: ::prost::alloc::vec::Vec<Llbmaphbogd>,
    #[prost(message, repeated, tag = "3")]
    pub plennpagjll: ::prost::alloc::vec::Vec<Dpndlhgemei>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Baagnohehma {
    #[prost(message, optional, tag = "1")]
    pub oimbgaehdbi: ::core::option::Option<Cpfcbladmbh>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mkeecchgigh {
    #[prost(uint32, tag = "1")]
    pub nmimbiopeki: u32,
    #[prost(double, tag = "2")]
    pub kkancjaljpo: f64,
    #[prost(double, tag = "3")]
    pub mfjkflgpgko: f64,
    #[prost(uint32, tag = "4")]
    pub fgmlckanian: u32,
    #[prost(uint32, tag = "5")]
    pub goaebjjpajo: u32,
    #[prost(uint32, tag = "6")]
    pub nilakidfhej: u32,
    #[prost(uint32, tag = "7")]
    pub pigndajgdgj: u32,
    #[prost(double, tag = "8")]
    pub abmnlnnoklo: f64,
    #[prost(uint32, tag = "9")]
    pub jbjmophgmfa: u32,
    #[prost(uint32, tag = "10")]
    pub pobibiloani: u32,
    #[prost(double, tag = "11")]
    pub ihbbekcoeae: f64,
    #[prost(uint32, tag = "12")]
    pub loollagmnlh: u32,
    #[prost(uint32, tag = "13")]
    pub fkeaaipkpaa: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bdmgoejbfgl {
    #[prost(uint32, tag = "1")]
    pub loollagmnlh: u32,
    #[prost(uint32, tag = "2")]
    pub fkeaaipkpaa: u32,
    #[prost(uint32, tag = "3")]
    pub akpmnjcggai: u32,
    #[prost(message, repeated, tag = "4")]
    pub oeagamjdlma: ::prost::alloc::vec::Vec<Mkeecchgigh>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hanhnlneicm {
    #[prost(uint32, tag = "1")]
    pub equip_avatar_id: u32,
    #[prost(uint32, tag = "2")]
    pub dpdnnmbcpoi: u32,
    #[prost(uint32, tag = "3")]
    pub total_turns: u32,
    #[prost(double, tag = "4")]
    pub fbcmjgmbjfc: f64,
    #[prost(message, repeated, tag = "5")]
    pub ebefolnjphi: ::prost::alloc::vec::Vec<SkillUseProperty>,
    #[prost(double, tag = "6")]
    pub total_damage: f64,
    #[prost(double, tag = "7")]
    pub total_break_damage: f64,
    #[prost(message, repeated, tag = "8")]
    pub aiomeahjhdi: ::prost::alloc::vec::Vec<AttackDamageProperty>,
    #[prost(message, repeated, tag = "9")]
    pub nepfmblihik: ::prost::alloc::vec::Vec<AttackDamageProperty>,
    #[prost(message, repeated, tag = "10")]
    pub ogoajmdmmdg: ::prost::alloc::vec::Vec<AttackDamageProperty>,
    #[prost(double, tag = "11")]
    pub total_damage_taken: f64,
    #[prost(double, tag = "12")]
    pub total_heal: f64,
    #[prost(double, tag = "13")]
    pub total_hp_recover: f64,
    #[prost(double, tag = "14")]
    pub fonhedeflom: f64,
    #[prost(double, tag = "15")]
    pub hjidhcjnibe: f64,
    #[prost(double, tag = "16")]
    pub phdedfbljfi: f64,
    #[prost(uint32, tag = "17")]
    pub break_times: u32,
    #[prost(uint32, tag = "18")]
    pub jeplcjkfomb: u32,
    #[prost(uint32, tag = "19")]
    pub ncjhdjjdjnl: u32,
    #[prost(uint32, tag = "20")]
    pub lkmgdiadopb: u32,
    #[prost(double, tag = "21")]
    pub iblgmcipckm: f64,
    #[prost(uint32, tag = "22")]
    pub entity_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nmcmohahopl {
    #[prost(message, repeated, tag = "1")]
    pub pccdmdfnjpd: ::prost::alloc::vec::Vec<Hanhnlneicm>,
    #[prost(uint32, tag = "2")]
    pub hkpbefflfeo: u32,
    #[prost(uint32, tag = "3")]
    pub dfnkmijebld: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BattleStatistics {
    #[prost(uint32, tag = "1")]
    pub angplnaledp: u32,
    #[prost(uint32, tag = "2")]
    pub khkfkdnbhpe: u32,
    #[prost(uint32, repeated, tag = "3")]
    pub avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "4")]
    pub bfdobflljbe: u32,
    #[prost(double, tag = "5")]
    pub nnmdmpkccke: f64,
    #[prost(double, tag = "6")]
    pub bclnmidffoh: f64,
    #[prost(message, repeated, tag = "7")]
    pub akfkcpfabmk: ::prost::alloc::vec::Vec<AvatarBattleInfo>,
    #[prost(message, repeated, tag = "8")]
    pub jojfmjfoehb: ::prost::alloc::vec::Vec<MonsterBattleInfo>,
    #[prost(uint32, tag = "9")]
    pub lmkmfcdmfbi: u32,
    #[prost(uint32, tag = "10")]
    pub dnjidnnnmna: u32,
    #[prost(uint32, tag = "11")]
    pub hhhapgmlbjc: u32,
    #[prost(uint32, tag = "12")]
    pub kjmfjifdgpj: u32,
    #[prost(map = "string, float", tag = "13")]
    pub nbdekmakpkj: ::std::collections::HashMap<::prost::alloc::string::String, f32>,
    #[prost(uint32, tag = "14")]
    pub kgecjkkpbdh: u32,
    #[prost(message, repeated, tag = "16")]
    pub ijolofbjinb: ::prost::alloc::vec::Vec<BattleEventBattleInfo>,
    #[prost(enumeration = "BattleEndReason", tag = "19")]
    pub hbgclmcgnfm: i32,
    #[prost(message, repeated, tag = "21")]
    pub glojpnlnhjh: ::prost::alloc::vec::Vec<Ibffajohkmo>,
    #[prost(int32, repeated, tag = "22")]
    pub iiccefcgpak: ::prost::alloc::vec::Vec<i32>,
    #[prost(message, repeated, tag = "23")]
    pub ldgaanonmbk: ::prost::alloc::vec::Vec<Iiiphjimnid>,
    #[prost(message, repeated, tag = "26")]
    pub adbhgkpnikp: ::prost::alloc::vec::Vec<Mmndjamebml>,
    #[prost(message, repeated, tag = "27")]
    pub ecefbcnofkb: ::prost::alloc::vec::Vec<Gmkepcomhpn>,
    #[prost(map = "uint32, message", tag = "28")]
    pub battle_target_info: ::std::collections::HashMap<u32, BattleTargetList>,
    #[prost(message, repeated, tag = "29")]
    pub najlkhfllpg: ::prost::alloc::vec::Vec<Eagocahfgaf>,
    #[prost(message, optional, tag = "30")]
    pub jpgifchjdlk: ::core::option::Option<EvolveBuildBattleInfo>,
    #[prost(message, optional, tag = "31")]
    pub mnphnjkgpkl: ::core::option::Option<Chdonigoknm>,
    #[prost(bool, tag = "32")]
    pub leddodammno: bool,
    #[prost(message, repeated, tag = "33")]
    pub enbjcpkgcol: ::prost::alloc::vec::Vec<Jffndobbnfb>,
    #[prost(message, repeated, tag = "34")]
    pub ngoknfdmhmf: ::prost::alloc::vec::Vec<Ekbagmomecl>,
    #[prost(uint32, tag = "35")]
    pub dkoeadnamcj: u32,
    #[prost(message, optional, tag = "36")]
    pub idcgpakjfmd: ::core::option::Option<Aigknhfanga>,
    #[prost(message, optional, tag = "37")]
    pub billjjbfiol: ::core::option::Option<Baagnohehma>,
    #[prost(message, optional, tag = "38")]
    pub hmpgmiljapb: ::core::option::Option<Bdmgoejbfgl>,
    #[prost(message, optional, tag = "39")]
    pub nocigfllifg: ::core::option::Option<Nmcmohahopl>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Eagocahfgaf {
    #[prost(uint32, tag = "1")]
    pub oefeefglieb: u32,
    #[prost(uint32, tag = "2")]
    pub pbhphhmpaih: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gmkepcomhpn {
    #[prost(enumeration = "AetherdivideSpiritLineupType", tag = "1")]
    pub r#type: i32,
    #[prost(uint32, tag = "2")]
    pub id: u32,
    #[prost(message, optional, tag = "3")]
    pub sp: ::core::option::Option<AmountInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MultiPath {
    #[prost(uint32, tag = "1")]
    pub multi_path_type: u32,
    #[prost(uint32, tag = "2")]
    pub level: u32,
    #[prost(uint32, tag = "3")]
    pub exp: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ephilimkadk {
    #[prost(enumeration = "BattleCheckResultType", tag = "1")]
    pub retcode: i32,
    #[prost(enumeration = "BattleEndStatus", tag = "2")]
    pub end_status: i32,
    #[prost(message, optional, tag = "3")]
    pub stt: ::core::option::Option<BattleStatistics>,
    #[prost(bytes = "vec", tag = "4")]
    pub game_core_log_encode: ::prost::alloc::vec::Vec<u8>,
    #[prost(map = "string, uint32", tag = "5")]
    pub dgnmmingacj: ::std::collections::HashMap<::prost::alloc::string::String, u32>,
    #[prost(uint32, tag = "6")]
    pub ndcmdokkphh: u32,
    #[prost(uint32, tag = "7")]
    pub mdlpcfcphdk: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CharacterSnapshot {
    #[prost(uint32, tag = "1")]
    pub kpjddifefdd: u32,
    #[prost(uint64, repeated, tag = "2")]
    pub biappigpbog: ::prost::alloc::vec::Vec<u64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AnimEventSnapshot {
    #[prost(string, tag = "1")]
    pub cjilblkomak: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub count: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oodocmdlomf {
    #[prost(uint32, tag = "1")]
    pub uid: u32,
    #[prost(uint32, tag = "2")]
    pub level: u32,
    #[prost(string, tag = "3")]
    pub nickname: ::prost::alloc::string::String,
    #[prost(uint32, tag = "4")]
    pub gfidnaanafh: u32,
    #[prost(enumeration = "PlatformType", tag = "5")]
    pub platform: i32,
    #[prost(string, tag = "6")]
    pub akcejfcfban: ::prost::alloc::string::String,
    #[prost(string, tag = "7")]
    pub bjellapogjn: ::prost::alloc::string::String,
    #[prost(uint64, tag = "8")]
    pub version: u64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Iddlkhhlecg {
    #[prost(enumeration = "LobbyCharacterType", tag = "1")]
    pub noiiaoidgeo: i32,
    #[prost(enumeration = "LobbyCharacterStatus", tag = "2")]
    pub status: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Njfgjpcandi {
    #[prost(uint32, tag = "1")]
    pub bkmpfeocfib: u32,
    #[prost(bool, tag = "2")]
    pub cocongacifj: bool,
    #[prost(uint32, tag = "3")]
    pub jejkigabeek: u32,
    #[prost(uint32, tag = "4")]
    pub miafpfpmaca: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Epeghcgcmhp {
    #[prost(string, repeated, tag = "1")]
    pub bhgghfjmmbm: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(bool, tag = "2")]
    pub fmopbfknlni: bool,
    #[prost(oneof = "epeghcgcmhp::Emahjgmlbnj", tags = "1001")]
    pub emahjgmlbnj: ::core::option::Option<epeghcgcmhp::Emahjgmlbnj>,
}
/// Nested message and enum types in `EPEGHCGCMHP`.
pub mod epeghcgcmhp {
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum Emahjgmlbnj {
        #[prost(message, tag = "1001")]
        Dchdjallnec(super::Njfgjpcandi),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cbbdiomifhd {
    #[prost(message, optional, tag = "1")]
    pub basic_info: ::core::option::Option<Oodocmdlomf>,
    #[prost(message, optional, tag = "2")]
    pub nckccokdkol: ::core::option::Option<Iddlkhhlecg>,
    #[prost(message, optional, tag = "3")]
    pub ext_info: ::core::option::Option<Epeghcgcmhp>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cdimemfjjfp {
    #[prost(uint32, tag = "1")]
    pub lmmgodphjne: u32,
    #[prost(uint32, tag = "2")]
    pub pgjccgnbbpi: u32,
    #[prost(uint32, tag = "3")]
    pub nnbhkcjcpio: u32,
    #[prost(uint32, tag = "4")]
    pub khbnjgpphoa: u32,
    #[prost(uint32, tag = "5")]
    pub agdceblfgkh: u32,
    #[prost(uint32, tag = "6")]
    pub dncpbbliopl: u32,
    #[prost(uint32, tag = "7")]
    pub lilifgbafkn: u32,
    #[prost(uint32, tag = "8")]
    pub mmiijhohoge: u32,
    #[prost(uint32, tag = "9")]
    pub iokfikhhang: u32,
    #[prost(uint32, tag = "10")]
    pub cilkfjblejg: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ppggkmdaoea {
    #[prost(uint64, tag = "1")]
    pub lofamegpmbc: u64,
    #[prost(enumeration = "FightGameMode", tag = "2")]
    pub gbahcdlhacn: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Biplkgdfafj {
    #[prost(uint64, tag = "1")]
    pub id: u64,
    #[prost(enumeration = "FightGameMode", tag = "2")]
    pub pdmolplcflg: i32,
    #[prost(message, repeated, tag = "3")]
    pub iihpmlibbeb: ::prost::alloc::vec::Vec<Cbbdiomifhd>,
    #[prost(enumeration = "MatchUnitType", tag = "4")]
    pub r#type: i32,
    #[prost(uint64, tag = "5")]
    pub infhikbljla: u64,
    #[prost(uint64, tag = "6")]
    pub mlelajdljnl: u64,
    #[prost(uint32, tag = "7")]
    pub jbnenlhccbh: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LoginActivityData {
    #[prost(uint32, tag = "2")]
    pub id: u32,
    #[prost(uint32, repeated, tag = "14")]
    pub jlhoggdhmhg: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "8")]
    pub panel_id: u32,
    #[prost(uint32, tag = "4")]
    pub login_days: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetLoginActivityCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetLoginActivityScRsp {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "4")]
    pub login_activity_list: ::prost::alloc::vec::Vec<LoginActivityData>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TakeLoginActivityRewardCsReq {
    #[prost(uint32, tag = "13")]
    pub take_days: u32,
    #[prost(uint32, tag = "10")]
    pub id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakeLoginActivityRewardScRsp {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(uint32, tag = "3")]
    pub panel_id: u32,
    #[prost(message, optional, tag = "7")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "12")]
    pub id: u32,
    #[prost(uint32, tag = "4")]
    pub take_days: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ActivityScheduleData {
    #[prost(uint32, tag = "13")]
    pub panel_id: u32,
    #[prost(int64, tag = "7")]
    pub end_time: i64,
    #[prost(int64, tag = "12")]
    pub begin_time: i64,
    #[prost(uint32, tag = "3")]
    pub activity_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetActivityScheduleConfigCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetActivityScheduleConfigScRsp {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "6")]
    pub schedule_data: ::prost::alloc::vec::Vec<ActivityScheduleData>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TrialActivityInfo {
    #[prost(uint32, tag = "2")]
    pub stage_id: u32,
    #[prost(bool, tag = "3")]
    pub taken_reward: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetTrialActivityDataCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetTrialActivityDataScRsp {
    #[prost(message, repeated, tag = "3")]
    pub trial_activity_info_list: ::prost::alloc::vec::Vec<TrialActivityInfo>,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(uint32, tag = "11")]
    pub activity_stage_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TrialActivityDataChangeScNotify {
    #[prost(message, optional, tag = "15")]
    pub trial_activity_info: ::core::option::Option<TrialActivityInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EnterTrialActivityStageCsReq {
    #[prost(uint32, tag = "11")]
    pub stage_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EnterTrialActivityStageScRsp {
    #[prost(message, optional, tag = "14")]
    pub battle_info: ::core::option::Option<SceneBattleInfo>,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TakeTrialActivityRewardCsReq {
    #[prost(uint32, tag = "9")]
    pub stage_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakeTrialActivityRewardScRsp {
    #[prost(uint32, tag = "15")]
    pub stage_id: u32,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(message, optional, tag = "1")]
    pub reward: ::core::option::Option<ItemList>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StartTrialActivityCsReq {
    #[prost(uint32, tag = "9")]
    pub stage_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StartTrialActivityScRsp {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(uint32, tag = "11")]
    pub stage_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LeaveTrialActivityCsReq {
    #[prost(uint32, tag = "15")]
    pub stage_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LeaveTrialActivityScRsp {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(uint32, tag = "13")]
    pub stage_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CurTrialActivityScNotify {
    #[prost(enumeration = "TrialActivityStatus", tag = "10")]
    pub status: i32,
    #[prost(uint32, tag = "12")]
    pub activity_stage_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bcekbnmnhoo {
    #[prost(uint32, tag = "3")]
    pub panel_id: u32,
    #[prost(uint32, tag = "10")]
    pub pehofbbdnic: u32,
    #[prost(bool, tag = "6")]
    pub cbnffemdbkf: bool,
    #[prost(bool, tag = "15")]
    pub is_taken_reward: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetMaterialSubmitActivityDataCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetMaterialSubmitActivityDataScRsp {
    #[prost(message, repeated, tag = "10")]
    pub nblhgehlodn: ::prost::alloc::vec::Vec<Bcekbnmnhoo>,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SubmitMaterialSubmitActivityMaterialCsReq {
    #[prost(uint32, tag = "14")]
    pub pehofbbdnic: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SubmitMaterialSubmitActivityMaterialScRsp {
    #[prost(message, optional, tag = "15")]
    pub blaaoiaeiah: ::core::option::Option<Bcekbnmnhoo>,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TakeMaterialSubmitActivityRewardCsReq {
    #[prost(uint32, tag = "4")]
    pub pehofbbdnic: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakeMaterialSubmitActivityRewardScRsp {
    #[prost(uint32, tag = "4")]
    pub pehofbbdnic: u32,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(message, optional, tag = "3")]
    pub reward: ::core::option::Option<ItemList>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EnterAdventureCsReq {
    #[prost(uint32, tag = "6")]
    pub map_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EnterAdventureScRsp {
    #[prost(message, optional, tag = "15")]
    pub scene: ::core::option::Option<SceneInfo>,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FarmStageGachaInfo {
    #[prost(int64, tag = "6")]
    pub begin_time: i64,
    #[prost(int64, tag = "15")]
    pub end_time: i64,
    #[prost(uint32, tag = "3")]
    pub gacha_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetFarmStageGachaInfoCsReq {
    #[prost(uint32, repeated, tag = "11")]
    pub farm_stage_gacha_id_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetFarmStageGachaInfoScRsp {
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "13")]
    pub farm_stage_gacha_info_list: ::prost::alloc::vec::Vec<FarmStageGachaInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QuickStartCocoonStageCsReq {
    #[prost(uint32, tag = "2")]
    pub world_level: u32,
    #[prost(uint32, tag = "13")]
    pub cocoon_id: u32,
    #[prost(uint32, tag = "14")]
    pub wave: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QuickStartCocoonStageScRsp {
    #[prost(message, optional, tag = "12")]
    pub battle_info: ::core::option::Option<SceneBattleInfo>,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(uint32, tag = "3")]
    pub cocoon_id: u32,
    #[prost(uint32, tag = "14")]
    pub wave: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QuickStartFarmElementCsReq {
    #[prost(uint32, tag = "2")]
    pub jdanoknhnhl: u32,
    #[prost(uint32, tag = "7")]
    pub world_level: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QuickStartFarmElementScRsp {
    #[prost(uint32, tag = "1")]
    pub jdanoknhnhl: u32,
    #[prost(uint32, tag = "12")]
    pub world_level: u32,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(message, optional, tag = "10")]
    pub battle_info: ::core::option::Option<SceneBattleInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EnterAetherDivideSceneCsReq {
    #[prost(uint32, tag = "5")]
    pub bdkngdocpgp: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EnterAetherDivideSceneScRsp {
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(uint32, tag = "7")]
    pub bdkngdocpgp: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LeaveAetherDivideSceneCsReq {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LeaveAetherDivideSceneScRsp {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StartAetherDivideSceneBattleCsReq {
    #[prost(uint32, repeated, tag = "13")]
    pub hit_target_entity_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "3")]
    pub assist_monster_entity_info: ::prost::alloc::vec::Vec<AssistMonsterEntityInfo>,
    #[prost(uint32, tag = "12")]
    pub skill_index: u32,
    #[prost(uint32, tag = "6")]
    pub attacked_group_id: u32,
    #[prost(uint32, tag = "1")]
    pub caster_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StartAetherDivideSceneBattleScRsp {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(message, optional, tag = "13")]
    pub battle_info: ::core::option::Option<AetherDivideBattleInfo>,
    #[prost(uint32, tag = "6")]
    pub attacked_group_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StartAetherDivideChallengeBattleCsReq {
    #[prost(uint32, tag = "11")]
    pub lineup_index: u32,
    #[prost(uint32, tag = "14")]
    pub challenge_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StartAetherDivideChallengeBattleScRsp {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(message, optional, tag = "14")]
    pub battle_info: ::core::option::Option<AetherDivideBattleInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PassiveSkillItem {
    #[prost(uint32, tag = "3")]
    pub item_id: u32,
    #[prost(uint32, tag = "10")]
    pub slot: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AetherDivideSpiritInfo {
    #[prost(message, optional, tag = "5")]
    pub sp: ::core::option::Option<AmountInfo>,
    #[prost(uint32, tag = "9")]
    pub jdhchabclcc: u32,
    #[prost(uint32, tag = "15")]
    pub aether_avatar_id: u32,
    #[prost(uint32, tag = "14")]
    pub promotion: u32,
    #[prost(message, repeated, tag = "11")]
    pub passive_skill: ::prost::alloc::vec::Vec<PassiveSkillItem>,
    #[prost(uint32, tag = "10")]
    pub exp: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AetherDivideLineupInfo {
    #[prost(uint32, tag = "12")]
    pub slot: u32,
    #[prost(uint32, repeated, tag = "1")]
    pub aether_avatar_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AetherSkillInfo {
    #[prost(uint32, tag = "9")]
    pub num: u32,
    #[prost(uint32, tag = "15")]
    pub item_id: u32,
    #[prost(uint32, tag = "12")]
    pub skill_dress_avatar_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetAetherDivideInfoCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAetherDivideInfoScRsp {
    #[prost(uint32, tag = "1")]
    pub ibcipiidcol: u32,
    #[prost(uint32, tag = "9")]
    pub phlkdnghooa: u32,
    #[prost(message, repeated, tag = "12")]
    pub lineup_list: ::prost::alloc::vec::Vec<AetherDivideLineupInfo>,
    #[prost(uint32, tag = "11")]
    pub pfljggdaofm: u32,
    #[prost(uint32, tag = "4")]
    pub egemndnedip: u32,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(uint32, tag = "15")]
    pub jdhlmhjbojm: u32,
    #[prost(message, repeated, tag = "8")]
    pub skill_list: ::prost::alloc::vec::Vec<AetherSkillInfo>,
    #[prost(message, repeated, tag = "5")]
    pub nlfihkicddo: ::prost::alloc::vec::Vec<AetherDivideSpiritInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetAetherDivideLineUpCsReq {
    #[prost(message, optional, tag = "9")]
    pub lineup: ::core::option::Option<AetherDivideLineupInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetAetherDivideLineUpScRsp {
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(message, optional, tag = "6")]
    pub lineup: ::core::option::Option<AetherDivideLineupInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EquipAetherDividePassiveSkillCsReq {
    #[prost(uint32, tag = "3")]
    pub aether_avatar_id: u32,
    #[prost(uint32, tag = "10")]
    pub slot: u32,
    #[prost(uint32, tag = "14")]
    pub item_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EquipAetherDividePassiveSkillScRsp {
    #[prost(message, optional, tag = "1")]
    pub aether_info: ::core::option::Option<AetherDivideSpiritInfo>,
    #[prost(message, optional, tag = "7")]
    pub aether_skill_info: ::core::option::Option<AetherSkillInfo>,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mmoflmjnlpa {
    #[prost(uint32, tag = "15")]
    pub slot: u32,
    #[prost(uint32, tag = "13")]
    pub aether_avatar_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ccmgfbkfgdl {
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(message, optional, tag = "5")]
    pub aether_skill_info: ::core::option::Option<AetherSkillInfo>,
    #[prost(message, optional, tag = "8")]
    pub aether_info: ::core::option::Option<AetherDivideSpiritInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hkkbfelnehg {
    #[prost(uint32, tag = "3")]
    pub kbmlajoaane: u32,
    #[prost(uint32, tag = "15")]
    pub jdhlmhjbojm: u32,
    #[prost(uint32, tag = "5")]
    pub aether_avatar_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kpbkaknmned {
    #[prost(uint32, tag = "3")]
    pub jdhlmhjbojm: u32,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(message, optional, tag = "7")]
    pub aether_info: ::core::option::Option<AetherDivideSpiritInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ckellmblcal {
    #[prost(uint32, tag = "14")]
    pub lineup_index: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ffcibdgamfn {
    #[prost(uint32, tag = "8")]
    pub lineup_index: u32,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mfmdinogoke {
    #[prost(uint32, tag = "6")]
    pub event_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mmcmfmjnhfd {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(message, optional, tag = "2")]
    pub battle_info: ::core::option::Option<AetherDivideBattleInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Phjipddmmkb {
    #[prost(message, optional, tag = "11")]
    pub lineup: ::core::option::Option<AetherDivideLineupInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bombclhpbhp {
    #[prost(message, optional, tag = "2")]
    pub aether_info: ::core::option::Option<AetherDivideSpiritInfo>,
    #[prost(uint32, tag = "14")]
    pub jdhlmhjbojm: u32,
    #[prost(message, repeated, tag = "11")]
    pub mgegimbbajb: ::prost::alloc::vec::Vec<AetherDivideSpiritInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hgnahiandoc {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fpidhhnhpab {
    #[prost(uint32, tag = "7")]
    pub pcnnmjbjioc: u32,
    #[prost(uint32, repeated, tag = "12")]
    pub gkhjkfcccgp: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "15")]
    pub bfdipgblmmo: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jfoelnlghkm {
    #[prost(uint32, tag = "8")]
    pub challenge_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ceokhnmhaon {
    #[prost(uint32, tag = "7")]
    pub egemndnedip: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cklfipmkmbm {
    #[prost(uint32, tag = "7")]
    pub item_id: u32,
    #[prost(uint32, tag = "10")]
    pub num: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Plignaidlnd {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Boapingnnnn {
    #[prost(uint32, tag = "9")]
    pub ibcipiidcol: u32,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Phjioloklhe {
    #[prost(uint32, tag = "6")]
    pub ibcipiidcol: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jknapgclalc {
    #[prost(uint32, tag = "10")]
    pub challenge_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Iegdpieigkf {
    #[prost(uint32, tag = "9")]
    pub challenge_id: u32,
    #[prost(message, optional, tag = "13")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetAlleyInfoCsReq {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Adoleofegok {
    #[prost(uint32, tag = "7")]
    pub poiiaiakilf: u32,
    #[prost(uint32, tag = "14")]
    pub map_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Oajlgionpge {
    #[prost(uint32, tag = "15")]
    pub level: u32,
    #[prost(uint32, tag = "7")]
    pub shop_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Agademajimd {
    #[prost(message, repeated, tag = "12")]
    pub hnfojbcjamg: ::prost::alloc::vec::Vec<Njaoiggmeal>,
    #[prost(uint32, repeated, tag = "3")]
    pub omngcijalfm: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "7")]
    pub immlphdnmol: ::prost::alloc::vec::Vec<Adoleofegok>,
    #[prost(message, repeated, tag = "14")]
    pub fmjplhohbab: ::prost::alloc::vec::Vec<LogisticsScore>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fcfgldomndj {
    #[prost(uint32, repeated, tag = "15")]
    pub oedpopcohgb: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "8")]
    pub bokolcpkejm: ::core::option::Option<Ecjmjjkjgop>,
    #[prost(map = "uint32, uint32", tag = "7")]
    pub nplakeokekb: ::std::collections::HashMap<u32, u32>,
    #[prost(uint32, repeated, tag = "1")]
    pub glboemjjahd: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(uint32, tag = "6")]
    pub level: u32,
    #[prost(message, optional, tag = "12")]
    pub njgamccgadc: ::core::option::Option<Agademajimd>,
    #[prost(message, optional, tag = "13")]
    pub klpngfnmipi: ::core::option::Option<Laiemcfacdk>,
    #[prost(message, repeated, tag = "10")]
    pub bjcmphlpknf: ::prost::alloc::vec::Vec<Hehaomiamgl>,
    #[prost(uint32, tag = "2")]
    pub nopodeimffb: u32,
    #[prost(uint32, tag = "5")]
    pub dbjhemippim: u32,
    #[prost(uint32, repeated, tag = "14")]
    pub gefndeeikef: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kfaifhopnhh {
    #[prost(uint32, tag = "6")]
    pub bddldnejfkn: u32,
    #[prost(uint32, tag = "15")]
    pub iffppglafnb: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kgcanljikcp {
    #[prost(uint32, tag = "2")]
    pub knangdkhiej: u32,
    #[prost(message, repeated, tag = "12")]
    pub kalfmcaghdo: ::prost::alloc::vec::Vec<Kfaifhopnhh>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AlleyPlacingShip {
    #[prost(uint32, tag = "7")]
    pub ship_id: u32,
    #[prost(message, repeated, tag = "11")]
    pub goods_list: ::prost::alloc::vec::Vec<Kgcanljikcp>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ieeaopjginp {
    #[prost(uint32, tag = "15")]
    pub dhhjlchclaf: u32,
    #[prost(uint32, tag = "9")]
    pub indeplofdec: u32,
    #[prost(uint32, tag = "1")]
    pub fjdabppandc: u32,
    #[prost(uint32, tag = "4")]
    pub bclnmidffoh: u32,
    #[prost(uint32, tag = "13")]
    pub hlojkekipkf: u32,
    #[prost(uint32, tag = "3")]
    pub bmnhhidhodd: u32,
    #[prost(message, optional, tag = "12")]
    pub ejjodhjhham: ::core::option::Option<AlleyPlacingShip>,
    #[prost(uint32, tag = "8")]
    pub engdbiimaff: u32,
    #[prost(uint32, tag = "7")]
    pub keokdnikbda: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bfmipggoelo {
    #[prost(uint32, tag = "7")]
    pub ilegfkgcmom: u32,
    #[prost(uint32, tag = "8")]
    pub event_id: u32,
    #[prost(uint32, tag = "5")]
    pub elbbanddjci: u32,
    #[prost(uint32, tag = "4")]
    pub koficklljni: u32,
    #[prost(uint32, tag = "1")]
    pub kfboklhdjda: u32,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(uint32, tag = "14")]
    pub khibbgphdmb: u32,
    #[prost(uint32, tag = "2")]
    pub pglgblkkida: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Icabjgokghh {
    #[prost(message, optional, tag = "15")]
    pub ejjodhjhham: ::core::option::Option<AlleyPlacingShip>,
    #[prost(oneof = "icabjgokghh::Dgephknepbm", tags = "5, 12")]
    pub dgephknepbm: ::core::option::Option<icabjgokghh::Dgephknepbm>,
}
/// Nested message and enum types in `ICABJGOKGHH`.
pub mod icabjgokghh {
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum Dgephknepbm {
        #[prost(uint32, tag = "5")]
        Cjemmdpiclj(u32),
        #[prost(uint32, tag = "12")]
        Fjdabppandc(u32),
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Olaffepaicb {
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(oneof = "olaffepaicb::Dgephknepbm", tags = "14, 8")]
    pub dgephknepbm: ::core::option::Option<olaffepaicb::Dgephknepbm>,
}
/// Nested message and enum types in `OLAFFEPAICB`.
pub mod olaffepaicb {
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum Dgephknepbm {
        #[prost(uint32, tag = "14")]
        Cjemmdpiclj(u32),
        #[prost(uint32, tag = "8")]
        Fjdabppandc(u32),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ecjmjjkjgop {
    #[prost(uint32, tag = "7")]
    pub jalhneidhgj: u32,
    #[prost(uint32, tag = "4")]
    pub hdkdkjbdgcc: u32,
    #[prost(uint32, repeated, tag = "2")]
    pub jdjcnbgoglp: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "15")]
    pub cpgajpckcdg: u32,
    #[prost(uint32, repeated, tag = "1")]
    pub fbeildajede: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, tag = "6")]
    pub iichhokopgg: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dflhkjhdock {
    #[prost(message, optional, tag = "4")]
    pub pphiadnkgaf: ::core::option::Option<Ecjmjjkjgop>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Emcepdlelhe {
    #[prost(uint32, tag = "2")]
    pub ejdfknmnale: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lllomacpcgb {
    #[prost(uint32, repeated, tag = "3")]
    pub cadhphlnoch: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "8")]
    pub dgnkgdlillb: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "14")]
    pub lepacdhlbib: u32,
    #[prost(uint32, tag = "5")]
    pub cakccbjohoi: u32,
    #[prost(uint32, tag = "15")]
    pub shop_id: u32,
    #[prost(uint32, tag = "12")]
    pub behpabeeodh: u32,
    #[prost(uint32, repeated, tag = "13")]
    pub ppibbkhlmjc: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Njaoiggmeal {
    #[prost(uint32, tag = "3")]
    pub map_id: u32,
    #[prost(uint32, tag = "4")]
    pub bclnmidffoh: u32,
    #[prost(message, repeated, tag = "13")]
    pub hofdbflcgkb: ::prost::alloc::vec::Vec<Lllomacpcgb>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LogisticsScore {
    #[prost(uint32, tag = "3")]
    pub map_id: u32,
    #[prost(uint32, tag = "12")]
    pub unlock_level: u32,
    #[prost(message, optional, tag = "8")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "1")]
    pub last_level: u32,
    #[prost(uint32, tag = "7")]
    pub max_score: u32,
    #[prost(uint32, tag = "9")]
    pub last_max_score: u32,
    #[prost(uint32, tag = "11")]
    pub cur_score: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Baknchmdanl {
    #[prost(bool, tag = "8")]
    pub boblnbjmkca: bool,
    #[prost(message, repeated, tag = "12")]
    pub apmcphfmaeg: ::prost::alloc::vec::Vec<Njaoiggmeal>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Odaenpnmihc {
    #[prost(message, repeated, tag = "15")]
    pub fmjplhohbab: ::prost::alloc::vec::Vec<LogisticsScore>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mecofajonfp {
    #[prost(uint32, tag = "11")]
    pub event_id: u32,
    #[prost(bool, tag = "10")]
    pub boblnbjmkca: bool,
    #[prost(message, repeated, tag = "3")]
    pub fmjplhohbab: ::prost::alloc::vec::Vec<LogisticsScore>,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hehaomiamgl {
    #[prost(uint32, tag = "8")]
    pub event_id: u32,
    #[prost(uint32, tag = "11")]
    pub ningbnbmkop: u32,
    #[prost(enumeration = "AlleyEventState", tag = "6")]
    pub state: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Iibmdijblob {
    #[prost(uint32, tag = "15")]
    pub event_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gccchnpfplp {
    #[prost(uint32, tag = "15")]
    pub event_id: u32,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gboojmaoldh {
    #[prost(message, optional, tag = "9")]
    pub nfldodiabcl: ::core::option::Option<Hehaomiamgl>,
    #[prost(uint32, tag = "2")]
    pub hcnldibeaca: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pdpeiehbkdn {
    #[prost(uint32, tag = "7")]
    pub lfilnmfdnig: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gjlhofgmahj {
    #[prost(uint32, tag = "3")]
    pub level: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fgnnndkeehb {
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(message, optional, tag = "5")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "6")]
    pub level: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Aglolfipcdp {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jemeedbidob {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(uint32, tag = "7")]
    pub level: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bnfgelhdpee {
    #[prost(uint32, tag = "3")]
    pub dbjhemippim: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Aiaanlbagmd {
    #[prost(message, repeated, tag = "12")]
    pub apmcphfmaeg: ::prost::alloc::vec::Vec<Njaoiggmeal>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hcdcikfblep {
    #[prost(message, repeated, tag = "5")]
    pub apmcphfmaeg: ::prost::alloc::vec::Vec<Njaoiggmeal>,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Femplinbljg {
    #[prost(message, optional, tag = "9")]
    pub njgamccgadc: ::core::option::Option<Agademajimd>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Laiemcfacdk {
    #[prost(uint32, tag = "7")]
    pub pghckcpkgll: u32,
    #[prost(map = "uint32, uint32", tag = "6")]
    pub aahapcbilhc: ::std::collections::HashMap<u32, u32>,
    #[prost(uint32, tag = "4")]
    pub alghcnajbmm: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ddnicgddlco {
    #[prost(message, optional, tag = "1")]
    pub lgjkpjojblf: ::core::option::Option<Laiemcfacdk>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ngmemmoenfh {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fmcfclgghce {
    #[prost(message, repeated, tag = "5")]
    pub hnfojbcjamg: ::prost::alloc::vec::Vec<Njaoiggmeal>,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cghocdcodmf {
    #[prost(map = "uint32, uint32", tag = "15")]
    pub nplakeokekb: ::std::collections::HashMap<u32, u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ihikfljeijd {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pkjnkfagcbp {
    #[prost(uint32, tag = "6")]
    pub clibobehndm: u32,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mdgbhhgpdaj {
    #[prost(uint32, tag = "15")]
    pub event_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gbdlkbgcbao {
    #[prost(message, optional, tag = "7")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pcmdhomolfb {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mgdibdjamii {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RelicList {
    #[prost(uint32, tag = "15")]
    pub set_id: u32,
    #[prost(uint32, tag = "14")]
    pub r#type: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MonsterList {
    #[prost(uint32, tag = "7")]
    pub monster_id: u32,
    #[prost(uint32, tag = "9")]
    pub num: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ArchiveData {
    #[prost(message, repeated, tag = "2")]
    pub kill_monster_list: ::prost::alloc::vec::Vec<MonsterList>,
    #[prost(uint32, repeated, tag = "12")]
    pub abgbmjlibcc: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "4")]
    pub relic_list: ::prost::alloc::vec::Vec<RelicList>,
    #[prost(uint32, repeated, tag = "14")]
    pub hfknhflolge: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "13")]
    pub dihbnnaplei: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gbkfnmijnjm {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Elkfljkdfdb {
    #[prost(message, optional, tag = "7")]
    pub pjmmgpionpp: ::core::option::Option<ArchiveData>,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Nkdhenmjgdk {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hgjnhmidnnp {
    #[prost(message, optional, tag = "12")]
    pub pjmmgpionpp: ::core::option::Option<ArchiveData>,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAvatarDataCsReq {
    #[prost(uint32, repeated, tag = "11")]
    pub base_avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, tag = "15")]
    pub is_get_all: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EquipRelic {
    #[prost(uint32, tag = "3")]
    pub r#type: u32,
    #[prost(uint32, tag = "15")]
    pub relic_unique_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Avatar {
    #[prost(bool, tag = "2")]
    pub is_marked: bool,
    #[prost(uint32, tag = "8")]
    pub base_avatar_id: u32,
    #[prost(message, repeated, tag = "14")]
    pub skilltree_list: ::prost::alloc::vec::Vec<AvatarSkillTree>,
    #[prost(uint32, tag = "11")]
    pub equipment_unique_id: u32,
    #[prost(message, repeated, tag = "7")]
    pub equip_relic_list: ::prost::alloc::vec::Vec<EquipRelic>,
    #[prost(uint32, tag = "1")]
    pub rank: u32,
    #[prost(uint64, tag = "9")]
    pub first_met_time_stamp: u64,
    #[prost(uint32, tag = "6")]
    pub promotion: u32,
    #[prost(uint32, repeated, tag = "13")]
    pub has_taken_reward_level_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "10")]
    pub dressed_skin_id: u32,
    #[prost(uint32, tag = "3")]
    pub level: u32,
    #[prost(uint32, tag = "4")]
    pub exp: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAvatarDataScRsp {
    #[prost(bool, tag = "13")]
    pub is_get_all: bool,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "9")]
    pub ankheniiach: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "8")]
    pub jpnlpopmkej: u32,
    #[prost(message, repeated, tag = "2")]
    pub avatar_list: ::prost::alloc::vec::Vec<Avatar>,
    #[prost(enumeration = "Bcmljcfoefm", repeated, tag = "11")]
    pub pnkcfealami: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AvatarExpUpCsReq {
    #[prost(uint32, tag = "12")]
    pub base_avatar_id: u32,
    #[prost(message, optional, tag = "3")]
    pub item_cost: ::core::option::Option<ItemCostData>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AvatarExpUpScRsp {
    #[prost(message, repeated, tag = "9")]
    pub return_item_list: ::prost::alloc::vec::Vec<PileItem>,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UnlockSkilltreeCsReq {
    #[prost(uint32, tag = "4")]
    pub level: u32,
    #[prost(uint32, tag = "8")]
    pub point_id: u32,
    #[prost(message, repeated, tag = "6")]
    pub item_list: ::prost::alloc::vec::Vec<ItemCost>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UnlockSkilltreeScRsp {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(uint32, tag = "7")]
    pub level: u32,
    #[prost(uint32, tag = "4")]
    pub point_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PromoteAvatarCsReq {
    #[prost(uint32, tag = "6")]
    pub base_avatar_id: u32,
    #[prost(message, repeated, tag = "9")]
    pub item_list: ::prost::alloc::vec::Vec<ItemCost>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PromoteAvatarScRsp {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DressAvatarCsReq {
    #[prost(uint32, tag = "13")]
    pub equip_avatar_id: u32,
    #[prost(uint32, tag = "10")]
    pub equipment_unique_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DressAvatarScRsp {
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TakeOffEquipmentCsReq {
    #[prost(uint32, tag = "2")]
    pub equip_avatar_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TakeOffEquipmentScRsp {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AddAvatarScNotify {
    #[prost(enumeration = "AddAvatarSrcState", tag = "14")]
    pub src: i32,
    #[prost(uint32, tag = "8")]
    pub base_avatar_id: u32,
    #[prost(message, optional, tag = "6")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(bool, tag = "12")]
    pub is_new: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AddMultiPathAvatarScNotify {
    #[prost(bool, tag = "15")]
    pub is_new: bool,
    #[prost(uint32, tag = "5")]
    pub equip_avatar_id: u32,
    #[prost(message, optional, tag = "6")]
    pub reward: ::core::option::Option<ItemList>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RankUpAvatarCsReq {
    #[prost(uint32, tag = "13")]
    pub rank: u32,
    #[prost(message, optional, tag = "1")]
    pub cost_data: ::core::option::Option<ItemCostData>,
    #[prost(uint32, tag = "6")]
    pub equip_avatar_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RankUpAvatarScRsp {
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DressRelicParam {
    #[prost(uint32, tag = "3")]
    pub relic_unique_id: u32,
    #[prost(uint32, tag = "10")]
    pub relic_slot: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DressRelicAvatarCsReq {
    #[prost(message, repeated, tag = "4")]
    pub param_list: ::prost::alloc::vec::Vec<DressRelicParam>,
    #[prost(uint32, tag = "5")]
    pub equip_avatar_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DressRelicAvatarScRsp {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakeOffRelicCsReq {
    #[prost(uint32, repeated, tag = "3")]
    pub relic_type_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "10")]
    pub equip_avatar_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TakeOffRelicScRsp {
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TakePromotionRewardCsReq {
    #[prost(uint32, tag = "14")]
    pub promotion: u32,
    #[prost(uint32, tag = "1")]
    pub base_avatar_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakePromotionRewardScRsp {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(message, optional, tag = "9")]
    pub reward_list: ::core::option::Option<ItemList>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DressAvatarSkinCsReq {
    #[prost(uint32, tag = "12")]
    pub skin_id: u32,
    #[prost(uint32, tag = "13")]
    pub avatar_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DressAvatarSkinScRsp {
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TakeOffAvatarSkinCsReq {
    #[prost(uint32, tag = "4")]
    pub avatar_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TakeOffAvatarSkinScRsp {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UnlockAvatarSkinScNotify {
    #[prost(uint32, tag = "8")]
    pub skin_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MarkAvatarCsReq {
    #[prost(bool, tag = "2")]
    pub is_marked: bool,
    #[prost(uint32, tag = "11")]
    pub avatar_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MarkAvatarScRsp {
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(uint32, tag = "4")]
    pub avatar_id: u32,
    #[prost(bool, tag = "13")]
    pub is_marked: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bfckhjidmjo {
    #[prost(enumeration = "Gifjdobiiik", tag = "9")]
    pub source: i32,
    #[prost(enumeration = "Bcmljcfoefm", repeated, tag = "13")]
    pub ejbjbocoinb: ::prost::alloc::vec::Vec<i32>,
    #[prost(uint32, tag = "2")]
    pub equip_avatar_id: u32,
    #[prost(uint32, tag = "11")]
    pub idnmeknhlpo: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ceiclcjfpdi {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(uint32, tag = "14")]
    pub ncbkpdngohj: u32,
    #[prost(uint32, tag = "15")]
    pub jpnlpopmkej: u32,
    #[prost(enumeration = "Bcmljcfoefm", repeated, tag = "10")]
    pub ejbjbocoinb: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mlglokgppeg {
    #[prost(uint32, tag = "3")]
    pub jpnlpopmkej: u32,
    #[prost(enumeration = "Bcmljcfoefm", repeated, tag = "14")]
    pub ejbjbocoinb: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PveBattleResultCsReq {
    #[prost(uint32, tag = "10")]
    pub bclnmidffoh: u32,
    #[prost(message, repeated, tag = "7")]
    pub op_list: ::prost::alloc::vec::Vec<BattleOp>,
    #[prost(uint32, tag = "3")]
    pub client_version: u32,
    #[prost(bool, tag = "12")]
    pub gjgkagfpagm: bool,
    #[prost(bool, tag = "2")]
    pub is_ai_consider_ultra_skill: bool,
    #[prost(uint32, tag = "6")]
    pub client_res_version: u32,
    #[prost(uint32, tag = "15")]
    pub stage_id: u32,
    #[prost(uint32, tag = "13")]
    pub jcjfgojfege: u32,
    #[prost(map = "string, uint32", tag = "4")]
    pub hpekekipjlf: ::std::collections::HashMap<::prost::alloc::string::String, u32>,
    #[prost(uint32, tag = "8")]
    pub battle_id: u32,
    #[prost(message, optional, tag = "9")]
    pub stt: ::core::option::Option<BattleStatistics>,
    #[prost(string, tag = "1")]
    pub cpcljgpdnan: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "5")]
    pub turn_snapshot_hash: ::prost::alloc::vec::Vec<u8>,
    #[prost(enumeration = "BattleEndStatus", tag = "14")]
    pub end_status: i32,
    #[prost(bool, tag = "11")]
    pub is_auto_fight: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PveBattleResultScRsp {
    #[prost(string, tag = "11")]
    pub apjkcaohafp: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "1")]
    pub nhanakjfeab: ::core::option::Option<ItemList>,
    #[prost(enumeration = "BattleEndStatus", tag = "3")]
    pub end_status: i32,
    #[prost(string, tag = "13")]
    pub hkpgcapimao: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "14")]
    pub eignjeegdep: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "10")]
    pub klodelecmci: u32,
    #[prost(bool, tag = "5")]
    pub dfajpipfcca: bool,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(uint32, tag = "6")]
    pub stage_id: u32,
    #[prost(message, repeated, tag = "9")]
    pub battle_avatar_list: ::prost::alloc::vec::Vec<BattleAvatar>,
    #[prost(uint32, tag = "8")]
    pub ggmpfnkofkd: u32,
    #[prost(uint32, tag = "4")]
    pub battle_id: u32,
    #[prost(uint32, tag = "15")]
    pub event_id: u32,
    #[prost(uint32, tag = "7")]
    pub ndcmdokkphh: u32,
    #[prost(message, optional, tag = "768")]
    pub nbhlifpblmf: ::core::option::Option<ItemList>,
    #[prost(message, optional, tag = "12")]
    pub jhmmoojpkha: ::core::option::Option<ItemList>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QuitBattleCsReq {
    #[prost(message, optional, tag = "7")]
    pub stt: ::core::option::Option<BattleStatistics>,
    #[prost(enumeration = "RebattleType", tag = "8")]
    pub rebattle_type: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QuitBattleScRsp {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetCurBattleInfoCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetCurBattleInfoScRsp {
    #[prost(message, optional, tag = "10")]
    pub aether_battle_info: ::core::option::Option<AetherDivideBattleInfo>,
    #[prost(enumeration = "BattleEndStatus", tag = "11")]
    pub last_end_status: i32,
    #[prost(uint32, tag = "5")]
    pub ibpjkffflng: u32,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(message, optional, tag = "7")]
    pub battle_info: ::core::option::Option<SceneBattleInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SyncClientResVersionCsReq {
    #[prost(uint32, tag = "12")]
    pub client_res_version: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SyncClientResVersionScRsp {
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(uint32, tag = "11")]
    pub client_res_version: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QuitBattleScNotify {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BattleLogReportCsReq {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BattleLogReportScRsp {
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(bool, tag = "11")]
    pub is_battle_log_report: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ServerSimulateBattleFinishScNotify {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReBattleAfterBattleLoseCsNotify {
    #[prost(bool, tag = "6")]
    pub pmjahilblfl: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RebattleByClientCsNotify {
    #[prost(message, optional, tag = "11")]
    pub stt: ::core::option::Option<BattleStatistics>,
    #[prost(enumeration = "RebattleType", tag = "6")]
    pub rebattle_type: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetBattleCollegeDataCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetBattleCollegeDataScRsp {
    #[prost(uint32, tag = "3")]
    pub mamhojmfjof: u32,
    #[prost(uint32, repeated, tag = "1")]
    pub finished_college_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BattleCollegeDataChangeScNotify {
    #[prost(message, optional, tag = "12")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, repeated, tag = "4")]
    pub finished_college_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "11")]
    pub mamhojmfjof: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StartBattleCollegeCsReq {
    #[prost(uint32, tag = "7")]
    pub id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StartBattleCollegeScRsp {
    #[prost(message, optional, tag = "9")]
    pub battle_info: ::core::option::Option<SceneBattleInfo>,
    #[prost(uint32, tag = "12")]
    pub id: u32,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lcgkpcghili {
    #[prost(uint64, tag = "12")]
    pub inbockjglbo: u64,
    #[prost(uint64, tag = "10")]
    pub cbjklleohdc: u64,
    #[prost(uint64, tag = "11")]
    pub nkaoknmholh: u64,
    #[prost(uint32, tag = "2")]
    pub level: u32,
    #[prost(uint32, tag = "14")]
    pub ljflflimkad: u32,
    #[prost(uint64, tag = "3")]
    pub ekgopldjoii: u64,
    #[prost(uint32, tag = "9")]
    pub exp: u32,
    #[prost(uint64, tag = "15")]
    pub cphiiockhpi: u64,
    #[prost(uint64, tag = "1")]
    pub fdkkikganck: u64,
    #[prost(uint32, tag = "4")]
    pub edbmnmdjbko: u32,
    #[prost(enumeration = "BpTierType", tag = "8")]
    pub jllhalohjii: i32,
    #[prost(uint64, tag = "7")]
    pub hkeoaaccbpl: u64,
    #[prost(uint64, tag = "13")]
    pub ljoekefkpko: u64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Eblmpdfifgf {
    #[prost(uint32, tag = "6")]
    pub optional_reward_id: u32,
    #[prost(uint32, tag = "12")]
    pub level: u32,
    #[prost(enumeration = "BpRewardType", tag = "3")]
    pub r#type: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dcncoibpbjd {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(message, optional, tag = "6")]
    pub reward: ::core::option::Option<ItemList>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bpnkpcipoob {
    #[prost(uint32, tag = "7")]
    pub ldnjeacfbje: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gfeggmhobln {
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct OptionalReward {
    #[prost(uint32, tag = "6")]
    pub level: u32,
    #[prost(uint32, tag = "12")]
    pub optional_reward_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cilpioahnib {
    #[prost(message, repeated, tag = "7")]
    pub modoofjoiao: ::prost::alloc::vec::Vec<OptionalReward>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bojpkoehoci {
    #[prost(message, optional, tag = "12")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pgpcbbcobhg {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LuckyKoiInfo {
    #[prost(string, tag = "15")]
    pub uid_str: ::prost::alloc::string::String,
    #[prost(uint32, tag = "1")]
    pub head_icon: u32,
    #[prost(string, tag = "9")]
    pub name_str: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fecadlcjfic {
    #[prost(message, optional, tag = "2")]
    pub item_list: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "10")]
    pub level: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ojfaklfikcj {
    #[prost(message, repeated, tag = "15")]
    pub pfeaniahfpc: ::prost::alloc::vec::Vec<Fecadlcjfic>,
    #[prost(uint64, tag = "12")]
    pub pjpmlcdhebl: u64,
    #[prost(uint64, tag = "9")]
    pub begin_time: u64,
    #[prost(message, repeated, tag = "11")]
    pub nkjpgkmlhnk: ::prost::alloc::vec::Vec<LuckyKoiInfo>,
    #[prost(uint32, tag = "14")]
    pub iigmeobdmje: u32,
    #[prost(uint64, tag = "5")]
    pub end_time: u64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mogacgjehae {
    #[prost(uint32, tag = "15")]
    pub status: u32,
    #[prost(uint32, tag = "2")]
    pub colbgejelgi: u32,
    #[prost(message, optional, tag = "14")]
    pub config: ::core::option::Option<Ojfaklfikcj>,
    #[prost(uint32, tag = "5")]
    pub level: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lpelgnpnflo {
    #[prost(bool, tag = "3")]
    pub ofnginbodlp: bool,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "15")]
    pub fmkcnmcailn: ::prost::alloc::vec::Vec<Mogacgjehae>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lflogadlema {
    #[prost(uint32, tag = "14")]
    pub colbgejelgi: u32,
    #[prost(bool, tag = "4")]
    pub einfbgkendh: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bjjdecagcii {
    #[prost(message, repeated, tag = "5")]
    pub switch_list: ::prost::alloc::vec::Vec<Lflogadlema>,
    #[prost(bool, tag = "13")]
    pub bfbpcbnpfph: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cmgdhfiobef {
    #[prost(uint32, tag = "2")]
    pub colbgejelgi: u32,
    #[prost(bool, tag = "13")]
    pub einfbgkendh: bool,
    #[prost(message, optional, tag = "10")]
    pub item_list: ::core::option::Option<ItemList>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fedpihjnbhf {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(message, optional, tag = "1")]
    pub ckekcconjgb: ::core::option::Option<ItemList>,
    #[prost(message, repeated, tag = "15")]
    pub switch_list: ::prost::alloc::vec::Vec<Cmgdhfiobef>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Nbamkpbnema {
    #[prost(uint32, tag = "4")]
    pub colbgejelgi: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pmmcamjghkd {
    #[prost(uint32, tag = "3")]
    pub colbgejelgi: u32,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ijkjjdhlklb {
    #[prost(uint32, tag = "13")]
    pub equip_avatar_id: u32,
    #[prost(enumeration = "AvatarType", tag = "10")]
    pub avatar_type: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fcihijlomga {
    #[prost(uint32, tag = "15")]
    pub hjmglemjhkg: u32,
    #[prost(uint32, tag = "8")]
    pub naalcbmbpgc: u32,
    #[prost(uint32, tag = "4")]
    pub hnpeappmgaa: u32,
    #[prost(uint32, tag = "5")]
    pub llfofpndafg: u32,
    #[prost(uint32, repeated, tag = "11")]
    pub avatar_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "6")]
    pub challenge_id: u32,
    #[prost(bool, tag = "1")]
    pub aplknjegbkf: bool,
    #[prost(uint32, repeated, tag = "7")]
    pub hlibijfhhpg: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "14")]
    pub cpgoipicpjf: u32,
    #[prost(message, repeated, tag = "13")]
    pub mdlachdkmph: ::prost::alloc::vec::Vec<Ijkjjdhlklb>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bnabkpinggb {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bhdcdgaphgh {
    #[prost(message, repeated, tag = "9")]
    pub challenge_list: ::prost::alloc::vec::Vec<Fcihijlomga>,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gneibbpoaab {
    #[prost(enumeration = "AvatarType", tag = "10")]
    pub avatar_type: i32,
    #[prost(uint32, tag = "15")]
    pub equip_avatar_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mpbjbfhddjg {
    #[prost(uint32, repeated, tag = "8")]
    pub avatar_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "4")]
    pub mdlachdkmph: ::prost::alloc::vec::Vec<Gneibbpoaab>,
    #[prost(uint32, tag = "10")]
    pub challenge_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ngbfmhijbij {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(message, optional, tag = "10")]
    pub dddikpnnble: ::core::option::Option<Fcihijlomga>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Acimginpann {
    #[prost(uint32, tag = "3")]
    pub llfofpndafg: u32,
    #[prost(uint32, tag = "1")]
    pub challenge_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Adijjgaddhf {
    #[prost(message, optional, tag = "13")]
    pub dddikpnnble: ::core::option::Option<Fcihijlomga>,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jnjkbcnnkgb {
    #[prost(uint32, tag = "10")]
    pub challenge_id: u32,
    #[prost(message, repeated, tag = "14")]
    pub mdlachdkmph: ::prost::alloc::vec::Vec<Gneibbpoaab>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jhghhpbochk {
    #[prost(message, optional, tag = "3")]
    pub dddikpnnble: ::core::option::Option<Fcihijlomga>,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ngngpmklfak {
    #[prost(uint32, tag = "3")]
    pub fmgmaiegofp: u32,
    #[prost(uint32, tag = "13")]
    pub challenge_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jbjpgcdocjc {
    #[prost(message, optional, tag = "9")]
    pub dddikpnnble: ::core::option::Option<Fcihijlomga>,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ibnnggagipd {
    #[prost(uint32, tag = "9")]
    pub challenge_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ckffilondhi {
    #[prost(message, optional, tag = "11")]
    pub battle_info: ::core::option::Option<SceneBattleInfo>,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(uint32, tag = "3")]
    pub challenge_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Igpnnogbafh {
    #[prost(uint32, tag = "5")]
    pub challenge_id: u32,
    #[prost(bool, tag = "1")]
    pub pcpdfjhdjcc: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lapaicipahe {
    #[prost(message, optional, tag = "15")]
    pub dddikpnnble: ::core::option::Option<Fcihijlomga>,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jbenhlgkaom {
    #[prost(message, optional, tag = "14")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "7")]
    pub challenge_id: u32,
    #[prost(uint32, tag = "9")]
    pub naalcbmbpgc: u32,
    #[prost(bool, tag = "4")]
    pub is_win: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Blpfdjgehmf {
    #[prost(message, optional, tag = "3")]
    pub dddikpnnble: ::core::option::Option<Fcihijlomga>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Challenge {
    #[prost(uint32, tag = "13")]
    pub star: u32,
    #[prost(uint32, tag = "10")]
    pub record_id: u32,
    #[prost(uint32, tag = "1")]
    pub score_two: u32,
    #[prost(bool, tag = "5")]
    pub kfdaicilnmb: bool,
    #[prost(uint32, tag = "14")]
    pub score_id: u32,
    #[prost(uint32, tag = "3")]
    pub taken_reward: u32,
    #[prost(uint32, tag = "8")]
    pub challenge_id: u32,
    #[prost(message, optional, tag = "15")]
    pub ext_info: ::core::option::Option<ChallengeExtInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChallengeGroup {
    #[prost(uint32, tag = "11")]
    pub group_id: u32,
    #[prost(uint64, tag = "3")]
    pub taken_stars_count_reward: u64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cclglpabghd {
    #[prost(uint32, tag = "6")]
    pub reward_display_type: u32,
    #[prost(uint32, tag = "12")]
    pub level: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetChallengeCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetChallengeScRsp {
    #[prost(message, repeated, tag = "11")]
    pub challenge_group_list: ::prost::alloc::vec::Vec<ChallengeGroup>,
    #[prost(uint32, tag = "13")]
    pub lpljmkpblif: u32,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "6")]
    pub ampkeoifeeh: ::prost::alloc::vec::Vec<Cclglpabghd>,
    #[prost(message, repeated, tag = "9")]
    pub challenge_list: ::prost::alloc::vec::Vec<Challenge>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StartChallengeStoryBuffInfo {
    #[prost(uint32, tag = "14")]
    pub buff_two: u32,
    #[prost(uint32, tag = "6")]
    pub buff_one: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StartChallengeBossBuffInfo {
    #[prost(uint32, tag = "8")]
    pub buff_one: u32,
    #[prost(uint32, tag = "2")]
    pub buff_two: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StartChallengeInfo {
    #[prost(message, optional, tag = "11")]
    pub story_buff_info: ::core::option::Option<StartChallengeStoryBuffInfo>,
    #[prost(message, optional, tag = "8")]
    pub boss_buff_info: ::core::option::Option<StartChallengeBossBuffInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StartChallengeCsReq {
    #[prost(uint32, repeated, tag = "9")]
    pub first_half_lineup: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "11")]
    pub challenge_id: u32,
    #[prost(uint32, repeated, tag = "10")]
    pub second_half_lineup: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "2")]
    pub ext_info: ::core::option::Option<StartChallengeInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StartChallengeScRsp {
    #[prost(message, optional, tag = "11")]
    pub ext_info: ::core::option::Option<ChallengeExtInfo>,
    #[prost(message, optional, tag = "14")]
    pub scene: ::core::option::Option<SceneInfo>,
    #[prost(message, optional, tag = "8")]
    pub challenge_info: ::core::option::Option<ChallengeInfo>,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "5")]
    pub lineup_list: ::prost::alloc::vec::Vec<LineupInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StartPartialChallengeCsReq {
    #[prost(uint32, tag = "15")]
    pub buff_id: u32,
    #[prost(uint32, tag = "14")]
    pub challenge_id: u32,
    #[prost(bool, tag = "13")]
    pub is_first_half: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StartPartialChallengeScRsp {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(message, optional, tag = "14")]
    pub scene: ::core::option::Option<SceneInfo>,
    #[prost(message, optional, tag = "3")]
    pub lineup: ::core::option::Option<LineupInfo>,
    #[prost(message, optional, tag = "9")]
    pub challenge_info: ::core::option::Option<ChallengeInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LeaveChallengeCsReq {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LeaveChallengeScRsp {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChallengeSettleNotify {
    #[prost(bool, tag = "15")]
    pub is_win: bool,
    #[prost(uint32, repeated, tag = "3")]
    pub hahaeifmlbm: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "7")]
    pub challenge_info: ::core::option::Option<ChallengeInfo>,
    #[prost(message, optional, tag = "5")]
    pub ccoajgdepja: ::core::option::Option<Cclglpabghd>,
    #[prost(uint32, tag = "4")]
    pub challenge_id: u32,
    #[prost(uint32, tag = "8")]
    pub afchlcmcmhg: u32,
    #[prost(uint32, tag = "9")]
    pub star: u32,
    #[prost(message, optional, tag = "11")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "2")]
    pub lpljmkpblif: u32,
    #[prost(uint32, tag = "10")]
    pub score_two: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct KillMonster {
    #[prost(uint32, tag = "1")]
    pub kill_num: u32,
    #[prost(uint32, tag = "2")]
    pub monster_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChallengeStoryBuffInfo {
    #[prost(uint32, repeated, tag = "15")]
    pub buff_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChallengeBossBuffInfo {
    #[prost(uint32, tag = "6")]
    pub boss_buff_id: u32,
    #[prost(uint32, repeated, tag = "13")]
    pub buff_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChallengeBuffInfo {
    #[prost(message, optional, tag = "15")]
    pub story_buff_list: ::core::option::Option<ChallengeStoryBuffInfo>,
    #[prost(message, optional, tag = "13")]
    pub boss_buff_list: ::core::option::Option<ChallengeBossBuffInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChallengeInfo {
    #[prost(uint32, tag = "11")]
    pub score_two: u32,
    #[prost(enumeration = "ExtraLineupType", tag = "12")]
    pub extra_lineup_type: i32,
    #[prost(uint32, tag = "8")]
    pub round_count: u32,
    #[prost(message, repeated, tag = "4")]
    pub kill_monster_list: ::prost::alloc::vec::Vec<KillMonster>,
    #[prost(uint32, tag = "3")]
    pub challenge_id: u32,
    #[prost(uint32, tag = "2")]
    pub dead_avatar_num: u32,
    #[prost(uint32, tag = "5")]
    pub score: u32,
    #[prost(message, optional, tag = "6")]
    pub ext_buff_info: ::core::option::Option<ChallengeBuffInfo>,
    #[prost(enumeration = "ChallengeStatus", tag = "9")]
    pub status: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetCurChallengeCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetCurChallengeScRsp {
    #[prost(message, optional, tag = "8")]
    pub challenge_info: ::core::option::Option<ChallengeInfo>,
    #[prost(message, repeated, tag = "15")]
    pub lineup_list: ::prost::alloc::vec::Vec<LineupInfo>,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChallengeLineupNotify {
    #[prost(enumeration = "ExtraLineupType", tag = "11")]
    pub extra_lineup_type: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TakeChallengeRewardCsReq {
    #[prost(uint32, tag = "13")]
    pub group_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakeChallengeRewardScRsp {
    #[prost(uint32, tag = "13")]
    pub group_id: u32,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "1")]
    pub taken_reward_list: ::prost::alloc::vec::Vec<TakenChallengeRewardInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakenChallengeRewardInfo {
    #[prost(message, optional, tag = "11")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "1")]
    pub star_count: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChallengeStatistics {
    #[prost(message, optional, tag = "2")]
    pub kcigejgflho: ::core::option::Option<Jkkfalnedep>,
    #[prost(uint32, tag = "5")]
    pub record_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Laaigbdpljc {
    #[prost(uint32, tag = "9")]
    pub record_id: u32,
    #[prost(message, optional, tag = "4")]
    pub kcigejgflho: ::core::option::Option<Pablfgkiogi>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lgnmpmcpopf {
    #[prost(message, optional, tag = "4")]
    pub kcigejgflho: ::core::option::Option<Hmnjgmnakbl>,
    #[prost(uint32, tag = "15")]
    pub record_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jkkfalnedep {
    #[prost(message, repeated, tag = "7")]
    pub lineup_list: ::prost::alloc::vec::Vec<ChallengeLineupList>,
    #[prost(uint32, tag = "10")]
    pub inhddnnpbdb: u32,
    #[prost(uint32, tag = "6")]
    pub round_count: u32,
    #[prost(uint32, tag = "13")]
    pub level: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pablfgkiogi {
    #[prost(uint32, tag = "1")]
    pub inhddnnpbdb: u32,
    #[prost(uint32, tag = "11")]
    pub score_id: u32,
    #[prost(message, repeated, tag = "13")]
    pub lineup_list: ::prost::alloc::vec::Vec<ChallengeLineupList>,
    #[prost(uint32, tag = "2")]
    pub buff_one: u32,
    #[prost(uint32, tag = "3")]
    pub level: u32,
    #[prost(uint32, tag = "8")]
    pub buff_two: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hmnjgmnakbl {
    #[prost(uint32, tag = "5")]
    pub buff_two: u32,
    #[prost(uint32, tag = "6")]
    pub inhddnnpbdb: u32,
    #[prost(uint32, tag = "13")]
    pub buff_one: u32,
    #[prost(uint32, tag = "11")]
    pub level: u32,
    #[prost(uint32, tag = "3")]
    pub score_id: u32,
    #[prost(message, repeated, tag = "12")]
    pub lineup_list: ::prost::alloc::vec::Vec<ChallengeLineupList>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChallengeLineupList {
    #[prost(message, repeated, tag = "12")]
    pub avatar_list: ::prost::alloc::vec::Vec<ChallengeAvatarInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChallengeAvatarInfo {
    #[prost(uint32, tag = "15")]
    pub level: u32,
    #[prost(uint32, tag = "2")]
    pub ggdiibcdobb: u32,
    #[prost(enumeration = "AvatarType", tag = "12")]
    pub avatar_type: i32,
    #[prost(uint32, tag = "14")]
    pub index: u32,
    #[prost(uint32, tag = "5")]
    pub id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetChallengeGroupStatisticsCsReq {
    #[prost(uint32, tag = "11")]
    pub group_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetChallengeGroupStatisticsScRsp {
    #[prost(uint32, tag = "14")]
    pub group_id: u32,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(
        oneof = "get_challenge_group_statistics_sc_rsp::Cgfpdmppnjf",
        tags = "13, 10, 7"
    )]
    pub cgfpdmppnjf: ::core::option::Option<
        get_challenge_group_statistics_sc_rsp::Cgfpdmppnjf,
    >,
}
/// Nested message and enum types in `GetChallengeGroupStatisticsScRsp`.
pub mod get_challenge_group_statistics_sc_rsp {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Cgfpdmppnjf {
        #[prost(message, tag = "13")]
        Mjbenbdbhaj(super::ChallengeStatistics),
        #[prost(message, tag = "10")]
        Ajgcmalnlen(super::Laaigbdpljc),
        #[prost(message, tag = "7")]
        Bmckmgincia(super::Lgnmpmcpopf),
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChallengeBossSingleNodeInfo {
    #[prost(uint32, tag = "11")]
    pub max_score: u32,
    #[prost(uint32, tag = "12")]
    pub buff_id: u32,
    #[prost(bool, tag = "9")]
    pub meelgndnomn: bool,
    #[prost(bool, tag = "4")]
    pub is_win: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChallengeBossEquipmentInfo {
    #[prost(uint32, tag = "13")]
    pub tid: u32,
    #[prost(uint32, tag = "8")]
    pub rank: u32,
    #[prost(uint32, tag = "11")]
    pub promotion: u32,
    #[prost(uint32, tag = "5")]
    pub level: u32,
    #[prost(uint32, tag = "2")]
    pub unique_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChallengeBossRelicInfo {
    #[prost(uint32, tag = "4")]
    pub main_affix_id: u32,
    #[prost(uint32, tag = "13")]
    pub tid: u32,
    #[prost(message, repeated, tag = "11")]
    pub sub_affix_list: ::prost::alloc::vec::Vec<RelicAffix>,
    #[prost(uint32, tag = "8")]
    pub unique_id: u32,
    #[prost(uint32, tag = "5")]
    pub level: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oldmdglkdim {
    #[prost(map = "uint32, message", tag = "6")]
    pub nagdkfkifig: ::std::collections::HashMap<u32, ChallengeBossRelicInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChallengeBossInfo {
    #[prost(uint32, repeated, tag = "15")]
    pub first_half_lineup: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "4")]
    pub second_half_lineup: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, tag = "3")]
    pub ncbdnpgpeai: bool,
    #[prost(message, optional, tag = "2")]
    pub second_node: ::core::option::Option<ChallengeBossSingleNodeInfo>,
    #[prost(map = "uint32, message", tag = "8")]
    pub ehjedeonjkk: ::std::collections::HashMap<u32, ChallengeBossEquipmentInfo>,
    #[prost(message, optional, tag = "10")]
    pub first_node: ::core::option::Option<ChallengeBossSingleNodeInfo>,
    #[prost(map = "uint32, message", tag = "9")]
    pub fomgnpgackc: ::std::collections::HashMap<u32, Oldmdglkdim>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChallengeExtInfo {
    #[prost(oneof = "challenge_ext_info::Ieicdggelne", tags = "5")]
    pub ieicdggelne: ::core::option::Option<challenge_ext_info::Ieicdggelne>,
}
/// Nested message and enum types in `ChallengeExtInfo`.
pub mod challenge_ext_info {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Ieicdggelne {
        #[prost(message, tag = "5")]
        BossBuffInfo(super::ChallengeBossInfo),
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RestartChallengePhaseCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RestartChallengePhaseScRsp {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(message, optional, tag = "1")]
    pub scene: ::core::option::Option<SceneInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EnterChallengeNextPhaseCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EnterChallengeNextPhaseScRsp {
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(message, optional, tag = "15")]
    pub scene: ::core::option::Option<SceneInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChallengeBossPhaseSettleNotify {
    #[prost(bool, tag = "13")]
    pub njbfdiakfhn: bool,
    #[prost(uint32, tag = "9")]
    pub star: u32,
    #[prost(message, repeated, tag = "8")]
    pub battle_target_list: ::prost::alloc::vec::Vec<BattleTarget>,
    #[prost(bool, tag = "10")]
    pub is_win: bool,
    #[prost(uint32, tag = "6")]
    pub challenge_id: u32,
    #[prost(uint32, tag = "3")]
    pub afchlcmcmhg: u32,
    #[prost(uint32, tag = "4")]
    pub fcmagjblgoj: u32,
    #[prost(uint32, tag = "12")]
    pub halgpjmcmfp: u32,
    #[prost(bool, tag = "7")]
    pub ilhafbkckog: bool,
    #[prost(uint32, tag = "14")]
    pub score_two: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SendMsgCsReq {
    #[prost(uint32, repeated, tag = "14")]
    pub target_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "3")]
    pub hnbepabnbng: ::core::option::Option<Pedlphdbnaf>,
    #[prost(enumeration = "ChatType", tag = "10")]
    pub chat_type: i32,
    #[prost(enumeration = "MsgType", tag = "8")]
    pub message_type: i32,
    #[prost(string, tag = "2")]
    pub message_text: ::prost::alloc::string::String,
    #[prost(uint32, tag = "5")]
    pub extra_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SendMsgScRsp {
    #[prost(uint64, tag = "15")]
    pub end_time: u64,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChatMessageData {
    #[prost(message, optional, tag = "14")]
    pub hnbepabnbng: ::core::option::Option<Pedlphdbnaf>,
    #[prost(uint32, tag = "5")]
    pub extra_id: u32,
    #[prost(enumeration = "MsgType", tag = "1")]
    pub message_type: i32,
    #[prost(string, tag = "12")]
    pub content: ::prost::alloc::string::String,
    #[prost(uint32, tag = "9")]
    pub sender_uid: u32,
    #[prost(uint64, tag = "15")]
    pub timestamp: u64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RevcMsgScNotify {
    #[prost(enumeration = "MsgType", tag = "13")]
    pub message_type: i32,
    #[prost(string, tag = "7")]
    pub message_text: ::prost::alloc::string::String,
    #[prost(enumeration = "ChatType", tag = "14")]
    pub chat_type: i32,
    #[prost(uint32, tag = "9")]
    pub extra_id: u32,
    #[prost(message, optional, tag = "4")]
    pub hnbepabnbng: ::core::option::Option<Pedlphdbnaf>,
    #[prost(uint32, tag = "15")]
    pub sender_uid: u32,
    #[prost(uint32, tag = "3")]
    pub to_uid: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PrivateMsgOfflineUsersScNotify {
    #[prost(uint32, repeated, tag = "7")]
    pub contact_id_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetPrivateChatHistoryCsReq {
    #[prost(uint32, tag = "11")]
    pub target_side: u32,
    #[prost(uint32, tag = "5")]
    pub contact_side: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetPrivateChatHistoryScRsp {
    #[prost(message, repeated, tag = "10")]
    pub chat_message_list: ::prost::alloc::vec::Vec<ChatMessageData>,
    #[prost(uint32, tag = "12")]
    pub contact_id: u32,
    #[prost(uint32, tag = "13")]
    pub target_side: u32,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FriendHistoryInfo {
    #[prost(uint32, tag = "2")]
    pub contact_side: u32,
    #[prost(int64, tag = "1")]
    pub last_send_time: i64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetChatFriendHistoryCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetChatFriendHistoryScRsp {
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "11")]
    pub friend_history_info: ::prost::alloc::vec::Vec<FriendHistoryInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetChatEmojiListCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetChatEmojiListScRsp {
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "1")]
    pub chat_emoji_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MarkChatEmojiCsReq {
    #[prost(bool, tag = "5")]
    pub is_remove_id: bool,
    #[prost(uint32, tag = "12")]
    pub extra_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MarkChatEmojiScRsp {
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(uint32, tag = "2")]
    pub extra_id: u32,
    #[prost(bool, tag = "4")]
    pub is_remove_id: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchMarkChatEmojiCsReq {
    #[prost(uint32, repeated, tag = "6")]
    pub marked_emoji_id_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchMarkChatEmojiScRsp {
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "12")]
    pub marked_emoji_id_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetLoginChatInfoCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetLoginChatInfoScRsp {
    #[prost(uint32, repeated, tag = "3")]
    pub contact_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ncciejolncf {
    #[prost(message, optional, tag = "1")]
    pub gficflciejj: ::core::option::Option<ItemCostData>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ehanapnjfjd {
    #[prost(message, optional, tag = "12")]
    pub scene: ::core::option::Option<SceneInfo>,
    #[prost(message, optional, tag = "15")]
    pub lineup: ::core::option::Option<LineupInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lpnkmemoobe {
    #[prost(uint32, repeated, tag = "11")]
    pub ajkknfkijkh: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "14")]
    pub id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mffkjdndkio {
    #[prost(message, repeated, tag = "2")]
    pub ngffgbcbbon: ::prost::alloc::vec::Vec<Lpnkmemoobe>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oaloinnaini {
    #[prost(bool, tag = "11")]
    pub bnafeecpego: bool,
    #[prost(message, optional, tag = "1197")]
    pub licobikoaao: ::core::option::Option<Kjehfkbjphd>,
    #[prost(enumeration = "Aikblmohhjp", tag = "8")]
    pub bkknaegklcb: i32,
    #[prost(enumeration = "Nlmollcfcgb", tag = "3")]
    pub iccepgcifmg: i32,
    #[prost(uint32, tag = "4")]
    pub hfmjdfpnncm: u32,
    #[prost(message, optional, tag = "1674")]
    pub boncmhigpfj: ::core::option::Option<Aekpjeldapd>,
    #[prost(uint32, tag = "9")]
    pub onlglocadgd: u32,
    #[prost(message, optional, tag = "1547")]
    pub edphldegjlm: ::core::option::Option<Eendhpkpflp>,
    #[prost(uint32, tag = "13")]
    pub ciblonpnbfe: u32,
    #[prost(uint32, tag = "6")]
    pub omcagfaahke: u32,
    #[prost(bool, tag = "1780")]
    pub fneidjimjph: bool,
    #[prost(uint32, tag = "14")]
    pub cjgonlaecko: u32,
    #[prost(uint32, tag = "1")]
    pub gofpdnoapbb: u32,
    #[prost(int32, tag = "1673")]
    pub jfipiifpmmb: i32,
    #[prost(uint32, repeated, tag = "1888")]
    pub ngdedlkngfg: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "12")]
    pub kpnakipljgb: u32,
    #[prost(uint32, tag = "2")]
    pub pagpblafneh: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hpioldggbmd {
    #[prost(uint32, tag = "3")]
    pub kchfjdajecm: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nogncpjbehk {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(uint32, tag = "10")]
    pub dcihkmfnhbm: u32,
    #[prost(message, optional, tag = "4")]
    pub aiaonpfbgng: ::core::option::Option<Oaloinnaini>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dchddgalfij {
    #[prost(uint32, tag = "5")]
    pub hhcbjghkcpc: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cmheokamhpg {
    #[prost(uint32, tag = "12")]
    pub hhcbjghkcpc: u32,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Iaaefegdnlo {
    #[prost(uint32, tag = "13")]
    pub mldlfhjlhoc: u32,
    #[prost(uint32, tag = "5")]
    pub monster_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mmopbldhjmf {
    #[prost(bool, tag = "5")]
    pub pipmgacmjnn: bool,
    #[prost(uint32, tag = "14")]
    pub endidlcdnni: u32,
    #[prost(message, repeated, tag = "13")]
    pub cdodefkbkpd: ::prost::alloc::vec::Vec<Iaaefegdnlo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ilhlpphldcg {
    #[prost(uint32, repeated, tag = "4")]
    pub lhmidpambpd: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "3")]
    pub gcnkifmgmce: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ikhpeepogle {
    #[prost(message, optional, tag = "13")]
    pub cjiakcaphjg: ::core::option::Option<Ilhlpphldcg>,
    #[prost(message, optional, tag = "7")]
    pub hgimnjflklb: ::core::option::Option<Mmopbldhjmf>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pihkdokdikf {
    #[prost(oneof = "pihkdokdikf::Ldmccmabllc", tags = "13, 7, 12")]
    pub ldmccmabllc: ::core::option::Option<pihkdokdikf::Ldmccmabllc>,
}
/// Nested message and enum types in `PIHKDOKDIKF`.
pub mod pihkdokdikf {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Ldmccmabllc {
        #[prost(message, tag = "13")]
        Hgimnjflklb(super::Mmopbldhjmf),
        #[prost(message, tag = "7")]
        Cjiakcaphjg(super::Ilhlpphldcg),
        #[prost(message, tag = "12")]
        Iagebjbplfm(super::Ikhpeepogle),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mknhikdcjjg {
    #[prost(uint32, tag = "12")]
    pub feknlhbagdd: u32,
    #[prost(uint32, tag = "3")]
    pub dknjlpihepj: u32,
    #[prost(enumeration = "Eieenafclll", tag = "7")]
    pub daajljcajob: i32,
    #[prost(bool, tag = "8")]
    pub alifdhnigal: bool,
    #[prost(message, optional, tag = "15")]
    pub ext_info: ::core::option::Option<Pihkdokdikf>,
    #[prost(bool, tag = "4")]
    pub knbdpfeidnm: bool,
    #[prost(uint32, tag = "10")]
    pub gicooehhhig: u32,
    #[prost(uint32, tag = "2")]
    pub jjlogicpoao: u32,
    #[prost(uint32, tag = "5")]
    pub iigoemfhgll: u32,
    #[prost(uint32, tag = "11")]
    pub id: u32,
    #[prost(uint32, repeated, tag = "6")]
    pub mjaplacifjn: ::prost::alloc::vec::Vec<u32>,
    #[prost(enumeration = "Ogjbgonlhih", tag = "1")]
    pub hkcjgfephea: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ofphdlopiem {
    #[prost(uint32, tag = "14")]
    pub hdhiongofid: u32,
    #[prost(uint32, tag = "12")]
    pub hlamiclgpee: u32,
    #[prost(uint32, tag = "7")]
    pub nghppegbpao: u32,
    #[prost(uint32, tag = "5")]
    pub bmajdilbpob: u32,
    #[prost(message, repeated, tag = "8")]
    pub iafbijekkpg: ::prost::alloc::vec::Vec<Mknhikdcjjg>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Doiblcekfdg {
    #[prost(uint32, tag = "10")]
    pub jjlogicpoao: u32,
    #[prost(uint32, tag = "12")]
    pub hhcbjghkcpc: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kkckgeojfke {
    #[prost(uint32, tag = "13")]
    pub bdmlgepndfm: u32,
    #[prost(message, optional, tag = "5")]
    pub bohdminejno: ::core::option::Option<Eendhpkpflp>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hajpalbodih {
    #[prost(message, optional, tag = "11")]
    pub cfekaolkhjg: ::core::option::Option<Kkckgeojfke>,
    #[prost(enumeration = "Eieenafclll", tag = "1")]
    pub ccghbbbolmh: i32,
    #[prost(uint32, tag = "7")]
    pub aoeppibmggn: u32,
    #[prost(message, optional, tag = "12")]
    pub anhjnbgielf: ::core::option::Option<Ofphdlopiem>,
    #[prost(uint32, tag = "5")]
    pub pmgpokklkdd: u32,
    #[prost(message, repeated, tag = "6")]
    pub mcknecfhdkg: ::prost::alloc::vec::Vec<Doiblcekfdg>,
    #[prost(uint32, repeated, tag = "4")]
    pub ingagmmhmjc: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Afabkdefddg {
    #[prost(uint32, tag = "3")]
    pub id: u32,
    #[prost(uint32, tag = "12")]
    pub eehkfnkhnbi: u32,
    #[prost(int32, tag = "15")]
    pub ocdnmhnnkgm: i32,
    #[prost(uint32, tag = "8")]
    pub mhoijafgecp: u32,
    #[prost(uint32, repeated, tag = "10")]
    pub cmnnlmcemcg: ::prost::alloc::vec::Vec<u32>,
    #[prost(int32, tag = "13")]
    pub ljffcnbpjdd: i32,
    #[prost(uint32, repeated, tag = "2")]
    pub cpbmapflplc: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "11")]
    pub ppjbgnbmkpm: u32,
    #[prost(message, optional, tag = "14")]
    pub jmgkbhhigmk: ::core::option::Option<Hajpalbodih>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Llbjabeocec {
    #[prost(uint32, tag = "10")]
    pub mamhojmfjof: u32,
    #[prost(uint32, tag = "8")]
    pub elappcmeloa: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pgaldkkfblc {
    #[prost(message, repeated, tag = "5")]
    pub pjkdpobkkgb: ::prost::alloc::vec::Vec<Llbjabeocec>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cjembcbcbkj {
    #[prost(int32, tag = "13")]
    pub icjabpgmacj: i32,
    #[prost(uint32, repeated, tag = "12")]
    pub fpchnblonlc: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "8")]
    pub hlagjpbaeml: ::core::option::Option<Pgaldkkfblc>,
    #[prost(uint32, tag = "4")]
    pub amnbmjofjoo: u32,
    #[prost(message, optional, tag = "10")]
    pub bohdminejno: ::core::option::Option<Eendhpkpflp>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Knlmliimohd {
    #[prost(uint32, tag = "14")]
    pub equip_avatar_id: u32,
    #[prost(uint32, tag = "8")]
    pub dlefmlcooka: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Iegmfgpfadl {
    #[prost(message, optional, tag = "5")]
    pub fpjckpnlnfm: ::core::option::Option<Ncciejolncf>,
    #[prost(message, repeated, tag = "6")]
    pub ajljgmilelp: ::prost::alloc::vec::Vec<Knlmliimohd>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hkmlalbdpgo {
    #[prost(uint32, tag = "6")]
    pub lhcbbgimmdg: u32,
    #[prost(uint32, tag = "5")]
    pub fahihdjfohm: u32,
    #[prost(bool, tag = "2")]
    pub fjkgkaekbkj: bool,
    #[prost(uint32, repeated, tag = "11")]
    pub boonpdeobla: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ocbcbidlllj {
    #[prost(int32, tag = "7")]
    pub odjpoenppob: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hijkilgjclp {
    #[prost(uint32, repeated, tag = "10")]
    pub dimhpbcpnlc: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fflapkolhcm {
    #[prost(message, optional, tag = "7")]
    pub aiaonpfbgng: ::core::option::Option<Oaloinnaini>,
    #[prost(message, optional, tag = "6")]
    pub embagmmhipa: ::core::option::Option<Iegmfgpfadl>,
    #[prost(message, optional, tag = "5")]
    pub lgopnbhhhbg: ::core::option::Option<Kcacnhcadec>,
    #[prost(message, optional, tag = "8")]
    pub story_buff_info: ::core::option::Option<Hkmlalbdpgo>,
    #[prost(message, optional, tag = "13")]
    pub eeppkmpajoh: ::core::option::Option<Nkidddpflje>,
    #[prost(message, optional, tag = "2015")]
    pub fiocabcbnkb: ::core::option::Option<Hijkilgjclp>,
    #[prost(uint32, tag = "15")]
    pub bngfaignphe: u32,
    #[prost(message, optional, tag = "4")]
    pub kndmeilhkej: ::core::option::Option<Kfpmaiaadmo>,
    #[prost(message, optional, tag = "11")]
    pub chmhpcngfao: ::core::option::Option<Cjembcbcbkj>,
    #[prost(message, optional, tag = "10")]
    pub lmgkmaoicgc: ::core::option::Option<Afabkdefddg>,
    #[prost(message, optional, tag = "2")]
    pub opakjjmagph: ::core::option::Option<Imnpeajajjo>,
    #[prost(message, repeated, tag = "12")]
    pub biphngcadde: ::prost::alloc::vec::Vec<Lgkgehhajje>,
    #[prost(message, optional, tag = "3")]
    pub ofolhkcnlba: ::core::option::Option<Ajcndbhnlfl>,
    #[prost(message, optional, tag = "14")]
    pub aabchfbkpeg: ::core::option::Option<Bcllbmeedkp>,
    #[prost(message, optional, tag = "9")]
    pub ibmioggkbfb: ::core::option::Option<Ocbcbidlllj>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jacmenokjfm {
    #[prost(message, optional, tag = "9")]
    pub hlagjpbaeml: ::core::option::Option<Pgaldkkfblc>,
    #[prost(message, optional, tag = "11")]
    pub ckmahdgiboh: ::core::option::Option<Lgeljhjomlo>,
    #[prost(message, optional, tag = "8")]
    pub fiocabcbnkb: ::core::option::Option<Afaghelicpd>,
    #[prost(uint32, repeated, tag = "6")]
    pub cmnnlmcemcg: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "15")]
    pub ofolhkcnlba: ::core::option::Option<Ajcndbhnlfl>,
    #[prost(message, optional, tag = "5")]
    pub bbcpoebnanc: ::core::option::Option<Dffjcmlaicl>,
    #[prost(uint32, repeated, tag = "13")]
    pub cpbmapflplc: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bipddejaadc {
    #[prost(uint32, tag = "15")]
    pub bngfaignphe: u32,
    #[prost(message, repeated, tag = "4")]
    pub biphngcadde: ::prost::alloc::vec::Vec<Lgkgehhajje>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ihnjghalkjb {
    #[prost(uint32, repeated, tag = "15")]
    pub cmnnlmcemcg: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "12")]
    pub hlagjpbaeml: ::core::option::Option<Pgaldkkfblc>,
    #[prost(message, optional, tag = "5")]
    pub bbcpoebnanc: ::core::option::Option<Dffjcmlaicl>,
    #[prost(uint32, repeated, tag = "10")]
    pub cpbmapflplc: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "9")]
    pub fiocabcbnkb: ::core::option::Option<Afaghelicpd>,
    #[prost(message, optional, tag = "14")]
    pub ckmahdgiboh: ::core::option::Option<Lgeljhjomlo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ccodjoaholb {
    #[prost(uint32, tag = "4")]
    pub blbbokogfda: u32,
    #[prost(message, optional, tag = "1535")]
    pub opakjjmagph: ::core::option::Option<Imnpeajajjo>,
    #[prost(uint32, tag = "10")]
    pub pbalfienefo: u32,
    #[prost(message, optional, tag = "12")]
    pub bgpeckfdeld: ::core::option::Option<ItemList>,
    #[prost(enumeration = "Kfhlbkccaco", tag = "8")]
    pub gmolnjibnja: i32,
    #[prost(uint32, tag = "918")]
    pub egpcibjiajd: u32,
    #[prost(message, optional, tag = "6")]
    pub anniaoidado: ::core::option::Option<LineupInfo>,
    #[prost(uint32, tag = "2")]
    pub ipojmmgoopj: u32,
    #[prost(uint32, repeated, tag = "13")]
    pub ojggmoopgil: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "241")]
    pub opoimhhafjo: u32,
    #[prost(uint32, tag = "1")]
    pub fgomiplmeic: u32,
    #[prost(uint32, tag = "62")]
    pub bngfaignphe: u32,
    #[prost(bool, tag = "15")]
    pub hlnfbgacnpo: bool,
    #[prost(message, optional, tag = "7")]
    pub lgopnbhhhbg: ::core::option::Option<Gckblhadlgn>,
    #[prost(uint32, tag = "11")]
    pub plbcdiaadkd: u32,
    #[prost(message, optional, tag = "9")]
    pub eeppkmpajoh: ::core::option::Option<Ajpfphkklpg>,
    #[prost(uint32, tag = "1064")]
    pub abehkcjhceh: u32,
    #[prost(uint32, tag = "1339")]
    pub score_id: u32,
    #[prost(uint32, tag = "14")]
    pub dmbdnaicpfb: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ojleefjelap {
    #[prost(message, repeated, tag = "9")]
    pub iafbijekkpg: ::prost::alloc::vec::Vec<Mknhikdcjjg>,
    #[prost(uint32, tag = "13")]
    pub hbcmgiicjmk: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lahjpfooheb {
    #[prost(uint32, tag = "9")]
    pub fgomiplmeic: u32,
    #[prost(uint32, tag = "14")]
    pub kenpckfonok: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dipmfomgcgl {
    #[prost(uint32, tag = "13")]
    pub cfibpmkaino: u32,
    #[prost(uint32, tag = "7")]
    pub fahihdjfohm: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dfpmehbdafp {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fficmogjcgl {
    #[prost(message, optional, tag = "5")]
    pub blndmfgkpmj: ::core::option::Option<Jacmenokjfm>,
    #[prost(message, optional, tag = "8")]
    pub hndlhicdnpc: ::core::option::Option<Fflapkolhcm>,
    #[prost(message, optional, tag = "14")]
    pub omcbcgchlgn: ::core::option::Option<Bipddejaadc>,
    #[prost(message, optional, tag = "15")]
    pub lagbgldlgcb: ::core::option::Option<Ihnjghalkjb>,
    #[prost(message, optional, tag = "11")]
    pub boikablfkec: ::core::option::Option<Ccodjoaholb>,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gffndencopm {
    #[prost(uint32, tag = "10")]
    pub hhcbjghkcpc: u32,
    #[prost(uint32, tag = "15")]
    pub femgpnlfagc: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Flghaeahaie {
    #[prost(uint32, tag = "1")]
    pub hhcbjghkcpc: u32,
    #[prost(message, optional, tag = "8")]
    pub hndlhicdnpc: ::core::option::Option<Fflapkolhcm>,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(message, optional, tag = "5")]
    pub omcbcgchlgn: ::core::option::Option<Bipddejaadc>,
    #[prost(message, optional, tag = "3")]
    pub ext_info: ::core::option::Option<Ehanapnjfjd>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Adcomlgaenp {
    #[prost(uint32, tag = "4")]
    pub id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dglbnhhipfh {
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(message, optional, tag = "15")]
    pub omcbcgchlgn: ::core::option::Option<Bipddejaadc>,
    #[prost(message, optional, tag = "5")]
    pub hndlhicdnpc: ::core::option::Option<Fflapkolhcm>,
    #[prost(message, optional, tag = "10")]
    pub ext_info: ::core::option::Option<Ehanapnjfjd>,
    #[prost(uint32, tag = "1")]
    pub id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mgmmcbbikmo {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mfdmeodlbji {
    #[prost(message, optional, tag = "7")]
    pub ext_info: ::core::option::Option<Ehanapnjfjd>,
    #[prost(message, optional, tag = "4")]
    pub blndmfgkpmj: ::core::option::Option<Jacmenokjfm>,
    #[prost(message, optional, tag = "11")]
    pub chmhpcngfao: ::core::option::Option<Cjembcbcbkj>,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(message, optional, tag = "1")]
    pub lagbgldlgcb: ::core::option::Option<Ihnjghalkjb>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Odpolcdmihm {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Effdklfnalg {
    #[prost(message, optional, tag = "15")]
    pub chmhpcngfao: ::core::option::Option<Cjembcbcbkj>,
    #[prost(message, optional, tag = "13")]
    pub blndmfgkpmj: ::core::option::Option<Jacmenokjfm>,
    #[prost(message, optional, tag = "6")]
    pub lagbgldlgcb: ::core::option::Option<Ihnjghalkjb>,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(message, optional, tag = "12")]
    pub boikablfkec: ::core::option::Option<Ccodjoaholb>,
    #[prost(message, optional, tag = "11")]
    pub ext_info: ::core::option::Option<Ehanapnjfjd>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ojefoapjbnn {
    #[prost(uint32, tag = "11")]
    pub dhndampbhpp: u32,
    #[prost(uint32, repeated, tag = "3")]
    pub lghcahbbcam: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "15")]
    pub id: u32,
    #[prost(uint32, tag = "8")]
    pub elappcmeloa: u32,
    #[prost(uint32, repeated, tag = "1")]
    pub base_avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "7")]
    pub hjgndhlmmib: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "2")]
    pub ahiibhkdfjb: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dclbjgflpgi {
    #[prost(message, optional, tag = "7")]
    pub scene: ::core::option::Option<SceneInfo>,
    #[prost(message, optional, tag = "1")]
    pub dbdgahblgbb: ::core::option::Option<Ojleefjelap>,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(message, optional, tag = "15")]
    pub hndlhicdnpc: ::core::option::Option<Fflapkolhcm>,
    #[prost(message, optional, tag = "11")]
    pub lineup: ::core::option::Option<LineupInfo>,
    #[prost(message, optional, tag = "14")]
    pub ext_info: ::core::option::Option<Ehanapnjfjd>,
    #[prost(message, optional, tag = "3")]
    pub omcbcgchlgn: ::core::option::Option<Bipddejaadc>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kkeiblacbdh {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lkoploodpal {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(message, optional, tag = "10")]
    pub hndlhicdnpc: ::core::option::Option<Pgaldkkfblc>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mcmofblfaja {
    #[prost(message, optional, tag = "11")]
    pub hndlhicdnpc: ::core::option::Option<Llbjabeocec>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fboajckgden {
    #[prost(uint32, tag = "9")]
    pub hhcbjghkcpc: u32,
    #[prost(uint32, tag = "15")]
    pub femgpnlfagc: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hmicabpcdcp {
    #[prost(message, optional, tag = "12")]
    pub kajafnpekaj: ::core::option::Option<Oiaolbgoaag>,
    #[prost(uint32, tag = "14")]
    pub femgpnlfagc: u32,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(uint32, tag = "8")]
    pub hhcbjghkcpc: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Anhjgllfffp {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mpnefikaaod {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(message, optional, tag = "11")]
    pub hndlhicdnpc: ::core::option::Option<Mffkjdndkio>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bhipdeicmhi {
    #[prost(uint32, tag = "15")]
    pub fbceifdkega: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kfdjnnccbip {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(message, optional, tag = "7")]
    pub inacdceaicp: ::core::option::Option<Lpnkmemoobe>,
    #[prost(uint32, tag = "10")]
    pub fbceifdkega: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ilgkmjjpaam {
    #[prost(message, optional, tag = "6")]
    pub boikablfkec: ::core::option::Option<Ccodjoaholb>,
    #[prost(uint32, tag = "3")]
    pub ppjbgnbmkpm: u32,
    #[prost(uint32, repeated, tag = "4")]
    pub ojggmoopgil: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "9")]
    pub pbalfienefo: u32,
    #[prost(message, optional, tag = "2")]
    pub lmgkmaoicgc: ::core::option::Option<Afabkdefddg>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jojnokaglpi {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gpkdbfdbobh {
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(message, optional, tag = "6")]
    pub fhlomgdanjm: ::core::option::Option<Ngpimhhelmm>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Npehjahjepa {
    #[prost(uint32, tag = "2")]
    pub ojeblmkkmgo: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Afnjnbkbabb {
    #[prost(message, optional, tag = "14")]
    pub anagcoddmom: ::core::option::Option<Ffamnkoaihf>,
    #[prost(message, optional, tag = "8")]
    pub fhlomgdanjm: ::core::option::Option<Ngpimhhelmm>,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(bool, tag = "13")]
    pub fgefcefkhmh: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jghadcekfgg {
    #[prost(uint32, repeated, tag = "14")]
    pub base_avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "1")]
    pub prop_entity_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fepoepbdppm {
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "11")]
    pub base_avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "8")]
    pub embagmmhipa: ::core::option::Option<Iegmfgpfadl>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dhdpcoijbgj {
    #[prost(uint32, repeated, tag = "5")]
    pub base_avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "8")]
    pub interacted_prop_entity_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kehiimhchli {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "2")]
    pub base_avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "15")]
    pub fpjckpnlnfm: ::core::option::Option<Ncciejolncf>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Goamhgnkpjm {
    #[prost(message, optional, tag = "2")]
    pub fpjckpnlnfm: ::core::option::Option<Ncciejolncf>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cembppnnhbn {
    #[prost(message, optional, tag = "4")]
    pub aabchfbkpeg: ::core::option::Option<Bcllbmeedkp>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pfdmkaminem {
    #[prost(message, optional, tag = "8")]
    pub aiaonpfbgng: ::core::option::Option<Oaloinnaini>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kckjolhpnee {
    #[prost(enumeration = "Mmkdkdgfblh", tag = "14")]
    pub reason: i32,
    #[prost(enumeration = "Ibmlfggingp", tag = "13")]
    pub eehkfnkhnbi: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hfinffllhoc {
    #[prost(uint32, repeated, tag = "9")]
    pub ingagmmhmjc: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "8")]
    pub eamgahffeco: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dmaghpkhlbo {
    #[prost(message, optional, tag = "6")]
    pub dhdknmfmgbc: ::core::option::Option<Ofphdlopiem>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bolpchmmdhm {
    #[prost(uint32, tag = "3")]
    pub elappcmeloa: u32,
    #[prost(int32, tag = "2")]
    pub icjabpgmacj: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Acienohkcog {
    #[prost(int32, tag = "12")]
    pub cblaememmig: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mllpacppjbb {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChessRogueSkipTeachingLevelScRsp {
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(message, optional, tag = "3")]
    pub skip_reward_list: ::core::option::Option<ItemList>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oapheamiiff {
    #[prost(uint32, repeated, tag = "2")]
    pub cpbmapflplc: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bihdfjfhhma {
    #[prost(uint32, tag = "11")]
    pub prop_entity_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pfjhdblekhd {
    #[prost(message, optional, tag = "4")]
    pub ext_info: ::core::option::Option<Ehanapnjfjd>,
    #[prost(message, optional, tag = "7")]
    pub omcbcgchlgn: ::core::option::Option<Bipddejaadc>,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(message, optional, tag = "9")]
    pub dbdgahblgbb: ::core::option::Option<Ojleefjelap>,
    #[prost(message, optional, tag = "15")]
    pub loddncnpano: ::core::option::Option<Fflapkolhcm>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Apnijkhijdd {
    #[prost(uint32, tag = "6")]
    pub kchfjdajecm: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jbhikppocbh {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(message, optional, tag = "15")]
    pub aiaonpfbgng: ::core::option::Option<Oaloinnaini>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Caeecahoeol {
    #[prost(uint32, tag = "5")]
    pub kchfjdajecm: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fdmlpjglclf {
    #[prost(message, optional, tag = "11")]
    pub aiaonpfbgng: ::core::option::Option<Oaloinnaini>,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kjnflighdii {
    #[prost(uint32, tag = "5")]
    pub eooadpocphd: u32,
    #[prost(uint32, tag = "9")]
    pub kchfjdajecm: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Penoikkihpb {
    #[prost(message, optional, tag = "15")]
    pub aiaonpfbgng: ::core::option::Option<Oaloinnaini>,
    #[prost(uint32, tag = "8")]
    pub eooadpocphd: u32,
    #[prost(uint32, tag = "13")]
    pub nljoldmcgai: u32,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kmfhmgoabip {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ohjanololle {
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(message, optional, tag = "6")]
    pub nkmjhejcolp: ::core::option::Option<ItemList>,
    #[prost(message, optional, tag = "5")]
    pub aiaonpfbgng: ::core::option::Option<Oaloinnaini>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gdaidhnkfcg {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hfghfcgancf {
    #[prost(message, optional, tag = "14")]
    pub ext_info: ::core::option::Option<Ehanapnjfjd>,
    #[prost(message, optional, tag = "2")]
    pub blndmfgkpmj: ::core::option::Option<Jacmenokjfm>,
    #[prost(message, optional, tag = "7")]
    pub lmgkmaoicgc: ::core::option::Option<Afabkdefddg>,
    #[prost(message, optional, tag = "9")]
    pub hndlhicdnpc: ::core::option::Option<Fflapkolhcm>,
    #[prost(message, optional, tag = "5")]
    pub lagbgldlgcb: ::core::option::Option<Ihnjghalkjb>,
    #[prost(message, optional, tag = "1")]
    pub chmhpcngfao: ::core::option::Option<Cjembcbcbkj>,
    #[prost(message, optional, tag = "6")]
    pub boikablfkec: ::core::option::Option<Ccodjoaholb>,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(message, optional, tag = "13")]
    pub omcbcgchlgn: ::core::option::Option<Bipddejaadc>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hieallfplkl {
    #[prost(message, optional, tag = "10")]
    pub lmgkmaoicgc: ::core::option::Option<Afabkdefddg>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fbihahflfgg {
    #[prost(uint32, tag = "14")]
    pub cpbohhbncod: u32,
    #[prost(uint32, tag = "11")]
    pub dnmjhgcgahl: u32,
    #[prost(message, optional, tag = "5")]
    pub anhjnbgielf: ::core::option::Option<Ofphdlopiem>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gpjcddbbmcb {
    #[prost(uint32, tag = "7")]
    pub eamgahffeco: u32,
    #[prost(message, repeated, tag = "6")]
    pub iafbijekkpg: ::prost::alloc::vec::Vec<Mknhikdcjjg>,
    #[prost(enumeration = "Aebjegdpong", tag = "2")]
    pub reason: i32,
    #[prost(enumeration = "Lgmdbcffjof", tag = "5")]
    pub dniibbhllnb: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jgjnndhaaic {
    #[prost(uint32, tag = "4")]
    pub jlfabhhnhcm: u32,
    #[prost(uint32, tag = "8")]
    pub nnjccfeindo: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Aehkpmiehji {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Chncadpnmib {
    #[prost(message, repeated, tag = "9")]
    pub mnhmekkhkna: ::prost::alloc::vec::Vec<Dipmfomgcgl>,
    #[prost(message, repeated, tag = "3")]
    pub idgiahopgaj: ::prost::alloc::vec::Vec<Lahjpfooheb>,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ggidcjddggp {
    #[prost(uint32, tag = "7")]
    pub fahihdjfohm: u32,
    #[prost(uint32, tag = "2")]
    pub ifiijgngogp: u32,
    #[prost(uint32, tag = "14")]
    pub ikmnamkjafa: u32,
    #[prost(uint32, tag = "12")]
    pub ddjpkflbigf: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Imhnnpfbgpi {
    #[prost(uint32, tag = "9")]
    pub ifiijgngogp: u32,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(uint32, tag = "11")]
    pub ikmnamkjafa: u32,
    #[prost(uint32, tag = "5")]
    pub fahihdjfohm: u32,
    #[prost(uint32, tag = "4")]
    pub ddjpkflbigf: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Giefbjhkbok {
    #[prost(uint32, tag = "12")]
    pub ikmnamkjafa: u32,
    #[prost(uint32, tag = "8")]
    pub ifiijgngogp: u32,
    #[prost(uint32, tag = "3")]
    pub fahihdjfohm: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Iejbfanaemo {
    #[prost(uint32, tag = "4")]
    pub fahihdjfohm: u32,
    #[prost(uint32, tag = "15")]
    pub fgomiplmeic: u32,
    #[prost(uint32, tag = "11")]
    pub ifiijgngogp: u32,
    #[prost(uint32, tag = "14")]
    pub ikmnamkjafa: u32,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kgdagpjhbmj {
    #[prost(int32, tag = "4")]
    pub ljffcnbpjdd: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hfeoilgghka {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pedbkmgbgek {
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(message, optional, tag = "14")]
    pub ext_info: ::core::option::Option<Ehanapnjfjd>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cihfecgblcp {
    #[prost(uint32, tag = "7")]
    pub cdjecokfiof: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nehffddbjjp {
    #[prost(uint32, tag = "8")]
    pub cdjecokfiof: u32,
    #[prost(map = "uint32, uint32", tag = "10")]
    pub kjcbneindhl: ::std::collections::HashMap<u32, u32>,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cnfkejpjdci {
    #[prost(uint32, tag = "10")]
    pub kenpckfonok: u32,
    #[prost(uint32, tag = "12")]
    pub fgomiplmeic: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mjghibkocaa {
    #[prost(message, optional, tag = "1")]
    pub ibmioggkbfb: ::core::option::Option<Ocbcbidlllj>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gbeejnbebep {
    #[prost(enumeration = "Cdoegmdjgoc", tag = "8")]
    pub status: i32,
    #[prost(uint32, tag = "13")]
    pub fgomiplmeic: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Diecddgebnb {
    #[prost(uint32, tag = "10")]
    pub ikmnamkjafa: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Clnpfngpjmm {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nljclchnafb {
    #[prost(message, repeated, tag = "15")]
    pub idgiahopgaj: ::prost::alloc::vec::Vec<Gbeejnbebep>,
    #[prost(message, repeated, tag = "4")]
    pub mnhmekkhkna: ::prost::alloc::vec::Vec<Diecddgebnb>,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hcgbmjncjge {
    #[prost(uint32, tag = "7")]
    pub ifiijgngogp: u32,
    #[prost(uint32, tag = "13")]
    pub ikmnamkjafa: u32,
    #[prost(uint32, tag = "8")]
    pub ddjpkflbigf: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Njkghdkicmm {
    #[prost(uint32, tag = "10")]
    pub ddjpkflbigf: u32,
    #[prost(uint32, tag = "3")]
    pub ifiijgngogp: u32,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(uint32, tag = "14")]
    pub ikmnamkjafa: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ellmocgkhlb {
    #[prost(uint32, tag = "3")]
    pub ifiijgngogp: u32,
    #[prost(uint32, tag = "9")]
    pub ikmnamkjafa: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ekmnjgboejf {
    #[prost(uint32, tag = "1")]
    pub ikmnamkjafa: u32,
    #[prost(uint32, tag = "14")]
    pub ifiijgngogp: u32,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Clnnajgnmaf {
    #[prost(uint32, tag = "9")]
    pub ikmnamkjafa: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nggncmhbnpe {
    #[prost(message, repeated, tag = "3")]
    pub idgiahopgaj: ::prost::alloc::vec::Vec<Gbeejnbebep>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Imnpeajajjo {
    #[prost(uint32, tag = "9")]
    pub ffmdbdehheg: u32,
    #[prost(uint32, repeated, tag = "3")]
    pub oblhboeolaf: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "5")]
    pub emllecgepck: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "4")]
    pub ikmnamkjafa: u32,
    #[prost(uint32, repeated, tag = "6")]
    pub ilmookbjhhc: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, tag = "10")]
    pub fjkgkaekbkj: bool,
    #[prost(bool, tag = "12")]
    pub ffheeidbhea: bool,
    #[prost(uint32, tag = "15")]
    pub fgomiplmeic: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hngihjjiaco {
    #[prost(uint32, tag = "12")]
    pub eooadpocphd: u32,
    #[prost(uint32, tag = "10")]
    pub fpnodeepfki: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kjehfkbjphd {
    #[prost(uint32, tag = "3")]
    pub oabliofcofo: u32,
    #[prost(uint32, tag = "4")]
    pub hmkebdlflpg: u32,
    #[prost(uint32, tag = "9")]
    pub dhndampbhpp: u32,
    #[prost(message, repeated, tag = "5")]
    pub igbcacgfckb: ::prost::alloc::vec::Vec<Hngihjjiaco>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dffjcmlaicl {
    #[prost(enumeration = "Faohejiddhj", tag = "15")]
    pub hdmpbpoffdk: i32,
    #[prost(map = "uint32, bool", tag = "7")]
    pub nbcmaknlphg: ::std::collections::HashMap<u32, bool>,
    #[prost(message, repeated, tag = "13")]
    pub alehdaaohoe: ::prost::alloc::vec::Vec<Kjehfkbjphd>,
    #[prost(uint32, repeated, tag = "8")]
    pub jkmimlbajbl: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ajcndbhnlfl {
    #[prost(uint32, tag = "11")]
    pub pofmjblmbji: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lgeljhjomlo {
    #[prost(message, optional, tag = "5")]
    pub jmgipebloge: ::core::option::Option<Imjmgeenceh>,
    #[prost(uint32, tag = "3")]
    pub pofmjblmbji: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Afaghelicpd {
    #[prost(uint32, repeated, tag = "9")]
    pub gihdmhdadon: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gligobejcee {
    #[prost(message, optional, tag = "14")]
    pub bbcpoebnanc: ::core::option::Option<Kjehfkbjphd>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cghihpaiegl {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(message, optional, tag = "15")]
    pub bbcpoebnanc: ::core::option::Option<Kjehfkbjphd>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hpgjgjbceef {
    #[prost(message, optional, tag = "13")]
    pub mbibkhkkefb: ::core::option::Option<Dffjcmlaicl>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Blnhpbnmgnd {
    #[prost(uint32, tag = "14")]
    pub caphiddhlfg: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ckpgainglan {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fffaadgcbio {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(message, optional, tag = "4")]
    pub ckmahdgiboh: ::core::option::Option<Imjmgeenceh>,
    #[prost(uint32, tag = "1")]
    pub pofmjblmbji: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gglphnhlgoa {
    #[prost(uint32, tag = "9")]
    pub fagnlgfjaif: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eonjejpdibh {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(message, optional, tag = "12")]
    pub ckmahdgiboh: ::core::option::Option<Imjmgeenceh>,
    #[prost(uint32, tag = "1")]
    pub pofmjblmbji: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Aacofikdcpl {
    #[prost(uint32, tag = "7")]
    pub ienpelbphdp: u32,
    #[prost(uint32, tag = "11")]
    pub progress: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Odnnkbimefh {
    #[prost(message, repeated, tag = "1")]
    pub keedplpaclp: ::prost::alloc::vec::Vec<Aacofikdcpl>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eadganmjipk {
    #[prost(uint32, repeated, tag = "9")]
    pub ibpfgebmilb: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jcnjdffcldg {
    #[prost(int32, tag = "11")]
    pub hp: i32,
    #[prost(bool, tag = "8")]
    pub jnboonpdoce: bool,
    #[prost(uint32, repeated, tag = "10")]
    pub oopkikmbbhh: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "13")]
    pub keedplpaclp: ::core::option::Option<Odnnkbimefh>,
    #[prost(uint32, tag = "15")]
    pub id: u32,
    #[prost(int32, tag = "12")]
    pub lkeblpijmgb: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mpjdibccohf {
    #[prost(uint32, repeated, tag = "9")]
    pub obcpgobaede: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "4")]
    pub miaiopgiphh: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Difpdplcigd {
    #[prost(uint32, tag = "13")]
    pub jfpnmoonlnj: u32,
    #[prost(uint32, tag = "7")]
    pub goneakbdgek: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jmaanmpanhm {
    #[prost(uint32, tag = "7")]
    pub fpaibldakli: u32,
    #[prost(uint32, tag = "12")]
    pub index: u32,
    #[prost(int32, tag = "14")]
    pub attack: i32,
    #[prost(uint32, tag = "2")]
    pub nhjalpdbogn: u32,
    #[prost(uint32, tag = "11")]
    pub clpmibdfpjc: u32,
    #[prost(uint32, tag = "10")]
    pub noeimmhckpm: u32,
    #[prost(int32, tag = "13")]
    pub hp: i32,
    #[prost(uint32, tag = "6")]
    pub nkoffbmhapi: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Egdghfllmgn {
    #[prost(uint32, tag = "6")]
    pub bclnmidffoh: u32,
    #[prost(uint32, tag = "13")]
    pub lcjhgdjdeng: u32,
    #[prost(uint32, tag = "15")]
    pub cfijipchhgo: u32,
    #[prost(uint32, tag = "4")]
    pub khkfkdnbhpe: u32,
    #[prost(uint32, tag = "12")]
    pub total_damage: u32,
    #[prost(uint32, tag = "11")]
    pub total_turns: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Chdkepcoknk {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dplgegijcef {
    #[prost(uint32, tag = "871")]
    pub kilpnhjbpdb: u32,
    #[prost(uint32, tag = "4")]
    pub lfkfocjfncj: u32,
    #[prost(uint32, tag = "13")]
    pub eaiojcnlmng: u32,
    #[prost(uint32, tag = "1")]
    pub cjekjhpibjl: u32,
    #[prost(uint32, tag = "1929")]
    pub olldkajoajd: u32,
    #[prost(message, optional, tag = "3")]
    pub lineup: ::core::option::Option<Mpjdibccohf>,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(enumeration = "Oapdmkkkeol", tag = "15")]
    pub bbmgiimecel: i32,
    #[prost(uint32, tag = "7")]
    pub jfpnmoonlnj: u32,
    #[prost(uint32, tag = "1877")]
    pub cagaplnhabb: u32,
    #[prost(uint32, tag = "8")]
    pub gbemdnckkba: u32,
    #[prost(message, repeated, tag = "6")]
    pub kiimkaeajal: ::prost::alloc::vec::Vec<Jcnjdffcldg>,
    #[prost(message, repeated, tag = "14")]
    pub ncdaoblmhhp: ::prost::alloc::vec::Vec<Difpdplcigd>,
    #[prost(uint32, tag = "5")]
    pub cjkcnhclmgd: u32,
    #[prost(uint32, tag = "53")]
    pub cpbdbaidaeh: u32,
    #[prost(uint32, tag = "12")]
    pub bbbgkchnock: u32,
    #[prost(uint32, tag = "11")]
    pub ijeiommfpka: u32,
    #[prost(uint32, repeated, tag = "2")]
    pub mfafnncjjng: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nhennnbhlca {
    #[prost(message, optional, tag = "2")]
    pub lineup: ::core::option::Option<Mpjdibccohf>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Igcademmokk {
    #[prost(message, optional, tag = "11")]
    pub lineup: ::core::option::Option<Mpjdibccohf>,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bkhcmdinfjn {
    #[prost(bool, tag = "3")]
    pub molidikifgb: bool,
    #[prost(enumeration = "Biakdfeljfm", tag = "7")]
    pub hbgclmcgnfm: i32,
    #[prost(map = "uint32, message", tag = "6")]
    pub mlbaljkcmcg: ::std::collections::HashMap<u32, Odnnkbimefh>,
    #[prost(uint32, repeated, tag = "2")]
    pub hgodgdeaajo: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "1")]
    pub stt: ::core::option::Option<Egdghfllmgn>,
    #[prost(message, optional, tag = "8")]
    pub lineup: ::core::option::Option<Mpjdibccohf>,
    #[prost(map = "uint32, uint32", tag = "9")]
    pub bahhnmlhalj: ::std::collections::HashMap<u32, u32>,
    #[prost(message, repeated, tag = "4")]
    pub opamaeijcoh: ::prost::alloc::vec::Vec<Jmaanmpanhm>,
    #[prost(uint32, tag = "11")]
    pub hjoeamdlbpl: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mbpcamjpkma {
    #[prost(message, repeated, tag = "9")]
    pub goiakpgjlcb: ::prost::alloc::vec::Vec<Jcnjdffcldg>,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(uint32, tag = "14")]
    pub eaiojcnlmng: u32,
    #[prost(map = "uint32, message", tag = "13")]
    pub nahpkppmdkk: ::std::collections::HashMap<u32, Odnnkbimefh>,
    #[prost(enumeration = "Oapdmkkkeol", tag = "3")]
    pub bbmgiimecel: i32,
    #[prost(uint32, tag = "6")]
    pub ijeiommfpka: u32,
    #[prost(uint32, tag = "4")]
    pub jfpnmoonlnj: u32,
    #[prost(uint32, repeated, tag = "7")]
    pub mfafnncjjng: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "12")]
    pub olldkajoajd: u32,
    #[prost(enumeration = "Biakdfeljfm", tag = "1")]
    pub hbgclmcgnfm: i32,
    #[prost(uint32, tag = "5")]
    pub cjkcnhclmgd: u32,
    #[prost(map = "uint32, message", tag = "10")]
    pub ghkgcfclabf: ::std::collections::HashMap<u32, Eadganmjipk>,
    #[prost(message, repeated, tag = "2")]
    pub ncdaoblmhhp: ::prost::alloc::vec::Vec<Difpdplcigd>,
    #[prost(bool, tag = "8")]
    pub molidikifgb: bool,
    #[prost(bool, tag = "11")]
    pub jieifdocohe: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Amcagdkfnla {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Aifmpigkcgp {
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Imaacgndedk {
    #[prost(message, repeated, tag = "14")]
    pub opamaeijcoh: ::prost::alloc::vec::Vec<Jmaanmpanhm>,
    #[prost(bool, tag = "12")]
    pub pahmagpfddj: bool,
    #[prost(uint32, tag = "11")]
    pub cpbdbaidaeh: u32,
    #[prost(uint32, repeated, tag = "9")]
    pub hgodgdeaajo: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "13")]
    pub stt: ::core::option::Option<Egdghfllmgn>,
    #[prost(message, optional, tag = "10")]
    pub lineup: ::core::option::Option<Mpjdibccohf>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fkgecnedfjb {
    #[prost(uint32, tag = "8")]
    pub gbemdnckkba: u32,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(uint32, tag = "12")]
    pub aebjngimhcj: u32,
    #[prost(message, repeated, tag = "15")]
    pub igagibnelck: ::prost::alloc::vec::Vec<Jcnjdffcldg>,
    #[prost(uint32, tag = "3")]
    pub cpbdbaidaeh: u32,
    #[prost(bool, tag = "5")]
    pub pahmagpfddj: bool,
    #[prost(uint32, tag = "11")]
    pub lfkfocjfncj: u32,
    #[prost(uint32, tag = "10")]
    pub bbbgkchnock: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gigmkhmonpi {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hapejpncicf {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lcbcpiphimn {
    #[prost(message, optional, tag = "5")]
    pub lineup: ::core::option::Option<Mpjdibccohf>,
    #[prost(message, optional, tag = "13")]
    pub stt: ::core::option::Option<Egdghfllmgn>,
    #[prost(bool, tag = "1")]
    pub pahmagpfddj: bool,
    #[prost(uint32, repeated, tag = "6")]
    pub hgodgdeaajo: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "4")]
    pub cpbdbaidaeh: u32,
    #[prost(message, repeated, tag = "15")]
    pub opamaeijcoh: ::prost::alloc::vec::Vec<Jmaanmpanhm>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Clkgpdaiame {
    #[prost(message, repeated, tag = "7")]
    pub ncdaoblmhhp: ::prost::alloc::vec::Vec<Difpdplcigd>,
    #[prost(uint32, tag = "15")]
    pub olldkajoajd: u32,
    #[prost(uint32, tag = "8")]
    pub cagaplnhabb: u32,
    #[prost(message, repeated, tag = "4")]
    pub igagibnelck: ::prost::alloc::vec::Vec<Jcnjdffcldg>,
    #[prost(bool, tag = "5")]
    pub pahmagpfddj: bool,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(uint32, tag = "3")]
    pub cpbdbaidaeh: u32,
    #[prost(uint32, tag = "9")]
    pub eaiojcnlmng: u32,
    #[prost(uint32, tag = "14")]
    pub index: u32,
    #[prost(uint32, tag = "12")]
    pub jfpnmoonlnj: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hmlgepfnkdj {
    #[prost(uint32, tag = "13")]
    pub mdfeekikbmj: u32,
    #[prost(message, optional, tag = "12")]
    pub lineup: ::core::option::Option<Mpjdibccohf>,
    #[prost(message, repeated, tag = "11")]
    pub opamaeijcoh: ::prost::alloc::vec::Vec<Jmaanmpanhm>,
    #[prost(uint32, tag = "5")]
    pub flgjpheopaa: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mkgbdladhnk {
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Phnfmmbjabg {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nlljbbcjiam {
    #[prost(uint32, tag = "14")]
    pub clkeoehplng: u32,
    #[prost(uint32, repeated, tag = "9")]
    pub odogfhenjep: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ffopblnlpgi {
    #[prost(uint32, tag = "3")]
    pub gfadcahlkfp: u32,
    #[prost(uint32, repeated, tag = "2")]
    pub ibjpcofdlji: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "15")]
    pub progress: u32,
    #[prost(message, repeated, tag = "12")]
    pub bnfhfhefmem: ::prost::alloc::vec::Vec<Nlljbbcjiam>,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(uint32, tag = "13")]
    pub ediajgcbpfo: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pohkpbobjea {
    #[prost(uint32, tag = "11")]
    pub fagnlgfjaif: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Epoolckmmkb {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(uint32, tag = "5")]
    pub fagnlgfjaif: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ikmeofedgfd {
    #[prost(uint32, repeated, tag = "8")]
    pub jmojeoalclo: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "13")]
    pub clkeoehplng: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Eldbjpogeif {
    #[prost(uint32, tag = "1")]
    pub clkeoehplng: u32,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hmodipbdamg {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lnihjdaildj {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Accbigfanoa {
    #[prost(uint32, repeated, tag = "1")]
    pub pneoolflnlk: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "3")]
    pub hplkcinapmf: u32,
    #[prost(uint32, tag = "4")]
    pub bjkhpadclhi: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hdckchpdmmi {
    #[prost(message, repeated, tag = "6")]
    pub fodpdmpband: ::prost::alloc::vec::Vec<Accbigfanoa>,
    #[prost(uint32, repeated, tag = "11")]
    pub pneoolflnlk: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nnccfpoockh {
    #[prost(message, optional, tag = "2")]
    pub ancpcpcljed: ::core::option::Option<Hdckchpdmmi>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Machndhamnm {
    #[prost(message, optional, tag = "6")]
    pub ancpcpcljed: ::core::option::Option<Hdckchpdmmi>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ifbdbdccopo {
    #[prost(message, optional, tag = "12")]
    pub ancpcpcljed: ::core::option::Option<Hdckchpdmmi>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Glijklooapa {
    #[prost(message, optional, tag = "11")]
    pub ancpcpcljed: ::core::option::Option<Hdckchpdmmi>,
    #[prost(uint32, tag = "8")]
    pub ecfagnkdaef: u32,
    #[prost(uint32, tag = "7")]
    pub gacha_random: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Anbankmlclh {
    #[prost(message, optional, tag = "11")]
    pub ancpcpcljed: ::core::option::Option<Hdckchpdmmi>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Eppnkgolaap {
    #[prost(bool, tag = "11")]
    pub bgdoijphfdb: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lkbbkojddpd {
    #[prost(uint32, tag = "9")]
    pub ahidjbjggpp: u32,
    #[prost(oneof = "lkbbkojddpd::Nkpnkgiahip", tags = "1, 13, 15, 5, 10, 12, 6, 7")]
    pub nkpnkgiahip: ::core::option::Option<lkbbkojddpd::Nkpnkgiahip>,
}
/// Nested message and enum types in `LKBBKOJDDPD`.
pub mod lkbbkojddpd {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Nkpnkgiahip {
        #[prost(message, tag = "1")]
        Pnimpjfilgf(super::Lnihjdaildj),
        #[prost(message, tag = "13")]
        Dhleejmiimo(super::Nnccfpoockh),
        #[prost(message, tag = "15")]
        Oeofnnbljik(super::Machndhamnm),
        #[prost(message, tag = "5")]
        Gpbgdcmjhln(super::Ifbdbdccopo),
        #[prost(message, tag = "10")]
        Lnkpgggkmnk(super::Glijklooapa),
        #[prost(message, tag = "12")]
        Aenefmcbfgm(super::Anbankmlclh),
        #[prost(message, tag = "6")]
        Bciighioapl(super::Eppnkgolaap),
        #[prost(bool, tag = "7")]
        Gneooaifkib(bool),
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bmlofpcngkn {
    #[prost(int32, tag = "4")]
    pub djfhcddifmi: i32,
    #[prost(int32, tag = "8")]
    pub ihlhdpnaekc: i32,
    #[prost(int32, tag = "9")]
    pub ofcndemappl: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ioncppdejej {
    #[prost(uint32, tag = "6")]
    pub feonehhcjjm: u32,
    #[prost(uint32, tag = "9")]
    pub buff_id: u32,
    #[prost(uint64, tag = "10")]
    pub unique_id: u64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ecmilhckomo {
    #[prost(message, repeated, tag = "1")]
    pub buff_list: ::prost::alloc::vec::Vec<Ioncppdejej>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ehpcjhhnfaj {
    #[prost(uint32, tag = "6")]
    pub chobaogmlfn: u32,
    #[prost(string, tag = "10")]
    pub cmgkeolcbip: ::prost::alloc::string::String,
    #[prost(uint32, tag = "9")]
    pub obpfblnbfki: u32,
    #[prost(uint32, tag = "12")]
    pub aigehhnhkpm: u32,
    #[prost(uint32, tag = "14")]
    pub clkeoehplng: u32,
    #[prost(message, optional, tag = "11")]
    pub ienphefangl: ::core::option::Option<Lkbbkojddpd>,
    #[prost(message, optional, tag = "1")]
    pub lgopnbhhhbg: ::core::option::Option<Ecmilhckomo>,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(uint32, tag = "3")]
    pub kiekjeffphk: u32,
    #[prost(message, optional, tag = "7")]
    pub mjdogpbojip: ::core::option::Option<Bmlofpcngkn>,
    #[prost(uint32, repeated, tag = "8")]
    pub eidlleolfgm: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "4")]
    pub blhgbednfib: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Obnonmhmeck {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ffomibncfki {
    #[prost(message, optional, tag = "13")]
    pub ancpcpcljed: ::core::option::Option<Hdckchpdmmi>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ajehamdabna {
    #[prost(bool, tag = "9")]
    pub is_win: bool,
    #[prost(uint32, tag = "7")]
    pub omddfkmaape: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Amghdcabjmj {
    #[prost(uint32, repeated, tag = "13")]
    pub avatar_id_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Innnicfolii {
    #[prost(bool, tag = "6")]
    pub jcnodamfffc: bool,
    #[prost(uint32, tag = "8")]
    pub gacha_random: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ceoonflondj {
    #[prost(uint32, tag = "13")]
    pub omddfkmaape: u32,
    #[prost(bool, tag = "2")]
    pub is_win: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Helnoihmdha {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Elghhakokpb {
    #[prost(uint32, tag = "7")]
    pub ahidjbjggpp: u32,
    #[prost(uint32, tag = "10")]
    pub clkeoehplng: u32,
    #[prost(oneof = "elghhakokpb::Nomemjfhdib", tags = "9, 8, 3, 1, 13, 2, 5, 11")]
    pub nomemjfhdib: ::core::option::Option<elghhakokpb::Nomemjfhdib>,
}
/// Nested message and enum types in `ELGHHAKOKPB`.
pub mod elghhakokpb {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Nomemjfhdib {
        #[prost(message, tag = "9")]
        Jfbckclpako(super::Obnonmhmeck),
        #[prost(message, tag = "8")]
        Ipikflcefla(super::Ffomibncfki),
        #[prost(message, tag = "3")]
        Megnbbfilnl(super::Ajehamdabna),
        #[prost(message, tag = "1")]
        Abkkdhapchn(super::Amghdcabjmj),
        #[prost(message, tag = "13")]
        Lihjmeingik(super::Innnicfolii),
        #[prost(message, tag = "2")]
        Lmgglcncdhf(super::Ceoonflondj),
        #[prost(message, tag = "5")]
        Fngfoaepfjn(super::Helnoihmdha),
        #[prost(uint32, tag = "11")]
        Obpfblnbfki(u32),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mdjlojfmemc {
    #[prost(bool, tag = "5")]
    pub kfdaicilnmb: bool,
    #[prost(uint32, tag = "7")]
    pub clkeoehplng: u32,
    #[prost(bool, tag = "15")]
    pub eeehghkocji: bool,
    #[prost(message, optional, tag = "1")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "10")]
    pub kiekjeffphk: u32,
    #[prost(uint32, tag = "6")]
    pub aigehhnhkpm: u32,
    #[prost(uint32, tag = "12")]
    pub progress: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lbgjoelcnhc {
    #[prost(enumeration = "ClockParkPlayStatus", tag = "12")]
    pub jfkdbmdomnk: i32,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(message, optional, tag = "6")]
    pub battle_info: ::core::option::Option<SceneBattleInfo>,
    #[prost(uint32, tag = "8")]
    pub ficfgdnhnge: u32,
    #[prost(uint32, tag = "5")]
    pub ahidjbjggpp: u32,
    #[prost(uint32, tag = "3")]
    pub koijfoffjnj: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Haeogljflge {
    #[prost(uint32, tag = "8")]
    pub clkeoehplng: u32,
    #[prost(bool, tag = "5")]
    pub khnhpgdeimm: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fapagkjibaj {
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ljmihcbeglj {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(uint32, tag = "9")]
    pub ahidjbjggpp: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Akigddcahol {
    #[prost(uint32, tag = "9")]
    pub clkeoehplng: u32,
    #[prost(uint32, tag = "5")]
    pub ahidjbjggpp: u32,
    #[prost(uint64, tag = "15")]
    pub unique_id: u64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Leoedaodjnm {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(message, optional, tag = "11")]
    pub lgopnbhhhbg: ::core::option::Option<Ecmilhckomo>,
    #[prost(uint32, tag = "12")]
    pub clkeoehplng: u32,
    #[prost(uint32, tag = "5")]
    pub ahidjbjggpp: u32,
    #[prost(oneof = "leoedaodjnm::Ifllbcfgbdm", tags = "1454, 1653")]
    pub ifllbcfgbdm: ::core::option::Option<leoedaodjnm::Ifllbcfgbdm>,
}
/// Nested message and enum types in `LEOEDAODJNM`.
pub mod leoedaodjnm {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Ifllbcfgbdm {
        #[prost(message, tag = "1454")]
        Ancpcpcljed(super::Hdckchpdmmi),
        #[prost(message, tag = "1653")]
        Mjdogpbojip(super::Bmlofpcngkn),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gfggjllcnib {
    #[prost(message, optional, tag = "11")]
    pub jippgkhkkbg: ::core::option::Option<Mdjlojfmemc>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Item {
    #[prost(uint32, tag = "6")]
    pub promotion: u32,
    #[prost(uint32, tag = "1")]
    pub main_affix_id: u32,
    #[prost(uint32, tag = "8")]
    pub unique_id: u32,
    #[prost(uint32, tag = "5")]
    pub rank: u32,
    #[prost(uint32, tag = "7")]
    pub item_id: u32,
    #[prost(uint32, tag = "14")]
    pub level: u32,
    #[prost(uint32, tag = "13")]
    pub num: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ItemList {
    #[prost(message, repeated, tag = "7")]
    pub item_list: ::prost::alloc::vec::Vec<Item>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PileItem {
    #[prost(uint32, tag = "11")]
    pub item_id: u32,
    #[prost(uint32, tag = "5")]
    pub item_num: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ItemCost {
    #[prost(oneof = "item_cost::ItemCase", tags = "6, 13, 9")]
    pub item_case: ::core::option::Option<item_cost::ItemCase>,
}
/// Nested message and enum types in `ItemCost`.
pub mod item_cost {
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum ItemCase {
        #[prost(message, tag = "6")]
        PileItem(super::PileItem),
        #[prost(uint32, tag = "13")]
        EquipmentUniqueId(u32),
        #[prost(uint32, tag = "9")]
        RelicUniqueId(u32),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ItemCostData {
    #[prost(message, repeated, tag = "4")]
    pub item_list: ::prost::alloc::vec::Vec<ItemCost>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Iekhjdecape {
    #[prost(uint32, tag = "3")]
    pub item_id: u32,
    #[prost(uint32, tag = "12")]
    pub mbejblfhcbh: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Akcpalgemol {
    #[prost(uint32, tag = "3")]
    pub promotion: u32,
    #[prost(uint32, tag = "12")]
    pub tid: u32,
    #[prost(uint32, tag = "2")]
    pub exp: u32,
    #[prost(uint32, tag = "13")]
    pub level: u32,
    #[prost(uint32, tag = "14")]
    pub rank: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nhdbofcfcjm {
    #[prost(uint32, tag = "5")]
    pub exp: u32,
    #[prost(message, repeated, tag = "13")]
    pub sub_affix_list: ::prost::alloc::vec::Vec<RelicAffix>,
    #[prost(uint32, tag = "1")]
    pub level: u32,
    #[prost(uint32, tag = "14")]
    pub main_affix_id: u32,
    #[prost(uint32, tag = "11")]
    pub tid: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ndhopedofoc {
    #[prost(oneof = "ndhopedofoc::Lagnobaolij", tags = "6, 13, 14")]
    pub lagnobaolij: ::core::option::Option<ndhopedofoc::Lagnobaolij>,
}
/// Nested message and enum types in `NDHOPEDOFOC`.
pub mod ndhopedofoc {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Lagnobaolij {
        #[prost(message, tag = "6")]
        Oekhngffgkb(super::Iekhjdecape),
        #[prost(message, tag = "13")]
        Adeoigebmdf(super::Akcpalgemol),
        #[prost(message, tag = "14")]
        Fhgafcjcaoa(super::Nhdbofcfcjm),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Aodidfnpicf {
    #[prost(message, repeated, tag = "3")]
    pub item_list: ::prost::alloc::vec::Vec<Ndhopedofoc>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Vector {
    #[prost(sint32, tag = "1")]
    pub z: i32,
    #[prost(sint32, tag = "11")]
    pub y: i32,
    #[prost(sint32, tag = "15")]
    pub x: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MotionInfo {
    #[prost(message, optional, tag = "2")]
    pub pos: ::core::option::Option<Vector>,
    #[prost(message, optional, tag = "12")]
    pub rot: ::core::option::Option<Vector>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RotateVector {
    #[prost(float, tag = "9")]
    pub x: f32,
    #[prost(float, tag = "13")]
    pub y: f32,
    #[prost(float, tag = "14")]
    pub z: f32,
    #[prost(float, tag = "8")]
    pub rotate: f32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SceneMonsterWaveParam {
    #[prost(uint32, tag = "13")]
    pub level: u32,
    #[prost(uint32, tag = "1")]
    pub elite_group: u32,
    #[prost(uint32, tag = "7")]
    pub hard_level_group: u32,
    #[prost(uint32, tag = "11")]
    pub dneampllfme: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SceneMonsterData {
    #[prost(uint32, tag = "15")]
    pub monster_id: u32,
    #[prost(uint32, tag = "1")]
    pub max_hp: u32,
    #[prost(uint32, tag = "12")]
    pub cur_hp: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SceneMonsterWave {
    #[prost(message, optional, tag = "5")]
    pub wave_param: ::core::option::Option<SceneMonsterWaveParam>,
    #[prost(message, repeated, tag = "4")]
    pub monster_list: ::prost::alloc::vec::Vec<SceneMonsterData>,
    #[prost(uint32, tag = "2")]
    pub battle_wave_id: u32,
    #[prost(uint32, tag = "1")]
    pub battle_stage_id: u32,
    #[prost(message, repeated, tag = "13")]
    pub jcdljghhaof: ::prost::alloc::vec::Vec<ItemList>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SceneBattleInfo {
    #[prost(message, optional, tag = "1839")]
    pub ajgpjglpmio: ::core::option::Option<Ljgiaglfhhc>,
    #[prost(uint32, tag = "1")]
    pub stage_id: u32,
    #[prost(message, repeated, tag = "9")]
    pub monster_wave_list: ::prost::alloc::vec::Vec<SceneMonsterWave>,
    #[prost(message, repeated, tag = "8")]
    pub buff_list: ::prost::alloc::vec::Vec<BattleBuff>,
    #[prost(message, repeated, tag = "2")]
    pub battle_avatar_list: ::prost::alloc::vec::Vec<BattleAvatar>,
    #[prost(uint32, tag = "5")]
    pub world_level: u32,
    #[prost(message, optional, tag = "929")]
    pub jpgifchjdlk: ::core::option::Option<EvolveBuildBattleInfo>,
    #[prost(uint32, tag = "12")]
    pub ddogjokeccl: u32,
    #[prost(uint32, tag = "15")]
    pub cycle_count: u32,
    #[prost(message, optional, tag = "909")]
    pub battle_rogue_magic_info: ::core::option::Option<BattleRogueMagicInfo>,
    #[prost(map = "uint32, message", tag = "1568")]
    pub battle_target_info: ::std::collections::HashMap<u32, BattleTargetList>,
    #[prost(uint32, tag = "7")]
    pub battle_id: u32,
    #[prost(uint32, tag = "10")]
    pub logic_random_seed: u32,
    #[prost(message, repeated, tag = "131")]
    pub battle_event: ::prost::alloc::vec::Vec<BattleEventBattleInfo>,
    #[prost(bool, tag = "11")]
    pub nbckfdgmfdb: bool,
    #[prost(message, optional, tag = "363")]
    pub mfkjokajjmj: ::core::option::Option<Gieibeacbao>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AetherDivideBattleInfo {
    #[prost(uint32, tag = "15")]
    pub logic_random_seed: u32,
    #[prost(message, repeated, tag = "2")]
    pub battle_avatar_list: ::prost::alloc::vec::Vec<AetherAvatarInfo>,
    #[prost(message, repeated, tag = "7")]
    pub buff_list: ::prost::alloc::vec::Vec<BattleBuff>,
    #[prost(bool, tag = "3")]
    pub nbckfdgmfdb: bool,
    #[prost(message, repeated, tag = "11")]
    pub monster_wave_list: ::prost::alloc::vec::Vec<SceneMonsterWave>,
    #[prost(uint32, tag = "12")]
    pub stage_id: u32,
    #[prost(uint32, tag = "14")]
    pub battle_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Phhkombgppk {
    #[prost(enumeration = "AvatarType", tag = "6")]
    pub avatar_type: i32,
    #[prost(uint32, tag = "4")]
    pub id: u32,
    #[prost(uint32, tag = "2")]
    pub assist_uid: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ContentPackageGetDataCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ContentPackageGetDataScRsp {
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(message, optional, tag = "6")]
    pub data: ::core::option::Option<ContentPackageData>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ContentPackageInfo {
    #[prost(enumeration = "ContentPackageStatus", tag = "6")]
    pub status: i32,
    #[prost(uint32, tag = "11")]
    pub content_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ContentPackageData {
    #[prost(message, repeated, tag = "1")]
    pub content_package_list: ::prost::alloc::vec::Vec<ContentPackageInfo>,
    #[prost(uint32, tag = "10")]
    pub cur_content_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ContentPackageSyncDataScNotify {
    #[prost(message, optional, tag = "4")]
    pub data: ::core::option::Option<ContentPackageData>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ContentPackageUnlockCsReq {
    #[prost(uint32, tag = "1")]
    pub content_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ContentPackageUnlockScRsp {
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(uint32, tag = "12")]
    pub content_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ContentPackageTransferScNotify {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Okghenaiogm {
    #[prost(uint32, tag = "8")]
    pub world_level: u32,
    #[prost(bool, tag = "13")]
    pub nopmeniafjm: bool,
    #[prost(uint32, tag = "9")]
    pub iimjclbopnc: u32,
    #[prost(uint32, tag = "5")]
    pub level: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Klejancikig {
    #[prost(uint32, tag = "13")]
    pub level: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dfanchbchgc {
    #[prost(uint32, tag = "2")]
    pub level: u32,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(message, optional, tag = "4")]
    pub reward: ::core::option::Option<ItemList>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ekgdcaicjph {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Copnlckmlec {
    #[prost(message, repeated, tag = "2")]
    pub ihoellgbbkn: ::prost::alloc::vec::Vec<Okghenaiogm>,
    #[prost(uint32, repeated, tag = "15")]
    pub mbibabkianf: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(uint32, tag = "12")]
    pub iimjclbopnc: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Blobjajflkh {
    #[prost(message, repeated, tag = "3")]
    pub ihoellgbbkn: ::prost::alloc::vec::Vec<Okghenaiogm>,
    #[prost(uint32, tag = "6")]
    pub iimjclbopnc: u32,
    #[prost(uint32, repeated, tag = "2")]
    pub mbibabkianf: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hpajnlokjna {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kjeclepjjce {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "6")]
    pub fbkccpkieia: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "3")]
    pub reward: ::core::option::Option<ItemList>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DrinkMakerGuest {
    #[prost(uint32, tag = "3")]
    pub faith: u32,
    #[prost(uint32, repeated, tag = "8")]
    pub unlocked_favor_tag_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "13")]
    pub guest_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eekfecdihje {
    #[prost(uint32, tag = "14")]
    pub odmphfaniee: u32,
    #[prost(uint32, repeated, tag = "7")]
    pub dbpgefglfjj: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "13")]
    pub jiblnlhcnkd: u32,
    #[prost(uint32, tag = "6")]
    pub kidbbfghecn: u32,
    #[prost(uint32, tag = "12")]
    pub dgppffkihoc: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mflpamafjnc {
    #[prost(uint32, tag = "11")]
    pub kcfpiecmgbd: u32,
    #[prost(bool, tag = "2")]
    pub fgefcefkhmh: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cilojnnlnfk {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ahkikihjoop {
    #[prost(message, optional, tag = "11")]
    pub boinombhpcl: ::core::option::Option<Eekfecdihje>,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(uint32, tag = "4")]
    pub hepalniojnp: u32,
    #[prost(message, repeated, tag = "15")]
    pub pjkibodpcki: ::prost::alloc::vec::Vec<DrinkMakerGuest>,
    #[prost(uint32, repeated, tag = "14")]
    pub pcnnpejegef: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "7")]
    pub level: u32,
    #[prost(uint32, tag = "3")]
    pub amefgbicgdi: u32,
    #[prost(uint32, tag = "12")]
    pub dhakofagdof: u32,
    #[prost(uint32, tag = "6")]
    pub eaolmhoaaml: u32,
    #[prost(uint32, tag = "2")]
    pub exp: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kbfohkhkanj {
    #[prost(uint32, tag = "1")]
    pub eaolmhoaaml: u32,
    #[prost(message, optional, tag = "2")]
    pub lpmcgnjlbgd: ::core::option::Option<Eekfecdihje>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MakeDrinkScRsp {
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(uint32, tag = "3")]
    pub next_chat_id: u32,
    #[prost(bool, tag = "8")]
    pub is_succ: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mibameigmed {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EndDrinkMakerSequenceScRsp {
    #[prost(uint32, tag = "13")]
    pub level: u32,
    #[prost(uint32, tag = "6")]
    pub exp: u32,
    #[prost(message, repeated, tag = "1")]
    pub request_list: ::prost::alloc::vec::Vec<Mflpamafjnc>,
    #[prost(message, optional, tag = "3")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(message, optional, tag = "12")]
    pub guest: ::core::option::Option<DrinkMakerGuest>,
    #[prost(uint32, tag = "10")]
    pub tips: u32,
    #[prost(uint32, tag = "7")]
    pub next_sequence_id: u32,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ohigldppjhi {
    #[prost(bool, tag = "3")]
    pub jgeaegmhdoc: bool,
    #[prost(uint32, tag = "15")]
    pub kcfpiecmgbd: u32,
    #[prost(message, optional, tag = "13")]
    pub lpmcgnjlbgd: ::core::option::Option<Eekfecdihje>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MakeMissionDrinkScRsp {
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(bool, tag = "15")]
    pub is_save: bool,
    #[prost(bool, tag = "4")]
    pub is_succ: bool,
    #[prost(message, optional, tag = "6")]
    pub custom_drink: ::core::option::Option<Eekfecdihje>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dldnkdikpbo {
    #[prost(uint32, tag = "11")]
    pub ecilicnolfn: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Miggmondlho {
    #[prost(message, optional, tag = "8")]
    pub lpmcgnjlbgd: ::core::option::Option<Eekfecdihje>,
    #[prost(uint32, tag = "15")]
    pub challenge_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bkmieaddanj {
    #[prost(bool, tag = "12")]
    pub fgefcefkhmh: bool,
    #[prost(message, optional, tag = "4")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "6")]
    pub challenge_id: u32,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Keahblfmmab {
    #[prost(uint32, tag = "7")]
    pub amefgbicgdi: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Goahfmlpdmf {
    #[prost(uint32, tag = "8")]
    pub state: u32,
    #[prost(uint32, tag = "11")]
    pub acnpbbnlmie: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kkeaenndmkb {
    #[prost(message, repeated, tag = "6")]
    pub ndpgblaaghk: ::prost::alloc::vec::Vec<Goahfmlpdmf>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ifbieekfdjm {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mgogbdbokfb {
    #[prost(message, optional, tag = "1")]
    pub data: ::core::option::Option<Kkeaenndmkb>,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Aamkepipngo {
    #[prost(message, optional, tag = "9")]
    pub data: ::core::option::Option<Kkeaenndmkb>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mehgknjpoje {
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(message, optional, tag = "4")]
    pub data: ::core::option::Option<Kkeaenndmkb>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fffnnialano {
    #[prost(bool, tag = "15")]
    pub pahmagpfddj: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jiojijlggod {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(bool, tag = "5")]
    pub pahmagpfddj: bool,
    #[prost(message, optional, tag = "4")]
    pub data: ::core::option::Option<Kkeaenndmkb>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mcdhiajanih {
    #[prost(uint32, tag = "9")]
    pub state: u32,
    #[prost(uint32, tag = "13")]
    pub acnpbbnlmie: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cepmioimpap {
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(uint32, tag = "14")]
    pub acnpbbnlmie: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jppimnmmjfb {
    #[prost(message, optional, tag = "12")]
    pub data: ::core::option::Option<Kkeaenndmkb>,
    #[prost(uint32, tag = "1")]
    pub floor_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EvolveBuildAvatar {
    #[prost(double, tag = "1")]
    pub damage: f64,
    #[prost(enumeration = "AvatarType", tag = "3")]
    pub avatar_type: i32,
    #[prost(uint32, tag = "4")]
    pub avatar_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EvolveBuildLevelInfo {
    #[prost(uint32, tag = "4")]
    pub cur_game_exp: u32,
    #[prost(uint32, repeated, tag = "13")]
    pub period_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "2")]
    pub round_cnt: u32,
    #[prost(message, optional, tag = "6")]
    pub battle_info: ::core::option::Option<EvolveBuildBattleInfo>,
    #[prost(message, repeated, tag = "5")]
    pub avatar_list: ::prost::alloc::vec::Vec<EvolveBuildAvatar>,
    #[prost(message, repeated, tag = "11")]
    pub battle_target_list: ::prost::alloc::vec::Vec<BattleTarget>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ceenlalpdmk {
    #[prost(uint32, tag = "12")]
    pub acjcphifmln: u32,
    #[prost(uint32, tag = "5")]
    pub ceadmdamhmo: u32,
    #[prost(uint32, tag = "4")]
    pub max_score: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Imgjiebfgpf {
    #[prost(uint32, tag = "7")]
    pub level: u32,
    #[prost(uint32, tag = "4")]
    pub neciljojgan: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ecmmjllhpmd {
    #[prost(uint32, tag = "13")]
    pub acjcphifmln: u32,
    #[prost(bool, tag = "12")]
    pub cadmfghaljg: bool,
    #[prost(uint32, repeated, tag = "14")]
    pub lgdniigephh: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, tag = "8")]
    pub najohihmabc: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pdicnbbkfnp {
    #[prost(uint32, tag = "6")]
    pub cpiogjkfech: u32,
    #[prost(uint32, tag = "7")]
    pub eodgcnafiac: u32,
    #[prost(message, repeated, tag = "10")]
    pub klgheccbhcg: ::prost::alloc::vec::Vec<Ceenlalpdmk>,
    #[prost(uint32, repeated, tag = "2")]
    pub fjocdkifppc: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "4")]
    pub cokdnpeemag: ::prost::alloc::vec::Vec<Imgjiebfgpf>,
    #[prost(bool, tag = "8")]
    pub dehghedinih: bool,
    #[prost(uint32, repeated, tag = "9")]
    pub lmeljcifbdf: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "5")]
    pub exp: u32,
    #[prost(message, repeated, tag = "11")]
    pub lcjnndgkidp: ::prost::alloc::vec::Vec<Ecmmjllhpmd>,
    #[prost(bool, tag = "12")]
    pub oofhjahfidh: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lamifjcnfhh {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Khdhbjjeokb {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(message, optional, tag = "6")]
    pub lmgkmaoicgc: ::core::option::Option<EvolveBuildLevelInfo>,
    #[prost(message, optional, tag = "8")]
    pub omcbcgchlgn: ::core::option::Option<Pdicnbbkfnp>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dnhbalahpbg {
    #[prost(message, repeated, tag = "7")]
    pub avatar_list: ::prost::alloc::vec::Vec<EvolveBuildAvatar>,
    #[prost(message, optional, tag = "2")]
    pub jiapjhdlfbj: ::core::option::Option<Kpkkkjpjcpc>,
    #[prost(uint32, tag = "4")]
    pub acjcphifmln: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bfiepmapcme {
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(message, optional, tag = "3")]
    pub nopheehjhek: ::core::option::Option<SceneBattleInfo>,
    #[prost(message, optional, tag = "11")]
    pub lmgkmaoicgc: ::core::option::Option<EvolveBuildLevelInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Leagcogmojm {
    #[prost(uint32, tag = "14")]
    pub acjcphifmln: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fbeaphbaifp {
    #[prost(message, optional, tag = "6")]
    pub nopheehjhek: ::core::option::Option<SceneBattleInfo>,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(message, optional, tag = "5")]
    pub lmgkmaoicgc: ::core::option::Option<EvolveBuildLevelInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bcgilddniih {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Menhndfmfkl {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(message, optional, tag = "14")]
    pub lmgkmaoicgc: ::core::option::Option<EvolveBuildLevelInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kjhbepojjco {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Haediejidgc {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(message, optional, tag = "4")]
    pub lmgkmaoicgc: ::core::option::Option<EvolveBuildLevelInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EvolveBuildFinishScNotify {
    #[prost(uint32, tag = "6")]
    pub coin: u32,
    #[prost(uint32, tag = "15")]
    pub score: u32,
    #[prost(uint32, tag = "10")]
    pub wave: u32,
    #[prost(uint32, tag = "1")]
    pub cur_period_type: u32,
    #[prost(bool, tag = "7")]
    pub is_lose: bool,
    #[prost(enumeration = "Dlhcmcnihii", tag = "2")]
    pub battle_result_type: i32,
    #[prost(uint32, tag = "3")]
    pub exp: u32,
    #[prost(message, optional, tag = "5")]
    pub level_info: ::core::option::Option<EvolveBuildLevelInfo>,
    #[prost(uint32, tag = "9")]
    pub level_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bkbipbbobio {
    #[prost(uint32, tag = "13")]
    pub acjcphifmln: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bpknbkmpcfg {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(message, optional, tag = "5")]
    pub jgpbflccijp: ::core::option::Option<Ecmmjllhpmd>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ienkmeclnjm {
    #[prost(uint32, tag = "1")]
    pub level: u32,
    #[prost(uint32, tag = "2")]
    pub neciljojgan: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Epfgdipdkao {
    #[prost(uint32, tag = "3")]
    pub level: u32,
    #[prost(uint32, tag = "15")]
    pub neciljojgan: u32,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jkbpdbkbnhb {
    #[prost(uint32, tag = "12")]
    pub level: u32,
    #[prost(uint32, tag = "2")]
    pub neciljojgan: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mffcjhklkbp {
    #[prost(uint32, tag = "3")]
    pub level: u32,
    #[prost(uint32, tag = "7")]
    pub neciljojgan: u32,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jnmglofjjpm {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Leajajbimio {
    #[prost(uint32, tag = "2")]
    pub eodgcnafiac: u32,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(message, optional, tag = "4")]
    pub reward: ::core::option::Option<ItemList>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pbkjmdmflnn {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nmglnolfpmi {
    #[prost(message, repeated, tag = "14")]
    pub cokdnpeemag: ::prost::alloc::vec::Vec<Imgjiebfgpf>,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(uint32, tag = "7")]
    pub cpiogjkfech: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ihnihbpekdk {
    #[prost(uint32, tag = "12")]
    pub cpiogjkfech: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Aljhgdganbp {
    #[prost(bool, tag = "11")]
    pub dehghedinih: bool,
    #[prost(bool, tag = "4")]
    pub oofhjahfidh: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fjibdhhohmh {
    #[prost(uint32, repeated, tag = "15")]
    pub avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(int64, tag = "4")]
    pub ponadanoaln: i64,
    #[prost(uint32, tag = "14")]
    pub id: u32,
    #[prost(uint32, tag = "11")]
    pub aoedghmhgjj: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kimnfbjceol {
    #[prost(uint32, tag = "7")]
    pub ojfnlmhmlof: u32,
    #[prost(uint32, repeated, tag = "11")]
    pub avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(int64, tag = "12")]
    pub ponadanoaln: i64,
    #[prost(uint32, tag = "10")]
    pub ipgeclelhgj: u32,
    #[prost(uint32, tag = "6")]
    pub id: u32,
    #[prost(uint32, tag = "2")]
    pub fnggnbmofaa: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Oiekbhihcij {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oghfhdgnkek {
    #[prost(uint32, tag = "5")]
    pub dipkgomgmoa: u32,
    #[prost(uint32, repeated, tag = "9")]
    pub fjgimkepjob: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "11")]
    pub fnalloldglm: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "6")]
    pub jfjpadlalmd: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "15")]
    pub pageieobhbp: ::prost::alloc::vec::Vec<Fjibdhhohmh>,
    #[prost(message, repeated, tag = "12")]
    pub hjbkdbmgmbd: ::prost::alloc::vec::Vec<Kimnfbjceol>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kpeccfngjkh {
    #[prost(message, optional, tag = "15")]
    pub pmhmlhlfgae: ::core::option::Option<Fjibdhhohmh>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mkoobkeonfo {
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(message, optional, tag = "3")]
    pub pmhmlhlfgae: ::core::option::Option<Fjibdhhohmh>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bkpnmekhabd {
    #[prost(message, repeated, tag = "1")]
    pub egnpoofacdb: ::prost::alloc::vec::Vec<Fjibdhhohmh>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jbjjbmlbaee {
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "7")]
    pub ohhgihlnepk: ::prost::alloc::vec::Vec<Fjibdhhohmh>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mllmldeonpd {
    #[prost(uint32, tag = "10")]
    pub nnmlockecka: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ckfboebnofj {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(uint32, tag = "8")]
    pub nnmlockecka: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cicaaoniklp {
    #[prost(uint32, tag = "15")]
    pub nnmlockecka: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mjapihceojm {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(message, optional, tag = "9")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "10")]
    pub nnmlockecka: u32,
    #[prost(message, optional, tag = "7")]
    pub pehcdfaeefk: ::core::option::Option<ItemList>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Klpcgcinmkc {
    #[prost(uint32, repeated, tag = "15")]
    pub ijajdhkgnkl: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ikdcpjgpifk {
    #[prost(uint32, repeated, tag = "9")]
    pub pppbklohckk: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(message, optional, tag = "3")]
    pub pehcdfaeefk: ::core::option::Option<ItemList>,
    #[prost(message, repeated, tag = "12")]
    pub lfbfmochjbl: ::prost::alloc::vec::Vec<ItemList>,
    #[prost(message, repeated, tag = "8")]
    pub lblidldbobm: ::prost::alloc::vec::Vec<ItemList>,
    #[prost(message, optional, tag = "1")]
    pub reward: ::core::option::Option<ItemList>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bodeambdfdh {
    #[prost(uint32, tag = "1")]
    pub dipkgomgmoa: u32,
    #[prost(uint32, repeated, tag = "12")]
    pub fnalloldglm: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "10")]
    pub pageieobhbp: ::prost::alloc::vec::Vec<Fjibdhhohmh>,
    #[prost(uint32, repeated, tag = "4")]
    pub jfjpadlalmd: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "8")]
    pub hjbkdbmgmbd: ::prost::alloc::vec::Vec<Kimnfbjceol>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mpihhibdoho {
    #[prost(message, optional, tag = "3")]
    pub lgkjlfjgoje: ::core::option::Option<Kimnfbjceol>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Omdobpbpola {
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(message, optional, tag = "8")]
    pub lgkjlfjgoje: ::core::option::Option<Kimnfbjceol>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jmfihjaimad {
    #[prost(uint32, tag = "12")]
    pub mpgemlglhbh: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lnbbelacoid {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(uint32, tag = "2")]
    pub mpgemlglhbh: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pnoehdkcdcp {
    #[prost(uint32, tag = "7")]
    pub mpgemlglhbh: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Loamimdljnc {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(message, optional, tag = "15")]
    pub pehcdfaeefk: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "10")]
    pub score_id: u32,
    #[prost(message, optional, tag = "9")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "13")]
    pub mpgemlglhbh: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mafgcpmgaii {
    #[prost(uint32, repeated, tag = "11")]
    pub gomdmnhmmnh: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mmnjmingahj {
    #[prost(uint32, tag = "1")]
    pub mpgemlglhbh: u32,
    #[prost(message, optional, tag = "13")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "4")]
    pub score_id: u32,
    #[prost(message, optional, tag = "12")]
    pub pehcdfaeefk: ::core::option::Option<ItemList>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Acbfofdkofj {
    #[prost(uint32, repeated, tag = "3")]
    pub jieeelikijm: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "9")]
    pub cdndfceedco: ::prost::alloc::vec::Vec<Mmnjmingahj>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gcaiemmcpdh {
    #[prost(message, repeated, tag = "15")]
    pub avatar_list: ::prost::alloc::vec::Vec<Kjmfeockcml>,
    #[prost(uint32, repeated, tag = "11")]
    pub buff_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fhblgmpmiie {
    #[prost(uint32, repeated, tag = "3")]
    pub njngbpjemcl: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "2")]
    pub hkmmnfghfpb: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "11")]
    pub edhnakfofgj: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "1")]
    pub bejcaldilnc: u32,
    #[prost(map = "uint32, uint32", tag = "14")]
    pub jgajkoefgpc: ::std::collections::HashMap<u32, u32>,
    #[prost(map = "uint32, message", tag = "15")]
    pub gblooeppgdm: ::std::collections::HashMap<u32, Gcaiemmcpdh>,
    #[prost(uint32, repeated, tag = "13")]
    pub amdhncjjoph: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cljepfdchon {
    #[prost(uint32, tag = "13")]
    pub bejcaldilnc: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Naojjabocoj {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(message, optional, tag = "7")]
    pub fpepicfcffm: ::core::option::Option<Fhblgmpmiie>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bfbbjfnlfdf {
    #[prost(message, optional, tag = "3")]
    pub fpepicfcffm: ::core::option::Option<Fhblgmpmiie>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kjmfeockcml {
    #[prost(uint32, tag = "1")]
    pub equip_avatar_id: u32,
    #[prost(enumeration = "AvatarType", tag = "6")]
    pub avatar_type: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lahjhnkhpmd {
    #[prost(uint32, tag = "6")]
    pub bejcaldilnc: u32,
    #[prost(message, repeated, tag = "1")]
    pub avatar_list: ::prost::alloc::vec::Vec<Kjmfeockcml>,
    #[prost(uint32, tag = "7")]
    pub battle_id: u32,
    #[prost(uint32, repeated, tag = "8")]
    pub buff_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mchenfgfknn {
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(uint32, tag = "12")]
    pub bejcaldilnc: u32,
    #[prost(uint32, tag = "9")]
    pub battle_id: u32,
    #[prost(message, optional, tag = "15")]
    pub battle_info: ::core::option::Option<SceneBattleInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Aojiaeakebh {
    #[prost(uint32, tag = "9")]
    pub bejcaldilnc: u32,
    #[prost(uint32, tag = "3")]
    pub battle_id: u32,
    #[prost(uint32, tag = "6")]
    pub pkklpbbnnce: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Okcndieklpm {
    #[prost(uint32, tag = "15")]
    pub nlpklpccjpl: u32,
    #[prost(uint32, tag = "10")]
    pub jbolaafdkan: u32,
    #[prost(enumeration = "Pmnfdjcllgb", tag = "11")]
    pub plikadkklgd: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Oimckjdffke {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fgenjlkfaan {
    #[prost(message, repeated, tag = "11")]
    pub caaejfijidj: ::prost::alloc::vec::Vec<Okcndieklpm>,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kgmmhkfpjmg {
    #[prost(uint32, tag = "11")]
    pub id: u32,
    #[prost(uint32, tag = "12")]
    pub hoehiobiiej: u32,
    #[prost(enumeration = "Pmnfdjcllgb", tag = "13")]
    pub lfjkkfgpkdm: i32,
    #[prost(uint32, tag = "4")]
    pub fhfmfmlllgd: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ihbfkmbmbee {
    #[prost(uint32, tag = "6")]
    pub ffinmbacahh: u32,
    #[prost(uint32, tag = "15")]
    pub gcjeicifjgi: u32,
    #[prost(message, repeated, tag = "13")]
    pub avatar_list: ::prost::alloc::vec::Vec<FeverTimeAvatar>,
    #[prost(uint32, tag = "5")]
    pub id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bjahjogmend {
    #[prost(message, optional, tag = "8")]
    pub battle_info: ::core::option::Option<SceneBattleInfo>,
    #[prost(uint32, tag = "12")]
    pub id: u32,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ioencafkenl {
    #[prost(uint32, tag = "13")]
    pub icmfpnpijjf: u32,
    #[prost(uint64, tag = "3")]
    pub kpkdnmdajgl: u64,
    #[prost(uint32, tag = "8")]
    pub fgojlpaejec: u32,
    #[prost(string, tag = "7")]
    pub aokcmmpfgbc: ::prost::alloc::string::String,
    #[prost(uint32, tag = "5")]
    pub uid: u32,
    #[prost(uint32, tag = "1")]
    pub client_res_version: u32,
    #[prost(uint32, tag = "4")]
    pub mkiniofgiag: u32,
    #[prost(uint32, tag = "6")]
    pub platform: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Afcpbfpggei {
    #[prost(uint64, tag = "4")]
    pub secret_key_seed: u64,
    #[prost(bool, tag = "7")]
    pub jlpkeobincp: bool,
    #[prost(uint32, tag = "9")]
    pub mkiniofgiag: u32,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(uint64, tag = "5")]
    pub server_timestamp_ms: u64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Nbmhofjapjo {
    #[prost(uint32, tag = "6")]
    pub cagjmmmfdli: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fkggcdcilnb {
    #[prost(enumeration = "FightKickoutType", tag = "15")]
    pub kick_type: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ejlifajiaef {
    #[prost(uint64, tag = "5")]
    pub client_time_ms: u64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fokgafgkbhj {
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(uint64, tag = "10")]
    pub server_time_ms: u64,
    #[prost(uint64, tag = "1")]
    pub client_time_ms: u64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gnfgcanglhj {
    #[prost(message, optional, tag = "12")]
    pub pfffjngnpom: ::core::option::Option<Ppggkmdaoea>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FightActivityGroup {
    #[prost(uint32, tag = "4")]
    pub passed_max_difficulty_level: u32,
    #[prost(uint32, repeated, tag = "15")]
    pub taken_difficulty_level_reward_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "7")]
    pub endless_max_wave: u32,
    #[prost(uint32, tag = "10")]
    pub group_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ngcdafkkfpc {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hckimjdgkig {
    #[prost(map = "uint32, uint32", tag = "2")]
    pub dgnfcmdjopa: ::std::collections::HashMap<u32, u32>,
    #[prost(bool, tag = "10")]
    pub kaiompfbgkl: bool,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "12")]
    pub jkhifdghjdo: ::prost::alloc::vec::Vec<FightActivityGroup>,
    #[prost(uint32, tag = "11")]
    pub world_level: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Obiegbgbaci {
    #[prost(message, repeated, tag = "6")]
    pub jkhifdghjdo: ::prost::alloc::vec::Vec<FightActivityGroup>,
    #[prost(map = "uint32, uint32", tag = "8")]
    pub dgnfcmdjopa: ::std::collections::HashMap<u32, u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Npedhhcklia {
    #[prost(enumeration = "AvatarType", tag = "15")]
    pub avatar_type: i32,
    #[prost(uint32, tag = "10")]
    pub equip_avatar_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ggfjfhpncej {
    #[prost(uint32, repeated, tag = "7")]
    pub avatar_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "6")]
    pub nedfibonlkb: u32,
    #[prost(uint32, tag = "9")]
    pub group_id: u32,
    #[prost(message, repeated, tag = "11")]
    pub fopnlgbgagh: ::prost::alloc::vec::Vec<Npedhhcklia>,
    #[prost(uint32, repeated, tag = "1")]
    pub item_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hpkcegkmpoi {
    #[prost(uint32, tag = "2")]
    pub group_id: u32,
    #[prost(uint32, tag = "14")]
    pub nedfibonlkb: u32,
    #[prost(message, optional, tag = "8")]
    pub battle_info: ::core::option::Option<SceneBattleInfo>,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Plllpghmpnf {
    #[prost(uint32, tag = "1")]
    pub group_id: u32,
    #[prost(uint32, tag = "15")]
    pub nedfibonlkb: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ejhmpnbejlg {
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(uint32, tag = "1")]
    pub nedfibonlkb: u32,
    #[prost(uint32, tag = "9")]
    pub group_id: u32,
    #[prost(message, optional, tag = "15")]
    pub reward: ::core::option::Option<ItemList>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Iklnilkpena {
    #[prost(uint32, tag = "4")]
    pub aeieojgcmmo: u32,
    #[prost(uint32, tag = "2")]
    pub challenge_id: u32,
    #[prost(uint32, tag = "10")]
    pub jbolaafdkan: u32,
    #[prost(enumeration = "Hgdapjpkffb", tag = "3")]
    pub plikadkklgd: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Opidgkkkbfp {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cknpnlgpapp {
    #[prost(message, repeated, tag = "4")]
    pub challenge_list: ::prost::alloc::vec::Vec<Iklnilkpena>,
    #[prost(uint32, tag = "1")]
    pub cpiogjkfech: u32,
    #[prost(uint32, tag = "15")]
    pub score_id: u32,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "6")]
    pub mfgonhjgipp: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Afodmejodlg {
    #[prost(uint32, tag = "14")]
    pub id: u32,
    #[prost(enumeration = "AvatarType", tag = "15")]
    pub avatar_type: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Iegcihaemfk {
    #[prost(uint32, repeated, tag = "9")]
    pub mfgonhjgipp: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "5")]
    pub id: u32,
    #[prost(uint32, tag = "7")]
    pub event_id: u32,
    #[prost(message, repeated, tag = "15")]
    pub avatar_list: ::prost::alloc::vec::Vec<Afodmejodlg>,
    #[prost(enumeration = "Aploagdibki", tag = "13")]
    pub r#type: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jdjajjgbgha {
    #[prost(uint32, tag = "11")]
    pub id: u32,
    #[prost(uint32, tag = "3")]
    pub event_id: u32,
    #[prost(message, optional, tag = "6")]
    pub battle_info: ::core::option::Option<SceneBattleInfo>,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(enumeration = "Aploagdibki", tag = "1")]
    pub r#type: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Eeglbgdiilh {
    #[prost(uint32, tag = "8")]
    pub score_id: u32,
    #[prost(uint32, tag = "13")]
    pub gnpkpljlabm: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dkggejbdfbo {
    #[prost(uint32, tag = "14")]
    pub ejjehjmmbgj: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Embljkgddmb {
    #[prost(uint32, tag = "13")]
    pub challenge_id: u32,
    #[prost(enumeration = "Hgdapjpkffb", tag = "6")]
    pub fkpepbmjhkn: i32,
    #[prost(uint32, tag = "1")]
    pub hoehiobiiej: u32,
    #[prost(enumeration = "Hgdapjpkffb", tag = "2")]
    pub rank: i32,
    #[prost(uint32, tag = "11")]
    pub jbolaafdkan: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Odliioleiak {
    #[prost(uint32, tag = "11")]
    pub cpiogjkfech: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mekdnikfdna {
    #[prost(uint32, tag = "10")]
    pub ognepbfpilh: u32,
    #[prost(uint32, tag = "5")]
    pub score_id: u32,
    #[prost(uint32, tag = "7")]
    pub rank: u32,
    #[prost(uint32, tag = "9")]
    pub ldnbeidjbhi: u32,
    #[prost(bool, tag = "11")]
    pub hnjfffjdgne: bool,
    #[prost(uint32, tag = "6")]
    pub nmlffogbpoc: u32,
    #[prost(enumeration = "Nppnfppenmc", tag = "3")]
    pub state: i32,
    #[prost(uint32, tag = "1")]
    pub hp: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kldmjemimcn {
    #[prost(uint64, tag = "8")]
    pub mcokhhfpbpj: u64,
    #[prost(uint32, tag = "9")]
    pub danccaojljn: u32,
    #[prost(message, optional, tag = "14")]
    pub mejdmjikimo: ::core::option::Option<Mdohafbeepk>,
    #[prost(enumeration = "Dgfcbofaoia", tag = "7")]
    pub jgibhfjmobe: i32,
    #[prost(int32, tag = "15")]
    pub hcbbhckjnji: i32,
    #[prost(message, repeated, tag = "3")]
    pub cpkpincceip: ::prost::alloc::vec::Vec<Mekdnikfdna>,
    #[prost(uint32, repeated, tag = "1")]
    pub hbanccokofc: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jjaepdihcnl {
    #[prost(uint32, tag = "15")]
    pub heckmdlolag: u32,
    #[prost(uint32, tag = "6")]
    pub fpbedncocho: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mdohafbeepk {
    #[prost(uint32, tag = "2")]
    pub najlpnlnoje: u32,
    #[prost(uint32, tag = "1")]
    pub midejnjcaia: u32,
    #[prost(message, optional, tag = "3")]
    pub niaeghjlnmb: ::core::option::Option<Cdimemfjjfp>,
    #[prost(uint32, tag = "7")]
    pub fgnhlhedlpn: u32,
    #[prost(uint32, repeated, tag = "15")]
    pub aihmghajgkj: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "11")]
    pub pkdpiemgibe: u32,
    #[prost(enumeration = "Nppnfppenmc", tag = "12")]
    pub kjpmohfiilo: i32,
    #[prost(uint32, tag = "5")]
    pub gdfndpmjdaf: u32,
    #[prost(uint32, tag = "14")]
    pub score_id: u32,
    #[prost(uint32, tag = "8")]
    pub anhfjkepcgf: u32,
    #[prost(uint32, tag = "9")]
    pub cur_hp: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Egcddlkhfeb {
    #[prost(enumeration = "Bfilliobmfn", tag = "5")]
    pub olkndfjbdgj: i32,
    #[prost(message, optional, tag = "7")]
    pub mlpcfgdafnd: ::core::option::Option<Mdohafbeepk>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jgmoepghemc {
    #[prost(int32, tag = "8")]
    pub edibbbklghj: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hlmojiffmbm {
    #[prost(message, optional, tag = "15")]
    pub data: ::core::option::Option<Kldmjemimcn>,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "4")]
    pub lipjdjpmokb: ::prost::alloc::vec::Vec<Cbbdiomifhd>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hjklkelkond {
    #[prost(message, optional, tag = "14")]
    pub data: ::core::option::Option<Kldmjemimcn>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Efpiplgfiob {
    #[prost(message, optional, tag = "8")]
    pub hkpodflgcdj: ::core::option::Option<Kldmjemimcn>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Magecdjbpaj {
    #[prost(message, optional, tag = "3")]
    pub hiklobgicmp: ::core::option::Option<Kldmjemimcn>,
    #[prost(message, optional, tag = "5")]
    pub cinlcmhhkko: ::core::option::Option<Kldmjemimcn>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Galeopdomkg {
    #[prost(message, optional, tag = "13")]
    pub phnldpokbkl: ::core::option::Option<Jjaepdihcnl>,
    #[prost(message, repeated, tag = "10")]
    pub eckkblnelbm: ::prost::alloc::vec::Vec<Egcddlkhfeb>,
    #[prost(message, optional, tag = "2")]
    pub feclglbfidh: ::core::option::Option<Jjaepdihcnl>,
    #[prost(uint32, tag = "11")]
    pub bblblafighm: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cdoajimlmgm {
    #[prost(uint32, tag = "4")]
    pub bblblafighm: u32,
    #[prost(message, optional, tag = "5")]
    pub chmaonmmegm: ::core::option::Option<Mdohafbeepk>,
    #[prost(bool, tag = "13")]
    pub pgmgmjdilcl: bool,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Poggjholgej {
    #[prost(enumeration = "Nppnfppenmc", tag = "14")]
    pub state: i32,
    #[prost(uint32, tag = "6")]
    pub hp: u32,
    #[prost(uint32, tag = "7")]
    pub score_id: u32,
    #[prost(uint32, tag = "10")]
    pub nmlffogbpoc: u32,
    #[prost(uint32, tag = "3")]
    pub danccaojljn: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ielofcnmafk {
    #[prost(uint32, tag = "9")]
    pub habdkbfmkee: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hfcokmnpcdc {
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(uint32, tag = "7")]
    pub habdkbfmkee: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hepakjbnhhf {
    #[prost(uint32, tag = "2")]
    pub habdkbfmkee: u32,
    #[prost(uint32, tag = "3")]
    pub egkpfgnjahn: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kpifkjhiejk {
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<Kldmjemimcn>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AssistSimpleInfo {
    #[prost(uint32, tag = "2")]
    pub avatar_id: u32,
    #[prost(uint32, tag = "1")]
    pub pos: u32,
    #[prost(uint32, tag = "15")]
    pub dressed_skin_id: u32,
    #[prost(uint32, tag = "9")]
    pub level: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ihkgnjdnalj {
    #[prost(uint32, tag = "8")]
    pub fccdilggoci: u32,
    #[prost(uint32, tag = "7")]
    pub jgmipmdppij: u32,
    #[prost(uint32, tag = "2")]
    pub khcnajokjhj: u32,
    #[prost(uint32, tag = "15")]
    pub group_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kpiglopemcf {
    #[prost(uint32, tag = "4")]
    pub ijhlojefcpm: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Phhliogfdek {
    #[prost(uint32, repeated, tag = "4")]
    pub capiccciebo: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "14")]
    pub ijhlojefcpm: u32,
    #[prost(uint32, tag = "2")]
    pub ofgbjcccike: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bcpdfipomap {
    #[prost(message, optional, tag = "1")]
    pub lbhjehfjlnf: ::core::option::Option<Phhliogfdek>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Obihngmnkek {
    #[prost(oneof = "obihngmnkek::Hnioehohnjg", tags = "4, 3")]
    pub hnioehohnjg: ::core::option::Option<obihngmnkek::Hnioehohnjg>,
}
/// Nested message and enum types in `OBIHNGMNKEK`.
pub mod obihngmnkek {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Hnioehohnjg {
        #[prost(message, tag = "4")]
        Loonehfnapc(super::Kpiglopemcf),
        #[prost(message, tag = "3")]
        Daopohamomf(super::Bcpdfipomap),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hiejjbdncnh {
    #[prost(message, optional, tag = "13")]
    pub jfpcpdcflmd: ::core::option::Option<Obihngmnkek>,
    #[prost(message, optional, tag = "2")]
    pub eboomgdgnep: ::core::option::Option<Ihkgnjdnalj>,
    #[prost(enumeration = "BattleRecordType", tag = "3")]
    pub fgmgpljckpc: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayerSimpleInfo {
    #[prost(uint32, tag = "11")]
    pub padmhpngpno: u32,
    #[prost(uint32, tag = "15")]
    pub head_icon: u32,
    #[prost(enumeration = "FriendOnlineStatus", tag = "7")]
    pub online_status: i32,
    #[prost(uint32, tag = "14")]
    pub level: u32,
    #[prost(uint32, tag = "9")]
    pub uid: u32,
    #[prost(string, tag = "1")]
    pub gmalcpnohbf: ::prost::alloc::string::String,
    #[prost(string, tag = "12")]
    pub nickname: ::prost::alloc::string::String,
    #[prost(bool, tag = "5")]
    pub is_banned: bool,
    #[prost(enumeration = "PlatformType", tag = "8")]
    pub platform: i32,
    #[prost(string, tag = "6")]
    pub akcejfcfban: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "10")]
    pub assist_simple_info_list: ::prost::alloc::vec::Vec<AssistSimpleInfo>,
    #[prost(string, tag = "3")]
    pub signature: ::prost::alloc::string::String,
    #[prost(int64, tag = "4")]
    pub last_active_time: i64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DisplayEquipmentInfo {
    #[prost(uint32, tag = "8")]
    pub tid: u32,
    #[prost(uint32, tag = "13")]
    pub rank: u32,
    #[prost(uint32, tag = "5")]
    pub exp: u32,
    #[prost(uint32, tag = "1")]
    pub promotion: u32,
    #[prost(uint32, tag = "12")]
    pub level: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DisplayRelicInfo {
    #[prost(uint32, tag = "3")]
    pub r#type: u32,
    #[prost(message, repeated, tag = "6")]
    pub sub_affix_list: ::prost::alloc::vec::Vec<RelicAffix>,
    #[prost(uint32, tag = "1")]
    pub level: u32,
    #[prost(uint32, tag = "7")]
    pub tid: u32,
    #[prost(uint32, tag = "2")]
    pub exp: u32,
    #[prost(uint32, tag = "13")]
    pub main_affix_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DisplayAvatarDetailInfo {
    #[prost(uint32, tag = "6")]
    pub pos: u32,
    #[prost(uint32, tag = "8")]
    pub promotion: u32,
    #[prost(uint32, tag = "15")]
    pub exp: u32,
    #[prost(message, optional, tag = "3")]
    pub equipment: ::core::option::Option<DisplayEquipmentInfo>,
    #[prost(message, repeated, tag = "5")]
    pub relic_list: ::prost::alloc::vec::Vec<DisplayRelicInfo>,
    #[prost(message, repeated, tag = "1")]
    pub skilltree_list: ::prost::alloc::vec::Vec<AvatarSkillTree>,
    #[prost(uint32, tag = "4")]
    pub level: u32,
    #[prost(uint32, tag = "12")]
    pub avatar_id: u32,
    #[prost(uint32, tag = "9")]
    pub rank: u32,
    #[prost(uint32, tag = "2")]
    pub dressed_skin_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PlayerCollectionInfo {
    #[prost(uint32, tag = "3")]
    pub pgcdmmnncjc: u32,
    #[prost(uint32, tag = "8")]
    pub pjcjnkbeimk: u32,
    #[prost(uint32, tag = "1")]
    pub ljpekedicml: u32,
    #[prost(uint32, tag = "15")]
    pub bdbmikdjlko: u32,
    #[prost(uint32, tag = "11")]
    pub nljifekdphn: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PlayerRecordInfo {
    #[prost(uint32, tag = "3")]
    pub bhfefeodnim: u32,
    #[prost(uint32, tag = "4")]
    pub hknoakgcjbk: u32,
    #[prost(uint32, tag = "5")]
    pub emjdebdmhll: u32,
    #[prost(message, optional, tag = "2")]
    pub kfjcngbhagk: ::core::option::Option<PlayerCollectionInfo>,
    #[prost(uint32, tag = "10")]
    pub jfpgbkbpbnf: u32,
    #[prost(uint32, tag = "13")]
    pub cfdfmgllico: u32,
    #[prost(uint32, tag = "15")]
    pub fhkkmpddmgo: u32,
    #[prost(uint32, tag = "6")]
    pub gekkndonhlj: u32,
    #[prost(uint32, tag = "12")]
    pub ehbdeijjohk: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fkjcpkocblg {
    #[prost(bool, tag = "5")]
    pub kjncckhjfhe: bool,
    #[prost(bool, tag = "11")]
    pub njfmiljofok: bool,
    #[prost(bool, tag = "13")]
    pub aponeidmphl: bool,
    #[prost(bool, tag = "15")]
    pub pbkbglhhkpe: bool,
    #[prost(bool, tag = "12")]
    pub aicnfaobcpi: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Knhlnlngahp {
    #[prost(message, repeated, tag = "4")]
    pub challenge_list: ::prost::alloc::vec::Vec<Ihkgnjdnalj>,
    #[prost(message, optional, tag = "2")]
    pub jfpcpdcflmd: ::core::option::Option<Obihngmnkek>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayerDetailInfo {
    #[prost(string, tag = "4")]
    pub gmalcpnohbf: ::prost::alloc::string::String,
    #[prost(bool, tag = "13")]
    pub emobijbdkei: bool,
    #[prost(message, optional, tag = "1880")]
    pub fdfpgmioimm: ::core::option::Option<Fkjcpkocblg>,
    #[prost(uint32, tag = "7")]
    pub head_icon: u32,
    #[prost(enumeration = "PlatformType", tag = "2")]
    pub platform: i32,
    #[prost(uint32, tag = "3")]
    pub kbmgbninfbk: u32,
    #[prost(uint32, tag = "6")]
    pub uid: u32,
    #[prost(message, repeated, tag = "1226")]
    pub jolegcamflm: ::prost::alloc::vec::Vec<DisplayAvatarDetailInfo>,
    #[prost(uint32, tag = "1")]
    pub level: u32,
    #[prost(uint32, tag = "9")]
    pub ooopbhimnfd: u32,
    #[prost(string, tag = "5")]
    pub nickname: ::prost::alloc::string::String,
    #[prost(uint32, tag = "14")]
    pub world_level: u32,
    #[prost(string, tag = "11")]
    pub akcejfcfban: ::prost::alloc::string::String,
    #[prost(string, tag = "12")]
    pub signature: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "158")]
    pub onkhlhojhgn: ::core::option::Option<Knhlnlngahp>,
    #[prost(bool, tag = "15")]
    pub is_banned: bool,
    #[prost(message, optional, tag = "8")]
    pub holalcipknk: ::core::option::Option<PlayerRecordInfo>,
    #[prost(message, repeated, tag = "10")]
    pub bakellbbcma: ::prost::alloc::vec::Vec<DisplayAvatarDetailInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FriendInfo {
    #[prost(message, optional, tag = "10")]
    pub player_simple_info: ::core::option::Option<PlayerSimpleInfo>,
    #[prost(message, optional, tag = "3")]
    pub ilchajcffbf: ::core::option::Option<Hiejjbdncnh>,
    #[prost(bool, tag = "7")]
    pub is_marked: bool,
    #[prost(int64, tag = "4")]
    pub timestamp: i64,
    #[prost(enumeration = "PlayingState", tag = "13")]
    pub playing_state: i32,
    #[prost(string, tag = "6")]
    pub remark_name: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FriendApplyInfo {
    #[prost(message, optional, tag = "8")]
    pub player_simple_info: ::core::option::Option<PlayerSimpleInfo>,
    #[prost(int64, tag = "10")]
    pub lffcmnahbdp: i64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FriendRecommendInfo {
    #[prost(bool, tag = "6")]
    pub jholblpeglj: bool,
    #[prost(message, optional, tag = "9")]
    pub player_simple_info: ::core::option::Option<PlayerSimpleInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayerAssistInfo {
    #[prost(message, optional, tag = "2")]
    pub assist_avatar: ::core::option::Option<DisplayAvatarDetailInfo>,
    #[prost(message, optional, tag = "1")]
    pub player_simple_info: ::core::option::Option<PlayerSimpleInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Flcmjahgkfk {
    #[prost(string, tag = "6")]
    pub nickname: ::prost::alloc::string::String,
    #[prost(uint32, tag = "13")]
    pub uid: u32,
    #[prost(string, tag = "9")]
    pub gmalcpnohbf: ::prost::alloc::string::String,
    #[prost(uint32, tag = "14")]
    pub nppphgfenph: u32,
    #[prost(enumeration = "PlatformType", tag = "15")]
    pub platform: i32,
    #[prost(string, tag = "7")]
    pub remark_name: ::prost::alloc::string::String,
    #[prost(uint32, tag = "10")]
    pub head_icon: u32,
    #[prost(uint32, tag = "5")]
    pub level: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fcnollfgpck {
    #[prost(string, tag = "2")]
    pub remark_name: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub player_simple_info: ::core::option::Option<PlayerSimpleInfo>,
    #[prost(uint32, tag = "11")]
    pub score_id: u32,
    #[prost(uint32, tag = "1")]
    pub inhddnnpbdb: u32,
    #[prost(message, repeated, tag = "10")]
    pub lineup_list: ::prost::alloc::vec::Vec<ChallengeLineupList>,
    #[prost(uint32, tag = "4")]
    pub buff_one: u32,
    #[prost(uint32, tag = "5")]
    pub buff_two: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Chkiicnapha {
    #[prost(uint32, tag = "9")]
    pub khcnajokjhj: u32,
    #[prost(uint32, tag = "2")]
    pub group_id: u32,
    #[prost(oneof = "chkiicnapha::Cgfpdmppnjf", tags = "1882, 1695, 1756")]
    pub cgfpdmppnjf: ::core::option::Option<chkiicnapha::Cgfpdmppnjf>,
}
/// Nested message and enum types in `CHKIICNAPHA`.
pub mod chkiicnapha {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Cgfpdmppnjf {
        #[prost(message, tag = "1882")]
        Mjbenbdbhaj(super::ChallengeStatistics),
        #[prost(message, tag = "1695")]
        Ajgcmalnlen(super::Laaigbdpljc),
        #[prost(message, tag = "1756")]
        Bmckmgincia(super::Lgnmpmcpopf),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ognldadpjfo {
    #[prost(message, optional, tag = "8")]
    pub jippgkhkkbg: ::core::option::Option<Imcccciccko>,
    #[prost(uint32, tag = "9")]
    pub map_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Eaimkomhkhd {
    #[prost(uint32, tag = "10")]
    pub equip_avatar_id: u32,
    #[prost(uint32, tag = "9")]
    pub ggdiibcdobb: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Angoamadoma {
    #[prost(uint32, tag = "7")]
    pub jbloklcpafn: u32,
    #[prost(uint32, tag = "5")]
    pub ofgbjcccike: u32,
    #[prost(uint32, tag = "8")]
    pub ijhlojefcpm: u32,
    #[prost(message, optional, tag = "2")]
    pub njnjebodmnl: ::core::option::Option<Jhllljajkep>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ggkbhalpidk {
    #[prost(uint32, tag = "7")]
    pub dbahfefglmd: u32,
    #[prost(uint32, tag = "15")]
    pub lhbdonjiicc: u32,
    #[prost(uint32, tag = "9")]
    pub imlhfgepcan: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lfjpddcnbkc {
    #[prost(uint32, tag = "14")]
    pub fjhigbbmjdm: u32,
    #[prost(uint32, tag = "3")]
    pub fnmgaohmlim: u32,
    #[prost(uint32, tag = "9")]
    pub dbahfefglmd: u32,
    #[prost(uint32, tag = "6")]
    pub epljmcapmpc: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Nhagpmmcdcf {
    #[prost(uint32, tag = "14")]
    pub oiajancbabp: u32,
    #[prost(uint32, tag = "11")]
    pub onahhamhfdb: u32,
    #[prost(uint32, tag = "3")]
    pub agijkfbcjoc: u32,
    #[prost(uint32, tag = "10")]
    pub dbahfefglmd: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Okdbogbabni {
    #[prost(message, optional, tag = "13")]
    pub hdljbadekfi: ::core::option::Option<Nhagpmmcdcf>,
    #[prost(message, optional, tag = "5")]
    pub plccehdnafl: ::core::option::Option<Ggkbhalpidk>,
    #[prost(message, optional, tag = "12")]
    pub apmjfgkifon: ::core::option::Option<Lfjpddcnbkc>,
    #[prost(oneof = "okdbogbabni::Mblagjjoeff", tags = "586, 166")]
    pub mblagjjoeff: ::core::option::Option<okdbogbabni::Mblagjjoeff>,
}
/// Nested message and enum types in `OKDBOGBABNI`.
pub mod okdbogbabni {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Mblagjjoeff {
        #[prost(message, tag = "586")]
        Edgfedjbahf(super::Ognldadpjfo),
        #[prost(message, tag = "166")]
        Opfpolcgmed(super::Angoamadoma),
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Iojhjahimhm {
    #[prost(uint32, tag = "11")]
    pub dbahfefglmd: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jienkfadche {
    #[prost(uint32, tag = "11")]
    pub njoiciopbnh: u32,
    #[prost(uint32, tag = "14")]
    pub dbahfefglmd: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Meehcbgdbea {
    #[prost(uint32, tag = "15")]
    pub challenge_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dhahakmpnaf {
    #[prost(enumeration = "DevelopmentType", tag = "13")]
    pub ejhmnkhepfa: i32,
    #[prost(int64, tag = "4")]
    pub time: i64,
    #[prost(
        oneof = "dhahakmpnaf::Paecdoklpfg",
        tags = "506, 1204, 1023, 1385, 398, 209, 151"
    )]
    pub paecdoklpfg: ::core::option::Option<dhahakmpnaf::Paecdoklpfg>,
}
/// Nested message and enum types in `DHAHAKMPNAF`.
pub mod dhahakmpnaf {
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum Paecdoklpfg {
        #[prost(message, tag = "506")]
        Liibbggehfp(super::Iojhjahimhm),
        #[prost(message, tag = "1204")]
        Ikffobamghj(super::Meehcbgdbea),
        #[prost(uint32, tag = "1023")]
        EquipAvatarId(u32),
        #[prost(uint32, tag = "1385")]
        Mdmgkhlhiin(u32),
        #[prost(uint32, tag = "398")]
        Ckknnhmdcog(u32),
        #[prost(message, tag = "209")]
        Ielhlbffagk(super::Jienkfadche),
        #[prost(uint32, tag = "151")]
        PanelId(u32),
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetFriendListInfoCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetFriendListInfoScRsp {
    #[prost(message, repeated, tag = "10")]
    pub black_list: ::prost::alloc::vec::Vec<PlayerSimpleInfo>,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "1")]
    pub friend_info_list: ::prost::alloc::vec::Vec<FriendInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetPlayerDetailInfoCsReq {
    #[prost(uint32, tag = "11")]
    pub uid: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetPlayerDetailInfoScRsp {
    #[prost(message, optional, tag = "8")]
    pub detail_info: ::core::option::Option<PlayerDetailInfo>,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetFriendApplyListInfoCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Knfejcognmm {
    #[prost(uint32, repeated, tag = "2")]
    pub pfgdimlngoc: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "12")]
    pub ognpohnobdg: ::prost::alloc::vec::Vec<FriendApplyInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hoglmibjagp {
    #[prost(uint32, tag = "13")]
    pub uid: u32,
    #[prost(enumeration = "FriendApplySource", tag = "6")]
    pub source: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ghokgmdlpoo {
    #[prost(uint32, tag = "4")]
    pub uid: u32,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eemkgehblnm {
    #[prost(message, optional, tag = "7")]
    pub kkgaakgklag: ::core::option::Option<FriendApplyInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ihnfmcahgfn {
    #[prost(bool, tag = "14")]
    pub nbdamkfgkei: bool,
    #[prost(uint32, tag = "12")]
    pub uid: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gdklmamfken {
    #[prost(bool, tag = "1")]
    pub nbdamkfgkei: bool,
    #[prost(message, optional, tag = "10")]
    pub pjhdedmboko: ::core::option::Option<FriendInfo>,
    #[prost(uint32, tag = "5")]
    pub uid: u32,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ifooamdbdck {
    #[prost(message, optional, tag = "6")]
    pub pjhdedmboko: ::core::option::Option<FriendInfo>,
    #[prost(uint32, tag = "9")]
    pub uid: u32,
    #[prost(bool, tag = "8")]
    pub nbdamkfgkei: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Iecgiijdbcd {
    #[prost(uint32, tag = "15")]
    pub fiocdbipcgb: u32,
    #[prost(uint32, tag = "13")]
    pub uid: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hocjanhpbli {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(uint32, tag = "13")]
    pub uid: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Clekcbjmkpd {
    #[prost(uint32, tag = "2")]
    pub uid: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kpgfpdmkgbi {
    #[prost(uint32, tag = "10")]
    pub uid: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lbodlipmmon {
    #[prost(message, optional, tag = "3")]
    pub black_info: ::core::option::Option<PlayerSimpleInfo>,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Aehgondbhaj {
    #[prost(uint32, tag = "9")]
    pub uid: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Babkadmdhdp {
    #[prost(bool, tag = "12")]
    pub ahoilnfiieg: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pnffpbihjjh {
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "11")]
    pub mikbnmnfhak: ::prost::alloc::vec::Vec<FriendRecommendInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jmicchobeel {
    #[prost(uint32, tag = "8")]
    pub uid: u32,
    #[prost(uint32, tag = "12")]
    pub reason: u32,
    #[prost(string, tag = "5")]
    pub remark_name: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Iikbbndchbl {
    #[prost(string, tag = "13")]
    pub remark_name: ::prost::alloc::string::String,
    #[prost(uint32, tag = "15")]
    pub uid: u32,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jomlpkfbnlp {
    #[prost(uint32, tag = "14")]
    pub uid: u32,
    #[prost(string, tag = "10")]
    pub mimakhaabah: ::prost::alloc::string::String,
    #[prost(uint32, tag = "1")]
    pub ehbcljfpooe: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jkpipghochn {
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Degbehagpke {
    #[prost(uint32, tag = "1")]
    pub uid: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lhjcoilkdkh {
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(uint32, tag = "9")]
    pub uid: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nfcfgglofhm {
    #[prost(bool, tag = "15")]
    pub ahoilnfiieg: bool,
    #[prost(uint32, repeated, tag = "10")]
    pub caemjpoenod: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cdklhlinjkn {
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "7")]
    pub pkpnpbidbji: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "10")]
    pub encgjaklkdn: ::prost::alloc::vec::Vec<PlayerSimpleInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lmhcbmcbjhc {
    #[prost(bool, tag = "10")]
    pub ahoilnfiieg: bool,
    #[prost(bool, tag = "11")]
    pub kiboagmojcp: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eajeakdakpc {
    #[prost(message, repeated, tag = "14")]
    pub giecjkakcko: ::prost::alloc::vec::Vec<PlayerAssistInfo>,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ohdjhiaejkk {
    #[prost(uint32, tag = "13")]
    pub uid: u32,
    #[prost(uint32, tag = "7")]
    pub equip_avatar_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kbfgcnffgaa {
    #[prost(uint32, tag = "15")]
    pub equip_avatar_id: u32,
    #[prost(uint32, tag = "8")]
    pub uid: u32,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bhkaplnnkja {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Igkggoadbkp {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(message, optional, tag = "1")]
    pub dpjbdhelnoe: ::core::option::Option<PlayerAssistInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hifkdllodal {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Efjihgjhkbo {
    #[prost(uint32, tag = "2")]
    pub omhchjlliif: u32,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(uint32, tag = "14")]
    pub pbfneigopmp: u32,
    #[prost(uint32, tag = "7")]
    pub nfjjapnppkp: u32,
    #[prost(uint32, repeated, tag = "10")]
    pub phplnjfimdc: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fnbhgniekbo {
    #[prost(uint32, tag = "12")]
    pub nfjjapnppkp: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pflobghelnh {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Abgkaibfdjd {
    #[prost(message, repeated, tag = "9")]
    pub nlcnbiehcoh: ::prost::alloc::vec::Vec<Flcmjahgkfk>,
    #[prost(message, optional, tag = "3")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jchkkenibjk {
    #[prost(message, optional, tag = "13")]
    pub dpjbdhelnoe: ::core::option::Option<PlayerAssistInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hbofjgnbfbg {
    #[prost(enumeration = "PlatformType", tag = "14")]
    pub platform: i32,
    #[prost(string, repeated, tag = "2")]
    pub dnenlchjekg: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Acpkgeejjfl {
    #[prost(message, repeated, tag = "3")]
    pub mikbnmnfhak: ::prost::alloc::vec::Vec<PlayerSimpleInfo>,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cjoendlmmeg {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gmjehflhlgo {
    #[prost(uint32, repeated, tag = "12")]
    pub dbndomdmmgf: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "13")]
    pub iihdbinopmg: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, tag = "8")]
    pub bohnbjmmkbo: bool,
    #[prost(bool, tag = "6")]
    pub lifcehlfdnm: bool,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bkpgkbkjeef {
    #[prost(bool, tag = "10")]
    pub mjpflikafej: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hokmicojafk {
    #[prost(bool, tag = "7")]
    pub mjpflikafej: bool,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Eaemlkipogo {
    #[prost(bool, tag = "6")]
    pub adjgkcokoln: bool,
    #[prost(uint32, tag = "1")]
    pub uid: u32,
    #[prost(uint32, tag = "2")]
    pub reason: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ddhdgoipcpa {
    #[prost(bool, tag = "14")]
    pub adjgkcokoln: bool,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(uint32, tag = "15")]
    pub uid: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mpbpgpdggdk {
    #[prost(uint32, repeated, tag = "5")]
    pub bijgjecjmhm: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "9")]
    pub kcpaodebjdg: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, tag = "8")]
    pub ahoilnfiieg: bool,
    #[prost(enumeration = "AssistAvatarType", tag = "15")]
    pub mloogabmihp: i32,
    #[prost(uint32, tag = "11")]
    pub ppehincdhci: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Edbefidagco {
    #[prost(uint32, tag = "1")]
    pub ppehincdhci: u32,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "8")]
    pub giecjkakcko: ::prost::alloc::vec::Vec<PlayerAssistInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lkfdmepjhhh {
    #[prost(uint32, tag = "3")]
    pub challenge_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oajfbjdegek {
    #[prost(message, repeated, tag = "8")]
    pub jaejjmjpmnc: ::prost::alloc::vec::Vec<Fcnollfgpck>,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(bool, tag = "10")]
    pub onocjeebfci: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gncnbadeeaf {
    #[prost(uint32, tag = "4")]
    pub uid: u32,
    #[prost(uint32, tag = "10")]
    pub challenge_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kpgagcdlmii {
    #[prost(message, repeated, tag = "5")]
    pub ccgdmoolhhb: ::prost::alloc::vec::Vec<DisplayAvatarDetailInfo>,
    #[prost(uint32, tag = "3")]
    pub challenge_id: u32,
    #[prost(uint32, tag = "7")]
    pub uid: u32,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Oiodmcpameg {
    #[prost(uint32, tag = "9")]
    pub uid: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Chkneobbfdf {
    #[prost(uint32, tag = "9")]
    pub uid: u32,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "13")]
    pub jdidihobaod: ::prost::alloc::vec::Vec<Chkiicnapha>,
    #[prost(message, optional, tag = "10")]
    pub pgbbepkahbh: ::core::option::Option<Okdbogbabni>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ifhkchchjkh {
    #[prost(uint32, tag = "1")]
    pub uid: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mbbijcddmpk {
    #[prost(uint32, tag = "12")]
    pub uid: u32,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "13")]
    pub jbhbfbjgbph: ::prost::alloc::vec::Vec<Dhahakmpnaf>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetGachaInfoCsReq {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GachaCeilingAvatar {
    #[prost(uint32, tag = "10")]
    pub repeated_cnt: u32,
    #[prost(uint32, tag = "4")]
    pub avatar_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GachaCeiling {
    #[prost(bool, tag = "15")]
    pub is_claimed: bool,
    #[prost(message, repeated, tag = "9")]
    pub avatar_list: ::prost::alloc::vec::Vec<GachaCeilingAvatar>,
    #[prost(uint32, tag = "12")]
    pub ceiling_num: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GachaInfo {
    #[prost(uint32, tag = "9")]
    pub kmnjnmjfgbg: u32,
    #[prost(string, tag = "8")]
    pub mlgilehmpgb: ::prost::alloc::string::String,
    #[prost(uint32, tag = "6")]
    pub gdifaahifbh: u32,
    #[prost(int64, tag = "13")]
    pub end_time: i64,
    #[prost(message, optional, tag = "4")]
    pub gacha_ceiling: ::core::option::Option<GachaCeiling>,
    #[prost(uint32, tag = "14")]
    pub gacha_id: u32,
    #[prost(uint32, repeated, tag = "2")]
    pub aakckhanbhi: ::prost::alloc::vec::Vec<u32>,
    #[prost(int64, tag = "10")]
    pub begin_time: i64,
    #[prost(string, tag = "1")]
    pub pmnfainfpal: ::prost::alloc::string::String,
    #[prost(uint32, repeated, tag = "11")]
    pub boeffbdoabd: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetGachaInfoScRsp {
    #[prost(uint32, tag = "11")]
    pub gacha_random: u32,
    #[prost(uint32, tag = "2")]
    pub djndmnpebka: u32,
    #[prost(message, repeated, tag = "13")]
    pub aamdjfhefam: ::prost::alloc::vec::Vec<GachaInfo>,
    #[prost(uint32, tag = "10")]
    pub nbelnoipoek: u32,
    #[prost(uint32, tag = "14")]
    pub nopbebkhika: u32,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DoGachaCsReq {
    #[prost(uint32, tag = "13")]
    pub gacha_id: u32,
    #[prost(uint32, tag = "3")]
    pub gacha_random: u32,
    #[prost(uint32, tag = "4")]
    pub gacha_num: u32,
    #[prost(uint32, tag = "2")]
    pub simulate_magic: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GachaItem {
    #[prost(bool, tag = "2")]
    pub is_new: bool,
    #[prost(message, optional, tag = "4")]
    pub token_item: ::core::option::Option<ItemList>,
    #[prost(message, optional, tag = "13")]
    pub transfer_item_list: ::core::option::Option<ItemList>,
    #[prost(message, optional, tag = "7")]
    pub gacha_item: ::core::option::Option<Item>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DoGachaScRsp {
    #[prost(uint32, tag = "7")]
    pub nopbebkhika: u32,
    #[prost(uint32, tag = "11")]
    pub gacha_id: u32,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(uint32, tag = "4")]
    pub kmnjnmjfgbg: u32,
    #[prost(uint32, tag = "5")]
    pub ceiling_num: u32,
    #[prost(uint32, tag = "10")]
    pub penilhglhhm: u32,
    #[prost(uint32, tag = "6")]
    pub gacha_num: u32,
    #[prost(uint32, tag = "1")]
    pub gdifaahifbh: u32,
    #[prost(message, repeated, tag = "9")]
    pub gacha_item_list: ::prost::alloc::vec::Vec<GachaItem>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetGachaCeilingCsReq {
    #[prost(uint32, tag = "12")]
    pub gacha_type: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetGachaCeilingScRsp {
    #[prost(uint32, tag = "9")]
    pub gacha_type: u32,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(message, optional, tag = "1")]
    pub gacha_ceiling: ::core::option::Option<GachaCeiling>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ExchangeGachaCeilingCsReq {
    #[prost(uint32, tag = "6")]
    pub avatar_id: u32,
    #[prost(uint32, tag = "7")]
    pub gacha_type: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExchangeGachaCeilingScRsp {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(message, optional, tag = "12")]
    pub gacha_ceiling: ::core::option::Option<GachaCeiling>,
    #[prost(uint32, tag = "11")]
    pub gacha_type: u32,
    #[prost(message, optional, tag = "15")]
    pub transfer_item_list: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "1")]
    pub avatar_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Oicenkljicg {
    #[prost(bool, tag = "15")]
    pub fbkekcgelbe: bool,
    #[prost(uint32, tag = "10")]
    pub dgaklnofdpp: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Maiaboommnn {
    #[prost(bool, tag = "12")]
    pub kkgfigchkib: bool,
    #[prost(bool, tag = "3")]
    pub jmpejfickjo: bool,
    #[prost(enumeration = "Bfdflhekfgk", tag = "9")]
    pub jiimeljaone: i32,
    #[prost(uint32, tag = "15")]
    pub clkeoehplng: u32,
    #[prost(enumeration = "Afefbpablhm", tag = "5")]
    pub step: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mmeinfmdjfg {
    #[prost(uint32, tag = "9")]
    pub kbmmmmckjni: u32,
    #[prost(uint32, tag = "4")]
    pub clkeoehplng: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pokehoegbee {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ghjinmkjldg {
    #[prost(message, repeated, tag = "14")]
    pub emdmhabinkg: ::prost::alloc::vec::Vec<Maiaboommnn>,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "5")]
    pub ocmoejidlam: ::prost::alloc::vec::Vec<Mmeinfmdjfg>,
    #[prost(enumeration = "Ooehgmemkoi", tag = "12")]
    pub nfeojaajmke: i32,
    #[prost(message, repeated, tag = "15")]
    pub aboigbjnoho: ::prost::alloc::vec::Vec<Oicenkljicg>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fibdhfcjamh {
    #[prost(uint32, tag = "3")]
    pub fihncoabela: u32,
    #[prost(enumeration = "Bfdflhekfgk", tag = "9")]
    pub ebnofhdngdh: i32,
    #[prost(uint32, tag = "1")]
    pub clkeoehplng: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lnooicpaknd {
    #[prost(uint32, tag = "11")]
    pub clkeoehplng: u32,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(enumeration = "Bfdflhekfgk", tag = "13")]
    pub kefkogklefc: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gmpjaciocai {
    #[prost(uint32, tag = "8")]
    pub fihncoabela: u32,
    #[prost(message, optional, tag = "12")]
    pub item_list: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "10")]
    pub clkeoehplng: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mjoecnkjgip {
    #[prost(uint32, tag = "11")]
    pub clkeoehplng: u32,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Afdlhldcfel {
    #[prost(uint32, tag = "14")]
    pub clkeoehplng: u32,
    #[prost(uint32, tag = "4")]
    pub dgaklnofdpp: u32,
    #[prost(uint32, tag = "10")]
    pub fihncoabela: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pjbhdgofncj {
    #[prost(message, optional, tag = "13")]
    pub reward_list: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "5")]
    pub dgaklnofdpp: u32,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(uint32, tag = "8")]
    pub clkeoehplng: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bkgepfipgee {
    #[prost(message, repeated, tag = "4")]
    pub nglhcmbghio: ::prost::alloc::vec::Vec<Oicenkljicg>,
    #[prost(message, repeated, tag = "7")]
    pub ocmoejidlam: ::prost::alloc::vec::Vec<Mmeinfmdjfg>,
    #[prost(enumeration = "Ooehgmemkoi", tag = "5")]
    pub nfeojaajmke: i32,
    #[prost(message, repeated, tag = "15")]
    pub pkflgdfdmoi: ::prost::alloc::vec::Vec<Maiaboommnn>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Eckbennibjh {
    #[prost(message, optional, tag = "13")]
    pub agoipfbddpo: ::core::option::Option<Mmeinfmdjfg>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bkiomjgmmne {
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(message, optional, tag = "11")]
    pub agoipfbddpo: ::core::option::Option<Mmeinfmdjfg>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dejakpoepkn {
    #[prost(uint32, tag = "1")]
    pub cgfgfmgdpnj: u32,
    #[prost(uint32, repeated, tag = "2")]
    pub lfpmaobgnen: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jmijjhkiblb {
    #[prost(uint32, tag = "4")]
    pub star: u32,
    #[prost(uint32, tag = "8")]
    pub challenge_id: u32,
    #[prost(bool, tag = "3")]
    pub gjieahdbnni: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HeliobusChallengeLineup {
    #[prost(uint32, tag = "6")]
    pub skill_id: u32,
    #[prost(uint32, tag = "12")]
    pub group_id: u32,
    #[prost(uint32, repeated, tag = "11")]
    pub avatar_id_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Blofccoigpi {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gjahmipoddj {
    #[prost(uint32, tag = "1")]
    pub level: u32,
    #[prost(message, optional, tag = "13")]
    pub skill_info: ::core::option::Option<Dejakpoepkn>,
    #[prost(message, repeated, tag = "4")]
    pub gcljengjicm: ::prost::alloc::vec::Vec<HeliobusChallengeLineup>,
    #[prost(uint32, tag = "15")]
    pub iphkdelmoih: u32,
    #[prost(uint32, tag = "2")]
    pub eenjbpmndol: u32,
    #[prost(message, repeated, tag = "5")]
    pub challenge_list: ::prost::alloc::vec::Vec<Jmijjhkiblb>,
    #[prost(message, repeated, tag = "14")]
    pub nfdbmhppfip: ::prost::alloc::vec::Vec<Gbjkkfhpffn>,
    #[prost(uint32, tag = "11")]
    pub halgpjmcmfp: u32,
    #[prost(uint32, tag = "10")]
    pub ibhaaejeehc: u32,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Goammagcijj {
    #[prost(uint32, tag = "3")]
    pub eliadkdaeco: u32,
    #[prost(uint32, tag = "10")]
    pub kmaempmoccc: u32,
    #[prost(message, repeated, tag = "11")]
    pub jndkooejcfc: ::prost::alloc::vec::Vec<Goammagcijj>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gbjkkfhpffn {
    #[prost(uint32, tag = "9")]
    pub aknkpkpljhf: u32,
    #[prost(bool, tag = "11")]
    pub ajciodkllml: bool,
    #[prost(uint32, tag = "7")]
    pub jfmofiidcnp: u32,
    #[prost(bool, tag = "8")]
    pub dekhdibcfab: bool,
    #[prost(uint32, tag = "10")]
    pub ihkejebceib: u32,
    #[prost(message, repeated, tag = "1")]
    pub ndjfnhfpcgd: ::prost::alloc::vec::Vec<Goammagcijj>,
    #[prost(uint32, tag = "13")]
    pub cmhgbbhknci: u32,
    #[prost(uint32, tag = "14")]
    pub fclnoogehmc: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fojpchfheae {
    #[prost(uint32, tag = "13")]
    pub ihkejebceib: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ibncjdmomla {
    #[prost(uint32, tag = "12")]
    pub ihkejebceib: u32,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Nikfhcnkbch {
    #[prost(uint32, tag = "2")]
    pub ihkejebceib: u32,
    #[prost(uint32, tag = "1")]
    pub jfmofiidcnp: u32,
    #[prost(uint32, tag = "8")]
    pub fclnoogehmc: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fclcbaienfb {
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(message, optional, tag = "4")]
    pub eimcnifmlbl: ::core::option::Option<Gbjkkfhpffn>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Eoppoapmacg {
    #[prost(uint32, tag = "2")]
    pub ihkejebceib: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gbpldamfegl {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(uint32, tag = "14")]
    pub ihkejebceib: u32,
    #[prost(bool, tag = "13")]
    pub dekhdibcfab: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jddioablhif {
    #[prost(uint32, tag = "4")]
    pub kmaempmoccc: u32,
    #[prost(uint32, tag = "7")]
    pub kaljkfkjffa: u32,
    #[prost(uint32, tag = "6")]
    pub ihkejebceib: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jilgibdidmh {
    #[prost(message, optional, tag = "13")]
    pub eimcnifmlbl: ::core::option::Option<Gbjkkfhpffn>,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hoamknefeil {
    #[prost(message, repeated, tag = "8")]
    pub gkfhmgmbika: ::prost::alloc::vec::Vec<Gbjkkfhpffn>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bdobccmppaa {
    #[prost(uint32, tag = "8")]
    pub halgpjmcmfp: u32,
    #[prost(uint32, tag = "7")]
    pub iphkdelmoih: u32,
    #[prost(uint32, tag = "9")]
    pub eenjbpmndol: u32,
    #[prost(message, repeated, tag = "11")]
    pub gkfhmgmbika: ::prost::alloc::vec::Vec<Gbjkkfhpffn>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Abbahiapmcd {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Knljnmophfe {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(uint32, tag = "14")]
    pub level: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bpffnjbecne {
    #[prost(uint32, tag = "12")]
    pub skill_id: u32,
    #[prost(uint32, tag = "4")]
    pub cgfgfmgdpnj: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ijakpfahljj {
    #[prost(uint32, tag = "11")]
    pub skill_id: u32,
    #[prost(uint32, repeated, tag = "10")]
    pub avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "5")]
    pub event_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Inmbbbcgige {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(message, optional, tag = "10")]
    pub battle_info: ::core::option::Option<SceneBattleInfo>,
    #[prost(uint32, tag = "6")]
    pub event_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pfnlnocjbla {
    #[prost(uint32, tag = "15")]
    pub skill_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Okmbjehoiog {
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(uint32, tag = "3")]
    pub skill_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gnjichmocml {
    #[prost(message, optional, tag = "12")]
    pub dddikpnnble: ::core::option::Option<Jmijjhkiblb>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cijpamoomig {
    #[prost(message, optional, tag = "5")]
    pub lineup: ::core::option::Option<HeliobusChallengeLineup>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jjcklkanlbk {
    #[prost(bool, tag = "6")]
    pub jgeaegmhdoc: bool,
    #[prost(uint32, tag = "12")]
    pub prop_entity_id: u32,
    #[prost(uint32, tag = "13")]
    pub enlknpiblio: u32,
    #[prost(uint32, tag = "14")]
    pub cenifnknfnp: u32,
    #[prost(uint32, tag = "10")]
    pub skill_id: u32,
    #[prost(uint32, repeated, tag = "9")]
    pub avatar_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mffcenpkbgh {
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(message, optional, tag = "13")]
    pub scene: ::core::option::Option<Fnlgplncpcl>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetBagCsReq {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Equipment {
    #[prost(uint32, tag = "7")]
    pub exp: u32,
    #[prost(uint32, tag = "14")]
    pub level: u32,
    #[prost(uint32, tag = "9")]
    pub tid: u32,
    #[prost(uint32, tag = "12")]
    pub unique_id: u32,
    #[prost(uint32, tag = "6")]
    pub equip_avatar_id: u32,
    #[prost(uint32, tag = "4")]
    pub rank: u32,
    #[prost(bool, tag = "8")]
    pub is_protected: bool,
    #[prost(uint32, tag = "2")]
    pub promotion: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Relic {
    #[prost(message, repeated, tag = "8")]
    pub sub_affix_list: ::prost::alloc::vec::Vec<RelicAffix>,
    #[prost(uint32, tag = "15")]
    pub tid: u32,
    #[prost(uint32, tag = "13")]
    pub equip_avatar_id: u32,
    #[prost(uint32, tag = "12")]
    pub unique_id: u32,
    #[prost(uint32, tag = "2")]
    pub exp: u32,
    #[prost(uint32, tag = "5")]
    pub level: u32,
    #[prost(uint32, tag = "9")]
    pub main_affix_id: u32,
    #[prost(bool, tag = "3")]
    pub is_discarded: bool,
    #[prost(bool, tag = "7")]
    pub is_protected: bool,
    #[prost(message, repeated, tag = "14")]
    pub dpabghgabdk: ::prost::alloc::vec::Vec<RelicAffix>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Material {
    #[prost(uint32, tag = "10")]
    pub num: u32,
    #[prost(uint64, tag = "14")]
    pub expire_time: u64,
    #[prost(uint32, tag = "8")]
    pub tid: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct WaitDelResource {
    #[prost(uint32, tag = "1")]
    pub tid: u32,
    #[prost(uint32, tag = "11")]
    pub num: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Plfiiabddmc {
    #[prost(uint32, tag = "10")]
    pub tid: u32,
    #[prost(uint32, tag = "11")]
    pub num: u32,
    #[prost(uint64, tag = "9")]
    pub expire_time: u64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetBagScRsp {
    #[prost(uint32, tag = "2")]
    pub aepnidponkc: u32,
    #[prost(uint32, repeated, tag = "9")]
    pub gemcacjlpij: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "7")]
    pub relic_list: ::prost::alloc::vec::Vec<Relic>,
    #[prost(uint32, repeated, tag = "13")]
    pub aoiihcfmfph: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "1")]
    pub ifenmdpbnkg: ::prost::alloc::vec::Vec<Material>,
    #[prost(message, repeated, tag = "10")]
    pub phngmeljkbe: ::prost::alloc::vec::Vec<Plfiiabddmc>,
    #[prost(message, repeated, tag = "14")]
    pub material_list: ::prost::alloc::vec::Vec<Material>,
    #[prost(message, repeated, tag = "6")]
    pub fcokffeapmi: ::prost::alloc::vec::Vec<Plfiiabddmc>,
    #[prost(message, repeated, tag = "3")]
    pub wait_del_resource_list: ::prost::alloc::vec::Vec<WaitDelResource>,
    #[prost(message, repeated, tag = "15")]
    pub bafebhdobfj: ::prost::alloc::vec::Vec<PileItem>,
    #[prost(uint32, repeated, tag = "12")]
    pub fdbjlgdhcdo: ::prost::alloc::vec::Vec<u32>,
    #[prost(enumeration = "TurnFoodSwitch", repeated, tag = "5")]
    pub kmjefmfblli: ::prost::alloc::vec::Vec<i32>,
    #[prost(message, repeated, tag = "11")]
    pub equipment_list: ::prost::alloc::vec::Vec<Equipment>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PromoteEquipmentCsReq {
    #[prost(message, optional, tag = "9")]
    pub cost_data: ::core::option::Option<ItemCostData>,
    #[prost(uint32, tag = "8")]
    pub equipment_unique_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PromoteEquipmentScRsp {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ognbdgagknj {
    #[prost(uint32, repeated, tag = "15")]
    pub odldpkioeom: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, tag = "12")]
    pub oahnbddiajl: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bbjejpjonfj {
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UseItemCsReq {
    #[prost(uint32, tag = "11")]
    pub use_item_id: u32,
    #[prost(uint32, tag = "10")]
    pub base_avatar_id: u32,
    #[prost(enumeration = "AvatarType", tag = "15")]
    pub mgnnkfnacni: i32,
    #[prost(uint32, tag = "3")]
    pub optional_reward_id: u32,
    #[prost(bool, tag = "13")]
    pub felciemkcgf: bool,
    #[prost(uint32, tag = "12")]
    pub use_item_count: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UseItemScRsp {
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(uint32, tag = "15")]
    pub use_item_id: u32,
    #[prost(message, optional, tag = "10")]
    pub nlbcbncfaki: ::core::option::Option<ItemList>,
    #[prost(uint64, tag = "6")]
    pub epcfjnohjcl: u64,
    #[prost(uint32, tag = "7")]
    pub use_item_count: u32,
    #[prost(uint32, tag = "12")]
    pub gcjobeokmcp: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RankUpEquipmentCsReq {
    #[prost(message, optional, tag = "3")]
    pub cost_data: ::core::option::Option<ItemCostData>,
    #[prost(uint32, tag = "5")]
    pub equipment_unique_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RankUpEquipmentScRsp {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Llagdkkopig {
    #[prost(message, optional, tag = "10")]
    pub cost_data: ::core::option::Option<ItemCostData>,
    #[prost(uint32, tag = "7")]
    pub equipment_unique_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ghmkehacjin {
    #[prost(message, repeated, tag = "6")]
    pub return_item_list: ::prost::alloc::vec::Vec<PileItem>,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eidfbomonbi {
    #[prost(uint32, tag = "15")]
    pub lomdagholkc: u32,
    #[prost(message, optional, tag = "1")]
    pub abpnlmodogb: ::core::option::Option<ItemCostData>,
    #[prost(message, optional, tag = "6")]
    pub pjchnokedbe: ::core::option::Option<ItemCostData>,
    #[prost(uint32, tag = "9")]
    pub count: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lmaaehhlmfc {
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(uint32, tag = "15")]
    pub lomdagholkc: u32,
    #[prost(message, optional, tag = "11")]
    pub return_item_list: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "3")]
    pub count: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ppcmjpfibjk {
    #[prost(uint32, tag = "4")]
    pub jdoekfemoja: u32,
    #[prost(uint32, tag = "3")]
    pub lomdagholkc: u32,
    #[prost(uint32, tag = "5")]
    pub count: u32,
    #[prost(uint32, tag = "15")]
    pub main_affix_id: u32,
    #[prost(uint32, repeated, tag = "12")]
    pub ggnpaifhpbb: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "14")]
    pub gjfmnmokaic: ::core::option::Option<ItemCostData>,
    #[prost(message, optional, tag = "13")]
    pub fbgodfjicll: ::core::option::Option<ItemCostData>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mgnnpkgbagd {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(uint32, tag = "12")]
    pub lomdagholkc: u32,
    #[prost(message, optional, tag = "7")]
    pub return_item_list: ::core::option::Option<ItemList>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hkhkbggjlkj {
    #[prost(uint32, tag = "13")]
    pub relic_unique_id: u32,
    #[prost(message, optional, tag = "11")]
    pub cost_data: ::core::option::Option<ItemCostData>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lcaoahbjjnc {
    #[prost(message, repeated, tag = "15")]
    pub return_item_list: ::prost::alloc::vec::Vec<PileItem>,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kacijmgggle {
    #[prost(bool, tag = "14")]
    pub iemnpgomjco: bool,
    #[prost(uint32, repeated, tag = "4")]
    pub kgefhoecmmn: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, tag = "8")]
    pub oahnbddiajl: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ehghocbcekm {
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lembhjmikoe {
    #[prost(uint32, repeated, tag = "6")]
    pub kgefhoecmmn: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, tag = "15")]
    pub iemnpgomjco: bool,
    #[prost(bool, tag = "12")]
    pub jnkhgfiljpb: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gaadeddbana {
    #[prost(bool, tag = "10")]
    pub jnkhgfiljpb: bool,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Occfbpibdch {
    #[prost(bool, tag = "4")]
    pub olfkackgofk: bool,
    #[prost(message, optional, tag = "7")]
    pub cost_data: ::core::option::Option<ItemCostData>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Emhkbfneepe {
    #[prost(message, optional, tag = "11")]
    pub return_item_list: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RechargeSuccNotify {
    #[prost(string, tag = "10")]
    pub product_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "12")]
    pub item_list: ::core::option::Option<ItemList>,
    #[prost(string, tag = "1")]
    pub channel_order_no: ::prost::alloc::string::String,
    #[prost(uint64, tag = "11")]
    pub month_card_outdate_time: u64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Caibfmlnffa {
    #[prost(uint32, tag = "1")]
    pub num: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ExchangeHcoinScRsp {
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(uint32, tag = "1")]
    pub num: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ehkbpbiaijm {
    #[prost(uint32, tag = "5")]
    pub mdmgkhlhiin: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hmapnacbnck {
    #[prost(uint32, repeated, tag = "14")]
    pub cjlndnilgmf: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Aldedchjmbk {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "10")]
    pub fcokffeapmi: ::prost::alloc::vec::Vec<Plfiiabddmc>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fnhmmmkjgpb {
    #[prost(uint32, tag = "13")]
    pub ojemelhcmpj: u32,
    #[prost(uint32, tag = "15")]
    pub ambdkdamhlh: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mnkeghbhbab {
    #[prost(message, repeated, tag = "9")]
    pub dchnaedinmm: ::prost::alloc::vec::Vec<Fnhmmmkjgpb>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kaokfbbhbjp {
    #[prost(message, optional, tag = "3")]
    pub fglfgjdpjpd: ::core::option::Option<Fnhmmmkjgpb>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jgjoghclmcb {
    #[prost(uint32, tag = "1")]
    pub cfcokeldogj: u32,
    #[prost(uint32, tag = "10")]
    pub item_id: u32,
    #[prost(uint32, tag = "15")]
    pub mbejblfhcbh: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Edelpfffhgc {
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(uint32, tag = "2")]
    pub cfcokeldogj: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jcombmfgmbp {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jgdmlejhcfd {
    #[prost(uint32, repeated, tag = "6")]
    pub pdbihonolfj: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pdgpdlfcjob {
    #[prost(bool, tag = "12")]
    pub naehphhdgek: bool,
    #[prost(uint32, tag = "10")]
    pub item_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bhlicdcpaeg {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(bool, tag = "3")]
    pub naehphhdgek: bool,
    #[prost(uint32, tag = "2")]
    pub item_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Afmnpbmehka {
    #[prost(uint32, tag = "10")]
    pub item_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Damdjpldnfe {
    #[prost(uint32, repeated, tag = "1")]
    pub fdbjlgdhcdo: ::prost::alloc::vec::Vec<u32>,
    #[prost(enumeration = "TurnFoodSwitch", repeated, tag = "7")]
    pub kmjefmfblli: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mpnkmkgdbdk {
    #[prost(enumeration = "TurnFoodSwitch", tag = "7")]
    pub jcakhhkfdfn: i32,
    #[prost(bool, tag = "10")]
    pub bndlhjhalmb: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mfglgonldph {
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(bool, tag = "8")]
    pub bndlhjhalmb: bool,
    #[prost(enumeration = "TurnFoodSwitch", tag = "7")]
    pub jcakhhkfdfn: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Apkmohmiibl {
    #[prost(bool, tag = "3")]
    pub pkbahpfjgdb: bool,
    #[prost(message, repeated, tag = "2")]
    pub fdjkccgdnka: ::prost::alloc::vec::Vec<PileItem>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RelicFilterPlanIcon {
    #[prost(bool, tag = "12")]
    pub is_avatar_icon: bool,
    #[prost(uint32, tag = "9")]
    pub icon_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RelicFilterPlan {
    #[prost(message, optional, tag = "7")]
    pub icon: ::core::option::Option<RelicFilterPlanIcon>,
    #[prost(int64, tag = "12")]
    pub update_timestamp: i64,
    #[prost(uint32, tag = "13")]
    pub slot_index: u32,
    #[prost(uint32, tag = "5")]
    pub avatar_id_on_create: u32,
    #[prost(bool, tag = "2")]
    pub is_marked: bool,
    #[prost(message, optional, tag = "8")]
    pub settings: ::core::option::Option<RelicFilterPlanSettings>,
    #[prost(string, tag = "4")]
    pub name: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cbcijaobjkm {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRelicFilterPlanScRsp {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "8")]
    pub relic_filter_plan_list: ::prost::alloc::vec::Vec<RelicFilterPlan>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AddRelicFilterPlanCsReq {
    #[prost(uint32, tag = "14")]
    pub avatar_id_on_create: u32,
    #[prost(message, optional, tag = "4")]
    pub icon: ::core::option::Option<RelicFilterPlanIcon>,
    #[prost(string, tag = "3")]
    pub name: ::prost::alloc::string::String,
    #[prost(bool, tag = "10")]
    pub is_marked: bool,
    #[prost(message, optional, tag = "5")]
    pub settings: ::core::option::Option<RelicFilterPlanSettings>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AddRelicFilterPlanScRsp {
    #[prost(message, optional, tag = "2")]
    pub plan: ::core::option::Option<RelicFilterPlan>,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ModifyRelicFilterPlanCsReq {
    #[prost(uint32, tag = "15")]
    pub slot_index: u32,
    #[prost(oneof = "modify_relic_filter_plan_cs_req::InfoCase", tags = "14, 4, 2")]
    pub info_case: ::core::option::Option<modify_relic_filter_plan_cs_req::InfoCase>,
}
/// Nested message and enum types in `ModifyRelicFilterPlanCsReq`.
pub mod modify_relic_filter_plan_cs_req {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum InfoCase {
        #[prost(string, tag = "14")]
        Name(::prost::alloc::string::String),
        #[prost(message, tag = "4")]
        Icon(super::RelicFilterPlanIcon),
        #[prost(message, tag = "2")]
        Settings(super::RelicFilterPlanSettings),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ModifyRelicFilterPlanScRsp {
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(int64, tag = "4")]
    pub update_timestamp: i64,
    #[prost(uint32, tag = "7")]
    pub slot_index: u32,
    #[prost(oneof = "modify_relic_filter_plan_sc_rsp::InfoCase", tags = "10, 2, 12")]
    pub info_case: ::core::option::Option<modify_relic_filter_plan_sc_rsp::InfoCase>,
}
/// Nested message and enum types in `ModifyRelicFilterPlanScRsp`.
pub mod modify_relic_filter_plan_sc_rsp {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum InfoCase {
        #[prost(string, tag = "10")]
        Name(::prost::alloc::string::String),
        #[prost(message, tag = "2")]
        Icon(super::RelicFilterPlanIcon),
        #[prost(message, tag = "12")]
        Settings(super::RelicFilterPlanSettings),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteRelicFilterPlanCsReq {
    #[prost(bool, tag = "10")]
    pub is_batch_op: bool,
    #[prost(uint32, repeated, tag = "2")]
    pub slot_index_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Iblmecobekk {
    #[prost(bool, tag = "9")]
    pub iemnpgomjco: bool,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "12")]
    pub ndobmajmlnk: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MarkRelicFilterPlanCsReq {
    #[prost(uint32, repeated, tag = "13")]
    pub slot_index_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, tag = "3")]
    pub is_batch_op: bool,
    #[prost(bool, tag = "11")]
    pub is_mark: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MarkRelicFilterPlanScRsp {
    #[prost(uint32, repeated, tag = "15")]
    pub slot_index_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, tag = "8")]
    pub is_mark: bool,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(bool, tag = "11")]
    pub is_batch_op: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jilpdhenidl {
    #[prost(uint32, tag = "15")]
    pub khncedgfpgl: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jfjbaejbblb {
    #[prost(uint32, tag = "7")]
    pub relic_unique_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Omkajlmdbdp {
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Llldcibjidc {
    #[prost(uint32, tag = "5")]
    pub relic_unique_id: u32,
    #[prost(bool, tag = "7")]
    pub cjoeaeijlgc: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lfbpglgjbfi {
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Blfaociljgc {
    #[prost(uint32, tag = "10")]
    pub group_id: u32,
    #[prost(bool, tag = "5")]
    pub icfbdppjoad: bool,
    #[prost(uint32, tag = "4")]
    pub id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Niacmnbbnci {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mgdpbjgeelj {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "3")]
    pub mmpjloijeec: ::prost::alloc::vec::Vec<Blfaociljgc>,
    #[prost(uint32, tag = "11")]
    pub edjblnmofoe: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Olcmoajacgc {
    #[prost(uint32, tag = "9")]
    pub iiedaeikbho: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Nacnjknekbk {
    #[prost(uint32, tag = "4")]
    pub iiedaeikbho: u32,
    #[prost(uint32, tag = "13")]
    pub edjblnmofoe: u32,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Inakleiilkn {
    #[prost(uint32, repeated, tag = "5")]
    pub jebbcbcndbc: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Aogckkjnkbn {
    #[prost(message, repeated, tag = "9")]
    pub mmpjloijeec: ::prost::alloc::vec::Vec<Blfaociljgc>,
    #[prost(uint32, repeated, tag = "14")]
    pub oghdilhdleb: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dpfdhdjcapi {
    #[prost(uint32, tag = "7")]
    pub pigbbgclamj: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hjkofklpcbb {
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(uint32, tag = "5")]
    pub pigbbgclamj: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetStageLineupCsReq {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jlchbkkfanl {
    #[prost(uint32, tag = "15")]
    pub dogdacflboe: u32,
    #[prost(uint32, tag = "14")]
    pub stage_type: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetStageLineupScRsp {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "6")]
    pub nmkpekmmnbp: ::prost::alloc::vec::Vec<Jlchbkkfanl>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LineupAvatar {
    #[prost(message, optional, tag = "1")]
    pub sp: ::core::option::Option<AmountInfo>,
    #[prost(uint32, tag = "8")]
    pub slot_type: u32,
    #[prost(uint32, tag = "15")]
    pub id: u32,
    #[prost(enumeration = "AvatarType", tag = "11")]
    pub avatar_type: i32,
    #[prost(uint32, tag = "7")]
    pub hp: u32,
    #[prost(uint32, tag = "3")]
    pub satiety: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LineupInfo {
    #[prost(uint32, tag = "7")]
    pub leader_slot: u32,
    #[prost(string, tag = "5")]
    pub name: ::prost::alloc::string::String,
    #[prost(uint32, tag = "12")]
    pub plane_id: u32,
    #[prost(uint32, tag = "6")]
    pub index: u32,
    #[prost(uint32, repeated, tag = "8")]
    pub mkdfjccbiop: ::prost::alloc::vec::Vec<u32>,
    #[prost(enumeration = "ExtraLineupType", tag = "13")]
    pub extra_lineup_type: i32,
    #[prost(message, repeated, tag = "15")]
    pub avatar_list: ::prost::alloc::vec::Vec<LineupAvatar>,
    #[prost(uint32, tag = "4")]
    pub game_story_line_id: u32,
    #[prost(uint32, tag = "3")]
    pub mp: u32,
    #[prost(bool, tag = "1")]
    pub bfnbklmamkb: bool,
    #[prost(uint32, repeated, tag = "9")]
    pub mankkfpbfcb: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "10")]
    pub kompcjpapkm: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, tag = "2")]
    pub is_virtual: bool,
    #[prost(uint32, tag = "14")]
    pub max_mp: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetCurLineupDataCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetCurLineupDataScRsp {
    #[prost(message, optional, tag = "14")]
    pub lineup: ::core::option::Option<LineupInfo>,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct JoinLineupCsReq {
    #[prost(enumeration = "ExtraLineupType", tag = "11")]
    pub extra_lineup_type: i32,
    #[prost(uint32, tag = "10")]
    pub slot_type: u32,
    #[prost(uint32, tag = "9")]
    pub index: u32,
    #[prost(uint32, tag = "7")]
    pub plane_id: u32,
    #[prost(enumeration = "AvatarType", tag = "5")]
    pub avatar_type: i32,
    #[prost(uint32, tag = "3")]
    pub base_avatar_id: u32,
    #[prost(bool, tag = "4")]
    pub is_virtual: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct JoinLineupScRsp {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QuitLineupCsReq {
    #[prost(enumeration = "AvatarType", tag = "2")]
    pub avatar_type: i32,
    #[prost(uint32, tag = "12")]
    pub index: u32,
    #[prost(uint32, tag = "15")]
    pub plane_id: u32,
    #[prost(bool, tag = "5")]
    pub is_virtual: bool,
    #[prost(uint32, tag = "7")]
    pub base_avatar_id: u32,
    #[prost(enumeration = "ExtraLineupType", tag = "10")]
    pub extra_lineup_type: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QuitLineupScRsp {
    #[prost(uint32, tag = "5")]
    pub base_avatar_id: u32,
    #[prost(bool, tag = "6")]
    pub is_virtual: bool,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(uint32, tag = "14")]
    pub plane_id: u32,
    #[prost(bool, tag = "9")]
    pub is_mainline: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SwapLineupCsReq {
    #[prost(uint32, tag = "8")]
    pub plane_id: u32,
    #[prost(uint32, tag = "11")]
    pub ellidanjnob: u32,
    #[prost(enumeration = "ExtraLineupType", tag = "3")]
    pub extra_lineup_type: i32,
    #[prost(uint32, tag = "15")]
    pub nedikhngmbh: u32,
    #[prost(bool, tag = "10")]
    pub is_virtual: bool,
    #[prost(uint32, tag = "4")]
    pub index: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SwapLineupScRsp {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SyncLineupNotify {
    #[prost(enumeration = "SyncLineupReason", repeated, tag = "1")]
    pub reason_list: ::prost::alloc::vec::Vec<i32>,
    #[prost(message, optional, tag = "2")]
    pub lineup: ::core::option::Option<LineupInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetLineupAvatarDataCsReq {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LineupAvatarData {
    #[prost(uint32, tag = "3")]
    pub id: u32,
    #[prost(enumeration = "AvatarType", tag = "13")]
    pub avatar_type: i32,
    #[prost(uint32, tag = "12")]
    pub hp: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetLineupAvatarDataScRsp {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "12")]
    pub avatar_data_list: ::prost::alloc::vec::Vec<LineupAvatarData>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChangeLineupLeaderCsReq {
    #[prost(uint32, tag = "6")]
    pub slot_type: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChangeLineupLeaderScRsp {
    #[prost(uint32, tag = "13")]
    pub slot_type: u32,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SwitchLineupIndexCsReq {
    #[prost(uint32, tag = "15")]
    pub index: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SwitchLineupIndexScRsp {
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(uint32, tag = "2")]
    pub index: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetLineupNameCsReq {
    #[prost(string, tag = "9")]
    pub name: ::prost::alloc::string::String,
    #[prost(uint32, tag = "7")]
    pub index: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetLineupNameScRsp {
    #[prost(string, tag = "5")]
    pub name: ::prost::alloc::string::String,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(uint32, tag = "6")]
    pub index: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetAllLineupDataCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAllLineupDataScRsp {
    #[prost(message, repeated, tag = "2")]
    pub lineup_list: ::prost::alloc::vec::Vec<LineupInfo>,
    #[prost(uint32, tag = "8")]
    pub cur_index: u32,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct VirtualLineupDestroyNotify {
    #[prost(uint32, tag = "10")]
    pub plane_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LineupSlotInfo {
    #[prost(enumeration = "AvatarType", tag = "3")]
    pub avatar_type: i32,
    #[prost(uint32, tag = "6")]
    pub slot_type: u32,
    #[prost(uint32, tag = "14")]
    pub id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReplaceLineupCsReq {
    #[prost(message, repeated, tag = "12")]
    pub replace_slot_list: ::prost::alloc::vec::Vec<LineupSlotInfo>,
    #[prost(uint32, tag = "5")]
    pub game_story_line_id: u32,
    #[prost(uint32, tag = "9")]
    pub plane_id: u32,
    #[prost(bool, tag = "11")]
    pub is_virtual: bool,
    #[prost(uint32, tag = "8")]
    pub index: u32,
    #[prost(enumeration = "ExtraLineupType", tag = "1")]
    pub extra_lineup_type: i32,
    #[prost(uint32, tag = "2")]
    pub leader_slot: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReplaceLineupScRsp {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ExtraLineupDestroyNotify {
    #[prost(enumeration = "ExtraLineupType", tag = "5")]
    pub extra_lineup_type: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VirtualLineupTrialAvatarChangeScNotify {
    #[prost(uint32, repeated, tag = "14")]
    pub kfmffggjmne: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "8")]
    pub iblbnianphd: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, tag = "2")]
    pub cliigmnmhna: bool,
    #[prost(uint32, tag = "4")]
    pub plane_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pijpjcjmiem {
    #[prost(enumeration = "FightGameMode", tag = "3")]
    pub nbdlpgbidlc: i32,
    #[prost(message, optional, tag = "1")]
    pub ejofcnaedhk: ::core::option::Option<Epeghcgcmhp>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lhongadoaia {
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(uint64, tag = "10")]
    pub jjlogicpoao: u64,
    #[prost(message, repeated, tag = "1")]
    pub lipjdjpmokb: ::prost::alloc::vec::Vec<Cbbdiomifhd>,
    #[prost(enumeration = "FightGameMode", tag = "8")]
    pub nbdlpgbidlc: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gbhfggkaibe {
    #[prost(uint32, repeated, tag = "9")]
    pub caemjpoenod: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dgnhnkclllg {
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "5")]
    pub caemjpoenod: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ibeghcaalbn {
    #[prost(uint64, tag = "12")]
    pub jjlogicpoao: u64,
    #[prost(message, optional, tag = "7")]
    pub ejofcnaedhk: ::core::option::Option<Epeghcgcmhp>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cfegeaaflcc {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(enumeration = "FightGameMode", tag = "15")]
    pub nbdlpgbidlc: i32,
    #[prost(message, repeated, tag = "5")]
    pub lipjdjpmokb: ::prost::alloc::vec::Vec<Cbbdiomifhd>,
    #[prost(uint64, tag = "7")]
    pub jjlogicpoao: u64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ljhpeebakjn {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hcdcfkilgjf {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lhifnonecpi {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Iagaffmkhll {
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "7")]
    pub lipjdjpmokb: ::prost::alloc::vec::Vec<Cbbdiomifhd>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hfeehjgokdp {
    #[prost(message, optional, tag = "4")]
    pub ejofcnaedhk: ::core::option::Option<Epeghcgcmhp>,
    #[prost(enumeration = "LobbyModifyType", tag = "9")]
    pub r#type: i32,
    #[prost(uint32, tag = "12")]
    pub hfdjaelbnga: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cgegegaoggp {
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Geboifmbhcm {
    #[prost(uint32, tag = "9")]
    pub uid: u32,
    #[prost(enumeration = "LobbyModifyType", tag = "5")]
    pub r#type: i32,
    #[prost(message, repeated, tag = "2")]
    pub lipjdjpmokb: ::prost::alloc::vec::Vec<Cbbdiomifhd>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mlndbamafbp {
    #[prost(uint32, tag = "13")]
    pub uid: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Admnolclgna {
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gdipnflljgp {
    #[prost(enumeration = "FightGameMode", tag = "7")]
    pub nbdlpgbidlc: i32,
    #[prost(uint32, tag = "14")]
    pub sender_uid: u32,
    #[prost(uint32, tag = "11")]
    pub jjlogicpoao: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Idhkgfnbgkd {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fbogfjhokfj {
    #[prost(uint64, tag = "13")]
    pub nogfeemnhpc: u64,
    #[prost(enumeration = "FightGameMode", tag = "9")]
    pub nbdlpgbidlc: i32,
    #[prost(uint64, tag = "6")]
    pub jjlogicpoao: u64,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "1")]
    pub lipjdjpmokb: ::prost::alloc::vec::Vec<Cbbdiomifhd>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetMailCsReq {
    #[prost(uint32, tag = "7")]
    pub dapcdnelcma: u32,
    #[prost(uint32, tag = "12")]
    pub cijefnoojjk: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClientMail {
    #[prost(string, repeated, tag = "3")]
    pub para_list: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, tag = "11")]
    pub title: ::prost::alloc::string::String,
    #[prost(int64, tag = "4")]
    pub expire_time: i64,
    #[prost(int64, tag = "13")]
    pub time: i64,
    #[prost(string, tag = "8")]
    pub sender: ::prost::alloc::string::String,
    #[prost(bool, tag = "10")]
    pub is_read: bool,
    #[prost(message, optional, tag = "2")]
    pub attachment: ::core::option::Option<ItemList>,
    #[prost(enumeration = "MailType", tag = "9")]
    pub mail_type: i32,
    #[prost(uint32, tag = "14")]
    pub id: u32,
    #[prost(string, tag = "7")]
    pub content: ::prost::alloc::string::String,
    #[prost(uint32, tag = "6")]
    pub template_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetMailScRsp {
    #[prost(message, repeated, tag = "10")]
    pub mail_list: ::prost::alloc::vec::Vec<ClientMail>,
    #[prost(uint32, tag = "8")]
    pub total_num: u32,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(bool, tag = "14")]
    pub is_end: bool,
    #[prost(message, repeated, tag = "3")]
    pub notice_mail_list: ::prost::alloc::vec::Vec<ClientMail>,
    #[prost(uint32, tag = "9")]
    pub start: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hijlofhdmpp {
    #[prost(uint32, tag = "7")]
    pub id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ichomjjhegi {
    #[prost(uint32, tag = "14")]
    pub id: u32,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ngibfkbaboh {
    #[prost(uint32, repeated, tag = "15")]
    pub idmmhmdegnh: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DelMailScRsp {
    #[prost(uint32, repeated, tag = "2")]
    pub id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nhmfcfkcfil {
    #[prost(uint32, repeated, tag = "13")]
    pub ikfjelhcccg: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "8")]
    pub optional_reward_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ddnfdafmbjl {
    #[prost(uint32, tag = "9")]
    pub fopajgjlbem: u32,
    #[prost(uint32, tag = "6")]
    pub item_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakeMailAttachmentScRsp {
    #[prost(message, optional, tag = "4")]
    pub attachment: ::core::option::Option<ItemList>,
    #[prost(uint32, repeated, tag = "13")]
    pub succ_mail_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "8")]
    pub fail_mail_list: ::prost::alloc::vec::Vec<Ddnfdafmbjl>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NewMailScNotify {
    #[prost(uint32, repeated, tag = "2")]
    pub mail_id_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jjafhfgjmob {
    #[prost(message, repeated, tag = "7")]
    pub ocpofgjphlj: ::prost::alloc::vec::Vec<Ofccfdpcill>,
    #[prost(bool, tag = "6")]
    pub ighlhohcckc: bool,
    #[prost(message, repeated, tag = "8")]
    pub efglilfannc: ::prost::alloc::vec::Vec<Cidbbhamnki>,
    #[prost(message, optional, tag = "9")]
    pub fgnhlhedlpn: ::core::option::Option<Pbnbncjcpei>,
    #[prost(uint32, tag = "10")]
    pub nflbondjaie: u32,
    #[prost(int32, tag = "15")]
    pub acnpbbnlmie: i32,
    #[prost(message, optional, tag = "11")]
    pub ocbkfgaoheh: ::core::option::Option<Icimakbajgb>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pbnbncjcpei {
    #[prost(uint32, tag = "7")]
    pub haklffpfoke: u32,
    #[prost(uint32, tag = "14")]
    pub cbogmihhmop: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Icimakbajgb {
    #[prost(message, optional, tag = "9")]
    pub jlmnbkhjhmn: ::core::option::Option<RotateVector>,
    #[prost(message, optional, tag = "12")]
    pub obdcghjkpfe: ::core::option::Option<Vector>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bcipjenmjce {
    #[prost(uint32, tag = "4")]
    pub acnpbbnlmie: u32,
    #[prost(uint32, tag = "13")]
    pub nflbondjaie: u32,
    #[prost(message, optional, tag = "15")]
    pub motion: ::core::option::Option<MotionInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ganibgecnni {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(uint32, tag = "5")]
    pub acnpbbnlmie: u32,
    #[prost(message, optional, tag = "1")]
    pub fgnhlhedlpn: ::core::option::Option<Pbnbncjcpei>,
    #[prost(uint32, tag = "11")]
    pub nflbondjaie: u32,
    #[prost(message, optional, tag = "14")]
    pub motion: ::core::option::Option<MotionInfo>,
    #[prost(uint32, tag = "8")]
    pub default_pos: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ofccfdpcill {
    #[prost(uint32, tag = "10")]
    pub group_id: u32,
    #[prost(uint32, tag = "12")]
    pub glhagjgaehe: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jiihjimempj {
    #[prost(message, optional, tag = "3")]
    pub dlpgedgehlc: ::core::option::Option<Ofccfdpcill>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Iclacjjdkbc {
    #[prost(message, optional, tag = "11")]
    pub dlpgedgehlc: ::core::option::Option<Ofccfdpcill>,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(message, optional, tag = "14")]
    pub fgnhlhedlpn: ::core::option::Option<Pbnbncjcpei>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cidbbhamnki {
    #[prost(uint32, tag = "11")]
    pub glhagjgaehe: u32,
    #[prost(float, tag = "8")]
    pub lkefolcgfgd: f32,
    #[prost(uint32, tag = "2")]
    pub group_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mhecgoknflm {
    #[prost(message, optional, tag = "7")]
    pub ccpdoablklp: ::core::option::Option<Cidbbhamnki>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Imkhhndljak {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(message, optional, tag = "5")]
    pub ccpdoablklp: ::core::option::Option<Cidbbhamnki>,
    #[prost(message, optional, tag = "3")]
    pub fgnhlhedlpn: ::core::option::Option<Pbnbncjcpei>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jacpadnmlaf {
    #[prost(uint32, tag = "10")]
    pub glhagjgaehe: u32,
    #[prost(message, optional, tag = "3")]
    pub motion: ::core::option::Option<MotionInfo>,
    #[prost(message, optional, tag = "13")]
    pub ocbkfgaoheh: ::core::option::Option<Icimakbajgb>,
    #[prost(uint32, tag = "6")]
    pub group_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Nlfmaljpedm {
    #[prost(message, optional, tag = "12")]
    pub motion: ::core::option::Option<MotionInfo>,
    #[prost(uint32, tag = "3")]
    pub default_pos: u32,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fcnkmdhnmnl {
    #[prost(message, optional, tag = "7")]
    pub motion: ::core::option::Option<MotionInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cdkkkkkfgdn {
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(uint32, tag = "12")]
    pub default_pos: u32,
    #[prost(message, optional, tag = "1")]
    pub motion: ::core::option::Option<MotionInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mnakoonblec {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bmckkkbcpbn {
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(message, optional, tag = "6")]
    pub ocbkfgaoheh: ::core::option::Option<Icimakbajgb>,
    #[prost(uint32, tag = "5")]
    pub nflbondjaie: u32,
    #[prost(message, optional, tag = "1")]
    pub fgnhlhedlpn: ::core::option::Option<Pbnbncjcpei>,
    #[prost(message, repeated, tag = "8")]
    pub ocpofgjphlj: ::prost::alloc::vec::Vec<Ofccfdpcill>,
    #[prost(int32, tag = "14")]
    pub acnpbbnlmie: i32,
    #[prost(bool, tag = "9")]
    pub omejllmnpcn: bool,
    #[prost(message, repeated, tag = "12")]
    pub efglilfannc: ::prost::alloc::vec::Vec<Cidbbhamnki>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ogikfnajmkd {
    #[prost(message, optional, tag = "10")]
    pub ocbkfgaoheh: ::core::option::Option<Icimakbajgb>,
    #[prost(message, optional, tag = "14")]
    pub motion: ::core::option::Option<MotionInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fjdjohkoald {
    #[prost(uint32, tag = "2")]
    pub default_pos: u32,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(message, optional, tag = "13")]
    pub motion: ::core::option::Option<MotionInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Agkaigoinhh {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fbfghemdplc {
    #[prost(message, optional, tag = "3")]
    pub fgnhlhedlpn: ::core::option::Option<Pbnbncjcpei>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mldgpookpbm {
    #[prost(message, repeated, tag = "4")]
    pub ocpofgjphlj: ::prost::alloc::vec::Vec<Ofccfdpcill>,
    #[prost(bool, tag = "2")]
    pub omejllmnpcn: bool,
    #[prost(int32, tag = "12")]
    pub acnpbbnlmie: i32,
    #[prost(message, optional, tag = "6")]
    pub fgnhlhedlpn: ::core::option::Option<Pbnbncjcpei>,
    #[prost(message, optional, tag = "13")]
    pub ocbkfgaoheh: ::core::option::Option<Icimakbajgb>,
    #[prost(uint32, tag = "9")]
    pub nflbondjaie: u32,
    #[prost(message, repeated, tag = "8")]
    pub efglilfannc: ::prost::alloc::vec::Vec<Cidbbhamnki>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Eflgmafldgk {
    #[prost(message, optional, tag = "10")]
    pub ccpdoablklp: ::core::option::Option<Cidbbhamnki>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Apbbfpabnii {
    #[prost(message, optional, tag = "8")]
    pub ccpdoablklp: ::core::option::Option<Cidbbhamnki>,
    #[prost(message, optional, tag = "11")]
    pub fgnhlhedlpn: ::core::option::Option<Pbnbncjcpei>,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Igpelcgopmd {
    #[prost(message, repeated, tag = "15")]
    pub efglilfannc: ::prost::alloc::vec::Vec<Cidbbhamnki>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mjfcembpich {
    #[prost(uint32, tag = "5")]
    pub floor_id: u32,
    #[prost(uint32, tag = "4")]
    pub plane_id: u32,
    #[prost(uint32, tag = "14")]
    pub config_id: u32,
    #[prost(uint32, tag = "3")]
    pub group_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ibcgaglolna {
    #[prost(message, repeated, tag = "9")]
    pub bcemakcmadn: ::prost::alloc::vec::Vec<Mjfcembpich>,
    #[prost(int64, tag = "5")]
    pub jjcipimcbbj: i64,
    #[prost(uint32, tag = "11")]
    pub hobjminnbop: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gginonmhbkh {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gomjnodbocj {
    #[prost(message, repeated, tag = "3")]
    pub hiccaiapgmm: ::prost::alloc::vec::Vec<Ibcgaglolna>,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ijdkoleicoj {
    #[prost(uint32, tag = "5")]
    pub hobjminnbop: u32,
    #[prost(uint32, tag = "3")]
    pub dbfpaafodkg: u32,
    #[prost(message, repeated, tag = "11")]
    pub bcemakcmadn: ::prost::alloc::vec::Vec<Mjfcembpich>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mnjgdboahjb {
    #[prost(uint32, tag = "12")]
    pub hobjminnbop: u32,
    #[prost(message, repeated, tag = "4")]
    pub hiccaiapgmm: ::prost::alloc::vec::Vec<Ibcgaglolna>,
    #[prost(uint32, tag = "3")]
    pub dbfpaafodkg: u32,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Choebmgikbn {
    #[prost(message, repeated, tag = "11")]
    pub hiccaiapgmm: ::prost::alloc::vec::Vec<Ibcgaglolna>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dipcgpppifm {
    #[prost(message, optional, tag = "12")]
    pub ejofcnaedhk: ::core::option::Option<Epeghcgcmhp>,
    #[prost(enumeration = "FightGameMode", tag = "11")]
    pub nbdlpgbidlc: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lhibldghjpo {
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(message, optional, tag = "13")]
    pub ejofcnaedhk: ::core::option::Option<Epeghcgcmhp>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Nikjiknjojp {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lfahplfnmbf {
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bgaeoibbaho {
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "11")]
    pub lipjdjpmokb: ::prost::alloc::vec::Vec<Cbbdiomifhd>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kelffabdnpc {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Aiiplmkcgda {
    #[prost(uint64, tag = "7")]
    pub jjlogicpoao: u64,
    #[prost(uint64, tag = "1")]
    pub nogfeemnhpc: u64,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(enumeration = "FightGameMode", tag = "3")]
    pub nbdlpgbidlc: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ofmccfjngef {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lmpiecfmfoi {
    #[prost(uint32, tag = "5")]
    pub acjcphifmln: u32,
    #[prost(uint32, tag = "2")]
    pub ebgmbdmpegm: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dhonnihmaci {
    #[prost(uint32, tag = "8")]
    pub fmkkabmdinj: u32,
    #[prost(uint32, tag = "12")]
    pub count: u32,
    #[prost(uint32, tag = "9")]
    pub pos: u32,
    #[prost(uint32, tag = "3")]
    pub bkmpfeocfib: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Abgejnbcdjk {
    #[prost(message, repeated, tag = "15")]
    pub bgafcobnlpm: ::prost::alloc::vec::Vec<Dhonnihmaci>,
    #[prost(message, repeated, tag = "8")]
    pub jmbciclchkd: ::prost::alloc::vec::Vec<Lmpiecfmfoi>,
    #[prost(map = "uint32, uint32", tag = "2")]
    pub ilbhdlmlmck: ::std::collections::HashMap<u32, u32>,
    #[prost(map = "uint32, uint32", tag = "14")]
    pub begmfiaphlm: ::std::collections::HashMap<u32, u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Clnggbnifjl {
    #[prost(message, optional, tag = "11")]
    pub mfkjdoeblim: ::core::option::Option<Abgejnbcdjk>,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bbdefcgckdc {
    #[prost(uint32, tag = "9")]
    pub ebgmbdmpegm: u32,
    #[prost(uint32, tag = "8")]
    pub fmkkabmdinj: u32,
    #[prost(uint32, repeated, tag = "11")]
    pub jeppfdinbnb: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "10")]
    pub acjcphifmln: u32,
    #[prost(uint32, tag = "4")]
    pub bkmpfeocfib: u32,
    #[prost(map = "uint32, uint32", tag = "14")]
    pub ilbhdlmlmck: ::std::collections::HashMap<u32, u32>,
    #[prost(string, tag = "6")]
    pub miilnlhddjm: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Nnjadkelkck {
    #[prost(uint32, tag = "12")]
    pub acjcphifmln: u32,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(uint32, tag = "6")]
    pub ebgmbdmpegm: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Aliaobcdfdg {
    #[prost(message, optional, tag = "7")]
    pub mfkjdoeblim: ::core::option::Option<Abgejnbcdjk>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jfhhmncccdb {
    #[prost(uint32, tag = "3")]
    pub pos: u32,
    #[prost(uint32, tag = "1")]
    pub bkmpfeocfib: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Oafajmbnnng {
    #[prost(uint32, tag = "2")]
    pub bkmpfeocfib: u32,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(uint32, tag = "15")]
    pub pos: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetNpcMessageGroupCsReq {
    #[prost(uint32, repeated, tag = "2")]
    pub beeldjgiomn: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MessageItem {
    #[prost(uint32, tag = "1")]
    pub text_id: u32,
    #[prost(uint32, tag = "14")]
    pub item_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MessageSection {
    #[prost(uint32, repeated, tag = "10")]
    pub message_item_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "5")]
    pub item_list: ::prost::alloc::vec::Vec<MessageItem>,
    #[prost(enumeration = "MessageSectionStatus", tag = "11")]
    pub status: i32,
    #[prost(uint32, tag = "15")]
    pub frozen_item_id: u32,
    #[prost(uint32, tag = "3")]
    pub id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MessageGroup {
    #[prost(message, repeated, tag = "12")]
    pub message_section_list: ::prost::alloc::vec::Vec<MessageSection>,
    #[prost(uint32, tag = "14")]
    pub message_section_id: u32,
    #[prost(int64, tag = "3")]
    pub refresh_time: i64,
    #[prost(enumeration = "MessageGroupStatus", tag = "2")]
    pub status: i32,
    #[prost(uint32, tag = "4")]
    pub id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nollflmilfj {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "13")]
    pub hoblfdjkojo: ::prost::alloc::vec::Vec<MessageGroup>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Igjkjndogef {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dmoiobfajge {
    #[prost(bool, tag = "2")]
    pub hlnfbgacnpo: bool,
    #[prost(uint32, tag = "4")]
    pub npc_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gemjdhnlklc {
    #[prost(int64, tag = "11")]
    pub refresh_time: i64,
    #[prost(uint32, tag = "6")]
    pub group_id: u32,
    #[prost(enumeration = "MessageGroupStatus", tag = "15")]
    pub ebfajeangea: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lopcjeojhcb {
    #[prost(uint32, tag = "3")]
    pub section_id: u32,
    #[prost(enumeration = "MessageSectionStatus", tag = "7")]
    pub oppampfbfjf: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nenlhkpihfe {
    #[prost(message, repeated, tag = "14")]
    pub eipninjnkkp: ::prost::alloc::vec::Vec<Dmoiobfajge>,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lcjgnppljpl {
    #[prost(uint32, tag = "4")]
    pub item_id: u32,
    #[prost(uint32, tag = "3")]
    pub text_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Nlmhmbopngg {
    #[prost(uint32, tag = "3")]
    pub item_id: u32,
    #[prost(uint32, tag = "8")]
    pub text_id: u32,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kamanmbicpb {
    #[prost(uint32, tag = "5")]
    pub section_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pdehhhadmam {
    #[prost(message, optional, tag = "2")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "5")]
    pub section_id: u32,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bnnjhiigfoo {
    #[prost(uint32, tag = "2")]
    pub section_id: u32,
    #[prost(message, repeated, tag = "9")]
    pub item_list: ::prost::alloc::vec::Vec<MessageItem>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Chahphpaife {
    #[prost(message, repeated, tag = "3")]
    pub item_list: ::prost::alloc::vec::Vec<MessageItem>,
    #[prost(uint32, tag = "6")]
    pub section_id: u32,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(message, optional, tag = "1")]
    pub reward: ::core::option::Option<ItemList>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Begjohlpfpl {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Opkggfelilm {
    #[prost(map = "uint32, uint32", tag = "3")]
    pub apoldlgpkop: ::std::collections::HashMap<u32, u32>,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ShareCsReq {
    #[prost(uint32, tag = "2")]
    pub enfkggnomeo: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Adgnkecpoma {
    #[prost(uint32, tag = "9")]
    pub cccdkgamdlb: u32,
    #[prost(uint32, tag = "8")]
    pub enfkggnomeo: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ShareScRsp {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(message, optional, tag = "9")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(message, optional, tag = "11")]
    pub fgplilebkgl: ::core::option::Option<Adgnkecpoma>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetShareDataCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetShareDataScRsp {
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "9")]
    pub mfkjjbpndam: ::prost::alloc::vec::Vec<Adgnkecpoma>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TakePictureCsReq {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TakePictureScRsp {
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nlbmcgcaeio {
    #[prost(uint32, repeated, tag = "3")]
    pub pildefkpkle: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "6")]
    pub afleajihneb: u32,
    #[prost(uint32, tag = "15")]
    pub r#type: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pjklmnppmpk {
    #[prost(message, repeated, tag = "3")]
    pub mnelhnhckpj: ::prost::alloc::vec::Vec<Nlbmcgcaeio>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kjiapdmalbj {
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CancelCacheNotifyCsReq {
    #[prost(uint32, repeated, tag = "13")]
    pub colbgejelgi: ::prost::alloc::vec::Vec<u32>,
    #[prost(enumeration = "CancelNotifyType", tag = "6")]
    pub r#type: i32,
    #[prost(string, repeated, tag = "15")]
    pub kcljmcakojf: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CancelCacheNotifyScRsp {
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cmhengjmeeg {
    #[prost(string, tag = "1")]
    pub dgdlniefcpf: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Eeofccfoamf {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gmaajhdfacd {
    #[prost(uint32, tag = "14")]
    pub pdomacfemgg: u32,
    #[prost(uint32, tag = "7")]
    pub level: u32,
    #[prost(enumeration = "Dcadlnjbkbk", tag = "15")]
    pub r#type: i32,
    #[prost(uint32, tag = "12")]
    pub ifaikoioidd: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Eebokeeiene {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Egbagiakjml {
    #[prost(message, repeated, tag = "3")]
    pub odjigebehgc: ::prost::alloc::vec::Vec<Gmaajhdfacd>,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bnednbddbma {
    #[prost(message, optional, tag = "1")]
    pub kihchdffpol: ::core::option::Option<Gmaajhdfacd>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bhdcnopfbei {
    #[prost(message, optional, tag = "8")]
    pub kihchdffpol: ::core::option::Option<Gmaajhdfacd>,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ihgbjiclphc {
    #[prost(uint32, tag = "6")]
    pub lcbofmopgke: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pgplgimenlo {
    #[prost(uint32, tag = "3")]
    pub lcbofmopgke: u32,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Klbhfhjdbfi {
    #[prost(bool, tag = "6")]
    pub ncnaonifpfm: bool,
    #[prost(uint32, tag = "1")]
    pub bmcjhonbhjh: u32,
    #[prost(uint32, tag = "13")]
    pub level: u32,
    #[prost(uint32, tag = "7")]
    pub ifaikoioidd: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Onnpoipdach {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Foochmjkebd {
    #[prost(message, repeated, tag = "14")]
    pub lnbfdjmnacn: ::prost::alloc::vec::Vec<Klbhfhjdbfi>,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lmjpcmohllp {
    #[prost(uint64, tag = "11")]
    pub miilnlhddjm: u64,
    #[prost(message, optional, tag = "4")]
    pub odfhnchiejn: ::core::option::Option<Klbhfhjdbfi>,
    #[prost(uint32, tag = "12")]
    pub pneifbegmdh: u32,
    #[prost(uint32, tag = "13")]
    pub group_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bcildfgglnn {
    #[prost(message, optional, tag = "5")]
    pub odfhnchiejn: ::core::option::Option<Klbhfhjdbfi>,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jcdnmbckplf {
    #[prost(uint32, tag = "4")]
    pub id: u32,
    #[prost(enumeration = "Fjhikfikamo", tag = "3")]
    pub kcmjkgadpip: i32,
    #[prost(enumeration = "Giilenmkcah", tag = "5")]
    pub hhmabjdimgm: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ajmbfnkfgem {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lfhffkdbnhg {
    #[prost(message, repeated, tag = "1")]
    pub content_package_list: ::prost::alloc::vec::Vec<Jcdnmbckplf>,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jdmhnpobcbh {
    #[prost(message, optional, tag = "4")]
    pub data: ::core::option::Option<Jcdnmbckplf>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hbokfmpejpn {
    #[prost(message, optional, tag = "3")]
    pub data: ::core::option::Option<Jcdnmbckplf>,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "5")]
    pub content_package_list: ::prost::alloc::vec::Vec<Jcdnmbckplf>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hbgailhkelo {
    #[prost(uint32, repeated, tag = "8")]
    pub entity_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(enumeration = "Mnijhmepgnn", tag = "15")]
    pub hhmabjdimgm: i32,
    #[prost(uint32, tag = "14")]
    pub mmkogoknpkl: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cccbkfaakbd {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "3")]
    pub entity_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetMissionDataCsReq {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ikammklboco {
    #[prost(uint32, tag = "8")]
    pub id: u32,
    #[prost(uint32, tag = "12")]
    pub caoapdccpca: u32,
    #[prost(enumeration = "MissionSyncRecord", tag = "2")]
    pub r#type: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mission {
    #[prost(uint32, tag = "14")]
    pub progress: u32,
    #[prost(uint32, tag = "6")]
    pub id: u32,
    #[prost(enumeration = "MissionStatus", tag = "1")]
    pub status: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MissionCustomValue {
    #[prost(uint32, tag = "14")]
    pub index: u32,
    #[prost(uint32, tag = "6")]
    pub custom_value: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MissionCustomValueList {
    #[prost(message, repeated, tag = "7")]
    pub custom_value_list: ::prost::alloc::vec::Vec<MissionCustomValue>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MainMission {
    #[prost(uint32, tag = "8")]
    pub id: u32,
    #[prost(enumeration = "MissionStatus", tag = "5")]
    pub status: i32,
    #[prost(message, repeated, tag = "13")]
    pub custom_value_list: ::prost::alloc::vec::Vec<MissionCustomValue>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fhabeikafbo {
    #[prost(uint32, tag = "9")]
    pub id: u32,
    #[prost(oneof = "fhabeikafbo::Fjoojnkcnae", tags = "48")]
    pub fjoojnkcnae: ::core::option::Option<fhabeikafbo::Fjoojnkcnae>,
}
/// Nested message and enum types in `FHABEIKAFBO`.
pub mod fhabeikafbo {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Fjoojnkcnae {
        #[prost(message, tag = "48")]
        CustomValueList(super::MissionCustomValueList),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MainMissionCustomValue {
    #[prost(uint32, tag = "5")]
    pub main_mission_id: u32,
    #[prost(message, optional, tag = "10")]
    pub custom_value_list: ::core::option::Option<MissionCustomValueList>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetMissionDataScRsp {
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "5")]
    pub ojomocgiaic: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "15")]
    pub mission_list: ::prost::alloc::vec::Vec<Mission>,
    #[prost(message, repeated, tag = "6")]
    pub main_mission_list: ::prost::alloc::vec::Vec<MainMission>,
    #[prost(uint32, tag = "4")]
    pub track_mission_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AcceptMainMissionCsReq {
    #[prost(uint32, tag = "15")]
    pub main_mission_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AcceptMainMissionScRsp {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(uint32, tag = "12")]
    pub main_mission_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FinishTalkMissionCsReq {
    #[prost(message, repeated, tag = "2")]
    pub custom_value_list: ::prost::alloc::vec::Vec<MissionCustomValue>,
    #[prost(uint32, tag = "13")]
    pub sub_mission_id: u32,
    #[prost(string, tag = "5")]
    pub talk_str: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FinishTalkMissionScRsp {
    #[prost(uint32, tag = "11")]
    pub sub_mission_id: u32,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(string, tag = "1")]
    pub talk_str: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "2")]
    pub custom_value_list: ::prost::alloc::vec::Vec<MissionCustomValue>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MissionRewardScNotify {
    #[prost(message, optional, tag = "8")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "10")]
    pub sub_mission_id: u32,
    #[prost(uint32, tag = "7")]
    pub main_mission_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubMissionRewardScNotify {
    #[prost(uint32, tag = "8")]
    pub sub_mission_id: u32,
    #[prost(message, optional, tag = "12")]
    pub reward: ::core::option::Option<ItemList>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SyncTaskCsReq {
    #[prost(string, tag = "13")]
    pub key: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SyncTaskScRsp {
    #[prost(string, tag = "4")]
    pub key: ::prost::alloc::string::String,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MissionGroupWarnScNotify {
    #[prost(uint32, repeated, tag = "6")]
    pub njocoopicln: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dkadcmijpob {
    #[prost(uint32, tag = "11")]
    pub sub_mission_id: u32,
    #[prost(message, optional, tag = "5")]
    pub item_list: ::core::option::Option<ItemList>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Afpicdcpkci {
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(uint32, tag = "14")]
    pub sub_mission_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetMissionStatusCsReq {
    #[prost(uint32, repeated, tag = "7")]
    pub main_mission_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "10")]
    pub sub_mission_id_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetMissionStatusScRsp {
    #[prost(uint32, repeated, tag = "10")]
    pub unfinished_main_mission_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "5")]
    pub disabled_main_mission_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "4")]
    pub main_mission_mcv_list: ::prost::alloc::vec::Vec<MainMissionCustomValue>,
    #[prost(uint32, repeated, tag = "13")]
    pub finished_main_mission_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "15")]
    pub curversion_finished_main_mission_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "14")]
    pub sub_mission_status_list: ::prost::alloc::vec::Vec<Mission>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TeleportToMissionResetPointCsReq {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TeleportToMissionResetPointScRsp {
    #[prost(message, optional, tag = "4")]
    pub motion: ::core::option::Option<MotionInfo>,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(uint32, tag = "15")]
    pub default_pos: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StartFinishSubMissionScNotify {
    #[prost(uint32, tag = "15")]
    pub sub_mission_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StartFinishMainMissionScNotify {
    #[prost(uint32, tag = "10")]
    pub main_mission_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetMainMissionCustomValueCsReq {
    #[prost(uint32, repeated, tag = "11")]
    pub main_mission_id_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetMainMissionCustomValueScRsp {
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "15")]
    pub main_mission_list: ::prost::alloc::vec::Vec<MainMission>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MissionAcceptScNotify {
    #[prost(uint32, repeated, tag = "10")]
    pub sub_mission_id_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hhjlcadbemf {
    #[prost(uint32, tag = "15")]
    pub track_mission_id: u32,
    #[prost(uint32, tag = "1")]
    pub lmbceopcigc: u32,
    #[prost(enumeration = "TrackMainMissionUpdateReasonId", tag = "11")]
    pub ijdjmnjbobi: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jbeijkcopfi {
    #[prost(uint32, tag = "4")]
    pub track_mission_id: u32,
    #[prost(uint32, tag = "14")]
    pub dkmbbnlmnne: u32,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FinishedMissionScNotify {
    #[prost(uint32, repeated, tag = "4")]
    pub finished_main_mission_id_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fchdeoggien {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Odaijigeajl {
    #[prost(uint32, tag = "12")]
    pub fljbjpahjif: u32,
    #[prost(bool, tag = "14")]
    pub ljfgifbdanc: bool,
    #[prost(uint32, tag = "1")]
    pub ejhdcneegmi: u32,
    #[prost(uint32, tag = "5")]
    pub engjfichdml: u32,
    #[prost(uint32, tag = "6")]
    pub cpiogjkfech: u32,
    #[prost(bool, tag = "11")]
    pub hgmmchhbkpb: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Llgniknmcke {
    #[prost(uint32, repeated, tag = "1")]
    pub ofiodjnlbea: ::prost::alloc::vec::Vec<u32>,
    #[prost(enumeration = "Gojoindbkik", tag = "2")]
    pub nmamonllall: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ooemibfnlld {
    #[prost(uint32, tag = "4")]
    pub ekpnclpoenk: u32,
    #[prost(uint32, tag = "7")]
    pub progress: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lailnigfpoo {
    #[prost(bool, tag = "10")]
    pub is_taken_reward: bool,
    #[prost(bool, tag = "14")]
    pub aelpfebgnok: bool,
    #[prost(uint64, tag = "13")]
    pub khgpfhboele: u64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bcmokfhjmpm {
    #[prost(message, repeated, tag = "10")]
    pub ifkfepkhlgn: ::prost::alloc::vec::Vec<Ooemibfnlld>,
    #[prost(uint64, tag = "14")]
    pub eboolgnacjj: u64,
    #[prost(uint64, tag = "15")]
    pub jojndgbejek: u64,
    #[prost(uint32, tag = "2")]
    pub ljjmleioife: u32,
    #[prost(string, tag = "98")]
    pub pjdfbpbmbba: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "6")]
    pub kgbejknclfk: ::prost::alloc::vec::Vec<Ooemibfnlld>,
    #[prost(bool, tag = "5")]
    pub fholfdonoii: bool,
    #[prost(message, repeated, tag = "3")]
    pub cjfmaiakenl: ::prost::alloc::vec::Vec<Ooemibfnlld>,
    #[prost(message, repeated, tag = "12")]
    pub ebabbejipjn: ::prost::alloc::vec::Vec<Lailnigfpoo>,
    #[prost(uint32, tag = "4")]
    pub bnoldnbmjhf: u32,
    #[prost(uint32, tag = "13")]
    pub dgalcmfidfp: u32,
    #[prost(message, repeated, tag = "7")]
    pub jckngfjeegi: ::prost::alloc::vec::Vec<Ooemibfnlld>,
    #[prost(uint64, tag = "9")]
    pub omgkjljihlh: u64,
    #[prost(string, tag = "127")]
    pub jlegpnihmjd: ::prost::alloc::string::String,
    #[prost(uint32, tag = "8")]
    pub hhjpblekapn: u32,
    #[prost(uint32, tag = "11")]
    pub dgepmkffoab: u32,
    #[prost(uint32, tag = "1")]
    pub jgnihljfjpp: u32,
    #[prost(string, tag = "1832")]
    pub ddibefmilmp: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Edkgomnehoh {
    #[prost(message, repeated, tag = "13")]
    pub fjoafflleok: ::prost::alloc::vec::Vec<Bcmokfhjmpm>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Njdebdjlcld {
    #[prost(message, optional, tag = "4")]
    pub iedgkhdjjdc: ::core::option::Option<Edkgomnehoh>,
    #[prost(message, optional, tag = "12")]
    pub stt: ::core::option::Option<Kjbmlbgibjf>,
    #[prost(message, optional, tag = "7")]
    pub gpfgdokngel: ::core::option::Option<Icihabolhpn>,
    #[prost(message, optional, tag = "10")]
    pub ocbkfgaoheh: ::core::option::Option<Jajgkkdpalc>,
    #[prost(message, optional, tag = "14")]
    pub oelhkeipidj: ::core::option::Option<Cannibgclcl>,
    #[prost(message, optional, tag = "13")]
    pub hehjkfilinn: ::core::option::Option<Nfdgijlolgd>,
    #[prost(message, optional, tag = "2")]
    pub hljmhnabfmc: ::core::option::Option<Odaijigeajl>,
    #[prost(message, optional, tag = "5")]
    pub fghciadcmnj: ::core::option::Option<Hfdgmjjfohm>,
    #[prost(message, optional, tag = "1")]
    pub ljaogapdfha: ::core::option::Option<Aedkpbfckgo>,
    #[prost(message, optional, tag = "15")]
    pub jnhjeeljfhf: ::core::option::Option<Llgniknmcke>,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(message, optional, tag = "11")]
    pub lgopnbhhhbg: ::core::option::Option<Afdalbganpc>,
    #[prost(uint32, repeated, tag = "3")]
    pub cokcgfmeiba: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nfdgijlolgd {
    #[prost(uint32, repeated, tag = "12")]
    pub hfmdlhifmpi: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fjgbnbkcpea {
    #[prost(message, optional, tag = "12")]
    pub hehjkfilinn: ::core::option::Option<Nfdgijlolgd>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kjbmlbgibjf {
    #[prost(uint32, repeated, tag = "9")]
    pub jihchilfjpi: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "6")]
    pub occmnidebbj: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Noacpjfdbnc {
    #[prost(message, optional, tag = "15")]
    pub stt: ::core::option::Option<Kjbmlbgibjf>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Iaaccafgepi {
    #[prost(uint32, tag = "6")]
    pub map_id: u32,
    #[prost(enumeration = "Ihgjllngdkl", tag = "11")]
    pub mafkcbodmmc: i32,
    #[prost(uint32, tag = "8")]
    pub hhcbjghkcpc: u32,
    #[prost(bool, tag = "13")]
    pub jmdeflafice: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jajgkkdpalc {
    #[prost(uint32, tag = "15")]
    pub pgalbdiiefg: u32,
    #[prost(message, optional, tag = "8")]
    pub hgbigbfgbom: ::core::option::Option<Iaaccafgepi>,
    #[prost(message, repeated, tag = "1")]
    pub imopiejbhod: ::prost::alloc::vec::Vec<Iaaccafgepi>,
    #[prost(uint32, tag = "13")]
    pub lbbonkacgej: u32,
    #[prost(message, repeated, tag = "12")]
    pub nbmpbgpjonh: ::prost::alloc::vec::Vec<Iaaccafgepi>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nkjhigbojge {
    #[prost(message, repeated, tag = "3")]
    pub imopiejbhod: ::prost::alloc::vec::Vec<Iaaccafgepi>,
    #[prost(message, repeated, tag = "7")]
    pub nbmpbgpjonh: ::prost::alloc::vec::Vec<Iaaccafgepi>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Comeolglnko {
    #[prost(uint32, tag = "15")]
    pub event_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pblcejhpopo {
    #[prost(uint32, tag = "12")]
    pub event_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lihocehepdb {
    #[prost(uint32, tag = "8")]
    pub event_id: u32,
    #[prost(uint32, tag = "14")]
    pub lfcmbgoaibb: u32,
    #[prost(uint32, tag = "7")]
    pub kdmlllghjon: u32,
    #[prost(uint32, repeated, tag = "2")]
    pub hfejhlniggh: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ohnbchloebl {
    #[prost(uint32, tag = "13")]
    pub olfnjjklgmk: u32,
    #[prost(uint32, tag = "1")]
    pub eccjbglbigm: u32,
    #[prost(uint32, tag = "14")]
    pub lfcmbgoaibb: u32,
    #[prost(uint32, tag = "15")]
    pub event_id: u32,
    #[prost(uint32, repeated, tag = "5")]
    pub hfejhlniggh: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Blmjnffpmcn {
    #[prost(uint32, tag = "11")]
    pub pifpgkffbpn: u32,
    #[prost(message, repeated, tag = "8")]
    pub kmkfojahelj: ::prost::alloc::vec::Vec<Lbenaahcpeo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Aaibakechce {
    #[prost(uint32, tag = "13")]
    pub pagcamagflb: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fgonfnidohj {
    #[prost(uint32, tag = "14")]
    pub shop_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Iponfkajenj {
    #[prost(uint32, tag = "15")]
    pub apaobdgjmeg: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Nalpjmljpnp {
    #[prost(uint32, tag = "2")]
    pub ieejchfepha: u32,
    #[prost(uint32, tag = "1")]
    pub oefhmbjblgc: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lbenaahcpeo {
    #[prost(uint32, tag = "4")]
    pub okdlmejpche: u32,
    #[prost(oneof = "lbenaahcpeo::Edapchiojmd", tags = "5, 8, 10, 1, 3, 14, 9, 6, 12")]
    pub edapchiojmd: ::core::option::Option<lbenaahcpeo::Edapchiojmd>,
}
/// Nested message and enum types in `LBENAAHCPEO`.
pub mod lbenaahcpeo {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Edapchiojmd {
        #[prost(message, tag = "5")]
        Pecbimkooah(super::Comeolglnko),
        #[prost(message, tag = "8")]
        Emlnnmlgnkh(super::Pblcejhpopo),
        #[prost(message, tag = "10")]
        Jbjldppdbbc(super::Lihocehepdb),
        #[prost(message, tag = "1")]
        Ecoifnnjdap(super::Aaibakechce),
        #[prost(message, tag = "3")]
        Nbjicdajdgf(super::Fgonfnidohj),
        #[prost(message, tag = "14")]
        Gajbfpcpigm(super::Iponfkajenj),
        #[prost(message, tag = "9")]
        Joppaemppfh(super::Nalpjmljpnp),
        #[prost(message, tag = "6")]
        Joadhbldimf(super::Ohnbchloebl),
        #[prost(message, tag = "12")]
        Iefoghngcmc(super::Blmjnffpmcn),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Icihabolhpn {
    #[prost(message, optional, tag = "4")]
    pub fhnpagihinf: ::core::option::Option<Lbenaahcpeo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Baojkhhnipi {
    #[prost(message, optional, tag = "1")]
    pub fhnpagihinf: ::core::option::Option<Lbenaahcpeo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kijlbdppdln {
    #[prost(message, optional, tag = "13")]
    pub hgbigbfgbom: ::core::option::Option<Iaaccafgepi>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Blahebdcjfp {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gamakoobjpj {
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(uint32, tag = "15")]
    pub blhiabbkgpb: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kfcddeochha {
    #[prost(uint32, tag = "6")]
    pub ocfhhdcbfbh: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dfnefihibgp {
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(uint32, tag = "14")]
    pub ocfhhdcbfbh: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bdonopofpnf {
    #[prost(uint32, tag = "4")]
    pub dgbmdpbialg: u32,
    #[prost(uint32, tag = "3")]
    pub cnifhnbiofj: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eejekfgioko {
    #[prost(message, repeated, tag = "15")]
    pub hecjnjniakk: ::prost::alloc::vec::Vec<Iaaccafgepi>,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(message, optional, tag = "1")]
    pub ocbkfgaoheh: ::core::option::Option<Jajgkkdpalc>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kgkajkpjlfc {
    #[prost(uint32, tag = "9")]
    pub event_id: u32,
    #[prost(uint32, tag = "10")]
    pub kdmlllghjon: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ddcelcojgnp {
    #[prost(uint32, tag = "13")]
    pub lgiiahidlmg: u32,
    #[prost(uint32, tag = "11")]
    pub event_id: u32,
    #[prost(uint32, tag = "7")]
    pub kdmlllghjon: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oicaphlmkfg {
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(uint32, tag = "8")]
    pub event_id: u32,
    #[prost(message, optional, tag = "14")]
    pub gpfgdokngel: ::core::option::Option<Lbenaahcpeo>,
    #[prost(uint32, tag = "11")]
    pub kdmlllghjon: u32,
    #[prost(message, repeated, tag = "1")]
    pub abnoinlokln: ::prost::alloc::vec::Vec<Ddcelcojgnp>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Chohhhjcanj {
    #[prost(uint32, tag = "14")]
    pub event_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kcaheepiepd {
    #[prost(message, optional, tag = "13")]
    pub gpfgdokngel: ::core::option::Option<Lbenaahcpeo>,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(uint32, tag = "4")]
    pub event_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jniomamdmlp {
    #[prost(uint32, tag = "8")]
    pub event_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Geaaflhknmi {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(message, optional, tag = "7")]
    pub gpfgdokngel: ::core::option::Option<Lbenaahcpeo>,
    #[prost(uint32, tag = "14")]
    pub event_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fagifhgcfjn {
    #[prost(uint32, tag = "14")]
    pub event_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ildhpdfmmbm {
    #[prost(message, optional, tag = "9")]
    pub gpfgdokngel: ::core::option::Option<Lbenaahcpeo>,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(uint32, tag = "11")]
    pub event_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gonibbggnan {
    #[prost(uint32, tag = "7")]
    pub shop_id: u32,
    #[prost(uint32, tag = "3")]
    pub knangdkhiej: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bmmnbplhdla {
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(uint32, tag = "13")]
    pub knangdkhiej: u32,
    #[prost(uint32, tag = "4")]
    pub shop_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ijofokmggcc {
    #[prost(uint32, tag = "12")]
    pub pagcamagflb: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Njbgcnpglpm {
    #[prost(uint32, tag = "7")]
    pub pagcamagflb: u32,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Chdldbaaoaf {
    #[prost(uint32, tag = "12")]
    pub content_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Degajkfemjo {
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(uint32, tag = "12")]
    pub content_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MonopolyActionResult {
    #[prost(uint32, tag = "13")]
    pub trigger_map_id: u32,
    #[prost(uint32, tag = "10")]
    pub click_map_id: u32,
    #[prost(message, optional, tag = "6")]
    pub detail: ::core::option::Option<Nibjamfmefd>,
    #[prost(uint32, tag = "12")]
    pub click_cell_id: u32,
    #[prost(uint32, tag = "14")]
    pub effect_type: u32,
    #[prost(enumeration = "Gkejfkakenm", tag = "7")]
    pub source_type: i32,
    #[prost(uint32, tag = "11")]
    pub trigger_cell_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Foebkcbkmgi {
    #[prost(message, repeated, tag = "10")]
    pub pfnokncdpge: ::prost::alloc::vec::Vec<MonopolyActionResult>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lmmebmbgldn {
    #[prost(uint32, tag = "6")]
    pub hkmihejcaem: u32,
    #[prost(bool, tag = "2")]
    pub blhdohmacbm: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Nibjamfmefd {
    #[prost(
        oneof = "nibjamfmefd::Pfablbbfojf",
        tags = "3, 9, 2, 10, 1, 4, 11, 6, 13, 8, 7, 5, 14"
    )]
    pub pfablbbfojf: ::core::option::Option<nibjamfmefd::Pfablbbfojf>,
}
/// Nested message and enum types in `NIBJAMFMEFD`.
pub mod nibjamfmefd {
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum Pfablbbfojf {
        #[prost(message, tag = "3")]
        Mecllcdabno(super::Lmkaaefpffo),
        #[prost(message, tag = "9")]
        Ffipkmhckhj(super::Lmkaaefpffo),
        #[prost(message, tag = "2")]
        Nfbcgknopda(super::Aidfbbiapep),
        #[prost(message, tag = "10")]
        Dachanhppbg(super::Aidfbbiapep),
        #[prost(message, tag = "1")]
        Noenhhilnah(super::Bmplfjkeolf),
        #[prost(message, tag = "4")]
        Kpbjipgejpl(super::Bmplfjkeolf),
        #[prost(message, tag = "11")]
        Dmdpcooafjk(super::Lnkmknbpijh),
        #[prost(message, tag = "6")]
        Hhibfnagkff(super::Lnkmknbpijh),
        #[prost(message, tag = "13")]
        Nkcmgbcpjgg(super::Lmmebmbgldn),
        #[prost(message, tag = "8")]
        Hanogacjpkb(super::Lpbamokkjcm),
        #[prost(message, tag = "7")]
        Omfecimladc(super::Bmplfjkeolf),
        #[prost(message, tag = "5")]
        Ngonccblaol(super::Lnkmknbpijh),
        #[prost(message, tag = "14")]
        Fjghnlnjlph(super::Nmghfolkfaj),
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Nmghfolkfaj {
    #[prost(uint32, tag = "3")]
    pub gjlkoggiifo: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lmkaaefpffo {
    #[prost(uint32, tag = "6")]
    pub ogjofmcmfpg: u32,
    #[prost(uint32, tag = "13")]
    pub bmalpkekbel: u32,
    #[prost(uint32, tag = "7")]
    pub item_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lnkmknbpijh {
    #[prost(uint32, tag = "13")]
    pub ognkmdnjgog: u32,
    #[prost(uint32, tag = "10")]
    pub igdbofcdjol: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lpbamokkjcm {
    #[prost(uint32, tag = "10")]
    pub njdggjbefcn: u32,
    #[prost(uint32, tag = "14")]
    pub mdflfllmgna: u32,
    #[prost(uint32, tag = "13")]
    pub hnlfmjoknbn: u32,
    #[prost(uint32, tag = "12")]
    pub knggppiogae: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Haknofdpbod {
    #[prost(uint32, tag = "6")]
    pub acdopcbmpnl: u32,
    #[prost(uint32, tag = "12")]
    pub fpogialmcip: u32,
    #[prost(uint32, tag = "1")]
    pub config_id: u32,
    #[prost(oneof = "haknofdpbod::Heaiaedbpkl", tags = "15, 9, 10")]
    pub heaiaedbpkl: ::core::option::Option<haknofdpbod::Heaiaedbpkl>,
}
/// Nested message and enum types in `HAKNOFDPBOD`.
pub mod haknofdpbod {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Heaiaedbpkl {
        #[prost(message, tag = "15")]
        Ejcolgnjgdc(super::Gjkiapipgan),
        #[prost(message, tag = "9")]
        Lkaniplnkgc(super::Eimobgllefo),
        #[prost(message, tag = "10")]
        Bdempakhgmj(super::Eopfmpaooje),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hfdgmjjfohm {
    #[prost(message, optional, tag = "5")]
    pub npoigjpcgfb: ::core::option::Option<Lmmebmbgldn>,
    #[prost(message, repeated, tag = "11")]
    pub pefmdfkecod: ::prost::alloc::vec::Vec<Haknofdpbod>,
    #[prost(message, optional, tag = "4")]
    pub ajcinkhbdjb: ::core::option::Option<Haknofdpbod>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pnkjedcnkgb {
    #[prost(message, optional, tag = "10")]
    pub pemijimjmio: ::core::option::Option<ItemList>,
    #[prost(message, optional, tag = "4")]
    pub gajbfpcpigm: ::core::option::Option<Haknofdpbod>,
    #[prost(message, optional, tag = "2")]
    pub item_list: ::core::option::Option<ItemList>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dgcajcanmdl {
    #[prost(message, optional, tag = "6")]
    pub npoigjpcgfb: ::core::option::Option<Lmmebmbgldn>,
    #[prost(message, optional, tag = "2")]
    pub gajbfpcpigm: ::core::option::Option<Haknofdpbod>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bfgmdkieckc {
    #[prost(uint32, tag = "2")]
    pub acdopcbmpnl: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MonopolyGameRaiseRatioScRsp {
    #[prost(uint32, tag = "11")]
    pub ratio: u32,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Aimlclgenna {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fhdeonmikgp {
    #[prost(uint32, tag = "11")]
    pub kekjcdmiddl: u32,
    #[prost(int64, tag = "6")]
    pub iihkiklioji: i64,
    #[prost(message, optional, tag = "12")]
    pub ljaogapdfha: ::core::option::Option<Aedkpbfckgo>,
    #[prost(bool, tag = "10")]
    pub oicaghgmmfp: bool,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pgbjbgaioda {
    #[prost(bool, tag = "15")]
    pub ifhpjjblndl: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Accpmemjopk {
    #[prost(uint32, tag = "10")]
    pub ioabhfpabbe: u32,
    #[prost(uint32, tag = "12")]
    pub heoofpgkdcd: u32,
    #[prost(int64, tag = "11")]
    pub iihkiklioji: i64,
    #[prost(uint32, tag = "15")]
    pub ofgnignohaf: u32,
    #[prost(uint32, tag = "1")]
    pub hcdbbflpcfl: u32,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(uint32, tag = "7")]
    pub hbfffgpjkic: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gjkiapipgan {
    #[prost(bool, tag = "2")]
    pub nfeadmfnflk: bool,
    #[prost(uint32, repeated, tag = "4")]
    pub leghknnkomg: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "14")]
    pub fhbopepjaen: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "6")]
    pub pogemmicila: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "1")]
    pub oefjmefpipl: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Icmgjfbmaai {
    #[prost(uint32, tag = "6")]
    pub hcfpofmdgkn: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oefgmalbjko {
    #[prost(bool, tag = "5")]
    pub nfeadmfnflk: bool,
    #[prost(uint32, repeated, tag = "4")]
    pub leghknnkomg: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(uint32, tag = "10")]
    pub npjeecedpok: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mjakjjgneal {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MonopolyGameGachaScRsp {
    #[prost(uint32, repeated, tag = "11")]
    pub result_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Nkacimeoapd {
    #[prost(uint32, tag = "12")]
    pub pogjhkfbmch: u32,
    #[prost(uint32, tag = "3")]
    pub ibadobadhjh: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eimobgllefo {
    #[prost(uint32, tag = "13")]
    pub ohlepkekmnh: u32,
    #[prost(uint32, tag = "15")]
    pub chjngdioome: u32,
    #[prost(message, repeated, tag = "9")]
    pub ndggacpicbf: ::prost::alloc::vec::Vec<Nkacimeoapd>,
    #[prost(uint32, tag = "6")]
    pub bhpfpejbkec: u32,
    #[prost(uint32, tag = "2")]
    pub eaejlofgafo: u32,
    #[prost(uint32, repeated, tag = "10")]
    pub hpnhhcmkjcb: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Aomioingdpn {
    #[prost(message, repeated, tag = "1")]
    pub ndggacpicbf: ::prost::alloc::vec::Vec<Nkacimeoapd>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ephjeicdhfj {
    #[prost(message, optional, tag = "1")]
    pub lkaniplnkgc: ::core::option::Option<Eimobgllefo>,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Oockalnfhnp {
    #[prost(uint32, tag = "11")]
    pub chjngdioome: u32,
    #[prost(uint32, tag = "15")]
    pub hmcjobjbpkj: u32,
    #[prost(uint32, tag = "6")]
    pub bgbihidhcon: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hlpgdgfigij {
    #[prost(message, repeated, tag = "15")]
    pub leadmneimdp: ::prost::alloc::vec::Vec<Oockalnfhnp>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Eopfmpaooje {
    #[prost(uint32, tag = "6")]
    pub ppclbdbjlmo: u32,
    #[prost(bool, tag = "8")]
    pub lopdbaegfkp: bool,
    #[prost(uint32, tag = "11")]
    pub hmhjdbifgdi: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Nkipfeoebdl {
    #[prost(uint32, tag = "6")]
    pub hmhjdbifgdi: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kgldaepcppc {
    #[prost(uint32, tag = "11")]
    pub hmhjdbifgdi: u32,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ackncaaamjm {
    #[prost(message, optional, tag = "1")]
    pub item_list: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "13")]
    pub giacfcddjnm: u32,
    #[prost(uint32, tag = "3")]
    pub ppclbdbjlmo: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pcfnkghkkip {
    #[prost(message, repeated, tag = "2")]
    pub jhiikpejeie: ::prost::alloc::vec::Vec<Ackncaaamjm>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Maofchpdpam {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ibgpapkjdnp {
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Aidfbbiapep {
    #[prost(uint32, tag = "2")]
    pub pagcamagflb: u32,
    #[prost(uint32, tag = "8")]
    pub milkeacflpo: u32,
    #[prost(uint32, tag = "12")]
    pub level: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cannibgclcl {
    #[prost(message, repeated, tag = "6")]
    pub magefljgjnd: ::prost::alloc::vec::Vec<Aidfbbiapep>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Aedkpbfckgo {
    #[prost(uint32, tag = "2")]
    pub efinfpkkjle: u32,
    #[prost(bool, tag = "1")]
    pub imoblgoajcb: bool,
    #[prost(uint32, tag = "12")]
    pub fnigpgbgehn: u32,
    #[prost(uint32, tag = "6")]
    pub pddngkncpeb: u32,
    #[prost(uint32, tag = "3")]
    pub kmgiemofogb: u32,
    #[prost(uint32, tag = "7")]
    pub pilaagokaof: u32,
    #[prost(uint32, tag = "15")]
    pub pkdlkcbkkpf: u32,
    #[prost(uint32, tag = "13")]
    pub gimdhbnjooo: u32,
    #[prost(uint32, tag = "8")]
    pub ifkdgebcdeg: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gnpcmainboh {
    #[prost(uint32, tag = "5")]
    pub kekjcdmiddl: u32,
    #[prost(message, optional, tag = "12")]
    pub ljaogapdfha: ::core::option::Option<Aedkpbfckgo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bmplfjkeolf {
    #[prost(uint32, tag = "2")]
    pub coffebnibhk: u32,
    #[prost(uint32, tag = "1")]
    pub okdlmejpche: u32,
    #[prost(uint32, tag = "11")]
    pub buff_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Afdalbganpc {
    #[prost(message, repeated, tag = "12")]
    pub buff_list: ::prost::alloc::vec::Vec<Bmplfjkeolf>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Indglkcecdc {
    #[prost(uint32, tag = "3")]
    pub dpjkojgcjlp: u32,
    #[prost(uint32, tag = "11")]
    pub uid: u32,
    #[prost(uint32, tag = "15")]
    pub hdilbdipgho: u32,
    #[prost(uint32, tag = "14")]
    pub pilaagokaof: u32,
    #[prost(uint32, tag = "6")]
    pub fnigpgbgehn: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fkdhpcnodpp {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dijgfblhpgl {
    #[prost(message, repeated, tag = "2")]
    pub dcfhgaajlnn: ::prost::alloc::vec::Vec<Indglkcecdc>,
    #[prost(message, optional, tag = "9")]
    pub icmgegefdle: ::core::option::Option<Indglkcecdc>,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mhkogioknap {
    #[prost(uint32, tag = "7")]
    pub cbegnbkmhcd: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hcdmggfkikk {
    #[prost(uint32, tag = "9")]
    pub cbegnbkmhcd: u32,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(message, optional, tag = "8")]
    pub reward_list: ::core::option::Option<ItemList>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Akahkdackef {
    #[prost(uint32, tag = "3")]
    pub hdilbdipgho: u32,
    #[prost(uint32, repeated, tag = "15")]
    pub ofiodjnlbea: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Iekjniccchh {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mfdkinpdmke {
    #[prost(uint32, tag = "12")]
    pub fioepgpebfd: u32,
    #[prost(uint32, tag = "10")]
    pub cnt: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Abfndlalhhe {
    #[prost(int32, tag = "14")]
    pub phnkkellanm: i32,
    #[prost(message, repeated, tag = "7")]
    pub gmdhhogbacn: ::prost::alloc::vec::Vec<Mfdkinpdmke>,
    #[prost(bool, tag = "12")]
    pub pcadcgcelin: bool,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(bool, tag = "2")]
    pub is_taken_reward: bool,
    #[prost(int32, tag = "11")]
    pub ljhaifciabh: i32,
    #[prost(uint32, tag = "15")]
    pub progress: u32,
    #[prost(message, repeated, tag = "3")]
    pub abnoinlokln: ::prost::alloc::vec::Vec<Ddcelcojgnp>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lfaojfbggca {
    #[prost(uint32, tag = "8")]
    pub ipgeclelhgj: u32,
    #[prost(bool, tag = "6")]
    pub bagmaoipmje: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Noeknnofpij {
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(message, optional, tag = "2")]
    pub hgbigbfgbom: ::core::option::Option<Iaaccafgepi>,
    #[prost(uint32, tag = "6")]
    pub oefhmbjblgc: u32,
    #[prost(uint32, tag = "3")]
    pub ieejchfepha: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SocialEventServerCache {
    #[prost(uint32, tag = "10")]
    pub id: u32,
    #[prost(uint32, tag = "15")]
    pub sub_coin: u32,
    #[prost(uint32, tag = "9")]
    pub src_uid: u32,
    #[prost(uint32, tag = "7")]
    pub add_coin: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bflfjllpecm {
    #[prost(message, repeated, tag = "1")]
    pub miaeaffdgmh: ::prost::alloc::vec::Vec<SocialEventServerCache>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ijlonamlbop {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oepolblmdcc {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "8")]
    pub miaeaffdgmh: ::prost::alloc::vec::Vec<SocialEventServerCache>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nhnlbgafnkc {
    #[prost(uint32, repeated, tag = "7")]
    pub jiddlnhjnpb: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oknhfaidleg {
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "14")]
    pub bfgjmmpcpnj: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pbobnkmddjj {
    #[prost(uint32, tag = "9")]
    pub hhjpblekapn: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pkcheleekng {
    #[prost(uint32, tag = "8")]
    pub hhjpblekapn: u32,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "15")]
    pub blmedlnokei: ::prost::alloc::vec::Vec<Lailnigfpoo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fekkjnlipfa {
    #[prost(uint32, tag = "12")]
    pub hhjpblekapn: u32,
    #[prost(uint64, tag = "9")]
    pub pmelcdfhgkc: u64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Djddcaoncnb {
    #[prost(uint32, tag = "3")]
    pub hhjpblekapn: u32,
    #[prost(message, optional, tag = "7")]
    pub reward_list: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(uint32, tag = "10")]
    pub pmelcdfhgkc: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Epfbhnchckc {
    #[prost(uint64, tag = "15")]
    pub pmelcdfhgkc: u64,
    #[prost(uint32, tag = "9")]
    pub hhjpblekapn: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ddgplanabjg {
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(uint64, tag = "1")]
    pub pmelcdfhgkc: u64,
    #[prost(uint32, tag = "15")]
    pub hhjpblekapn: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kkckkabgkhj {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kpejbklmihn {
    #[prost(uint32, tag = "15")]
    pub dpjkojgcjlp: u32,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(uint32, tag = "5")]
    pub eimgbknlgnf: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hciochhdgnk {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hnfefigimak {
    #[prost(message, optional, tag = "7")]
    pub iedgkhdjjdc: ::core::option::Option<Edkgomnehoh>,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hobmiamcmii {
    #[prost(uint32, repeated, tag = "15")]
    pub ljbgjhpkkjj: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Iafnbemjpcg {
    #[prost(message, optional, tag = "3")]
    pub reward_list: ::core::option::Option<ItemList>,
    #[prost(uint32, repeated, tag = "2")]
    pub ljbgjhpkkjj: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fenpkdmbfpm {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bgjhenbjooi {
    #[prost(message, optional, tag = "14")]
    pub reward_list: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pphlpceddpk {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Obopolghgjb {
    #[prost(message, optional, tag = "6")]
    pub ljaogapdfha: ::core::option::Option<Aedkpbfckgo>,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Denondbcbph {
    #[prost(uint32, tag = "4")]
    pub hhcbjghkcpc: u32,
    #[prost(uint32, tag = "1")]
    pub map_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Eegodledhlg {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(uint32, tag = "14")]
    pub hhcbjghkcpc: u32,
    #[prost(uint32, tag = "2")]
    pub map_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gldppdpgfen {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jdcbekmdnjj {
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Meicpfnimhe {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gjikihkipne {
    #[prost(message, optional, tag = "1")]
    pub pfffjngnpom: ::core::option::Option<Ppggkmdaoea>,
    #[prost(message, repeated, tag = "14")]
    pub lipjdjpmokb: ::prost::alloc::vec::Vec<Cbbdiomifhd>,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mhghljgbpoa {
    #[prost(uint32, tag = "6")]
    pub edibbbklghj: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ggimnlgigio {
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(string, tag = "4")]
    pub ip: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub aokcmmpfgbc: ::prost::alloc::string::String,
    #[prost(uint64, tag = "6")]
    pub nogfeemnhpc: u64,
    #[prost(uint32, tag = "15")]
    pub port: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bpgnjjgiecj {
    #[prost(uint64, tag = "13")]
    pub nogfeemnhpc: u64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hbepkkhkbmb {
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ihbknebehfa {
    #[prost(message, repeated, tag = "1")]
    pub lipjdjpmokb: ::prost::alloc::vec::Vec<Cbbdiomifhd>,
    #[prost(message, optional, tag = "4")]
    pub pfffjngnpom: ::core::option::Option<Ppggkmdaoea>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Chenldloljh {
    #[prost(message, optional, tag = "15")]
    pub pfffjngnpom: ::core::option::Option<Ppggkmdaoea>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bhgjkcglbmg {
    #[prost(uint32, tag = "9")]
    pub fdgdokafbdh: u32,
    #[prost(enumeration = "Match3FinishReason", tag = "10")]
    pub reason: i32,
    #[prost(message, optional, tag = "15")]
    pub niaeghjlnmb: ::core::option::Option<Cdimemfjjfp>,
    #[prost(uint32, tag = "12")]
    pub kojihjihkia: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bliempkgmna {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Eccnnonkfca {
    #[prost(uint32, tag = "7")]
    pub id: u32,
    #[prost(uint32, tag = "6")]
    pub olalhikmjop: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dlcifefljcc {
    #[prost(message, repeated, tag = "9")]
    pub ljcpdmnkjif: ::prost::alloc::vec::Vec<Eccnnonkfca>,
    #[prost(message, repeated, tag = "5")]
    pub fchnnkekfcl: ::prost::alloc::vec::Vec<Ohdnchfgfma>,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ahllfekhalo {
    #[prost(message, repeated, tag = "9")]
    pub ljcpdmnkjif: ::prost::alloc::vec::Vec<Eccnnonkfca>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Didaecimcfo {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jbfipijjidl {
    #[prost(uint32, tag = "15")]
    pub pjhdjkmjpkh: u32,
    #[prost(uint32, tag = "10")]
    pub dkjgcbjkeen: u32,
    #[prost(uint32, tag = "12")]
    pub panel_id: u32,
    #[prost(uint32, tag = "5")]
    pub ljkffdmhojh: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ohdnchfgfma {
    #[prost(uint32, tag = "1")]
    pub blfaanhjpad: u32,
    #[prost(uint32, tag = "15")]
    pub bjfbglbjbnn: u32,
    #[prost(uint32, tag = "10")]
    pub lclmhegdggb: u32,
    #[prost(uint32, tag = "7")]
    pub panel_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mgjngcpoaim {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "9")]
    pub fchnnkekfcl: ::prost::alloc::vec::Vec<Ohdnchfgfma>,
    #[prost(message, optional, tag = "5")]
    pub ikgfoejpjcf: ::core::option::Option<Jbfipijjidl>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dojhancdkjj {
    #[prost(message, repeated, tag = "12")]
    pub ponjjnddkbh: ::prost::alloc::vec::Vec<Jbfipijjidl>,
    #[prost(message, repeated, tag = "9")]
    pub fchnnkekfcl: ::prost::alloc::vec::Vec<Ohdnchfgfma>,
    #[prost(message, repeated, tag = "7")]
    pub ljcpdmnkjif: ::prost::alloc::vec::Vec<Eccnnonkfca>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Opgjgdoggnj {
    #[prost(enumeration = "Kamlglmnjgj", tag = "8")]
    pub pos: i32,
    #[prost(uint32, tag = "2")]
    pub bdjcgcdjoeo: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jmeaocpfeol {
    #[prost(uint32, tag = "6")]
    pub hihlgaghlni: u32,
    #[prost(uint32, tag = "2")]
    pub hjjfmdheapb: u32,
    #[prost(uint32, tag = "13")]
    pub dbahfefglmd: u32,
    #[prost(message, repeated, tag = "3")]
    pub bojmnafdjkh: ::prost::alloc::vec::Vec<Opgjgdoggnj>,
    #[prost(uint32, tag = "14")]
    pub level: u32,
    #[prost(uint32, tag = "1")]
    pub cdnngagbaak: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Panaijbjmen {
    #[prost(bool, tag = "4")]
    pub hlnfbgacnpo: bool,
    #[prost(uint32, tag = "15")]
    pub beleodaiinb: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dolgfnlheae {
    #[prost(uint32, tag = "12")]
    pub pngddnajcgg: u32,
    #[prost(uint32, tag = "4")]
    pub dcehogagkom: u32,
    #[prost(message, repeated, tag = "11")]
    pub fmbfbgnaboc: ::prost::alloc::vec::Vec<Panaijbjmen>,
    #[prost(uint32, tag = "3")]
    pub fnpphmblkoa: u32,
    #[prost(uint32, tag = "7")]
    pub fileddcmdoc: u32,
    #[prost(uint32, tag = "5")]
    pub ggfddejhlif: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Olkmlfeefcj {
    #[prost(uint32, tag = "13")]
    pub bdjcgcdjoeo: u32,
    #[prost(uint32, tag = "5")]
    pub lgkiielghdj: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Blnehdifmoo {
    #[prost(uint32, tag = "7")]
    pub cogbcplmnfd: u32,
    #[prost(enumeration = "Aihadkbhpbm", tag = "9")]
    pub state: i32,
    #[prost(uint32, tag = "11")]
    pub dgjbacbiico: u32,
    #[prost(uint32, tag = "10")]
    pub event_id: u32,
    #[prost(uint32, tag = "15")]
    pub bmbgklkecaj: u32,
    #[prost(uint32, tag = "3")]
    pub hcaglclejnd: u32,
    #[prost(uint32, repeated, tag = "13")]
    pub haabefkhami: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jnbcpncnoho {
    #[prost(uint32, repeated, tag = "11")]
    pub pnjeepoemca: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "2")]
    pub bjcmphlpknf: ::prost::alloc::vec::Vec<Blnehdifmoo>,
    #[prost(uint32, tag = "13")]
    pub lhnjmbgndkc: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pmcandkdegb {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Japgkggldfo {
    #[prost(message, optional, tag = "9")]
    pub jpibmbbkgnd: ::core::option::Option<Dolgfnlheae>,
    #[prost(uint32, tag = "13")]
    pub level: u32,
    #[prost(uint32, tag = "1")]
    pub jbjldppdbbc: u32,
    #[prost(uint32, tag = "15")]
    pub exp: u32,
    #[prost(message, optional, tag = "11")]
    pub ekkolcccnnk: ::core::option::Option<Jnbcpncnoho>,
    #[prost(message, repeated, tag = "14")]
    pub bojmnafdjkh: ::prost::alloc::vec::Vec<Olkmlfeefcj>,
    #[prost(uint32, tag = "12")]
    pub hpnmpdocjma: u32,
    #[prost(message, repeated, tag = "8")]
    pub llephoelgda: ::prost::alloc::vec::Vec<Jmeaocpfeol>,
    #[prost(uint32, repeated, tag = "3")]
    pub kndjapnpapk: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "4")]
    pub kndmdpefadc: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "6")]
    pub dbjhemippim: u32,
    #[prost(uint32, tag = "5")]
    pub ejnkmkffccl: u32,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(uint32, tag = "7")]
    pub ejkghbemoob: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ielfkenkbgm {
    #[prost(uint32, tag = "4")]
    pub bdjcgcdjoeo: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kgafohoafac {
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(uint32, tag = "2")]
    pub bdjcgcdjoeo: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bjcndpeodhi {
    #[prost(enumeration = "Kamlglmnjgj", tag = "7")]
    pub pos: i32,
    #[prost(uint32, tag = "12")]
    pub lgkiielghdj: u32,
    #[prost(uint32, tag = "10")]
    pub bdjcgcdjoeo: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jdiplkmklei {
    #[prost(uint32, tag = "10")]
    pub lgkiielghdj: u32,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(uint32, tag = "13")]
    pub bdjcgcdjoeo: u32,
    #[prost(enumeration = "Kamlglmnjgj", tag = "15")]
    pub pos: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lcddfeecngg {
    #[prost(uint32, tag = "12")]
    pub bdjcgcdjoeo: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bpkbemjppbf {
    #[prost(uint32, tag = "3")]
    pub bdjcgcdjoeo: u32,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Odbfddmdnak {
    #[prost(enumeration = "Kgjjjkpdcfg", tag = "14")]
    pub aocelkonhob: i32,
    #[prost(uint32, tag = "8")]
    pub bdjcgcdjoeo: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Miacmebifch {
    #[prost(uint32, tag = "5")]
    pub bccgcfmabgm: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lfpeocemgmf {
    #[prost(uint32, tag = "12")]
    pub cciecpfpfjg: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ipohmpknalk {
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(uint32, tag = "3")]
    pub gpoieccpamn: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ffikbmohgch {
    #[prost(uint32, tag = "8")]
    pub level: u32,
    #[prost(uint32, tag = "2")]
    pub dbahfefglmd: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pobhklnoapi {
    #[prost(uint32, tag = "3")]
    pub dbahfefglmd: u32,
    #[prost(uint32, tag = "14")]
    pub level: u32,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dkfjfhdogfa {
    #[prost(uint32, tag = "9")]
    pub level: u32,
    #[prost(enumeration = "Ibbgdgghejl", tag = "5")]
    pub bojbpoelfci: i32,
    #[prost(uint32, tag = "13")]
    pub dbahfefglmd: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gimhggfphjk {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(enumeration = "Ibbgdgghejl", tag = "11")]
    pub bojbpoelfci: i32,
    #[prost(uint32, tag = "8")]
    pub dbahfefglmd: u32,
    #[prost(uint32, tag = "5")]
    pub level: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jhcfeaahfkc {
    #[prost(uint32, tag = "12")]
    pub exp: u32,
    #[prost(message, optional, tag = "4")]
    pub ekkolcccnnk: ::core::option::Option<Jnbcpncnoho>,
    #[prost(uint32, tag = "14")]
    pub dbjhemippim: u32,
    #[prost(uint32, tag = "1")]
    pub level: u32,
    #[prost(uint32, repeated, tag = "9")]
    pub kndjapnpapk: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "7")]
    pub hpnmpdocjma: u32,
    #[prost(uint32, tag = "3")]
    pub ejnkmkffccl: u32,
    #[prost(message, repeated, tag = "11")]
    pub llephoelgda: ::prost::alloc::vec::Vec<Jmeaocpfeol>,
    #[prost(uint32, tag = "6")]
    pub jbjldppdbbc: u32,
    #[prost(message, repeated, tag = "5")]
    pub bojmnafdjkh: ::prost::alloc::vec::Vec<Olkmlfeefcj>,
    #[prost(uint32, tag = "8")]
    pub ejkghbemoob: u32,
    #[prost(message, optional, tag = "10")]
    pub jpibmbbkgnd: ::core::option::Option<Dolgfnlheae>,
    #[prost(uint32, repeated, tag = "13")]
    pub kndmdpefadc: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Njkgecleiej {
    #[prost(message, optional, tag = "4")]
    pub hndlhicdnpc: ::core::option::Option<Blnehdifmoo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Boomiegpopl {
    #[prost(int32, tag = "14")]
    pub cehfiilmjkm: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Focgebjiebb {
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(message, optional, tag = "4")]
    pub hndlhicdnpc: ::core::option::Option<Jnbcpncnoho>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Iighgcldola {
    #[prost(uint32, tag = "14")]
    pub event_id: u32,
    #[prost(uint32, tag = "5")]
    pub dgjbacbiico: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jamldhmgdfa {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(uint32, tag = "5")]
    pub dgjbacbiico: u32,
    #[prost(uint32, tag = "6")]
    pub event_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ngjdopnppge {
    #[prost(uint32, tag = "14")]
    pub dbjhemippim: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Igcmgnchjhl {
    #[prost(uint32, tag = "11")]
    pub imblgcaadfl: u32,
    #[prost(uint32, tag = "5")]
    pub dbjhemippim: u32,
    #[prost(uint32, tag = "15")]
    pub modfabddnkl: u32,
    #[prost(uint32, tag = "12")]
    pub bdjcgcdjoeo: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Opganlfjpia {
    #[prost(uint32, tag = "5")]
    pub pngddnajcgg: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Abhegcgegfd {
    #[prost(uint32, repeated, tag = "9")]
    pub beleodaiinb: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "10")]
    pub pngddnajcgg: u32,
    #[prost(bool, tag = "14")]
    pub fpbgadbmead: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Oancdpofcmj {
    #[prost(uint32, tag = "10")]
    pub pngddnajcgg: u32,
    #[prost(uint32, tag = "11")]
    pub item_id: u32,
    #[prost(uint32, tag = "15")]
    pub mbejblfhcbh: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Acpbhbhlnnp {
    #[prost(uint32, tag = "10")]
    pub item_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pebfofmphld {
    #[prost(message, optional, tag = "12")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "14")]
    pub item_id: u32,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lleogoohjim {
    #[prost(bool, tag = "14")]
    pub gkjgcbpojcm: bool,
    #[prost(uint32, tag = "12")]
    pub immaphmhijk: u32,
    #[prost(uint32, tag = "4")]
    pub acjcphifmln: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pakpcciloln {
    #[prost(uint32, tag = "4")]
    pub ojamobmgfbd: u32,
    #[prost(uint32, repeated, tag = "11")]
    pub nbboabglcjc: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "10")]
    pub dnkjdjjbcdk: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "6")]
    pub blpbigkjpch: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lloeknifjgh {
    #[prost(uint32, tag = "3")]
    pub edibbbklghj: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pnclmcmocdh {
    #[prost(bool, tag = "10")]
    pub ocephgbcmib: bool,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "14")]
    pub bmkmenhffok: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "15")]
    pub cdigalbeima: u32,
    #[prost(message, repeated, tag = "3")]
    pub lkmjinniadi: ::prost::alloc::vec::Vec<Lleogoohjim>,
    #[prost(uint32, repeated, tag = "6")]
    pub fkliofdpjbe: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "11")]
    pub bnanpjbdghb: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "4")]
    pub amdcjjjabcc: ::prost::alloc::vec::Vec<Pakpcciloln>,
    #[prost(uint32, tag = "9")]
    pub ljekppnpbpp: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fepaclabfkh {
    #[prost(uint32, tag = "2")]
    pub acjcphifmln: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cmeclljdmji {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(string, tag = "8")]
    pub mdlndgijnml: ::prost::alloc::string::String,
    #[prost(uint32, tag = "5")]
    pub acjcphifmln: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Doejalihjcd {
    #[prost(uint32, tag = "4")]
    pub mhkhaclnbpm: u32,
    #[prost(bool, tag = "8")]
    pub gkjgcbpojcm: bool,
    #[prost(uint32, tag = "10")]
    pub score_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fljgcbpelho {
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(uint32, tag = "7")]
    pub acjcphifmln: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jemoiijgkao {
    #[prost(uint32, repeated, tag = "14")]
    pub jikjhneacjb: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dhakchlibnh {
    #[prost(message, optional, tag = "5")]
    pub cgedaboaboh: ::core::option::Option<Pakpcciloln>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Knfhfmidcge {
    #[prost(uint32, tag = "1")]
    pub cdigalbeima: u32,
    #[prost(uint32, tag = "4")]
    pub mbldfhldcpi: u32,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ickbflllnlh {
    #[prost(uint32, repeated, tag = "15")]
    pub oafhaopejpo: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pjcmnlheljg {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mabndmneobp {
    #[prost(uint32, repeated, tag = "12")]
    pub oafhaopejpo: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hkmkchnpkdc {
    #[prost(uint32, tag = "9")]
    pub njhlopcjjda: u32,
    #[prost(uint32, tag = "7")]
    pub hidbcpinlmh: u32,
    #[prost(uint32, tag = "15")]
    pub kmnlbgoeehg: u32,
    #[prost(uint32, repeated, tag = "8")]
    pub fcfdbnjenjf: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "3")]
    pub mkkfmndmhje: u32,
    #[prost(enumeration = "Fbomlibegoc", tag = "12")]
    pub mjgdopckeif: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fbcngildcal {
    #[prost(uint32, repeated, tag = "7")]
    pub gpjcdjglgof: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oomaibajoan {
    #[prost(message, repeated, tag = "10")]
    pub gdamadmhhgf: ::prost::alloc::vec::Vec<Hkmkchnpkdc>,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Opcmlgfffkd {
    #[prost(uint32, tag = "1")]
    pub kmnlbgoeehg: u32,
    #[prost(uint32, tag = "6")]
    pub interacted_prop_entity_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dliflgghncm {
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(message, optional, tag = "14")]
    pub ppjdapbpoap: ::core::option::Option<Hkmkchnpkdc>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ncnennjgcej {
    #[prost(uint32, repeated, tag = "1")]
    pub fbkccpkieia: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "6")]
    pub kmnlbgoeehg: u32,
    #[prost(uint32, tag = "13")]
    pub interacted_prop_entity_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cbpgdfbgmlc {
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(message, optional, tag = "12")]
    pub ppjdapbpoap: ::core::option::Option<Hkmkchnpkdc>,
    #[prost(message, optional, tag = "6")]
    pub reward: ::core::option::Option<ItemList>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Agdkfnemodp {
    #[prost(message, optional, tag = "2")]
    pub ppjdapbpoap: ::core::option::Option<Hkmkchnpkdc>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Knhnoikkcaa {
    #[prost(uint32, tag = "2")]
    pub main_mission_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hfckilkebmh {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(uint32, tag = "10")]
    pub main_mission_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Okpokdgmoei {
    #[prost(uint64, tag = "4")]
    pub pambjbfngpo: u64,
    #[prost(uint32, tag = "9")]
    pub main_mission_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetPamSkinDataCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetPamSkinDataScRsp {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(uint32, tag = "11")]
    pub cur_skin: u32,
    #[prost(uint32, repeated, tag = "4")]
    pub unlock_skin_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SelectPamSkinCsReq {
    #[prost(uint32, tag = "11")]
    pub pam_skin: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SelectPamSkinScRsp {
    #[prost(uint32, tag = "6")]
    pub set_skin: u32,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(uint32, tag = "8")]
    pub cur_skin: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UnlockPamSkinScNotify {
    #[prost(uint32, tag = "9")]
    pub pam_skin: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetPetDataCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetPetDataScRsp {
    #[prost(uint32, tag = "2")]
    pub cur_pet_id: u32,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "12")]
    pub pet_id_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SummonPetCsReq {
    #[prost(uint32, tag = "5")]
    pub summoned_pet_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SummonPetScRsp {
    #[prost(uint32, tag = "8")]
    pub cur_pet_id: u32,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(uint32, tag = "1")]
    pub new_pet_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RecallPetCsReq {
    #[prost(uint32, tag = "3")]
    pub summoned_pet_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RecallPetScRsp {
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(uint32, tag = "3")]
    pub cur_pet_id: u32,
    #[prost(uint32, tag = "9")]
    pub new_pet_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CurPetChangedScNotify {
    #[prost(uint32, tag = "3")]
    pub cur_pet_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetPhoneDataCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetPhoneDataScRsp {
    #[prost(uint32, repeated, tag = "9")]
    pub ebfdaaniflf: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(uint32, tag = "7")]
    pub kkjncipjfcg: u32,
    #[prost(uint32, repeated, tag = "1")]
    pub megjhdhloja: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "15")]
    pub dopnjnckhcc: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cmgedccbjgh {
    #[prost(uint32, tag = "6")]
    pub jbbfkolnffh: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mallkfjaeah {
    #[prost(uint32, tag = "1")]
    pub dopnjnckhcc: u32,
    #[prost(uint32, tag = "4")]
    pub pmdcbfopchb: u32,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ghaalgcbpca {
    #[prost(uint32, tag = "15")]
    pub jbbfkolnffh: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Edhchajimca {
    #[prost(uint32, tag = "5")]
    pub onecpkefapp: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Koddploihfk {
    #[prost(uint32, tag = "9")]
    pub achopojlcce: u32,
    #[prost(uint32, tag = "15")]
    pub kkjncipjfcg: u32,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Goaaannkapl {
    #[prost(uint32, tag = "5")]
    pub onecpkefapp: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayerLoginCsReq {
    #[prost(bool, tag = "271")]
    pub gehapnihcdo: bool,
    #[prost(string, tag = "3")]
    pub kibbnbngijd: ::prost::alloc::string::String,
    #[prost(uint64, tag = "8")]
    pub login_random: u64,
    #[prost(string, tag = "1383")]
    pub akcejfcfban: ::prost::alloc::string::String,
    #[prost(string, tag = "10")]
    pub bnigpdooili: ::prost::alloc::string::String,
    #[prost(string, tag = "802")]
    pub ignfblgjioj: ::prost::alloc::string::String,
    #[prost(bool, tag = "1522")]
    pub oeencfmcahd: bool,
    #[prost(enumeration = "PlatformType", tag = "6")]
    pub platform: i32,
    #[prost(string, tag = "2025")]
    pub kfdjeieobbn: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub client_version: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "1877")]
    pub miohkaoidnk: ::core::option::Option<ExtraDeviceInfo>,
    #[prost(string, tag = "11")]
    pub signature: ::prost::alloc::string::String,
    #[prost(string, tag = "958")]
    pub ohpckcnaeik: ::prost::alloc::string::String,
    #[prost(uint32, tag = "1410")]
    pub haehhcpoapp: u32,
    #[prost(string, tag = "12")]
    pub dmpmhccfbkg: ::prost::alloc::string::String,
    #[prost(string, tag = "7")]
    pub oehjlodahfn: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub ocdacjnnjnj: ::prost::alloc::string::String,
    #[prost(string, tag = "520")]
    pub bpckjkdencb: ::prost::alloc::string::String,
    #[prost(string, tag = "1710")]
    pub gmalcpnohbf: ::prost::alloc::string::String,
    #[prost(uint32, tag = "211")]
    pub mlnabepindb: u32,
    #[prost(uint32, tag = "15")]
    pub client_res_version: u32,
    #[prost(uint32, tag = "9")]
    pub jmkhdhaioim: u32,
    #[prost(string, tag = "13")]
    pub hjdmjpebppm: ::prost::alloc::string::String,
    #[prost(enumeration = "LanguageType", tag = "14")]
    pub fadpdibknbi: i32,
    #[prost(uint32, tag = "505")]
    pub nhbhbalhjml: u32,
    #[prost(string, tag = "1")]
    pub lagbgldlgcb: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub bnboaliapae: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayerLoginScRsp {
    #[prost(uint32, tag = "12")]
    pub stamina: u32,
    #[prost(bool, tag = "8")]
    pub jlpkeobincp: bool,
    #[prost(message, optional, tag = "2")]
    pub basic_info: ::core::option::Option<PlayerBasicInfo>,
    #[prost(string, tag = "3")]
    pub pdikpeifann: ::prost::alloc::string::String,
    #[prost(string, tag = "14")]
    pub nhmhabjkhog: ::prost::alloc::string::String,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(uint64, tag = "7")]
    pub server_timestamp_ms: u64,
    #[prost(uint64, tag = "5")]
    pub login_random: u64,
    #[prost(bool, tag = "9")]
    pub igkbeamlnbj: bool,
    #[prost(int32, tag = "13")]
    pub cur_timezone: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PlayerLogoutCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayerGetTokenCsReq {
    #[prost(uint32, tag = "7")]
    pub platform: u32,
    #[prost(uint32, tag = "6")]
    pub fgojlpaejec: u32,
    #[prost(string, tag = "9")]
    pub account_uid: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub mempbkcjjfj: ::prost::alloc::string::String,
    #[prost(uint32, tag = "8")]
    pub icmfpnpijjf: u32,
    #[prost(string, tag = "3")]
    pub token: ::prost::alloc::string::String,
    #[prost(uint32, tag = "11")]
    pub haehhcpoapp: u32,
    #[prost(uint32, tag = "4")]
    pub uid: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayerGetTokenScRsp {
    #[prost(message, optional, tag = "3")]
    pub black_info: ::core::option::Option<BlackInfo>,
    #[prost(uint32, tag = "11")]
    pub uid: u32,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(string, tag = "15")]
    pub msg: ::prost::alloc::string::String,
    #[prost(uint64, tag = "7")]
    pub secret_key_seed: u64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GmTalkScNotify {
    #[prost(string, tag = "7")]
    pub msg: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PlayerKickOutScNotify {
    #[prost(message, optional, tag = "4")]
    pub black_info: ::core::option::Option<BlackInfo>,
    #[prost(enumeration = "player_kick_out_sc_notify::KickType", tag = "15")]
    pub kick_type: i32,
}
/// Nested message and enum types in `PlayerKickOutScNotify`.
pub mod player_kick_out_sc_notify {
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum KickType {
        KickSqueezed = 0,
        KickBlack = 1,
        KickChangePwd = 2,
        KickLoginWhiteTimeout = 3,
        KickAceAntiCheater = 4,
        KickByGm = 5,
    }
    impl KickType {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::KickSqueezed => "KICK_SQUEEZED",
                Self::KickBlack => "KICK_BLACK",
                Self::KickChangePwd => "KICK_CHANGE_PWD",
                Self::KickLoginWhiteTimeout => "KICK_LOGIN_WHITE_TIMEOUT",
                Self::KickAceAntiCheater => "KICK_ACE_ANTI_CHEATER",
                Self::KickByGm => "KICK_BY_GM",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "KICK_SQUEEZED" => Some(Self::KickSqueezed),
                "KICK_BLACK" => Some(Self::KickBlack),
                "KICK_CHANGE_PWD" => Some(Self::KickChangePwd),
                "KICK_LOGIN_WHITE_TIMEOUT" => Some(Self::KickLoginWhiteTimeout),
                "KICK_ACE_ANTI_CHEATER" => Some(Self::KickAceAntiCheater),
                "KICK_BY_GM" => Some(Self::KickByGm),
                _ => None,
            }
        }
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GmTalkCsReq {
    #[prost(string, tag = "6")]
    pub msg: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GmTalkScRsp {
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(string, tag = "14")]
    pub bjdojlkehna: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetBasicInfoCsReq {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PlayerSettingInfo {
    #[prost(bool, tag = "7")]
    pub kjncckhjfhe: bool,
    #[prost(bool, tag = "1")]
    pub njfmiljofok: bool,
    #[prost(bool, tag = "8")]
    pub ndjifckkjko: bool,
    #[prost(bool, tag = "3")]
    pub aponeidmphl: bool,
    #[prost(bool, tag = "12")]
    pub pbkbglhhkpe: bool,
    #[prost(bool, tag = "9")]
    pub aicnfaobcpi: bool,
    #[prost(bool, tag = "10")]
    pub nkekibnjmpa: bool,
    #[prost(bool, tag = "11")]
    pub gmjanojmkce: bool,
    #[prost(bool, tag = "2")]
    pub mmmnjchemfn: bool,
    #[prost(bool, tag = "5")]
    pub kapdimgjlnf: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetBasicInfoScRsp {
    #[prost(uint32, tag = "11")]
    pub week_cocoon_finished_count: u32,
    #[prost(uint32, tag = "1")]
    pub gameplay_birthday: u32,
    #[prost(bool, tag = "3")]
    pub is_gender_set: bool,
    #[prost(uint32, tag = "12")]
    pub cur_day: u32,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(int64, tag = "14")]
    pub last_set_nickname_time: i64,
    #[prost(message, optional, tag = "15")]
    pub player_setting_info: ::core::option::Option<PlayerSettingInfo>,
    #[prost(int64, tag = "4")]
    pub next_recover_time: i64,
    #[prost(uint32, tag = "8")]
    pub exchange_times: u32,
    #[prost(uint32, tag = "2")]
    pub gender: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ExchangeStaminaCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExchangeStaminaScRsp {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(uint32, tag = "14")]
    pub exchange_times: u32,
    #[prost(message, repeated, tag = "6")]
    pub item_cost_list: ::prost::alloc::vec::Vec<ItemCost>,
    #[prost(uint32, tag = "15")]
    pub stamina_add: u32,
    #[prost(int64, tag = "12")]
    pub last_recover_time: i64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAuthkeyCsReq {
    #[prost(uint32, tag = "1")]
    pub goijemcccgl: u32,
    #[prost(string, tag = "15")]
    pub acdjgnhjdai: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub mpgpgfkbmhg: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAuthkeyScRsp {
    #[prost(uint32, tag = "6")]
    pub goijemcccgl: u32,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(uint32, tag = "12")]
    pub mpgpgfkbmhg: u32,
    #[prost(string, tag = "13")]
    pub acdjgnhjdai: ::prost::alloc::string::String,
    #[prost(string, tag = "15")]
    pub kbnipiiiccn: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RegionStopScNotify {
    #[prost(int64, tag = "3")]
    pub flheppgbeij: i64,
    #[prost(int64, tag = "6")]
    pub cnojajabmnf: i64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AntiAddictScNotify {
    #[prost(string, tag = "5")]
    pub level: ::prost::alloc::string::String,
    #[prost(uint32, tag = "14")]
    pub msg_type: u32,
    #[prost(string, tag = "2")]
    pub msg: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetNicknameCsReq {
    #[prost(string, tag = "9")]
    pub nickname: ::prost::alloc::string::String,
    #[prost(bool, tag = "4")]
    pub is_modify: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetNicknameScRsp {
    #[prost(bool, tag = "12")]
    pub is_modify: bool,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(int64, tag = "4")]
    pub jendkbooaip: i64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetLevelRewardTakenListCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetLevelRewardTakenListScRsp {
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "9")]
    pub amcakcpdnnl: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetLevelRewardCsReq {
    #[prost(uint32, tag = "2")]
    pub level: u32,
    #[prost(uint32, tag = "5")]
    pub interacted_prop_entity_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetLevelRewardScRsp {
    #[prost(uint32, tag = "9")]
    pub level: u32,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(message, optional, tag = "1")]
    pub reward: ::core::option::Option<ItemList>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pcopjmaalgd {
    #[prost(enumeration = "LanguageType", tag = "3")]
    pub fadpdibknbi: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hkfacmoafce {
    #[prost(enumeration = "LanguageType", tag = "12")]
    pub fadpdibknbi: i32,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AnnounceData {
    #[prost(uint32, tag = "13")]
    pub kdcigpamgho: u32,
    #[prost(uint32, tag = "8")]
    pub pokidoenkek: u32,
    #[prost(string, tag = "1")]
    pub bcafjhgdodi: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub adjcaknjcgo: ::prost::alloc::string::String,
    #[prost(uint32, tag = "15")]
    pub config_id: u32,
    #[prost(int64, tag = "11")]
    pub begin_time: i64,
    #[prost(int64, tag = "2")]
    pub end_time: i64,
    #[prost(bool, tag = "6")]
    pub ghcaaonigca: bool,
    #[prost(string, tag = "9")]
    pub dbckeiojldi: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ServerAnnounceNotify {
    #[prost(message, repeated, tag = "4")]
    pub announce_data_list: ::prost::alloc::vec::Vec<AnnounceData>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gateserver {
    #[prost(string, tag = "1307")]
    pub lbfndealalk: ::prost::alloc::string::String,
    #[prost(bool, tag = "1829")]
    pub unk1: bool,
    #[prost(string, tag = "41")]
    pub lhgdghddkfo: ::prost::alloc::string::String,
    #[prost(string, tag = "1348")]
    pub mibmplmohfj: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "1916")]
    pub oaohiecdgcc: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(bool, tag = "997")]
    pub unk2: bool,
    #[prost(string, tag = "1581")]
    pub enhlgccbibk: ::prost::alloc::string::String,
    #[prost(int64, tag = "10")]
    pub flheppgbeij: i64,
    #[prost(string, tag = "1881")]
    pub ifix_url: ::prost::alloc::string::String,
    #[prost(string, tag = "608")]
    pub aipkbcmfnje: ::prost::alloc::string::String,
    #[prost(string, tag = "1562")]
    pub lfgdmmekoip: ::prost::alloc::string::String,
    #[prost(bool, tag = "435")]
    pub unk3: bool,
    #[prost(string, tag = "1276")]
    pub dfblbpkaccf: ::prost::alloc::string::String,
    /// unk4
    #[prost(bool, tag = "19")]
    pub use_tcp: bool,
    #[prost(uint32, tag = "2023")]
    pub iblpomnhlkh: u32,
    #[prost(string, tag = "1043")]
    pub cceogpcaaif: ::prost::alloc::string::String,
    #[prost(bool, tag = "498")]
    pub unk5: bool,
    #[prost(string, tag = "1566")]
    pub gafbcaplkoe: ::prost::alloc::string::String,
    #[prost(string, tag = "1357")]
    pub bpclcohbdki: ::prost::alloc::string::String,
    #[prost(string, tag = "2014")]
    pub opccffnilmf: ::prost::alloc::string::String,
    #[prost(string, tag = "1325")]
    pub lua_version: ::prost::alloc::string::String,
    #[prost(string, tag = "13")]
    pub ex_resource_url: ::prost::alloc::string::String,
    #[prost(string, tag = "1589")]
    pub nkcbglkpeka: ::prost::alloc::string::String,
    #[prost(string, tag = "777")]
    pub mjagkmjgcgj: ::prost::alloc::string::String,
    #[prost(string, tag = "1392")]
    pub nddlcggigjd: ::prost::alloc::string::String,
    #[prost(string, tag = "772")]
    pub mibphkfmpho: ::prost::alloc::string::String,
    #[prost(string, tag = "785")]
    pub pmlgfnoomhi: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub msg: ::prost::alloc::string::String,
    #[prost(string, tag = "764")]
    pub egojbfdcccb: ::prost::alloc::string::String,
    #[prost(string, tag = "1023")]
    pub khjnclihfaj: ::prost::alloc::string::String,
    #[prost(string, tag = "1783")]
    pub mpnjikpkohj: ::prost::alloc::string::String,
    #[prost(bool, tag = "1915")]
    pub unk6: bool,
    #[prost(string, tag = "976")]
    pub fpheemnelnp: ::prost::alloc::string::String,
    #[prost(bool, tag = "7")]
    pub unk7: bool,
    #[prost(string, tag = "453")]
    pub aemmedodjli: ::prost::alloc::string::String,
    #[prost(string, tag = "14")]
    pub ipbbiifglld: ::prost::alloc::string::String,
    #[prost(bool, tag = "905")]
    pub unk8: bool,
    #[prost(string, tag = "331")]
    pub pbpnomofmfp: ::prost::alloc::string::String,
    #[prost(bool, tag = "236")]
    pub unk9: bool,
    #[prost(string, tag = "269")]
    pub jidfmgieifg: ::prost::alloc::string::String,
    #[prost(string, tag = "723")]
    pub cfamgpifbgb: ::prost::alloc::string::String,
    #[prost(string, tag = "1833")]
    pub khfhcnkcghp: ::prost::alloc::string::String,
    #[prost(string, tag = "1516")]
    pub aedffnfckob: ::prost::alloc::string::String,
    #[prost(uint32, tag = "1372")]
    pub ibjjkddddjm: u32,
    #[prost(string, tag = "1967")]
    pub oohfgaaoihe: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub aajmlanmhol: u32,
    #[prost(uint32, tag = "15")]
    pub mmoggegnjoo: u32,
    #[prost(string, tag = "1223")]
    pub bndnbgghghm: ::prost::alloc::string::String,
    /// unk10
    #[prost(bool, tag = "11")]
    pub use_design_data: bool,
    #[prost(bool, tag = "915")]
    pub unk11: bool,
    #[prost(string, tag = "1819")]
    pub nifoeecnmog: ::prost::alloc::string::String,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(string, tag = "1003")]
    pub dpfmjedhjel: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub gmkkgacpkln: ::prost::alloc::string::String,
    #[prost(bool, tag = "403")]
    pub unk12: bool,
    #[prost(string, tag = "1737")]
    pub glabcpgpiie: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub ip: ::prost::alloc::string::String,
    #[prost(string, tag = "9")]
    pub asset_bundle_url: ::prost::alloc::string::String,
    #[prost(uint32, tag = "12")]
    pub port: u32,
    #[prost(string, tag = "1")]
    pub lua_url: ::prost::alloc::string::String,
    #[prost(string, tag = "1670")]
    pub hbcojkaeamk: ::prost::alloc::string::String,
    #[prost(string, tag = "1284")]
    pub acnpcljaehm: ::prost::alloc::string::String,
    #[prost(bool, tag = "1962")]
    pub unk13: bool,
    #[prost(uint32, tag = "1149")]
    pub ecfinahpdhk: u32,
    #[prost(bool, tag = "465")]
    pub unk14: bool,
    #[prost(bool, tag = "1206")]
    pub unk15: bool,
    #[prost(int64, tag = "6")]
    pub cnojajabmnf: i64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GateServerScNotify {
    #[prost(string, tag = "1")]
    pub connpkcchje: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MultiPathAvatarInfo {
    #[prost(uint32, tag = "1")]
    pub rank: u32,
    #[prost(enumeration = "MultiPathAvatarType", tag = "10")]
    pub avatar_id: i32,
    #[prost(uint32, tag = "11")]
    pub path_equipment_id: u32,
    #[prost(uint32, tag = "4")]
    pub dressed_skin_id: u32,
    #[prost(message, repeated, tag = "3")]
    pub multi_path_skill_tree: ::prost::alloc::vec::Vec<AvatarSkillTree>,
    #[prost(message, repeated, tag = "15")]
    pub equip_relic_list: ::prost::alloc::vec::Vec<EquipRelic>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetAvatarPathCsReq {
    #[prost(enumeration = "MultiPathAvatarType", tag = "12")]
    pub avatar_id: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetAvatarPathScRsp {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(enumeration = "MultiPathAvatarType", tag = "4")]
    pub avatar_id: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetMultipleAvatarPathsCsReq {
    #[prost(enumeration = "MultiPathAvatarType", repeated, tag = "3")]
    pub avatar_id_list: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetMultipleAvatarPathsScRsp {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetMultiPathAvatarInfoCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetMultiPathAvatarInfoScRsp {
    #[prost(map = "uint32, enumeration(MultiPathAvatarType)", tag = "4")]
    pub cur_avatar_path: ::std::collections::HashMap<u32, i32>,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "5")]
    pub basic_type_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "11")]
    pub multi_path_avatar_info_list: ::prost::alloc::vec::Vec<MultiPathAvatarInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UnlockAvatarPathCsReq {
    #[prost(enumeration = "MultiPathAvatarType", tag = "13")]
    pub avatar_id: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UnlockAvatarPathScRsp {
    #[prost(message, optional, tag = "7")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(enumeration = "MultiPathAvatarType", tag = "13")]
    pub avatar_id: i32,
    #[prost(uint32, repeated, tag = "10")]
    pub basic_type_id_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AvatarPathChangedNotify {
    #[prost(enumeration = "MultiPathAvatarType", tag = "14")]
    pub cur_multi_path_avatar_type: i32,
    #[prost(uint32, tag = "7")]
    pub base_avatar_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetGenderCsReq {
    #[prost(enumeration = "Gender", tag = "4")]
    pub gender: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetGenderScRsp {
    #[prost(enumeration = "MultiPathAvatarType", tag = "13")]
    pub cur_avatar_path: i32,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "1")]
    pub cur_avatar_path_info_list: ::prost::alloc::vec::Vec<MultiPathAvatarInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetPlayerInfoCsReq {
    #[prost(enumeration = "Gender", tag = "12")]
    pub gender: i32,
    #[prost(string, tag = "9")]
    pub nickname: ::prost::alloc::string::String,
    #[prost(bool, tag = "5")]
    pub is_modify: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetPlayerInfoScRsp {
    #[prost(enumeration = "MultiPathAvatarType", tag = "13")]
    pub cur_avatar_path: i32,
    #[prost(bool, tag = "10")]
    pub is_modify: bool,
    #[prost(int64, tag = "4")]
    pub jendkbooaip: i64,
    #[prost(message, repeated, tag = "7")]
    pub cur_avatar_path_info_list: ::prost::alloc::vec::Vec<MultiPathAvatarInfo>,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryProductInfoCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Aapnhpamdck {
    #[prost(string, tag = "15")]
    pub mpamhbfikfb: ::prost::alloc::string::String,
    #[prost(string, tag = "9")]
    pub dbellihmajg: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub ioglpebjmdb: u32,
    #[prost(bool, tag = "5")]
    pub fkfokhabejn: bool,
    #[prost(uint32, tag = "11")]
    pub gcbobamcalk: u32,
    #[prost(enumeration = "ProductGiftType", tag = "8")]
    pub dnajfmpcmll: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jcakdmecggg {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "15")]
    pub pidhegpbcji: ::prost::alloc::vec::Vec<Aapnhpamdck>,
    #[prost(uint64, tag = "11")]
    pub epcfjnohjcl: u64,
    #[prost(uint32, tag = "14")]
    pub cmghdmpeako: u32,
    #[prost(uint32, tag = "10")]
    pub odnfiaahkci: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MonthCardRewardNotify {
    #[prost(message, optional, tag = "10")]
    pub reward: ::core::option::Option<ItemList>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClientDownloadDataScNotify {
    #[prost(message, optional, tag = "13")]
    pub download_data: ::core::option::Option<ClientDownloadData>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClientObjDownloadDataScNotify {
    #[prost(message, optional, tag = "11")]
    pub data: ::core::option::Option<ClientObjDownloadData>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateFeatureSwitchScNotify {
    #[prost(message, repeated, tag = "9")]
    pub switch_info_list: ::prost::alloc::vec::Vec<FeatureSwitchInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lgcfmdkhhhg {
    #[prost(uint32, tag = "8")]
    pub gmfebdafdpj: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetGameplayBirthdayCsReq {
    #[prost(uint32, tag = "9")]
    pub birthday: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetGameplayBirthdayScRsp {
    #[prost(uint32, tag = "6")]
    pub birthday: u32,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AceAntiCheaterCsReq {
    #[prost(string, tag = "4")]
    pub dgdlniefcpf: ::prost::alloc::string::String,
    #[prost(uint32, tag = "12")]
    pub glnkkfaipob: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AceAntiCheaterScRsp {
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RetcodeNotify {
    #[prost(uint32, repeated, tag = "14")]
    pub jojppodomah: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayerHeartBeatCsReq {
    #[prost(uint32, tag = "7")]
    pub jbpemofnedg: u32,
    #[prost(message, optional, tag = "9")]
    pub lkjmjgdebee: ::core::option::Option<ClientUploadData>,
    #[prost(uint64, tag = "11")]
    pub client_time_ms: u64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayerHeartBeatScRsp {
    #[prost(uint64, tag = "4")]
    pub client_time_ms: u64,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(uint64, tag = "15")]
    pub server_time_ms: u64,
    #[prost(message, optional, tag = "9")]
    pub download_data: ::core::option::Option<ClientDownloadData>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Onjigdeoicm {
    #[prost(enumeration = "FeatureSwitchType", tag = "9")]
    pub kimnkfpfbdg: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SecretKeyInfo {
    #[prost(enumeration = "SecretKeyType", tag = "14")]
    pub r#type: i32,
    #[prost(string, tag = "5")]
    pub secret_key: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetSecretKeyInfoCsReq {
    #[prost(bytes = "vec", tag = "15")]
    pub cfhgmeadiph: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetSecretKeyInfoScRsp {
    #[prost(message, repeated, tag = "7")]
    pub ebceboebgeh: ::prost::alloc::vec::Vec<SecretKeyInfo>,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(bytes = "vec", tag = "3")]
    pub baohefhiden: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PlayerLoginFinishCsReq {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PlayerLoginFinishScRsp {
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct VideoKeyInfo {
    #[prost(uint64, tag = "10")]
    pub video_key: u64,
    #[prost(uint32, tag = "8")]
    pub id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Iedmbnkgggn {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ceenoiapfnm {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "14")]
    pub dpieepimbkm: ::prost::alloc::vec::Vec<VideoKeyInfo>,
    #[prost(message, repeated, tag = "11")]
    pub apmbnedfbpa: ::prost::alloc::vec::Vec<VideoKeyInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Nhjghokbdpk {
    #[prost(uint32, tag = "11")]
    pub content_id: u32,
    #[prost(uint32, tag = "14")]
    pub nciadbakmae: u32,
    #[prost(uint32, tag = "12")]
    pub iipdefcedmc: u32,
    #[prost(uint32, tag = "8")]
    pub jdakkofdgep: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ficcmnifebg {
    #[prost(uint32, tag = "15")]
    pub jdakkofdgep: u32,
    #[prost(uint32, tag = "10")]
    pub content_id: u32,
    #[prost(uint32, tag = "4")]
    pub iipdefcedmc: u32,
    #[prost(uint32, tag = "3")]
    pub uid: u32,
    #[prost(message, repeated, tag = "2")]
    pub njehhffdghk: ::prost::alloc::vec::Vec<Nhjghokbdpk>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gcinfcflojd {
    #[prost(uint32, tag = "10")]
    pub num: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReserveStaminaExchangeScRsp {
    #[prost(uint32, tag = "14")]
    pub num: u32,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kihfdklmcem {
    #[prost(uint32, tag = "2")]
    pub fbollbpicnj: u32,
    #[prost(int64, tag = "6")]
    pub dpimhemjkoe: i64,
    #[prost(int64, tag = "14")]
    pub ochimadhono: i64,
    #[prost(uint32, tag = "1")]
    pub stamina: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Onmlpjkagcg {
    #[prost(
        oneof = "onmlpjkagcg::Ckmaikmmjme",
        tags = "15, 9, 10, 4, 13, 7, 6, 1, 11, 2"
    )]
    pub ckmaikmmjme: ::core::option::Option<onmlpjkagcg::Ckmaikmmjme>,
}
/// Nested message and enum types in `ONMLPJKAGCG`.
pub mod onmlpjkagcg {
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum Ckmaikmmjme {
        #[prost(bool, tag = "15")]
        Kapdimgjlnf(bool),
        #[prost(bool, tag = "9")]
        Mmmnjchemfn(bool),
        #[prost(bool, tag = "10")]
        Nkekibnjmpa(bool),
        #[prost(bool, tag = "4")]
        Pbkbglhhkpe(bool),
        #[prost(bool, tag = "13")]
        Njfmiljofok(bool),
        #[prost(bool, tag = "7")]
        Aicnfaobcpi(bool),
        #[prost(bool, tag = "6")]
        Kjncckhjfhe(bool),
        #[prost(bool, tag = "1")]
        Aponeidmphl(bool),
        #[prost(bool, tag = "11")]
        Gmjanojmkce(bool),
        #[prost(bool, tag = "2")]
        Ndjifckkjko(bool),
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ibepkjbggld {
    #[prost(message, optional, tag = "11")]
    pub klkpmljkmjp: ::core::option::Option<Onmlpjkagcg>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ijbpifmhmhn {
    #[prost(message, optional, tag = "4")]
    pub klkpmljkmjp: ::core::option::Option<Onmlpjkagcg>,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bijpbjmiahd {
    #[prost(bytes = "vec", tag = "15")]
    pub lkjmjgdebee: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint32, tag = "2")]
    pub jbpemofnedg: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Keaenhhgmef {
    #[prost(message, optional, tag = "9")]
    pub data: ::core::option::Option<ClientObjDownloadData>,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Menpbggogmc {
    #[prost(string, repeated, tag = "13")]
    pub gkhfbfknhob: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ncbimlpodon {
    #[prost(message, optional, tag = "12")]
    pub black_list: ::core::option::Option<Menpbggogmc>,
    #[prost(bool, tag = "14")]
    pub iahopfnpfln: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cjakibdimmj {
    #[prost(oneof = "cjakibdimmj::Bfgkjimcgah", tags = "976, 284, 1317")]
    pub bfgkjimcgah: ::core::option::Option<cjakibdimmj::Bfgkjimcgah>,
}
/// Nested message and enum types in `CJAKIBDIMMJ`.
pub mod cjakibdimmj {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Bfgkjimcgah {
        #[prost(bool, tag = "976")]
        Iahopfnpfln(bool),
        #[prost(message, tag = "284")]
        Amaljfokcba(super::Menpbggogmc),
        #[prost(message, tag = "1317")]
        Oecbelgdlfp(super::Menpbggogmc),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fdfpmjapmib {
    #[prost(oneof = "fdfpmjapmib::Ddbnlhjnane", tags = "621, 918")]
    pub ddbnlhjnane: ::core::option::Option<fdfpmjapmib::Ddbnlhjnane>,
}
/// Nested message and enum types in `FDFPMJAPMIB`.
pub mod fdfpmjapmib {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Ddbnlhjnane {
        #[prost(message, tag = "621")]
        Doocplcldpd(super::Ncbimlpodon),
        #[prost(message, tag = "918")]
        Inhldidjgha(super::Cjakibdimmj),
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gcmdohjggjb {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fhngpbnfbae {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Baphalpcpmj {
    #[prost(string, repeated, tag = "3")]
    pub fibijgmkdpp: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "13")]
    pub kaojcobeeon: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "14")]
    pub ledkmdollbb: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HeadIconData {
    #[prost(uint32, tag = "6")]
    pub id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DisplayAvatarData {
    #[prost(uint32, tag = "11")]
    pub avatar_id: u32,
    #[prost(uint32, tag = "8")]
    pub pos: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DisplayAvatarVec {
    #[prost(message, repeated, tag = "5")]
    pub display_avatar_list: ::prost::alloc::vec::Vec<DisplayAvatarData>,
    #[prost(bool, tag = "10")]
    pub is_display: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetPlayerBoardDataCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetPlayerBoardDataScRsp {
    #[prost(uint32, tag = "8")]
    pub current_head_icon_id: u32,
    #[prost(uint32, repeated, tag = "6")]
    pub assist_avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "5")]
    pub unlocked_head_icon_list: ::prost::alloc::vec::Vec<HeadIconData>,
    #[prost(string, tag = "1")]
    pub signature: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "15")]
    pub display_avatar_vec: ::core::option::Option<DisplayAvatarVec>,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetHeadIconCsReq {
    #[prost(uint32, tag = "6")]
    pub id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetHeadIconScRsp {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(uint32, tag = "14")]
    pub current_head_icon_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fedjlkbepmm {
    #[prost(message, repeated, tag = "12")]
    pub display_avatar_list: ::prost::alloc::vec::Vec<DisplayAvatarData>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hdkmpckfaab {
    #[prost(message, repeated, tag = "2")]
    pub display_avatar_list: ::prost::alloc::vec::Vec<DisplayAvatarData>,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dhgmeegjfoe {
    #[prost(bool, tag = "6")]
    pub is_display: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jeadfnnmign {
    #[prost(bool, tag = "6")]
    pub is_display: bool,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetSignatureCsReq {
    #[prost(string, tag = "11")]
    pub signature: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetSignatureScRsp {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(string, tag = "9")]
    pub signature: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dhjgngbkoag {
    #[prost(uint32, tag = "14")]
    pub equip_avatar_id: u32,
    #[prost(uint32, repeated, tag = "15")]
    pub avatar_id_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gocfjnolipb {
    #[prost(uint32, repeated, tag = "4")]
    pub avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "10")]
    pub equip_avatar_id: u32,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gjgcnjmemap {
    #[prost(uint32, tag = "5")]
    pub nchiekedhce: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ikiekhjenfo {
    #[prost(uint32, repeated, tag = "9")]
    pub nmklegomepj: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "2")]
    pub opeedjihjop: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pafohbimnjk {
    #[prost(message, repeated, tag = "3")]
    pub ipflhcjiebm: ::prost::alloc::vec::Vec<ItemList>,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "8")]
    pub nmklegomepj: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "11")]
    pub opeedjihjop: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gnceipbbghg {
    #[prost(uint32, tag = "10")]
    pub mamhojmfjof: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lkddlabfibc {
    #[prost(uint32, tag = "14")]
    pub cpnimljnmmf: u32,
    #[prost(uint32, tag = "4")]
    pub iifomgofmdl: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fjhnmbnnibk {
    #[prost(uint32, tag = "11")]
    pub iifomgofmdl: u32,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(message, optional, tag = "9")]
    pub cfidbmmijhg: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "8")]
    pub cpnimljnmmf: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Odlphapjdmh {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Neioaacemja {
    #[prost(message, optional, tag = "11")]
    pub ipflhcjiebm: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mnoomkehnog {
    #[prost(uint32, tag = "2")]
    pub cehfiilmjkm: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Afbneibijnd {
    #[prost(uint32, tag = "12")]
    pub bgafghipoje: u32,
    #[prost(int64, tag = "9")]
    pub coifhfpegph: i64,
    #[prost(uint32, repeated, tag = "11")]
    pub nmklegomepj: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "7")]
    pub mamhojmfjof: u32,
    #[prost(int64, tag = "14")]
    pub finish_time: i64,
    #[prost(uint32, repeated, tag = "5")]
    pub caimhcaacfg: ::prost::alloc::vec::Vec<u32>,
    #[prost(enumeration = "Nobpmmnfenj", tag = "6")]
    pub status: i32,
    #[prost(uint32, tag = "1")]
    pub ilcfojcdnhi: u32,
    #[prost(bool, tag = "2")]
    pub is_taken_reward: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Apnmngnpfac {
    #[prost(message, optional, tag = "6")]
    pub pfeidpolokm: ::core::option::Option<Afbneibijnd>,
    #[prost(uint32, tag = "13")]
    pub gmfidnohgco: u32,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jeckopfflaa {
    #[prost(message, optional, tag = "3")]
    pub pfeidpolokm: ::core::option::Option<Afbneibijnd>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cmgdjiomclg {
    #[prost(uint32, tag = "4")]
    pub cldajdjhoii: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Chcnmfdipfb {
    #[prost(uint32, tag = "12")]
    pub cldajdjhoii: u32,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kaoahkaohfi {
    #[prost(uint32, tag = "12")]
    pub cojkeifjnek: u32,
    #[prost(message, optional, tag = "2")]
    pub dhlpkmihdnm: ::core::option::Option<PunkLordBattleRecordList>,
    #[prost(message, optional, tag = "14")]
    pub basic_info: ::core::option::Option<PunkLordMonsterBasicInfo>,
    #[prost(enumeration = "PunkLordAttackerStatus", tag = "10")]
    pub ekkjlaokiji: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Famohhohpnl {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dpgjjngcgpk {
    #[prost(message, repeated, tag = "7")]
    pub fijnjgfabjd: ::prost::alloc::vec::Vec<Kaoahkaohfi>,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Eagdpcpjoem {
    #[prost(uint32, tag = "8")]
    pub uid: u32,
    #[prost(bool, tag = "3")]
    pub clommfkjpmm: bool,
    #[prost(uint32, tag = "6")]
    pub monster_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cdkhfipeeia {
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(int64, tag = "12")]
    pub agegdmgnpdk: i64,
    #[prost(bool, tag = "15")]
    pub clommfkjpmm: bool,
    #[prost(message, optional, tag = "9")]
    pub scene: ::core::option::Option<Fnlgplncpcl>,
    #[prost(message, optional, tag = "3")]
    pub dpmkammiolb: ::core::option::Option<Kaoahkaohfi>,
    #[prost(uint32, repeated, tag = "10")]
    pub dmilcfhlihp: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Iagcophlmfb {
    #[prost(uint32, tag = "11")]
    pub monster_id: u32,
    #[prost(uint32, tag = "3")]
    pub uid: u32,
    #[prost(enumeration = "PunkLordShareType", tag = "4")]
    pub felggjmhono: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Acfamdbmaoi {
    #[prost(uint32, tag = "3")]
    pub uid: u32,
    #[prost(uint32, tag = "9")]
    pub monster_id: u32,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(enumeration = "PunkLordShareType", tag = "4")]
    pub felggjmhono: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gccfgdennnk {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cfjjeofifeb {
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(message, optional, tag = "6")]
    pub dpmkammiolb: ::core::option::Option<Kaoahkaohfi>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ghmppijabnl {
    #[prost(uint32, tag = "8")]
    pub level: u32,
    #[prost(bool, tag = "12")]
    pub mdhjkkbnmcf: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gdfcpphagda {
    #[prost(uint32, tag = "11")]
    pub level: u32,
    #[prost(bool, tag = "9")]
    pub mdhjkkbnmcf: bool,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(message, optional, tag = "3")]
    pub reward: ::core::option::Option<ItemList>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ikckfgpocib {
    #[prost(uint32, repeated, tag = "5")]
    pub dmilcfhlihp: ::prost::alloc::vec::Vec<u32>,
    #[prost(enumeration = "PunkLordMonsterInfoNotifyReason", tag = "2")]
    pub reason: i32,
    #[prost(message, optional, tag = "6")]
    pub basic_info: ::core::option::Option<PunkLordMonsterBasicInfo>,
    #[prost(message, optional, tag = "13")]
    pub dhlpkmihdnm: ::core::option::Option<PunkLordBattleRecord>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hpofeoiljcp {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fncghmimjjk {
    #[prost(uint32, tag = "9")]
    pub gnlmkkhaekm: u32,
    #[prost(uint32, tag = "2")]
    pub ppnkpnbiien: u32,
    #[prost(uint32, tag = "14")]
    pub gbjodjcolga: u32,
    #[prost(uint32, tag = "15")]
    pub bdpbdgbkdoo: u32,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(uint32, tag = "13")]
    pub iadcohodgjn: u32,
    #[prost(uint32, repeated, tag = "1")]
    pub eahbikfallf: ::prost::alloc::vec::Vec<u32>,
    #[prost(int64, tag = "11")]
    pub bedjdeancoj: i64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gemeljpbkdl {
    #[prost(message, optional, tag = "3")]
    pub dpmkammiolb: ::core::option::Option<PunkLordMonsterBasicInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mionobmhaja {
    #[prost(uint32, tag = "5")]
    pub ahjfpngdbdo: u32,
    #[prost(message, optional, tag = "6")]
    pub dhlpkmihdnm: ::core::option::Option<PunkLordBattleRecord>,
    #[prost(message, optional, tag = "3")]
    pub dpmkammiolb: ::core::option::Option<PunkLordMonsterBasicInfo>,
    #[prost(uint32, tag = "13")]
    pub pgofpnlapoe: u32,
    #[prost(uint32, tag = "9")]
    pub ncacoccjnld: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mdjgoockcmj {
    #[prost(uint32, tag = "9")]
    pub monster_id: u32,
    #[prost(int64, tag = "6")]
    pub timestamp: i64,
    #[prost(uint32, tag = "7")]
    pub lkkjeilkpni: u32,
    #[prost(uint32, tag = "10")]
    pub world_level: u32,
    #[prost(bool, tag = "13")]
    pub ppboceckcah: bool,
    #[prost(uint32, tag = "8")]
    pub config_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ijjhfbpkbme {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ppfkeajefla {
    #[prost(message, repeated, tag = "15")]
    pub oakkccgaekk: ::prost::alloc::vec::Vec<PunkLordMonsterKey>,
    #[prost(message, repeated, tag = "7")]
    pub ddcemdgedio: ::prost::alloc::vec::Vec<Mdjgoockcmj>,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hmindkklbig {
    #[prost(message, optional, tag = "5")]
    pub aiecobkeigb: ::core::option::Option<Mdjgoockcmj>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Llddohbgehb {
    #[prost(message, optional, tag = "13")]
    pub pkcpjjnoaln: ::core::option::Option<PunkLordMonsterKey>,
    #[prost(bool, tag = "8")]
    pub kfejgfnonip: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kojnfjloedg {
    #[prost(message, repeated, tag = "14")]
    pub jeahdcgkbbb: ::prost::alloc::vec::Vec<PunkLordMonsterKey>,
    #[prost(uint32, tag = "11")]
    pub score_id: u32,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(bool, tag = "7")]
    pub kfejgfnonip: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Baanogikbgk {
    #[prost(uint32, tag = "6")]
    pub gbjodjcolga: u32,
    #[prost(uint32, tag = "10")]
    pub bdpbdgbkdoo: u32,
    #[prost(uint32, tag = "8")]
    pub iadcohodgjn: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ilhgmaicafe {
    #[prost(message, optional, tag = "4")]
    pub pkcpjjnoaln: ::core::option::Option<PunkLordMonsterKey>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jmfgecmdhbb {
    #[prost(message, optional, tag = "3")]
    pub pkcpjjnoaln: ::core::option::Option<PunkLordMonsterKey>,
    #[prost(message, repeated, tag = "12")]
    pub okobgjhjjoa: ::prost::alloc::vec::Vec<PunkLordBattleReplay>,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "11")]
    pub battle_record_list: ::prost::alloc::vec::Vec<PunkLordBattleRecord>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetQuestDataCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Quest {
    #[prost(int64, tag = "14")]
    pub finish_time: i64,
    #[prost(uint32, tag = "2")]
    pub id: u32,
    #[prost(enumeration = "QuestStatus", tag = "3")]
    pub status: i32,
    #[prost(uint32, repeated, tag = "13")]
    pub pgjngnajhpp: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "11")]
    pub progress: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetQuestDataScRsp {
    #[prost(uint32, tag = "4")]
    pub total_achievement_exp: u32,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "11")]
    pub quest_list: ::prost::alloc::vec::Vec<Quest>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bbaadedbdab {
    #[prost(uint32, repeated, tag = "4")]
    pub dcgjaboniic: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakeQuestRewardScRsp {
    #[prost(uint32, repeated, tag = "11")]
    pub succ_quest_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(message, optional, tag = "5")]
    pub reward: ::core::option::Option<ItemList>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dcbeoecblac {
    #[prost(uint32, tag = "11")]
    pub optional_reward_id: u32,
    #[prost(uint32, tag = "12")]
    pub jlfabhhnhcm: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mefhinfdceb {
    #[prost(uint32, tag = "10")]
    pub jlfabhhnhcm: u32,
    #[prost(message, optional, tag = "8")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lakabgfaifm {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Epjdfbaofdf {
    #[prost(uint32, tag = "11")]
    pub ijfihgcknhg: u32,
    #[prost(uint32, tag = "3")]
    pub progress: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Diinmpdpang {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "2")]
    pub obemgacmgnh: ::prost::alloc::vec::Vec<Epjdfbaofdf>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Nhiggmgniaf {
    #[prost(message, optional, tag = "6")]
    pub feaocokkgbm: ::core::option::Option<Epjdfbaofdf>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ibghbkolkjh {
    #[prost(uint32, tag = "13")]
    pub jlfabhhnhcm: u32,
    #[prost(uint32, tag = "3")]
    pub group_id: u32,
    #[prost(uint32, tag = "11")]
    pub prop_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Menhbljfchh {
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bmmfbccjigf {
    #[prost(uint32, repeated, tag = "9")]
    pub quest_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ldmcjedobik {
    #[prost(message, repeated, tag = "10")]
    pub quest_list: ::prost::alloc::vec::Vec<Quest>,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fnlgplncpcl {
    #[prost(uint32, tag = "7")]
    pub cenifnknfnp: u32,
    #[prost(message, optional, tag = "6")]
    pub lineup: ::core::option::Option<LineupInfo>,
    #[prost(uint32, tag = "15")]
    pub world_level: u32,
    #[prost(message, optional, tag = "3")]
    pub ghedlclnhij: ::core::option::Option<SceneInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ipckbdaghhk {
    #[prost(uint32, tag = "13")]
    pub world_level: u32,
    #[prost(uint32, repeated, tag = "4")]
    pub avatar_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "14")]
    pub prop_entity_id: u32,
    #[prost(uint32, tag = "7")]
    pub cenifnknfnp: u32,
    #[prost(uint32, tag = "1")]
    pub jgeaegmhdoc: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pphbjdllkig {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(message, optional, tag = "12")]
    pub scene: ::core::option::Option<Fnlgplncpcl>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fhkckemnmfe {
    #[prost(bool, tag = "12")]
    pub jgeaegmhdoc: bool,
    #[prost(uint32, tag = "9")]
    pub cenifnknfnp: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ifiemdngkie {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hochoihkkdg {
    #[prost(uint32, tag = "11")]
    pub dlppdpbjiim: u32,
    #[prost(enumeration = "Fochdfjanpc", tag = "4")]
    pub mddofmcjjhh: i32,
    #[prost(uint32, tag = "3")]
    pub hfaljihkecn: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gbdkfmgfpnl {
    #[prost(message, repeated, tag = "14")]
    pub lheilnacnod: ::prost::alloc::vec::Vec<Hochoihkkdg>,
    #[prost(uint32, tag = "9")]
    pub world_level: u32,
    #[prost(enumeration = "Jldfakdkmjj", tag = "1")]
    pub status: i32,
    #[prost(message, optional, tag = "10")]
    pub item_list: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "11")]
    pub cenifnknfnp: u32,
    #[prost(uint64, tag = "5")]
    pub copmfambkdn: u64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Amdkbohcfia {
    #[prost(uint32, tag = "1")]
    pub max_score: u32,
    #[prost(uint32, tag = "8")]
    pub cenifnknfnp: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Akdajafpdee {
    #[prost(uint32, tag = "2")]
    pub world_level: u32,
    #[prost(uint32, tag = "13")]
    pub cenifnknfnp: u32,
    #[prost(uint32, repeated, tag = "10")]
    pub knibaniilde: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mkdmnmleffn {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRaidInfoScRsp {
    #[prost(message, repeated, tag = "8")]
    pub challenge_raid_list: ::prost::alloc::vec::Vec<Amdkbohcfia>,
    #[prost(uint32, repeated, tag = "15")]
    pub challenge_taken_reward_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "9")]
    pub finished_raid_info_list: ::prost::alloc::vec::Vec<Akdajafpdee>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Aiamphnkfbb {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jhpholnemdf {
    #[prost(message, repeated, tag = "8")]
    pub mjgffcljgfn: ::prost::alloc::vec::Vec<Amdkbohcfia>,
    #[prost(uint32, repeated, tag = "4")]
    pub ioodmakjdif: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Colgmgckfen {
    #[prost(uint32, tag = "1")]
    pub oehkjoafpba: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Egbialmidfd {
    #[prost(message, optional, tag = "4")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "13")]
    pub oehkjoafpba: u32,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Nhdhphkkjog {
    #[prost(message, optional, tag = "8")]
    pub ehmiljfijkh: ::core::option::Option<Amdkbohcfia>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gelpflaecfd {
    #[prost(uint32, tag = "2")]
    pub dmmppkmjpmm: u32,
    #[prost(uint32, tag = "3")]
    pub progress: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pfflbeldcip {
    #[prost(uint32, tag = "9")]
    pub progress: u32,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(uint32, tag = "15")]
    pub dmmppkmjpmm: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hiiacehobbc {
    #[prost(uint32, tag = "12")]
    pub world_level: u32,
    #[prost(uint32, tag = "5")]
    pub cenifnknfnp: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ekhikmnokmd {
    #[prost(uint32, tag = "11")]
    pub cenifnknfnp: u32,
    #[prost(message, repeated, tag = "14")]
    pub lheilnacnod: ::prost::alloc::vec::Vec<Hochoihkkdg>,
    #[prost(bool, tag = "7")]
    pub jgeaegmhdoc: bool,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(uint32, tag = "10")]
    pub world_level: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jkdinnedbao {
    #[prost(uint32, tag = "4")]
    pub world_level: u32,
    #[prost(uint32, tag = "1")]
    pub cenifnknfnp: u32,
    #[prost(message, repeated, tag = "5")]
    pub lheilnacnod: ::prost::alloc::vec::Vec<Hochoihkkdg>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ahanbgmibad {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fejldildbbm {
    #[prost(message, repeated, tag = "4")]
    pub npjhicinona: ::prost::alloc::vec::Vec<Jkdinnedbao>,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ffnapmoapnk {
    #[prost(uint32, tag = "7")]
    pub cenifnknfnp: u32,
    #[prost(uint32, tag = "3")]
    pub world_level: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Feodpijlncc {
    #[prost(message, optional, tag = "1")]
    pub lineup: ::core::option::Option<LineupInfo>,
    #[prost(uint32, tag = "13")]
    pub cenifnknfnp: u32,
    #[prost(uint32, tag = "11")]
    pub world_level: u32,
    #[prost(message, optional, tag = "12")]
    pub scene: ::core::option::Option<SceneInfo>,
    #[prost(enumeration = "Egkfndoopnn", tag = "2")]
    pub reason: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Aconlfjejok {
    #[prost(uint32, tag = "10")]
    pub jjdmkhbkplm: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Agdlaankdjm {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cecbnfamlae {
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "1")]
    pub challenge_list: ::prost::alloc::vec::Vec<Aconlfjejok>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cealidhpnje {
    #[prost(message, optional, tag = "12")]
    pub kfjcngbhagk: ::core::option::Option<Aconlfjejok>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ceaepkegaok {
    #[prost(uint32, tag = "4")]
    pub cenifnknfnp: u32,
    #[prost(uint32, tag = "10")]
    pub jgeaegmhdoc: u32,
    #[prost(uint32, tag = "8")]
    pub world_level: u32,
    #[prost(uint32, repeated, tag = "13")]
    pub avatar_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jkoijmaoljn {
    #[prost(message, optional, tag = "15")]
    pub scene: ::core::option::Option<Fnlgplncpcl>,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ifhejamnipm {
    #[prost(uint32, tag = "8")]
    pub kicobnpckae: u32,
    #[prost(uint32, tag = "11")]
    pub iikgcjfjadf: u32,
    #[prost(uint32, tag = "10")]
    pub fleefjlnlch: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fmjdehfopfk {
    #[prost(uint32, tag = "4")]
    pub jicdflimhhd: u32,
    #[prost(uint32, tag = "12")]
    pub kicobnpckae: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RelicRecommendCsReq {
    #[prost(uint32, tag = "7")]
    pub avatar_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RelicRecommendScRsp {
    #[prost(uint32, tag = "1")]
    pub avatar_id: u32,
    #[prost(message, repeated, tag = "13")]
    pub mpmfahlkeob: ::prost::alloc::vec::Vec<Fmjdehfopfk>,
    #[prost(message, repeated, tag = "6")]
    pub pdbhnhpcnnj: ::prost::alloc::vec::Vec<Ifhejamnipm>,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "11")]
    pub lgejjajpedk: ::prost::alloc::vec::Vec<Fmjdehfopfk>,
    #[prost(message, repeated, tag = "7")]
    pub kkcmfgmhimo: ::prost::alloc::vec::Vec<Fmjdehfopfk>,
    #[prost(message, repeated, tag = "4")]
    pub fbbajbinglb: ::prost::alloc::vec::Vec<Fmjdehfopfk>,
    #[prost(bool, tag = "5")]
    pub ogegkokgppj: bool,
    #[prost(message, repeated, tag = "8")]
    pub nobonccpeng: ::prost::alloc::vec::Vec<Ifhejamnipm>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RelicAvatarRecommendCsReq {
    #[prost(uint32, tag = "3")]
    pub dhjhibcdnba: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RelicAvatarRecommendScRsp {
    #[prost(bool, tag = "2")]
    pub ogegkokgppj: bool,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(uint32, tag = "4")]
    pub dhjhibcdnba: u32,
    #[prost(uint32, repeated, tag = "9")]
    pub avatar_id_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Nfjmmfnglij {
    #[prost(uint32, tag = "10")]
    pub challenge_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ahkggggibif {
    #[prost(uint32, repeated, tag = "2")]
    pub second_half_lineup: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "10")]
    pub dcholkbfbgi: u32,
    #[prost(uint32, tag = "3")]
    pub ceifdikpdam: u32,
    #[prost(uint32, repeated, tag = "14")]
    pub first_half_lineup: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ajaenmgkgli {
    #[prost(message, repeated, tag = "11")]
    pub jaejjmjpmnc: ::prost::alloc::vec::Vec<Ahkggggibif>,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(uint32, tag = "13")]
    pub challenge_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Onpofianijj {
    #[prost(uint32, tag = "6")]
    pub mdmgkhlhiin: u32,
    #[prost(uint32, tag = "9")]
    pub lgiiahidlmg: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ppgmpbhkdcn {
    #[prost(message, repeated, tag = "10")]
    pub equipment_list: ::prost::alloc::vec::Vec<Onpofianijj>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ahpnkbocedf {
    #[prost(uint32, tag = "6")]
    pub fikkgbibcjk: u32,
    #[prost(uint32, tag = "12")]
    pub pdmgjkodfop: u32,
    #[prost(uint32, tag = "10")]
    pub ehceepmbddi: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gdgocbpappb {
    #[prost(message, repeated, tag = "8")]
    pub cdhdmhlocpo: ::prost::alloc::vec::Vec<Ahpnkbocedf>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lgpnoidojle {
    #[prost(enumeration = "Kldhjgegglj", tag = "10")]
    pub ianneeijakh: i32,
    #[prost(uint32, tag = "4")]
    pub eigpmibcikg: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Blankjclnpe {
    #[prost(bool, tag = "8")]
    pub ogegkokgppj: bool,
    #[prost(uint32, tag = "10")]
    pub eigpmibcikg: u32,
    #[prost(enumeration = "Kldhjgegglj", tag = "9")]
    pub ianneeijakh: i32,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(oneof = "blankjclnpe::Blngpigbdeh", tags = "13, 15")]
    pub blngpigbdeh: ::core::option::Option<blankjclnpe::Blngpigbdeh>,
}
/// Nested message and enum types in `BLANKJCLNPE`.
pub mod blankjclnpe {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Blngpigbdeh {
        #[prost(message, tag = "13")]
        Gpnfolhkodi(super::Ppgmpbhkdcn),
        #[prost(message, tag = "15")]
        Aeigaheeocn(super::Gdgocbpappb),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ejbiokmolaf {
    #[prost(uint32, repeated, tag = "4")]
    pub ffbeebkogpn: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Knchlmgiljc {
    #[prost(uint32, tag = "3")]
    pub nopdkldekkf: u32,
    #[prost(map = "uint32, message", tag = "10")]
    pub mbgijnjfhge: ::std::collections::HashMap<u32, Ejbiokmolaf>,
    #[prost(uint32, tag = "4")]
    pub panel_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Onapbicfokg {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kjipkommdii {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "5")]
    pub iagibdaichi: ::prost::alloc::vec::Vec<Knchlmgiljc>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hnpbfpoojco {
    #[prost(enumeration = "Ojljhfnfdkp", tag = "9")]
    pub honemgcfbgi: i32,
    #[prost(uint32, repeated, tag = "11")]
    pub switch_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "8")]
    pub group_id: u32,
    #[prost(uint32, tag = "3")]
    pub panel_id: u32,
    #[prost(uint32, tag = "7")]
    pub nopdkldekkf: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bgejfelhfnl {
    #[prost(uint32, tag = "1")]
    pub panel_id: u32,
    #[prost(uint32, tag = "9")]
    pub group_id: u32,
    #[prost(uint32, tag = "11")]
    pub nopdkldekkf: u32,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cmmbdgdnhgc {
    #[prost(uint32, tag = "7")]
    pub group_id: u32,
    #[prost(uint32, tag = "13")]
    pub nopdkldekkf: u32,
    #[prost(uint32, tag = "1")]
    pub panel_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dhnibenkehj {
    #[prost(uint32, tag = "11")]
    pub nopdkldekkf: u32,
    #[prost(uint32, tag = "8")]
    pub group_id: u32,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(message, optional, tag = "14")]
    pub chpjjklgokm: ::core::option::Option<Ejbiokmolaf>,
    #[prost(uint32, tag = "15")]
    pub panel_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ejjhkhlpodl {
    #[prost(uint32, repeated, tag = "8")]
    pub egflalhojkf: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "9")]
    pub unique_id: u32,
    #[prost(uint32, tag = "5")]
    pub equip_avatar_id: u32,
    #[prost(uint32, repeated, tag = "13")]
    pub fahcacdfeih: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ehjmbnkjnko {
    #[prost(uint32, tag = "6")]
    pub equip_avatar_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Iiioapkpeek {
    #[prost(message, repeated, tag = "3")]
    pub knnmncpdcah: ::prost::alloc::vec::Vec<Ejjhkhlpodl>,
    #[prost(uint32, tag = "14")]
    pub equip_avatar_id: u32,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ibnonncjifk {
    #[prost(message, optional, tag = "4")]
    pub eilidmcocho: ::core::option::Option<Ejjhkhlpodl>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oganncnenbp {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(message, optional, tag = "10")]
    pub eilidmcocho: ::core::option::Option<Ejjhkhlpodl>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Clefdpidona {
    #[prost(message, optional, tag = "8")]
    pub eilidmcocho: ::core::option::Option<Ejjhkhlpodl>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nljlabkkhon {
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(message, optional, tag = "8")]
    pub eilidmcocho: ::core::option::Option<Ejjhkhlpodl>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mplpigalhgk {
    #[prost(uint32, tag = "13")]
    pub unique_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Egonfncemol {
    #[prost(uint32, tag = "12")]
    pub unique_id: u32,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ccfljffbhfe {
    #[prost(uint32, tag = "6")]
    pub relic_slot: u32,
    #[prost(bool, tag = "2")]
    pub baoonjdcfkd: bool,
    #[prost(uint32, tag = "5")]
    pub equip_avatar_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Aehpkjoachb {
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(uint32, tag = "4")]
    pub relic_slot: u32,
    #[prost(bool, tag = "12")]
    pub baoonjdcfkd: bool,
    #[prost(uint32, tag = "14")]
    pub equip_avatar_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Nmogjdpnjej {
    #[prost(uint32, tag = "10")]
    pub equip_avatar_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pjlolbehoeb {
    #[prost(uint32, repeated, tag = "12")]
    pub eiihpmpfklg: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "15")]
    pub equip_avatar_id: u32,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nfhpfcbbgip {
    #[prost(uint32, tag = "7")]
    pub equip_avatar_id: u32,
    #[prost(uint32, repeated, tag = "15")]
    pub eiihpmpfklg: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gcimjnnoaaf {
    #[prost(enumeration = "ReplayType", tag = "5")]
    pub replay_type: i32,
    #[prost(uint32, tag = "9")]
    pub afehlmfibmd: u32,
    #[prost(string, tag = "6")]
    pub kihbigpfkkn: ::prost::alloc::string::String,
    #[prost(uint32, tag = "12")]
    pub stage_id: u32,
    #[prost(uint32, tag = "2")]
    pub cmpbkbbkaoa: u32,
    #[prost(string, tag = "14")]
    pub bbemidhmnlm: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lpekbehcbbl {
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(string, tag = "13")]
    pub token: ::prost::alloc::string::String,
    #[prost(enumeration = "ReplayType", tag = "5")]
    pub replay_type: i32,
    #[prost(string, tag = "12")]
    pub kihbigpfkkn: ::prost::alloc::string::String,
    #[prost(uint32, tag = "1")]
    pub stage_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jeahcdlllpg {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Aaoomdcfcbn {
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "5")]
    pub kgcfealanko: ::prost::alloc::vec::Vec<ReplayInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jekbcefekkk {
    #[prost(uint32, tag = "6")]
    pub id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ljiinopgedi {
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "12")]
    pub eegeggbdhdg: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bgikbjmokof {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hffmnijganj {
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mkeelpfdclm {
    #[prost(uint32, tag = "1")]
    pub level: u32,
    #[prost(uint32, tag = "12")]
    pub buff_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oobcejfehmk {
    #[prost(message, repeated, tag = "15")]
    pub buff_list: ::prost::alloc::vec::Vec<Mkeelpfdclm>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gladgjakplc {
    #[prost(enumeration = "Ilnpbecoepl", tag = "7")]
    pub hnlfgdmcjdf: i32,
    #[prost(uint32, tag = "13")]
    pub mdbedjldpgm: u32,
    #[prost(uint32, tag = "10")]
    pub imimgfaaghm: u32,
    #[prost(uint32, tag = "11")]
    pub jjlogicpoao: u32,
    #[prost(enumeration = "Ilnpbecoepl", tag = "15")]
    pub beeeboiojif: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ijmgmkchhef {
    #[prost(uint32, tag = "14")]
    pub dbahfefglmd: u32,
    #[prost(uint32, tag = "15")]
    pub map_id: u32,
    #[prost(uint32, tag = "11")]
    pub cikibkaabim: u32,
    #[prost(uint32, tag = "5")]
    pub olokknlggme: u32,
    #[prost(message, repeated, tag = "10")]
    pub jdcliamkdhf: ::prost::alloc::vec::Vec<Gladgjakplc>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bkaaebjkjkh {
    #[prost(enumeration = "Egpimdadfdi", tag = "3")]
    pub mkegbhjljnh: i32,
    #[prost(uint32, tag = "2")]
    pub dbahfefglmd: u32,
    #[prost(bool, tag = "4")]
    pub fjoilohphlc: bool,
    #[prost(uint32, tag = "13")]
    pub map_id: u32,
    #[prost(uint32, tag = "7")]
    pub gmpiiaeggek: u32,
    #[prost(enumeration = "Jdakamigkhf", tag = "11")]
    pub nookgajmfji: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Omogaieofah {
    #[prost(uint32, tag = "2")]
    pub igchbpakbcb: u32,
    #[prost(message, optional, tag = "15")]
    pub fpoelpfcnbi: ::core::option::Option<ItemCostData>,
    #[prost(uint32, tag = "10")]
    pub ipodnbljpol: u32,
    #[prost(uint32, tag = "1")]
    pub cmogblhafhn: u32,
    #[prost(uint32, repeated, tag = "7")]
    pub pdihilclenm: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "9")]
    pub ekflpnlapdf: u32,
    #[prost(uint32, tag = "13")]
    pub ckkekmjmabc: u32,
    #[prost(enumeration = "Nniohhmjghg", tag = "5")]
    pub hhmabjdimgm: i32,
    #[prost(uint32, tag = "11")]
    pub pdapeheambm: u32,
    #[prost(uint32, tag = "4")]
    pub djfckfemgoj: u32,
    #[prost(bool, tag = "6")]
    pub ehpmcgoelgb: bool,
    #[prost(message, repeated, tag = "14")]
    pub lhmidpambpd: ::prost::alloc::vec::Vec<Mkeelpfdclm>,
    #[prost(uint32, tag = "8")]
    pub bheidppfcka: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kfejfbbgiad {
    #[prost(message, repeated, tag = "1")]
    pub kmpmdldhabn: ::prost::alloc::vec::Vec<Mkeelpfdclm>,
    #[prost(message, optional, tag = "6")]
    pub noenhhilnah: ::core::option::Option<Mkeelpfdclm>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Igjenciklof {
    #[prost(uint32, tag = "12")]
    pub bilbohbdbpn: u32,
    #[prost(message, repeated, tag = "10")]
    pub clplefhhafb: ::prost::alloc::vec::Vec<Mkeelpfdclm>,
    #[prost(message, repeated, tag = "15")]
    pub ihgmpjnnmki: ::prost::alloc::vec::Vec<Mkeelpfdclm>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gdiilljbdcf {
    #[prost(float, tag = "6")]
    pub famcmagfkcl: f32,
    #[prost(uint32, tag = "15")]
    pub buff_id: u32,
    #[prost(message, optional, tag = "13")]
    pub cost_data: ::core::option::Option<ItemCostData>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bhjpklcmlej {
    #[prost(message, repeated, tag = "2")]
    pub dakmmpkbmko: ::prost::alloc::vec::Vec<Gdiilljbdcf>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Paimogcigij {
    #[prost(uint32, tag = "15")]
    pub eabocpnfklm: u32,
    #[prost(uint32, tag = "1")]
    pub blfaanhjpad: u32,
    #[prost(map = "uint32, uint32", tag = "10")]
    pub gmafejejbho: ::std::collections::HashMap<u32, u32>,
    #[prost(uint32, tag = "14")]
    pub khncedgfpgl: u32,
    #[prost(uint32, tag = "4")]
    pub deidchamdba: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Olfpckagkak {
    #[prost(uint32, tag = "14")]
    pub fnhfjfioild: u32,
    #[prost(message, repeated, tag = "4")]
    pub ckgfonmaeko: ::prost::alloc::vec::Vec<Paimogcigij>,
    #[prost(uint32, tag = "13")]
    pub dlnfokknfgi: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bfljdbhbmnp {
    #[prost(message, optional, tag = "12")]
    pub eeppkmpajoh: ::core::option::Option<Olfpckagkak>,
    #[prost(uint32, repeated, tag = "1")]
    pub jacighhgcgb: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Keionffflco {
    #[prost(uint32, repeated, tag = "13")]
    pub cmaggnfdkag: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Flecflldnfp {
    #[prost(uint32, repeated, tag = "14")]
    pub imoiceebdco: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ngffceicacd {
    #[prost(uint32, tag = "10")]
    pub ebnpocidpke: u32,
    #[prost(oneof = "ngffceicacd::Ccpfabancnn", tags = "5, 12")]
    pub ccpfabancnn: ::core::option::Option<ngffceicacd::Ccpfabancnn>,
}
/// Nested message and enum types in `NGFFCEICACD`.
pub mod ngffceicacd {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Ccpfabancnn {
        #[prost(message, tag = "5")]
        Jdijkegcibp(super::ItemList),
        #[prost(message, tag = "12")]
        Cndgjjljdof(super::Oobcejfehmk),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ejjglgpedee {
    #[prost(uint32, repeated, tag = "1")]
    pub knfjmanjgga: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "2")]
    pub gficflciejj: ::core::option::Option<ItemCostData>,
    #[prost(uint32, tag = "10")]
    pub hbnbnnijmhn: u32,
    #[prost(uint32, tag = "14")]
    pub ehhbhkobnnj: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jheeloagmig {
    #[prost(uint32, tag = "4")]
    pub nidflbkpoeb: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pbekdhclbfb {
    #[prost(uint32, tag = "6")]
    pub gfdbgcolkcp: u32,
    #[prost(uint32, tag = "9")]
    pub hgblomelble: u32,
    #[prost(uint32, tag = "13")]
    pub jkjmcfagocf: u32,
    #[prost(uint32, tag = "5")]
    pub ipodnbljpol: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ilnfefobneg {
    #[prost(message, optional, tag = "1367")]
    pub omcbcgchlgn: ::core::option::Option<Dknmkfbobjf>,
    #[prost(message, optional, tag = "1261")]
    pub lagbgldlgcb: ::core::option::Option<Liikcgncbbf>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Liikcgncbbf {
    #[prost(message, optional, tag = "15")]
    pub chmhpcngfao: ::core::option::Option<Icildhnfjfg>,
    #[prost(message, optional, tag = "6")]
    pub pfeaniahfpc: ::core::option::Option<Hghcogepidm>,
    #[prost(message, optional, tag = "12")]
    pub ofolhkcnlba: ::core::option::Option<Kicdahaplch>,
    #[prost(message, optional, tag = "9")]
    pub fejgmnnfflg: ::core::option::Option<Bfkmdfgcncd>,
    #[prost(message, optional, tag = "8")]
    pub iblembncgpm: ::core::option::Option<Mmchophfmah>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dknmkfbobjf {
    #[prost(message, optional, tag = "9")]
    pub chmhpcngfao: ::core::option::Option<Gabcapjghfg>,
    #[prost(message, optional, tag = "8")]
    pub cmbhklpppad: ::core::option::Option<Ojcealjifnd>,
    #[prost(message, optional, tag = "1")]
    pub ocbkfgaoheh: ::core::option::Option<Ijmgmkchhef>,
    #[prost(message, optional, tag = "6")]
    pub kndmeilhkej: ::core::option::Option<Kfpmaiaadmo>,
    #[prost(message, optional, tag = "12")]
    pub eeppkmpajoh: ::core::option::Option<Omochgkhnik>,
    #[prost(message, optional, tag = "13")]
    pub aabchfbkpeg: ::core::option::Option<Bcllbmeedkp>,
    #[prost(message, optional, tag = "5")]
    pub embagmmhipa: ::core::option::Option<Efjdmhoakoo>,
    #[prost(bool, tag = "2")]
    pub gjboljkmgge: bool,
    #[prost(enumeration = "Egpimdadfdi", tag = "14")]
    pub status: i32,
    #[prost(message, optional, tag = "10")]
    pub lgopnbhhhbg: ::core::option::Option<Cfmapimjdfc>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bfkmdfgcncd {
    #[prost(int64, tag = "9")]
    pub end_time: i64,
    #[prost(uint32, tag = "10")]
    pub ahanjlehcga: u32,
    #[prost(int64, tag = "15")]
    pub begin_time: i64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mmchophfmah {
    #[prost(message, repeated, tag = "9")]
    pub jmmnaipoefo: ::prost::alloc::vec::Vec<Bkaaebjkjkh>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Icildhnfjfg {
    #[prost(uint32, repeated, tag = "10")]
    pub fpchnblonlc: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, tag = "11")]
    pub aoelkjeegkg: bool,
    #[prost(uint32, tag = "1")]
    pub hlbfbfdlaca: u32,
    #[prost(uint32, tag = "7")]
    pub alkilfnbfnm: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kicdahaplch {
    #[prost(uint32, tag = "3")]
    pub bileoophjef: u32,
    #[prost(uint32, tag = "15")]
    pub ifehbimemec: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cfmapimjdfc {
    #[prost(message, repeated, tag = "8")]
    pub lhmidpambpd: ::prost::alloc::vec::Vec<Mkeelpfdclm>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Omochgkhnik {
    #[prost(message, optional, tag = "6")]
    pub eeppkmpajoh: ::core::option::Option<Olfpckagkak>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Efjdmhoakoo {
    #[prost(message, optional, tag = "10")]
    pub fpjckpnlnfm: ::core::option::Option<Ejjglgpedee>,
    #[prost(uint32, repeated, tag = "8")]
    pub mankkfpbfcb: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "3")]
    pub base_avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "1")]
    pub lghcahbbcam: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hdjflbmlldp {
    #[prost(message, optional, tag = "5")]
    pub gkflnmojncp: ::core::option::Option<Flecflldnfp>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gabcapjghfg {
    #[prost(uint32, tag = "10")]
    pub hlbfbfdlaca: u32,
    #[prost(uint32, tag = "13")]
    pub amnbmjofjoo: u32,
    #[prost(bool, tag = "8")]
    pub aoelkjeegkg: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ojcealjifnd {
    #[prost(uint32, repeated, tag = "11")]
    pub gjanfnhlogn: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nikkccaknnp {
    #[prost(uint32, tag = "5")]
    pub hlbfbfdlaca: u32,
    #[prost(uint32, tag = "10")]
    pub alkilfnbfnm: u32,
    #[prost(uint32, repeated, tag = "15")]
    pub fpchnblonlc: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, tag = "4")]
    pub aoelkjeegkg: bool,
    #[prost(uint32, tag = "8")]
    pub amnbmjofjoo: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mncdpepcfgc {
    #[prost(uint32, tag = "1")]
    pub fjjdfpkgopc: u32,
    #[prost(uint32, tag = "9")]
    pub score_id: u32,
    #[prost(uint32, tag = "13")]
    pub kobfcomhgce: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Aojofbbnepa {
    #[prost(float, tag = "7")]
    pub dpfbdjmnceo: f32,
    #[prost(message, repeated, tag = "3")]
    pub dcmhgokcinf: ::prost::alloc::vec::Vec<Mncdpepcfgc>,
    #[prost(uint32, tag = "10")]
    pub npjeecedpok: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fgkcambiahb {
    #[prost(uint32, tag = "1")]
    pub slot: u32,
    #[prost(uint32, tag = "9")]
    pub id: u32,
    #[prost(enumeration = "AvatarType", tag = "3")]
    pub avatar_type: i32,
    #[prost(uint32, tag = "8")]
    pub level: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gkjfbbhhlac {
    #[prost(message, repeated, tag = "5")]
    pub avatar_list: ::prost::alloc::vec::Vec<Fgkcambiahb>,
    #[prost(message, repeated, tag = "15")]
    pub buff_list: ::prost::alloc::vec::Vec<Mkeelpfdclm>,
    #[prost(uint32, repeated, tag = "12")]
    pub ckgfonmaeko: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Imcccciccko {
    #[prost(message, optional, tag = "13")]
    pub agppepmgfmf: ::core::option::Option<Hghcogepidm>,
    #[prost(message, optional, tag = "4")]
    pub ghogllfkjho: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "1827")]
    pub dbahfefglmd: u32,
    #[prost(uint32, tag = "12")]
    pub mnbiebolccn: u32,
    #[prost(bool, tag = "5")]
    pub bejmokapadk: bool,
    #[prost(uint32, tag = "6")]
    pub score_id: u32,
    #[prost(message, optional, tag = "10")]
    pub hljjhlijbpd: ::core::option::Option<Hghcogepidm>,
    #[prost(message, optional, tag = "15")]
    pub hlobjooebod: ::core::option::Option<ItemList>,
    #[prost(message, optional, tag = "2")]
    pub holalcipknk: ::core::option::Option<Gkjfbbhhlac>,
    #[prost(message, optional, tag = "11")]
    pub ahoahffmjpk: ::core::option::Option<Aodidfnpicf>,
    #[prost(uint32, tag = "9")]
    pub ifehbimemec: u32,
    #[prost(bool, tag = "7")]
    pub is_win: bool,
    #[prost(message, optional, tag = "1")]
    pub lbgghnancoo: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "8")]
    pub dedlgfjaeam: u32,
    #[prost(uint32, tag = "1416")]
    pub lmmeanjpend: u32,
    #[prost(message, optional, tag = "3")]
    pub cdipfdnpmom: ::core::option::Option<Aojofbbnepa>,
    #[prost(uint32, tag = "14")]
    pub bimdlghkaoi: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hghcogepidm {
    #[prost(int64, tag = "5")]
    pub hoepojnnfci: i64,
    #[prost(bool, tag = "7")]
    pub pjhlocdbaeh: bool,
    #[prost(uint32, tag = "12")]
    pub hdladibhbhh: u32,
    #[prost(bool, tag = "15")]
    pub jomnpadaggk: bool,
    #[prost(uint32, tag = "6")]
    pub hhjpblekapn: u32,
    #[prost(int64, tag = "11")]
    pub cigboghafof: i64,
    #[prost(uint32, repeated, tag = "14")]
    pub cilnjididhl: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Eacofhbfmlb {
    #[prost(uint32, tag = "13")]
    pub jgmipmdppij: u32,
    #[prost(uint32, tag = "9")]
    pub elappcmeloa: u32,
    #[prost(uint32, tag = "3")]
    pub exp: u32,
    #[prost(uint32, tag = "15")]
    pub level: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueDialogueEventParam {
    #[prost(uint32, tag = "11")]
    pub dialogue_event_id: u32,
    #[prost(uint32, tag = "2")]
    pub arg_id: u32,
    #[prost(bool, tag = "9")]
    pub is_valid: bool,
    #[prost(int32, tag = "13")]
    pub int_value: i32,
    #[prost(float, tag = "14")]
    pub ratio: f32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lanlccobdne {
    #[prost(uint32, tag = "13")]
    pub onlhfcoglal: u32,
    #[prost(uint32, repeated, tag = "8")]
    pub eoheeigobkd: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "9")]
    pub hpeoadajiee: ::prost::alloc::vec::Vec<RogueDialogueEventParam>,
    #[prost(uint32, tag = "6")]
    pub bnclfoabaip: u32,
    #[prost(uint32, tag = "12")]
    pub game_mode_type: u32,
    #[prost(uint32, tag = "11")]
    pub cdjecokfiof: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gghfijkpfln {
    #[prost(uint32, repeated, tag = "11")]
    pub jjealoemmkk: ::prost::alloc::vec::Vec<u32>,
    #[prost(enumeration = "Ffnedmegpjd", tag = "15")]
    pub bplmpmefeam: i32,
    #[prost(oneof = "gghfijkpfln::Ccpfabancnn", tags = "13")]
    pub ccpfabancnn: ::core::option::Option<gghfijkpfln::Ccpfabancnn>,
}
/// Nested message and enum types in `GGHFIJKPFLN`.
pub mod gghfijkpfln {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Ccpfabancnn {
        #[prost(message, tag = "13")]
        Jdijkegcibp(super::ItemList),
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bdmjeaghplc {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Adkcccnplgc {
    #[prost(message, optional, tag = "12")]
    pub loddncnpano: ::core::option::Option<Ilnfefobneg>,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eihohlcmlpc {
    #[prost(uint32, tag = "7")]
    pub interacted_prop_entity_id: u32,
    #[prost(uint32, repeated, tag = "4")]
    pub hjgndhlmmib: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "3")]
    pub elappcmeloa: u32,
    #[prost(uint32, tag = "2")]
    pub dbahfefglmd: u32,
    #[prost(uint32, repeated, tag = "11")]
    pub base_avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "12")]
    pub lghcahbbcam: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pelkokjhnko {
    #[prost(message, optional, tag = "12")]
    pub loddncnpano: ::core::option::Option<Ilnfefobneg>,
    #[prost(message, optional, tag = "8")]
    pub scene: ::core::option::Option<SceneInfo>,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(message, optional, tag = "6")]
    pub lineup: ::core::option::Option<LineupInfo>,
    #[prost(message, optional, tag = "7")]
    pub keilfhhnlih: ::core::option::Option<Jjafhfgjmob>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gfnhcklflap {
    #[prost(uint32, tag = "7")]
    pub interacted_prop_entity_id: u32,
    #[prost(uint32, tag = "12")]
    pub dbahfefglmd: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Npabjlfgbdi {
    #[prost(message, optional, tag = "9")]
    pub scene: ::core::option::Option<SceneInfo>,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(message, optional, tag = "11")]
    pub lineup: ::core::option::Option<LineupInfo>,
    #[prost(message, optional, tag = "15")]
    pub keilfhhnlih: ::core::option::Option<Jjafhfgjmob>,
    #[prost(message, optional, tag = "13")]
    pub loddncnpano: ::core::option::Option<Ilnfefobneg>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jggmnelngde {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ideoggbcbii {
    #[prost(message, optional, tag = "3")]
    pub loddncnpano: ::core::option::Option<Ilnfefobneg>,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(message, optional, tag = "14")]
    pub lineup: ::core::option::Option<LineupInfo>,
    #[prost(message, optional, tag = "1")]
    pub keilfhhnlih: ::core::option::Option<Jjafhfgjmob>,
    #[prost(message, optional, tag = "7")]
    pub scene: ::core::option::Option<SceneInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Obafpkbhhil {
    #[prost(message, optional, tag = "9")]
    pub jippgkhkkbg: ::core::option::Option<Imcccciccko>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Focofpddlcm {
    #[prost(uint32, tag = "3")]
    pub prop_entity_id: u32,
    #[prost(uint32, repeated, tag = "9")]
    pub base_avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "13")]
    pub lghcahbbcam: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cinpijdilbp {
    #[prost(uint32, repeated, tag = "3")]
    pub base_avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "1")]
    pub lghcahbbcam: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Icdcleigdmh {
    #[prost(uint32, repeated, tag = "9")]
    pub lghcahbbcam: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "5")]
    pub base_avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "15")]
    pub interacted_prop_entity_id: u32,
    #[prost(uint32, tag = "7")]
    pub base_avatar_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fbgponnaefc {
    #[prost(uint32, tag = "14")]
    pub cinhfflfcik: u32,
    #[prost(uint32, repeated, tag = "6")]
    pub lghcahbbcam: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "2")]
    pub base_avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "10")]
    pub fpjckpnlnfm: ::core::option::Option<Ejjglgpedee>,
    #[prost(uint32, tag = "11")]
    pub base_avatar_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Diifkmdkici {
    #[prost(message, optional, tag = "6")]
    pub fpjckpnlnfm: ::core::option::Option<Ejjglgpedee>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Nenahmolccc {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mfionhfhmil {
    #[prost(message, optional, tag = "7")]
    pub fhlomgdanjm: ::core::option::Option<Bhjpklcmlej>,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gjdmajgbgmb {
    #[prost(uint32, tag = "14")]
    pub ojeblmkkmgo: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fmafcnogfmm {
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(message, optional, tag = "4")]
    pub anagcoddmom: ::core::option::Option<Mkeelpfdclm>,
    #[prost(bool, tag = "6")]
    pub fgefcefkhmh: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jnlepndpghe {
    #[prost(uint32, tag = "9")]
    pub dbahfefglmd: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Apjilfgnopd {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(message, optional, tag = "15")]
    pub loddncnpano: ::core::option::Option<Ilnfefobneg>,
    #[prost(message, optional, tag = "2")]
    pub jippgkhkkbg: ::core::option::Option<Imcccciccko>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bnaamdhoode {
    #[prost(bool, tag = "4")]
    pub gjboljkmgge: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ekdfdnoaoam {
    #[prost(message, optional, tag = "6")]
    pub scene: ::core::option::Option<SceneInfo>,
    #[prost(bool, tag = "12")]
    pub nioldfffeln: bool,
    #[prost(message, optional, tag = "15")]
    pub pfeaniahfpc: ::core::option::Option<Hghcogepidm>,
    #[prost(message, optional, tag = "14")]
    pub lineup: ::core::option::Option<LineupInfo>,
    #[prost(message, optional, tag = "11")]
    pub jippgkhkkbg: ::core::option::Option<Imcccciccko>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Oambadlbmce {
    #[prost(uint32, tag = "7")]
    pub jjlogicpoao: u32,
    #[prost(uint32, tag = "15")]
    pub mdbedjldpgm: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hineegeklpn {
    #[prost(uint32, tag = "7")]
    pub olokknlggme: u32,
    #[prost(message, optional, tag = "11")]
    pub scene: ::core::option::Option<SceneInfo>,
    #[prost(message, optional, tag = "4")]
    pub lineup: ::core::option::Option<LineupInfo>,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(message, optional, tag = "5")]
    pub keilfhhnlih: ::core::option::Option<Jjafhfgjmob>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Iijccdgpoec {
    #[prost(message, optional, tag = "7")]
    pub kpekclbepgb: ::core::option::Option<Gladgjakplc>,
    #[prost(uint32, tag = "13")]
    pub map_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hmiocdlgedg {
    #[prost(bool, tag = "6")]
    pub eiddmghlpbp: bool,
    #[prost(uint32, tag = "5")]
    pub interacted_prop_entity_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Moijdcliobj {
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(message, optional, tag = "3")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(message, optional, tag = "2")]
    pub nhanakjfeab: ::core::option::Option<ItemList>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kkfjnfaaiba {
    #[prost(uint32, tag = "10")]
    pub count: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ExchangeRogueRewardKeyScRsp {
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(uint32, tag = "7")]
    pub count: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hlfklmchoje {
    #[prost(uint32, tag = "6")]
    pub dbahfefglmd: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ceclocjfnec {
    #[prost(message, optional, tag = "2")]
    pub iodfgfomgod: ::core::option::Option<ItemList>,
    #[prost(message, optional, tag = "5")]
    pub get_item_list: ::core::option::Option<ItemList>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gnhoeinkckc {
    #[prost(uint32, tag = "14")]
    pub level: u32,
    #[prost(uint32, tag = "4")]
    pub elappcmeloa: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jobkdlipmnd {
    #[prost(message, optional, tag = "13")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(uint32, tag = "2")]
    pub level: u32,
    #[prost(uint32, tag = "11")]
    pub elappcmeloa: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bpghigpfecl {
    #[prost(uint32, tag = "4")]
    pub elappcmeloa: u32,
    #[prost(message, optional, tag = "1")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "11")]
    pub level: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Miomgcjafbl {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fklpgpgbamg {
    #[prost(message, optional, tag = "10")]
    pub hndlhicdnpc: ::core::option::Option<Hghcogepidm>,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ihkpgeeplim {
    #[prost(uint32, tag = "5")]
    pub hhjpblekapn: u32,
    #[prost(uint32, repeated, tag = "8")]
    pub lmmfpcokhee: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gembnldpobd {
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(message, optional, tag = "2")]
    pub pfeaniahfpc: ::core::option::Option<Hghcogepidm>,
    #[prost(uint32, tag = "9")]
    pub hhjpblekapn: u32,
    #[prost(message, optional, tag = "14")]
    pub reward: ::core::option::Option<ItemList>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Homkfnnaecd {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cipbdjilbbd {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(message, optional, tag = "4")]
    pub pfeaniahfpc: ::core::option::Option<Hghcogepidm>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ldoidbgbfph {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dcoebnomgbp {
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "4")]
    pub belofmfhfdk: ::prost::alloc::vec::Vec<Eacofhbfmlb>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Adphmdmmglo {
    #[prost(uint32, tag = "7")]
    pub elappcmeloa: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ibgmbdcmflf {
    #[prost(message, optional, tag = "9")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(message, optional, tag = "5")]
    pub chmhpcngfao: ::core::option::Option<Eacofhbfmlb>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mhhjhcpchfi {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ilckhhgkeea {
    #[prost(message, optional, tag = "8")]
    pub ckmahdgiboh: ::core::option::Option<Imjmgeenceh>,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Oodlmlffkik {
    #[prost(uint32, tag = "10")]
    pub fagnlgfjaif: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ifcinkbklnb {
    #[prost(message, optional, tag = "5")]
    pub ckmahdgiboh: ::core::option::Option<Imjmgeenceh>,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Khepkpamlic {
    #[prost(message, optional, tag = "12")]
    pub ofolhkcnlba: ::core::option::Option<Pbekdhclbfb>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Damijkddmhg {
    #[prost(enumeration = "Egpimdadfdi", tag = "12")]
    pub status: i32,
    #[prost(bool, tag = "7")]
    pub jienhhahfgi: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ijlpcnpdiac {
    #[prost(message, optional, tag = "4")]
    pub pfeaniahfpc: ::core::option::Option<Hghcogepidm>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oopeepenblm {
    #[prost(uint32, repeated, tag = "5")]
    pub base_avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "13")]
    pub lghcahbbcam: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dfilfjkbncn {
    #[prost(message, optional, tag = "9")]
    pub gcjogflgbbh: ::core::option::Option<Nikkccaknnp>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Llpnbnejkii {
    #[prost(message, optional, tag = "5")]
    pub keilfhhnlih: ::core::option::Option<Jjafhfgjmob>,
    #[prost(message, optional, tag = "3")]
    pub scene: ::core::option::Option<SceneInfo>,
    #[prost(message, optional, tag = "1")]
    pub lineup: ::core::option::Option<LineupInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hnbfgccihpl {
    #[prost(uint32, repeated, tag = "15")]
    pub base_avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "13")]
    pub jjlogicpoao: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dfcgfncocdn {
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(message, optional, tag = "14")]
    pub lcoclenjjai: ::core::option::Option<Llpnbnejkii>,
    #[prost(uint32, tag = "13")]
    pub jjlogicpoao: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Oobnalgahbc {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Plfjlikalkc {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(message, optional, tag = "3")]
    pub lcoclenjjai: ::core::option::Option<Llpnbnejkii>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fbjmbkbmkac {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nhljkomfhho {
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(message, optional, tag = "1")]
    pub lcoclenjjai: ::core::option::Option<Llpnbnejkii>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ibdabbkgklm {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dagjbpccndj {
    #[prost(uint32, tag = "6")]
    pub jjlogicpoao: u32,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ffamnkoaihf {
    #[prost(uint32, tag = "1")]
    pub meipgemgacj: u32,
    #[prost(uint32, tag = "6")]
    pub buff_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gckblhadlgn {
    #[prost(message, repeated, tag = "12")]
    pub buff_list: ::prost::alloc::vec::Vec<Ffamnkoaihf>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueCommonBuffSelectInfo {
    #[prost(uint32, repeated, tag = "7")]
    pub first_buff_type_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(enumeration = "Nniohhmjghg", tag = "2")]
    pub source_type: i32,
    #[prost(uint32, tag = "9")]
    pub roll_buff_max_count: u32,
    #[prost(uint32, tag = "5")]
    pub source_total_count: u32,
    #[prost(uint32, tag = "3")]
    pub source_cur_count: u32,
    #[prost(uint32, tag = "11")]
    pub source_hint_id: u32,
    #[prost(uint32, tag = "12")]
    pub roll_buff_free_count: u32,
    #[prost(uint32, repeated, tag = "6")]
    pub handbook_unlock_buff_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, tag = "1")]
    pub can_roll: bool,
    #[prost(message, repeated, tag = "15")]
    pub select_buff_list: ::prost::alloc::vec::Vec<Ffamnkoaihf>,
    #[prost(message, optional, tag = "13")]
    pub roll_buff_cost_data: ::core::option::Option<ItemCostData>,
    #[prost(uint32, tag = "10")]
    pub roll_buff_count: u32,
    #[prost(uint32, tag = "4")]
    pub certain_select_buff_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hkhfbelmdcg {
    #[prost(uint32, tag = "6")]
    pub dhmnnemgfbl: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hcajjefeijd {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mmndajfijoj {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Djonnopdjhh {
    #[prost(message, optional, tag = "2")]
    pub nlnbngijafi: ::core::option::Option<RogueCommonBuffSelectInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kglojonkmkp {
    #[prost(message, optional, tag = "3")]
    pub cost_data: ::core::option::Option<ItemCostData>,
    #[prost(uint32, tag = "6")]
    pub buff_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ngpimhhelmm {
    #[prost(message, repeated, tag = "12")]
    pub dakmmpkbmko: ::prost::alloc::vec::Vec<Kglojonkmkp>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Inempcaknnc {
    #[prost(message, repeated, tag = "1")]
    pub clplefhhafb: ::prost::alloc::vec::Vec<Ffamnkoaihf>,
    #[prost(uint32, tag = "4")]
    pub bilbohbdbpn: u32,
    #[prost(message, repeated, tag = "12")]
    pub ihgmpjnnmki: ::prost::alloc::vec::Vec<Ffamnkoaihf>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lefcomgmpcl {
    #[prost(message, repeated, tag = "1")]
    pub ihgmpjnnmki: ::prost::alloc::vec::Vec<Ffamnkoaihf>,
    #[prost(uint32, tag = "5")]
    pub bilbohbdbpn: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pbmaklnjeko {
    #[prost(uint32, tag = "1")]
    pub ljejkccbcha: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fkdbihnpche {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ipgkagffbhf {
    #[prost(uint32, tag = "5")]
    pub bilbohbdbpn: u32,
    #[prost(message, repeated, tag = "1")]
    pub dlfmgkpgmhl: ::prost::alloc::vec::Vec<Ffamnkoaihf>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Okefiddnlkg {
    #[prost(uint32, tag = "4")]
    pub dhmnnemgfbl: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dlhpdalgdeh {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kbpmfkknbjh {
    #[prost(message, repeated, tag = "12")]
    pub kkhdljfohkc: ::prost::alloc::vec::Vec<Ffamnkoaihf>,
    #[prost(uint32, tag = "9")]
    pub bilbohbdbpn: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bfbfmlbhgoh {
    #[prost(uint32, tag = "1")]
    pub dhmnnemgfbl: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Oopdmmnnkgi {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kcacnhcadec {
    #[prost(message, optional, tag = "10")]
    pub lchkkhngbgj: ::core::option::Option<Gckblhadlgn>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gjoibmfanhl {
    #[prost(uint32, tag = "6")]
    pub blfaanhjpad: u32,
    #[prost(uint32, tag = "4")]
    pub eabocpnfklm: u32,
    #[prost(map = "uint32, uint32", tag = "7")]
    pub gmafejejbho: ::std::collections::HashMap<u32, u32>,
    #[prost(uint32, tag = "15")]
    pub deidchamdba: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lajbhghnbac {
    #[prost(uint32, tag = "11")]
    pub bemceedabfd: u32,
    #[prost(message, optional, tag = "12")]
    pub jalamopldho: ::core::option::Option<Gjoibmfanhl>,
    #[prost(bool, tag = "8")]
    pub ganhklnpapi: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jpajnjbebfb {
    #[prost(message, optional, tag = "3")]
    pub jibdgcfcdio: ::core::option::Option<Gjoibmfanhl>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gliaipcabim {
    #[prost(uint32, tag = "9")]
    pub deidchamdba: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ibibpoopden {
    #[prost(uint32, tag = "8")]
    pub lgjfnaiagld: u32,
    #[prost(message, optional, tag = "9")]
    pub jibdgcfcdio: ::core::option::Option<Gjoibmfanhl>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Maaaagpjjfe {
    #[prost(message, optional, tag = "12")]
    pub jibdgcfcdio: ::core::option::Option<Gjoibmfanhl>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pbaloejcgfn {
    #[prost(uint32, tag = "3")]
    pub bemceedabfd: u32,
    #[prost(message, optional, tag = "5")]
    pub jalamopldho: ::core::option::Option<Gjoibmfanhl>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hblnhganbab {
    #[prost(message, optional, tag = "2")]
    pub jibdgcfcdio: ::core::option::Option<Gjoibmfanhl>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ajpfphkklpg {
    #[prost(message, repeated, tag = "8")]
    pub ckgfonmaeko: ::prost::alloc::vec::Vec<Gjoibmfanhl>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ebhghgiigom {
    #[prost(uint32, repeated, tag = "11")]
    pub jacighhgcgb: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "4")]
    pub bilbohbdbpn: u32,
    #[prost(uint32, repeated, tag = "7")]
    pub komjmfikbam: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mpphhnaeedk {
    #[prost(uint32, tag = "12")]
    pub cghlhfnladn: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cffocchbamh {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Anmcaimelca {
    #[prost(uint32, repeated, tag = "8")]
    pub cmaggnfdkag: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gabbehoipjc {
    #[prost(uint32, tag = "10")]
    pub bilbohbdbpn: u32,
    #[prost(uint32, repeated, tag = "14")]
    pub dcjeggjpcdf: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Nalelighdaa {
    #[prost(uint32, tag = "13")]
    pub abmamcfpcci: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Paocongeljk {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mlkiccaelke {
    #[prost(uint32, tag = "5")]
    pub bilbohbdbpn: u32,
    #[prost(uint32, repeated, tag = "12")]
    pub anbpnihmkah: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pkodmmphibc {
    #[prost(uint32, tag = "13")]
    pub jibhljneicm: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Blfjbkbhjil {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eakecfappkd {
    #[prost(uint32, tag = "13")]
    pub bilbohbdbpn: u32,
    #[prost(uint32, repeated, tag = "5")]
    pub fikenbeondj: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Nhckhplklio {
    #[prost(uint32, tag = "12")]
    pub ibemojgallk: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Omjfmbjmfmc {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eldafcnmfbf {
    #[prost(uint32, tag = "13")]
    pub bilbohbdbpn: u32,
    #[prost(uint32, repeated, tag = "11")]
    pub mdpdadooobn: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lhjpikekpgh {
    #[prost(uint32, tag = "13")]
    pub gakjolgdbbd: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Moiknhhcabh {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lcagiooiidn {
    #[prost(uint32, tag = "12")]
    pub bilbohbdbpn: u32,
    #[prost(uint32, repeated, tag = "4")]
    pub jlhfojodokg: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Imcbiigokpm {
    #[prost(uint32, tag = "14")]
    pub cghlhfnladn: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fhikplaioei {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ofpeknmfmab {
    #[prost(uint32, repeated, tag = "2")]
    pub jlhfojodokg: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "12")]
    pub bilbohbdbpn: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lkmkhacmapc {
    #[prost(uint32, tag = "3")]
    pub cghlhfnladn: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Nococfhoajc {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Imlbibjkpdb {
    #[prost(uint32, tag = "13")]
    pub eidnigddohp: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jcahmiooldb {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nkidddpflje {
    #[prost(message, optional, tag = "14")]
    pub jlnilijomem: ::core::option::Option<Ajpfphkklpg>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dlcjmohobdh {
    #[prost(uint32, repeated, tag = "12")]
    pub imoiceebdco: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bcllbmeedkp {
    #[prost(uint32, tag = "13")]
    pub mnkeniamhdd: u32,
    #[prost(uint32, tag = "6")]
    pub bpjoapfafkk: u32,
    #[prost(uint32, tag = "5")]
    pub amnkmbmhkdf: u32,
    #[prost(uint32, tag = "11")]
    pub dafalaoaooi: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kildamjjlmf {
    #[prost(uint32, tag = "6")]
    pub num: u32,
    #[prost(uint32, tag = "15")]
    pub fgmgpljckpc: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mdgjikljdde {
    #[prost(enumeration = "AvatarType", tag = "11")]
    pub avatar_type: i32,
    #[prost(uint32, tag = "8")]
    pub equip_avatar_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueSyncContextBoardEvent {
    #[prost(uint32, tag = "8")]
    pub modifier_effect_type: u32,
    #[prost(uint32, tag = "1")]
    pub board_event_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cfellcpmonh {
    #[prost(message, optional, tag = "7")]
    pub item_list: ::core::option::Option<ItemList>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oiaolbgoaag {
    #[prost(message, optional, tag = "15")]
    pub noaednnibaf: ::core::option::Option<RogueSyncContextBoardEvent>,
    #[prost(message, optional, tag = "7")]
    pub hhphlegcldm: ::core::option::Option<Cfellcpmonh>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ahccdbfmndi {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Aokijgcoapd {
    #[prost(int32, tag = "15")]
    pub count: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cihfcleakij {
    #[prost(uint32, tag = "9")]
    pub deidchamdba: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ekelnnlplod {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueAdventureRoomGameplayWolfGunTarget {
    #[prost(
        oneof = "rogue_adventure_room_gameplay_wolf_gun_target::TargetImplCase",
        tags = "1, 2, 8, 11"
    )]
    pub target_impl_case: ::core::option::Option<
        rogue_adventure_room_gameplay_wolf_gun_target::TargetImplCase,
    >,
}
/// Nested message and enum types in `RogueAdventureRoomGameplayWolfGunTarget`.
pub mod rogue_adventure_room_gameplay_wolf_gun_target {
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum TargetImplCase {
        #[prost(message, tag = "1")]
        TargetNone(super::Ahccdbfmndi),
        #[prost(message, tag = "2")]
        TargetCoin(super::Aokijgcoapd),
        #[prost(message, tag = "8")]
        TargetMiracle(super::Cihfcleakij),
        #[prost(message, tag = "11")]
        TargetRuanmei(super::Ekelnnlplod),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ckjcfdjkdfg {
    #[prost(message, repeated, tag = "5")]
    pub battle_target_list: ::prost::alloc::vec::Vec<
        RogueAdventureRoomGameplayWolfGunTarget,
    >,
    #[prost(uint32, tag = "8")]
    pub dhpabbnjoli: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fhepdkkhfcf {
    #[prost(oneof = "fhepdkkhfcf::Ieicdggelne", tags = "14")]
    pub ieicdggelne: ::core::option::Option<fhepdkkhfcf::Ieicdggelne>,
}
/// Nested message and enum types in `FHEPDKKHFCF`.
pub mod fhepdkkhfcf {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Ieicdggelne {
        #[prost(message, tag = "14")]
        Lachncfkako(super::Ckjcfdjkdfg),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cncajkhccec {
    #[prost(message, optional, tag = "8")]
    pub blndmfgkpmj: ::core::option::Option<Fhepdkkhfcf>,
    #[prost(uint32, tag = "11")]
    pub dpmleipaoil: u32,
    #[prost(uint32, tag = "14")]
    pub status: u32,
    #[prost(uint32, tag = "2")]
    pub mcmclafdldc: u32,
    #[prost(double, tag = "10")]
    pub bdebmbgffka: f64,
    #[prost(uint32, tag = "9")]
    pub score_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Failbacokoc {
    #[prost(message, optional, tag = "10")]
    pub cdlakdmejlg: ::core::option::Option<Cncajkhccec>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lbpgohnblbh {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ifhlbmildma {
    #[prost(message, optional, tag = "1")]
    pub cdlakdmejlg: ::core::option::Option<Cncajkhccec>,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bdgbobpjogb {
    #[prost(uint32, repeated, tag = "13")]
    pub ipogaccfmol: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "7")]
    pub mmhmdhihcab: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Denaogjpcgj {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(message, optional, tag = "5")]
    pub cdlakdmejlg: ::core::option::Option<Cncajkhccec>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lfdfiilgoad {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hookbconppb {
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(message, optional, tag = "6")]
    pub cdlakdmejlg: ::core::option::Option<Cncajkhccec>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Nnkapockhdf {
    #[prost(uint32, tag = "1")]
    pub score_id: u32,
    #[prost(uint32, tag = "11")]
    pub hmffhgbkogl: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lddppcfohgj {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(message, optional, tag = "1")]
    pub cdlakdmejlg: ::core::option::Option<Cncajkhccec>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ahclnmjpmij {
    #[prost(message, optional, tag = "6")]
    pub nblffdipbhi: ::core::option::Option<ItemCostData>,
    #[prost(message, optional, tag = "1")]
    pub cost_data: ::core::option::Option<ItemCostData>,
    #[prost(bool, tag = "12")]
    pub bphcbohkhmd: bool,
    #[prost(bool, tag = "9")]
    pub poapegkpfob: bool,
    #[prost(uint32, tag = "11")]
    pub deidchamdba: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mgkfkecfhhm {
    #[prost(uint32, tag = "13")]
    pub buff_id: u32,
    #[prost(message, optional, tag = "2")]
    pub nblffdipbhi: ::core::option::Option<ItemCostData>,
    #[prost(bool, tag = "4")]
    pub poapegkpfob: bool,
    #[prost(message, optional, tag = "14")]
    pub cost_data: ::core::option::Option<ItemCostData>,
    #[prost(bool, tag = "11")]
    pub bphcbohkhmd: bool,
    #[prost(uint32, tag = "3")]
    pub leaaebafchp: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Iilhoakjdnh {
    #[prost(bool, tag = "13")]
    pub bphcbohkhmd: bool,
    #[prost(uint32, tag = "5")]
    pub ambdkdamhlh: u32,
    #[prost(message, optional, tag = "8")]
    pub nblffdipbhi: ::core::option::Option<ItemCostData>,
    #[prost(bool, tag = "7")]
    pub poapegkpfob: bool,
    #[prost(message, optional, tag = "1")]
    pub cost_data: ::core::option::Option<ItemCostData>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nnjolkjlpjg {
    #[prost(message, repeated, tag = "14")]
    pub ckgfonmaeko: ::prost::alloc::vec::Vec<Ahclnmjpmij>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Anjdkfjoeei {
    #[prost(message, repeated, tag = "2")]
    pub buff_list: ::prost::alloc::vec::Vec<Mgkfkecfhhm>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Glppdleccli {
    #[prost(message, repeated, tag = "14")]
    pub omfdhfgbgaa: ::prost::alloc::vec::Vec<Iilhoakjdnh>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Eloaflajhbo {
    #[prost(uint32, tag = "1")]
    pub interacted_prop_entity_id: u32,
    #[prost(bool, tag = "3")]
    pub hmilghcpede: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ocdhgbdjneo {
    #[prost(message, optional, tag = "12")]
    pub lgopnbhhhbg: ::core::option::Option<Anjdkfjoeei>,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(int32, tag = "14")]
    pub aefhkanbfnc: i32,
    #[prost(int32, tag = "4")]
    pub efojocfgidj: i32,
    #[prost(message, optional, tag = "1")]
    pub ihjhccfmifd: ::core::option::Option<ItemCostData>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Abdpcgbpflh {
    #[prost(uint32, tag = "14")]
    pub interacted_prop_entity_id: u32,
    #[prost(bool, tag = "3")]
    pub hmilghcpede: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lojemcffbjd {
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(message, optional, tag = "9")]
    pub eeppkmpajoh: ::core::option::Option<Nnjolkjlpjg>,
    #[prost(int32, tag = "8")]
    pub efojocfgidj: i32,
    #[prost(message, optional, tag = "5")]
    pub ihjhccfmifd: ::core::option::Option<ItemCostData>,
    #[prost(int32, tag = "7")]
    pub aefhkanbfnc: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pploeikjamo {
    #[prost(uint32, tag = "8")]
    pub interacted_prop_entity_id: u32,
    #[prost(bool, tag = "5")]
    pub hmilghcpede: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oknjblfcfbj {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(int32, tag = "6")]
    pub efojocfgidj: i32,
    #[prost(int32, tag = "9")]
    pub aefhkanbfnc: i32,
    #[prost(message, optional, tag = "1")]
    pub ckaanmddkcj: ::core::option::Option<Glppdleccli>,
    #[prost(message, optional, tag = "2")]
    pub ihjhccfmifd: ::core::option::Option<ItemCostData>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Agpifofncna {
    #[prost(uint32, tag = "11")]
    pub deidchamdba: u32,
    #[prost(uint32, tag = "7")]
    pub interacted_prop_entity_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mhddhodmmia {
    #[prost(uint32, tag = "6")]
    pub interacted_prop_entity_id: u32,
    #[prost(uint32, repeated, tag = "13")]
    pub buff_id_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hmolhfmajbg {
    #[prost(uint32, tag = "5")]
    pub interacted_prop_entity_id: u32,
    #[prost(uint32, repeated, tag = "14")]
    pub aoiihcfmfph: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pdhlodcdank {
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(message, optional, tag = "3")]
    pub eeppkmpajoh: ::core::option::Option<Nnjolkjlpjg>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jobbmgdphde {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(message, optional, tag = "3")]
    pub lgopnbhhhbg: ::core::option::Option<Anjdkfjoeei>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Glplambgpfj {
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(message, optional, tag = "13")]
    pub ckaanmddkcj: ::core::option::Option<Glppdleccli>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fhgmelfejkn {
    #[prost(uint32, tag = "7")]
    pub icinggkoemg: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dephmgjomcm {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bnccmiimgol {
    #[prost(enumeration = "Nemklkdbeap", tag = "11")]
    pub fgmgpljckpc: i32,
    #[prost(message, repeated, tag = "3")]
    pub flbmhlphfnd: ::prost::alloc::vec::Vec<Dgnddjgnjlb>,
    #[prost(uint32, tag = "6")]
    pub bngfaignphe: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dgnddjgnjlb {
    #[prost(message, optional, tag = "5")]
    pub pbhmgchkjgo: ::core::option::Option<Pnieaceijkm>,
    #[prost(enumeration = "Cfjgpifiool", tag = "12")]
    pub source: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Aenockpnfci {
    #[prost(uint32, tag = "4")]
    pub key: u32,
    #[prost(int32, tag = "3")]
    pub jpcllfaieec: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mlpknllaoif {
    #[prost(int32, tag = "11")]
    pub eegcbbhophg: i32,
    #[prost(int32, tag = "3")]
    pub cfclogfjpbd: i32,
    #[prost(uint32, tag = "13")]
    pub jpnfbfkhpgd: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nhehpgonepk {
    #[prost(uint32, tag = "5")]
    pub ambdkdamhlh: u32,
    #[prost(message, repeated, tag = "8")]
    pub kokiifcmogl: ::prost::alloc::vec::Vec<Aenockpnfci>,
    #[prost(bool, tag = "3")]
    pub eeeionccing: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fcknnieaohi {
    #[prost(map = "uint32, int32", tag = "10")]
    pub nadoccephjo: ::std::collections::HashMap<u32, i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dbndiagbmji {
    #[prost(message, optional, tag = "15")]
    pub gepenpidkij: ::core::option::Option<Nhehpgonepk>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cdnejceknlf {
    #[prost(message, optional, tag = "1")]
    pub gepenpidkij: ::core::option::Option<Nhehpgonepk>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dcgjlcpclbl {
    #[prost(message, optional, tag = "8")]
    pub gepenpidkij: ::core::option::Option<Nhehpgonepk>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mjcopbfejji {
    #[prost(message, optional, tag = "7")]
    pub gepenpidkij: ::core::option::Option<Nhehpgonepk>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fipfphbphlh {
    #[prost(message, repeated, tag = "11")]
    pub ilbkmnajgmo: ::prost::alloc::vec::Vec<Mlpknllaoif>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lbkkdlhoegn {
    #[prost(message, optional, tag = "1")]
    pub value: ::core::option::Option<Fcknnieaohi>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kaajbaoakbo {
    #[prost(message, repeated, tag = "9")]
    pub omfdhfgbgaa: ::prost::alloc::vec::Vec<Nhehpgonepk>,
    #[prost(message, optional, tag = "6")]
    pub dlmhaecabod: ::core::option::Option<Fcknnieaohi>,
    #[prost(message, repeated, tag = "10")]
    pub ilbkmnajgmo: ::prost::alloc::vec::Vec<Mlpknllaoif>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Goeekpllcbj {
    #[prost(uint32, tag = "12")]
    pub bhapdmjcklb: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dflkelghook {
    #[prost(uint32, tag = "7")]
    pub bhapdmjcklb: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fbnjofcemil {
    #[prost(map = "uint32, bool", tag = "14")]
    pub nfnmbgboccl: ::std::collections::HashMap<u32, bool>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pnieaceijkm {
    #[prost(
        oneof = "pnieaceijkm::Ieicdggelne",
        tags = "5, 7, 145, 1650, 1801, 148, 290, 634, 1543, 1135, 1407, 1503, 876, 1812, 949, 1688, 1668, 810, 859, 1401, 1945, 1829, 830, 1334, 236, 1039, 423, 1889"
    )]
    pub ieicdggelne: ::core::option::Option<pnieaceijkm::Ieicdggelne>,
}
/// Nested message and enum types in `PNIEACEIJKM`.
pub mod pnieaceijkm {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Ieicdggelne {
        #[prost(message, tag = "5")]
        Ieejchfepha(super::Kildamjjlmf),
        #[prost(message, tag = "7")]
        Indnbedjnco(super::Kildamjjlmf),
        #[prost(message, tag = "145")]
        Noenhhilnah(super::Ffamnkoaihf),
        #[prost(message, tag = "1650")]
        Kpbjipgejpl(super::Ffamnkoaihf),
        #[prost(message, tag = "1801")]
        Kbhpfadbdoh(super::Jpajnjbebfb),
        #[prost(message, tag = "148")]
        Fbnfljkljgc(super::Gliaipcabim),
        #[prost(message, tag = "290")]
        Apfmfbbdcjk(super::Ibibpoopden),
        #[prost(message, tag = "634")]
        Bmdjopghlca(super::Maaaagpjjfe),
        #[prost(message, tag = "1543")]
        Ompbjjohpoo(super::Pbaloejcgfn),
        #[prost(message, tag = "1135")]
        Iomjmeaomfi(super::Hblnhganbab),
        #[prost(message, tag = "1407")]
        Bblgeemhiim(super::Mdgjikljdde),
        #[prost(message, tag = "1503")]
        Manfkmddpeg(super::Dbndiagbmji),
        #[prost(message, tag = "876")]
        Apgccjfbdlh(super::Cdnejceknlf),
        #[prost(message, tag = "1812")]
        Jfpmgojdkmd(super::Dcgjlcpclbl),
        #[prost(message, tag = "949")]
        Pkngaijmdao(super::Mjcopbfejji),
        #[prost(message, tag = "1688")]
        Dmkgebhpipj(super::Fipfphbphlh),
        #[prost(message, tag = "1668")]
        Kpbmfkpcbma(super::Lbkkdlhoegn),
        #[prost(message, tag = "810")]
        Behlmokiafl(super::Goeekpllcbj),
        #[prost(message, tag = "859")]
        Kaifndmjjmk(super::Dflkelghook),
        #[prost(message, tag = "1401")]
        Aidojpolnon(super::Knjaeackjib),
        #[prost(message, tag = "1945")]
        Jblkicbnmhl(super::Lhpdolpkfeo),
        #[prost(message, tag = "1829")]
        Kaailmgchok(super::Aeffjlgfamh),
        #[prost(message, tag = "830")]
        Jcdmgfpmiam(super::Jfgflgblcaj),
        #[prost(message, tag = "1334")]
        Piofbmmeghb(super::Jfgflgblcaj),
        #[prost(message, tag = "236")]
        Jgdaebnefka(super::Jfgflgblcaj),
        #[prost(message, tag = "1039")]
        Aoibhcmanfk(super::Jbihocioanh),
        #[prost(message, tag = "423")]
        Mibobjidcad(super::Hobkeoicbmi),
        #[prost(message, tag = "1889")]
        Edbpehabhbi(super::Lnamgomhgjb),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueFormulaSelectInfo {
    #[prost(uint32, tag = "3")]
    pub roll_formula_free_count: u32,
    #[prost(uint32, tag = "2")]
    pub roll_formula_max_count: u32,
    #[prost(message, optional, tag = "15")]
    pub roll_formula_cost_data: ::core::option::Option<ItemCostData>,
    #[prost(uint32, repeated, tag = "7")]
    pub select_formula_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "5")]
    pub handbook_unlock_formula_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "12")]
    pub hint_id: u32,
    #[prost(uint32, tag = "8")]
    pub roll_formula_count: u32,
    #[prost(bool, tag = "11")]
    pub can_roll: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Nolcmkcneaf {
    #[prost(uint32, tag = "10")]
    pub oambghfhfmo: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Plcgkieiegd {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fhmaianenpo {
    #[prost(uint32, tag = "3")]
    pub bilbohbdbpn: u32,
    #[prost(uint32, repeated, tag = "8")]
    pub laldacmchfi: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Onoofhdeidd {
    #[prost(uint32, tag = "8")]
    pub oambghfhfmo: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hkjegongjnp {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Khgcdeimlhn {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ehefommbnaf {
    #[prost(message, optional, tag = "14")]
    pub bjehoafbhbe: ::core::option::Option<RogueFormulaSelectInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bpddobahpna {
    #[prost(message, optional, tag = "10")]
    pub bjehoafbhbe: ::core::option::Option<RogueFormulaSelectInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ekmahafgngj {
    #[prost(uint32, tag = "4")]
    pub oambghfhfmo: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hbiblkkeoac {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lgcmeepjmha {
    #[prost(uint32, tag = "10")]
    pub idignadndnf: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Koegffomkip {
    #[prost(uint32, tag = "14")]
    pub elpinnnalbd: u32,
    #[prost(uint32, tag = "1")]
    pub r#type: u32,
    #[prost(uint32, tag = "13")]
    pub slot: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Inpinnpihob {
    #[prost(uint32, tag = "9")]
    pub gjkjfgeehcb: u32,
    #[prost(uint32, tag = "13")]
    pub level: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jbihocioanh {
    #[prost(message, repeated, tag = "14")]
    pub plmkmopcdlm: ::prost::alloc::vec::Vec<Obipoolidal>,
    #[prost(map = "uint32, uint32", tag = "5")]
    pub eepojgnflpa: ::std::collections::HashMap<u32, u32>,
    #[prost(message, optional, tag = "3")]
    pub knihplngocl: ::core::option::Option<Inpinnpihob>,
    #[prost(message, repeated, tag = "4")]
    pub fpgefhenccf: ::prost::alloc::vec::Vec<Koegffomkip>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Obipoolidal {
    #[prost(uint32, tag = "1")]
    pub ebaiipmhkoi: u32,
    #[prost(uint32, tag = "7")]
    pub level: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jfgflgblcaj {
    #[prost(message, optional, tag = "6")]
    pub lcbecpoogcl: ::core::option::Option<Obipoolidal>,
    #[prost(uint32, tag = "1")]
    pub unique_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Knjaeackjib {
    #[prost(message, optional, tag = "3")]
    pub clmfnahfnll: ::core::option::Option<Jbihocioanh>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lhpdolpkfeo {
    #[prost(message, optional, tag = "5")]
    pub clmfnahfnll: ::core::option::Option<Jbihocioanh>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Aeffjlgfamh {
    #[prost(message, optional, tag = "3")]
    pub clmfnahfnll: ::core::option::Option<Jbihocioanh>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Okecopgklee {
    #[prost(message, optional, tag = "10")]
    pub pmgjicchhdl: ::core::option::Option<Jfgflgblcaj>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pgakdejbohf {
    #[prost(message, optional, tag = "5")]
    pub jfpjbbjlifk: ::core::option::Option<Jfgflgblcaj>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oedoaogakpp {
    #[prost(message, repeated, tag = "13")]
    pub gigibipgpfc: ::prost::alloc::vec::Vec<Obipoolidal>,
    #[prost(uint32, tag = "1")]
    pub igchbpakbcb: u32,
    #[prost(uint32, tag = "2")]
    pub ckkekmjmabc: u32,
    #[prost(uint32, tag = "6")]
    pub bilbohbdbpn: u32,
    #[prost(message, optional, tag = "3")]
    pub fgdjamhokif: ::core::option::Option<Obipoolidal>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kkagnmemkog {
    #[prost(uint32, tag = "13")]
    pub bilbohbdbpn: u32,
    #[prost(message, repeated, tag = "4")]
    pub gigibipgpfc: ::prost::alloc::vec::Vec<Jfgflgblcaj>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hhhcpcofppo {
    #[prost(message, optional, tag = "14")]
    pub pobkdoigdab: ::core::option::Option<Obipoolidal>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Iipeghdkhgd {
    #[prost(message, optional, tag = "3")]
    pub pobkdoigdab: ::core::option::Option<Jfgflgblcaj>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mhijocjhong {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Abpncpoijci {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Imnnnjggpag {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Imdhpdbhebc {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hobkeoicbmi {
    #[prost(message, optional, tag = "7")]
    pub eocipkgjfop: ::core::option::Option<Jfgflgblcaj>,
    #[prost(uint32, repeated, tag = "6")]
    pub hkklpldnpkd: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Flnagdeoopg {
    #[prost(uint32, tag = "6")]
    pub bilbohbdbpn: u32,
    #[prost(message, repeated, tag = "5")]
    pub chpkdjnhpfo: ::prost::alloc::vec::Vec<Inpinnpihob>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ahkfiakmklo {
    #[prost(bool, tag = "9")]
    pub abbmhpkgaik: bool,
    #[prost(message, optional, tag = "1")]
    pub obfpaiamijl: ::core::option::Option<Inpinnpihob>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bledojdglaa {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ikcndljlapp {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jkhkebmobej {
    #[prost(message, optional, tag = "13")]
    pub jbjggnbjkdj: ::core::option::Option<Inpinnpihob>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jcdljbphomd {
    #[prost(message, optional, tag = "8")]
    pub ghelbobfpam: ::core::option::Option<Inpinnpihob>,
    #[prost(bool, tag = "14")]
    pub blciljenelo: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lgpgcjdoibk {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lnamgomhgjb {
    #[prost(uint32, tag = "7")]
    pub iboekjbomog: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cgjnhnmamdh {
    #[prost(uint32, repeated, tag = "7")]
    pub kdaoimpppki: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "5")]
    pub ldfgifdfpcf: u32,
    #[prost(int32, tag = "3")]
    pub jmcembehcoj: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cggbpjichgf {
    #[prost(uint32, tag = "9")]
    pub bilbohbdbpn: u32,
    #[prost(uint32, repeated, tag = "6")]
    pub gbooalmikob: ::prost::alloc::vec::Vec<u32>,
    #[prost(enumeration = "Ndkljjiimgm", tag = "3")]
    pub obiedgmebdl: i32,
    #[prost(uint32, tag = "8")]
    pub nclaehaijjb: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Haojlhgnfpm {
    #[prost(uint32, tag = "7")]
    pub jmehmhkbjah: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bljoggmjbmd {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pigfbkojnhg {
    #[prost(uint32, tag = "9")]
    pub bnclfoabaip: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ajnajinfjic {
    #[prost(uint32, tag = "15")]
    pub battle_event_id: u32,
    #[prost(bool, tag = "5")]
    pub is_win: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mnmloapbhnf {
    #[prost(uint32, tag = "4")]
    pub bnclfoabaip: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Odfdkildhbe {
    #[prost(uint32, tag = "9")]
    pub bngfaignphe: u32,
    #[prost(message, optional, tag = "1")]
    pub nfojnohloac: ::core::option::Option<Kfpmaiaadmo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kfpmaiaadmo {
    #[prost(uint32, tag = "14")]
    pub hbapccegnme: u32,
    #[prost(message, optional, tag = "5")]
    pub pbhmgchkjgo: ::core::option::Option<Eiohagheloa>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eiohagheloa {
    #[prost(
        oneof = "eiohagheloa::Ieicdggelne",
        tags = "1928, 778, 216, 953, 703, 495, 1830, 1487, 1802, 925, 663, 1548, 980, 1146, 581, 1590, 1512, 1733, 727, 455, 1810, 1882, 504, 234, 156, 1837, 493"
    )]
    pub ieicdggelne: ::core::option::Option<eiohagheloa::Ieicdggelne>,
}
/// Nested message and enum types in `EIOHAGHELOA`.
pub mod eiohagheloa {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Ieicdggelne {
        #[prost(message, tag = "1928")]
        Nlnbngijafi(super::RogueCommonBuffSelectInfo),
        #[prost(message, tag = "778")]
        Fphhhiobfai(super::Lefcomgmpcl),
        #[prost(message, tag = "216")]
        Ajddfancejn(super::Ipgkagffbhf),
        #[prost(message, tag = "953")]
        Imikpgfhlhk(super::Kbpmfkknbjh),
        #[prost(message, tag = "703")]
        Cjenjifeidi(super::Ebhghgiigom),
        #[prost(message, tag = "495")]
        Bicjempplam(super::Anmcaimelca),
        #[prost(message, tag = "1830")]
        Aelpppiefab(super::Gabbehoipjc),
        #[prost(message, tag = "1487")]
        Bediachlcii(super::Mlkiccaelke),
        #[prost(message, tag = "1802")]
        Ladgcoomnka(super::Eakecfappkd),
        #[prost(message, tag = "925")]
        Cgkfomncnak(super::Eldafcnmfbf),
        #[prost(message, tag = "663")]
        Eiefmpfllcm(super::Lcagiooiidn),
        #[prost(message, tag = "1548")]
        Nkkbodgfclm(super::Ofpeknmfmab),
        #[prost(message, tag = "980")]
        Gkflnmojncp(super::Dlcjmohobdh),
        #[prost(message, tag = "1146")]
        Bjehoafbhbe(super::RogueFormulaSelectInfo),
        #[prost(message, tag = "581")]
        Jbkpikajpeb(super::Fhmaianenpo),
        #[prost(message, tag = "1590")]
        Hcchfjefanj(super::Bpddobahpna),
        #[prost(message, tag = "1512")]
        Oiomhopnimf(super::Oedoaogakpp),
        #[prost(message, tag = "1733")]
        Ifclaafpkhc(super::Flnagdeoopg),
        #[prost(message, tag = "727")]
        Hfjechfannf(super::Jkhkebmobej),
        #[prost(message, tag = "455")]
        Ldjomiojepf(super::Oedoaogakpp),
        #[prost(message, tag = "1810")]
        Lmnoncmbioo(super::Oedoaogakpp),
        #[prost(message, tag = "1882")]
        Cnlmcobncai(super::Oedoaogakpp),
        #[prost(message, tag = "504")]
        Fhokdllicjl(super::Kkagnmemkog),
        #[prost(message, tag = "234")]
        Phdemdbgoib(super::Kkagnmemkog),
        #[prost(message, tag = "156")]
        Kljjibpjgff(super::Kkagnmemkog),
        #[prost(message, tag = "1837")]
        Dlfalfgfdhe(super::Pigfbkojnhg),
        #[prost(message, tag = "493")]
        Npcdbpndgop(super::Cggbpjichgf),
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ehgoieiolef {
    #[prost(uint32, tag = "11")]
    pub ifdkllhfpjb: u32,
    #[prost(
        oneof = "ehgoieiolef::Ieicdggelne",
        tags = "1836, 417, 1373, 1253, 711, 171, 527, 184, 493, 661, 710, 1403, 348, 122, 707, 216, 1958, 571, 1285, 501, 35, 606, 381, 1221, 517, 912, 636, 129, 1954, 10873, 36013"
    )]
    pub ieicdggelne: ::core::option::Option<ehgoieiolef::Ieicdggelne>,
}
/// Nested message and enum types in `EHGOIEIOLEF`.
pub mod ehgoieiolef {
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum Ieicdggelne {
        #[prost(message, tag = "1836")]
        Jkhbbdlchid(super::Hkhfbelmdcg),
        #[prost(message, tag = "417")]
        Kbnegolplfc(super::Pbmaklnjeko),
        #[prost(message, tag = "1373")]
        Gdkgibekgpf(super::Okefiddnlkg),
        #[prost(message, tag = "1253")]
        Oncngiilenf(super::Mmndajfijoj),
        #[prost(message, tag = "711")]
        Glejcdpdjne(super::Bfbfmlbhgoh),
        #[prost(message, tag = "171")]
        Ooagpgdpjoa(super::Mpphhnaeedk),
        #[prost(message, tag = "527")]
        Gnebjeppkej(super::Nalelighdaa),
        #[prost(message, tag = "184")]
        Kjlafilapjf(super::Pkodmmphibc),
        #[prost(message, tag = "493")]
        Flfpcphlago(super::Nhckhplklio),
        #[prost(message, tag = "661")]
        Epoakmfmflm(super::Lhjpikekpgh),
        #[prost(message, tag = "710")]
        Fkpfokhbpkk(super::Imcbiigokpm),
        #[prost(message, tag = "1403")]
        Eodclaipcae(super::Lkmkhacmapc),
        #[prost(message, tag = "348")]
        Aocodaobkhm(super::Imlbibjkpdb),
        #[prost(message, tag = "122")]
        Egggggglfho(super::Nolcmkcneaf),
        #[prost(message, tag = "707")]
        Lnploeofccj(super::Khgcdeimlhn),
        #[prost(message, tag = "216")]
        Ieabohkeapa(super::Onoofhdeidd),
        #[prost(message, tag = "1958")]
        Nediibjhgfo(super::Ekmahafgngj),
        #[prost(message, tag = "571")]
        Jgpcbcjkonh(super::Hhhcpcofppo),
        #[prost(message, tag = "1285")]
        Hknjipjhocg(super::Ahkfiakmklo),
        #[prost(message, tag = "501")]
        Ldaglimnman(super::Jcdljbphomd),
        #[prost(message, tag = "35")]
        Aflheikjnbn(super::Hhhcpcofppo),
        #[prost(message, tag = "606")]
        Phkbflnpefi(super::Hhhcpcofppo),
        #[prost(message, tag = "381")]
        Gocmndkfoab(super::Hhhcpcofppo),
        #[prost(message, tag = "1221")]
        Chonecoliha(super::Iipeghdkhgd),
        #[prost(message, tag = "517")]
        Moaogacboij(super::Iipeghdkhgd),
        #[prost(message, tag = "912")]
        Kilhfppbbfm(super::Iipeghdkhgd),
        #[prost(message, tag = "636")]
        Blhdfajhcja(super::Haojlhgnfpm),
        #[prost(message, tag = "129")]
        Lpjbaimjaik(super::Haojlhgnfpm),
        #[prost(message, tag = "1954")]
        Ecegpejcpbl(super::Lgcmeepjmha),
        #[prost(message, tag = "10873")]
        Fkpdkfemkec(super::Ajnajinfjic),
        #[prost(message, tag = "36013")]
        Llnmcjcfbmj(super::Mnmloapbhnf),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dfnkmpomieh {
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(uint32, tag = "8")]
    pub ifdkllhfpjb: u32,
    #[prost(uint32, tag = "2")]
    pub hbapccegnme: u32,
    #[prost(
        oneof = "dfnkmpomieh::Ieicdggelne",
        tags = "1553, 637, 194, 1223, 242, 1560, 27, 1645, 1353, 759, 63, 927, 1456, 1879, 802, 1278, 390, 683, 1939, 1710, 630, 901, 1575, 605, 1491, 499"
    )]
    pub ieicdggelne: ::core::option::Option<dfnkmpomieh::Ieicdggelne>,
}
/// Nested message and enum types in `DFNKMPOMIEH`.
pub mod dfnkmpomieh {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Ieicdggelne {
        #[prost(message, tag = "1553")]
        Pnadbjejbof(super::Hcajjefeijd),
        #[prost(message, tag = "637")]
        Kkiangabfnj(super::Fkdbihnpche),
        #[prost(message, tag = "194")]
        Cldbplniaen(super::Dlhpdalgdeh),
        #[prost(message, tag = "1223")]
        Goomopmalol(super::Djonnopdjhh),
        #[prost(message, tag = "242")]
        Kbflnjpmoah(super::Oopdmmnnkgi),
        #[prost(message, tag = "1560")]
        Jkjofmhjgib(super::Cffocchbamh),
        #[prost(message, tag = "27")]
        Dmcepjkoogc(super::Paocongeljk),
        #[prost(message, tag = "1645")]
        Fdppgkddpgc(super::Blfjbkbhjil),
        #[prost(message, tag = "1353")]
        Mapbdbmfimd(super::Omjfmbjmfmc),
        #[prost(message, tag = "759")]
        Oihjekimppd(super::Moiknhhcabh),
        #[prost(message, tag = "63")]
        Okpcjlpmbad(super::Fhikplaioei),
        #[prost(message, tag = "927")]
        Dpgbcafkdpm(super::Nococfhoajc),
        #[prost(message, tag = "1456")]
        Hmobefjkdpd(super::Jcahmiooldb),
        #[prost(message, tag = "1879")]
        Japiiijmpge(super::Plcgkieiegd),
        #[prost(message, tag = "802")]
        Cpopchnddfm(super::Ehefommbnaf),
        #[prost(message, tag = "1278")]
        Ndjbgfheici(super::Hkjegongjnp),
        #[prost(message, tag = "390")]
        Cobeibnlgjf(super::Hbiblkkeoac),
        #[prost(message, tag = "683")]
        Blefmehonoo(super::Mhijocjhong),
        #[prost(message, tag = "1939")]
        Ihbodkmfpnf(super::Bledojdglaa),
        #[prost(message, tag = "1710")]
        Lbojliiabap(super::Lgpgcjdoibk),
        #[prost(message, tag = "630")]
        Ilhbhphdedl(super::Abpncpoijci),
        #[prost(message, tag = "901")]
        Dicgeadecpk(super::Imnnnjggpag),
        #[prost(message, tag = "1575")]
        Gabicmfakpd(super::Imdhpdbhebc),
        #[prost(message, tag = "605")]
        Dkmmoimojdm(super::Ikcndljlapp),
        #[prost(message, tag = "1491")]
        Hcfopgmleno(super::Bljoggmjbmd),
        #[prost(message, tag = "499")]
        Gdmgoelomfk(super::Bljoggmjbmd),
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fcpmbjhfbnj {
    #[prost(uint32, tag = "14")]
    pub ojeblmkkmgo: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Giadlheephd {
    #[prost(uint32, tag = "13")]
    pub fhhgdpcecee: u32,
    #[prost(bool, tag = "11")]
    pub fjoilohphlc: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lognkekhbai {
    #[prost(uint32, tag = "2")]
    pub ajbepahcgik: u32,
    #[prost(bool, tag = "11")]
    pub fjoilohphlc: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Knijhgnjijm {
    #[prost(uint32, tag = "13")]
    pub jgmipmdppij: u32,
    #[prost(uint32, repeated, tag = "2")]
    pub dpmibdhkdae: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "5")]
    pub elappcmeloa: u32,
    #[prost(uint32, tag = "4")]
    pub level: u32,
    #[prost(uint32, repeated, tag = "7")]
    pub ddgcfjdbooh: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "10")]
    pub exp: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ooceoilkcfi {
    #[prost(message, optional, tag = "6")]
    pub jlfddmekljk: ::core::option::Option<Inpinnpihob>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Eoejhkjllpk {
    #[prost(uint32, tag = "13")]
    pub ppmiogcfooc: u32,
    #[prost(uint32, tag = "8")]
    pub ebaiipmhkoi: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Aeknflomljh {
    #[prost(message, repeated, tag = "4")]
    pub buff_list: ::prost::alloc::vec::Vec<Fcpmbjhfbnj>,
    #[prost(message, repeated, tag = "2")]
    pub bjcmphlpknf: ::prost::alloc::vec::Vec<Lognkekhbai>,
    #[prost(message, repeated, tag = "9")]
    pub belofmfhfdk: ::prost::alloc::vec::Vec<Knijhgnjijm>,
    #[prost(message, repeated, tag = "6")]
    pub ckgfonmaeko: ::prost::alloc::vec::Vec<Giadlheephd>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gilipekoeaf {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRogueHandbookDataScRsp {
    #[prost(message, optional, tag = "9")]
    pub handbook_info: ::core::option::Option<Aeknflomljh>,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nnlimacbcjj {
    #[prost(message, repeated, tag = "11")]
    pub bjkpkfbfdff: ::prost::alloc::vec::Vec<Ooceoilkcfi>,
    #[prost(message, repeated, tag = "5")]
    pub mmhchhcofpb: ::prost::alloc::vec::Vec<Eoejhkjllpk>,
    #[prost(message, repeated, tag = "12")]
    pub haebaambnbb: ::prost::alloc::vec::Vec<Lognkekhbai>,
    #[prost(message, repeated, tag = "14")]
    pub abibobfdkld: ::prost::alloc::vec::Vec<Fcpmbjhfbnj>,
    #[prost(message, repeated, tag = "15")]
    pub idddcjonpfn: ::prost::alloc::vec::Vec<Giadlheephd>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fnohcpgceno {
    #[prost(uint32, repeated, tag = "4")]
    pub afhddnggnbf: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kmlgjimhjjc {
    #[prost(message, optional, tag = "11")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, repeated, tag = "12")]
    pub feifjadcdfl: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cmdeheacahm {
    #[prost(uint32, repeated, tag = "7")]
    pub idoecnpkgce: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bidohepemko {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(message, optional, tag = "3")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, repeated, tag = "7")]
    pub dpjhilhgoke: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Findafkpoof {
    #[prost(map = "uint32, uint32", tag = "10")]
    pub glaphhabohp: ::std::collections::HashMap<u32, u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ladhikpajcj {
    #[prost(int32, tag = "5")]
    pub icjabpgmacj: i32,
    #[prost(message, optional, tag = "3")]
    pub bohdminejno: ::core::option::Option<Eendhpkpflp>,
    #[prost(uint32, tag = "7")]
    pub amnbmjofjoo: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ohlcjedcofn {
    #[prost(uint32, repeated, tag = "4")]
    pub dimhpbcpnlc: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Omdefbabnnb {
    #[prost(message, optional, tag = "15")]
    pub gficflciejj: ::core::option::Option<ItemCostData>,
    #[prost(uint32, repeated, tag = "6")]
    pub avatar_id_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lgkgehhajje {
    #[prost(oneof = "lgkgehhajje::Hloekmdpgif", tags = "2, 1, 11, 15, 4, 5, 9, 14")]
    pub hloekmdpgif: ::core::option::Option<lgkgehhajje::Hloekmdpgif>,
}
/// Nested message and enum types in `LGKGEHHAJJE`.
pub mod lgkgehhajje {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Hloekmdpgif {
        #[prost(message, tag = "2")]
        Lgopnbhhhbg(super::Kcacnhcadec),
        #[prost(message, tag = "1")]
        Eeppkmpajoh(super::Nkidddpflje),
        #[prost(message, tag = "11")]
        Fffccejifdk(super::Findafkpoof),
        #[prost(message, tag = "15")]
        Chmhpcngfao(super::Ladhikpajcj),
        #[prost(message, tag = "4")]
        Fiocabcbnkb(super::Ohlcjedcofn),
        #[prost(message, tag = "5")]
        Ckaanmddkcj(super::Kaajbaoakbo),
        #[prost(message, tag = "9")]
        Nbdacdnbjik(super::Fbnjofcemil),
        #[prost(message, tag = "14")]
        Embagmmhipa(super::Omdefbabnnb),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pmjgkhpkhcm {
    #[prost(uint32, tag = "15")]
    pub egmebanhhnf: u32,
    #[prost(message, repeated, tag = "13")]
    pub biphngcadde: ::prost::alloc::vec::Vec<Lgkgehhajje>,
    #[prost(uint32, tag = "11")]
    pub bngfaignphe: u32,
    #[prost(uint32, tag = "7")]
    pub illodgaefae: u32,
    #[prost(uint32, tag = "3")]
    pub agebambkkbc: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueUnlockProgress {
    #[prost(uint32, tag = "3")]
    pub progress: u32,
    #[prost(bool, tag = "8")]
    pub finish: bool,
    #[prost(uint32, tag = "6")]
    pub unlock_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ibcknkpjfoj {
    #[prost(uint32, tag = "14")]
    pub fagnlgfjaif: u32,
    #[prost(message, repeated, tag = "9")]
    pub pgimncfhjea: ::prost::alloc::vec::Vec<RogueUnlockProgress>,
    #[prost(enumeration = "Kpabffanjbk", tag = "4")]
    pub status: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Imjmgeenceh {
    #[prost(message, repeated, tag = "6")]
    pub lgnnmajmeil: ::prost::alloc::vec::Vec<Ibcknkpjfoj>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pojeeialjfi {
    #[prost(uint32, tag = "10")]
    pub mgkkgnldgcl: u32,
    #[prost(uint32, tag = "2")]
    pub baphhckihmo: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bhjckfbhjaa {
    #[prost(message, repeated, tag = "15")]
    pub idjjpafpmdm: ::prost::alloc::vec::Vec<Pojeeialjfi>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mapomoilgeh {
    #[prost(uint32, tag = "15")]
    pub bdcffobgkoa: u32,
    #[prost(uint32, tag = "9")]
    pub gedjniaefho: u32,
    #[prost(uint32, tag = "11")]
    pub mbkfininnek: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Plgdcfipeaa {
    #[prost(enumeration = "Odopdkelaeb", repeated, tag = "9")]
    pub jpgcdjdgdbi: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ilaekjcnemf {
    #[prost(uint32, repeated, tag = "2")]
    pub afedjkmfodp: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lgjmdnnmppe {
    #[prost(message, optional, tag = "6")]
    pub kjkbkegighk: ::core::option::Option<Plgdcfipeaa>,
    #[prost(message, optional, tag = "3")]
    pub ongpjogkkjn: ::core::option::Option<Mapomoilgeh>,
    #[prost(message, optional, tag = "5")]
    pub nolhgnhaema: ::core::option::Option<Ilaekjcnemf>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Edegkibnhpd {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Iijknhfgbbm {
    #[prost(message, optional, tag = "3")]
    pub lagbgldlgcb: ::core::option::Option<Lgjmdnnmppe>,
    #[prost(uint32, tag = "6")]
    pub fhhbjlhajfj: u32,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ajajidcbohc {
    #[prost(oneof = "ajajidcbohc::Ncekdikcbhp", tags = "14, 2, 13")]
    pub ncekdikcbhp: ::core::option::Option<ajajidcbohc::Ncekdikcbhp>,
}
/// Nested message and enum types in `AJAJIDCBOHC`.
pub mod ajajidcbohc {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Ncekdikcbhp {
        #[prost(message, tag = "14")]
        Ongpjogkkjn(super::Mapomoilgeh),
        #[prost(message, tag = "2")]
        Kjkbkegighk(super::Plgdcfipeaa),
        #[prost(message, tag = "13")]
        Nolhgnhaema(super::Ilaekjcnemf),
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ikamknhggok {
    #[prost(uint32, tag = "15")]
    pub cdjecokfiof: u32,
    #[prost(uint32, tag = "5")]
    pub onlhfcoglal: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gnjapomllhe {
    #[prost(uint32, tag = "7")]
    pub bglehmkmapg: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cnhhpdhbmdc {
    #[prost(uint32, tag = "11")]
    pub bglehmkmapg: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jieaafjenlk {
    #[prost(uint32, tag = "15")]
    pub ambdkdamhlh: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hpjlafhhgjg {
    #[prost(uint32, tag = "7")]
    pub bglehmkmapg: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Afccaoacnak {
    #[prost(uint32, tag = "5")]
    pub dgaklnofdpp: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jbmeclkggdk {
    #[prost(oneof = "jbmeclkggdk::Afblajkdhhf", tags = "4, 9, 13, 14, 12, 1")]
    pub afblajkdhhf: ::core::option::Option<jbmeclkggdk::Afblajkdhhf>,
}
/// Nested message and enum types in `JBMECLKGGDK`.
pub mod jbmeclkggdk {
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum Afblajkdhhf {
        #[prost(message, tag = "4")]
        Hpnoggfdpkm(super::Ikamknhggok),
        #[prost(message, tag = "9")]
        Admahlaalnh(super::Gnjapomllhe),
        #[prost(message, tag = "13")]
        Oddgcbpoplf(super::Cnhhpdhbmdc),
        #[prost(message, tag = "14")]
        Gmakhonaeph(super::Jieaafjenlk),
        #[prost(message, tag = "12")]
        Cacgekaankl(super::Hpjlafhhgjg),
        #[prost(message, tag = "1")]
        Aggblhgkpfj(super::Afccaoacnak),
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Abenfanelfl {
    #[prost(int32, tag = "11")]
    pub ggplcpchadn: i32,
    #[prost(float, tag = "13")]
    pub lmbiodpohge: f32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gokkmeomofc {
    #[prost(uint32, tag = "11")]
    pub battle_event_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Nebpghddepc {
    #[prost(int32, tag = "5")]
    pub jefioihhclg: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hjpgncngilg {
    #[prost(oneof = "hjpgncngilg::Hpnhnmbabfn", tags = "7, 8")]
    pub hpnhnmbabfn: ::core::option::Option<hjpgncngilg::Hpnhnmbabfn>,
}
/// Nested message and enum types in `HJPGNCNGILG`.
pub mod hjpgncngilg {
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum Hpnhnmbabfn {
        #[prost(message, tag = "7")]
        Capijnmcdam(super::Gokkmeomofc),
        #[prost(message, tag = "8")]
        Hmlcehikffk(super::Nebpghddepc),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gbabekpblhn {
    #[prost(message, optional, tag = "10")]
    pub caoapdccpca: ::core::option::Option<Abenfanelfl>,
    #[prost(uint32, tag = "12")]
    pub gddcgekojoi: u32,
    #[prost(bool, tag = "9")]
    pub gldjnhiggje: bool,
    #[prost(uint32, tag = "1")]
    pub kdmlllghjon: u32,
    #[prost(bool, tag = "5")]
    pub pipmgacmjnn: bool,
    #[prost(message, repeated, tag = "7")]
    pub pocjcmkkjik: ::prost::alloc::vec::Vec<Hjpgncngilg>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hgeknliffed {
    #[prost(message, repeated, tag = "2")]
    pub lekpkocnjal: ::prost::alloc::vec::Vec<Gbabekpblhn>,
    #[prost(message, optional, tag = "6")]
    pub bdoemgmhalj: ::core::option::Option<Jbmeclkggdk>,
    #[prost(uint32, tag = "10")]
    pub bnclfoabaip: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jeniahelnpf {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mhganoeplip {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "15")]
    pub dckilldonhg: ::prost::alloc::vec::Vec<Hgeknliffed>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Llbpchbonck {
    #[prost(uint32, tag = "2")]
    pub bnclfoabaip: u32,
    #[prost(uint32, tag = "10")]
    pub kdmlllghjon: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pgbopnmmjbb {
    #[prost(bool, tag = "7")]
    pub adjgdbbnplc: bool,
    #[prost(message, optional, tag = "9")]
    pub oidiaddnacm: ::core::option::Option<Hgeknliffed>,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(uint32, tag = "1")]
    pub kdmlllghjon: u32,
    #[prost(uint32, repeated, tag = "8")]
    pub jidlbfoebid: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "13")]
    pub bnclfoabaip: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cjlnccdahoa {
    #[prost(uint32, tag = "1")]
    pub bnclfoabaip: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ifnngefffgp {
    #[prost(uint32, tag = "9")]
    pub bnclfoabaip: u32,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Odonimbgljn {
    #[prost(message, repeated, tag = "7")]
    pub dckilldonhg: ::prost::alloc::vec::Vec<Hgeknliffed>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kamclhljjpm {
    #[prost(message, optional, tag = "14")]
    pub dgncfmdppbf: ::core::option::Option<Gbabekpblhn>,
    #[prost(uint32, tag = "10")]
    pub kdmlllghjon: u32,
    #[prost(uint32, tag = "15")]
    pub bnclfoabaip: u32,
    #[prost(message, optional, tag = "8")]
    pub oidiaddnacm: ::core::option::Option<Hgeknliffed>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hmbfllilpio {
    #[prost(uint32, tag = "14")]
    pub agebambkkbc: u32,
    #[prost(uint32, tag = "11")]
    pub bngfaignphe: u32,
    #[prost(message, optional, tag = "9")]
    pub dlkcojghhmi: ::core::option::Option<Lgkgehhajje>,
    #[prost(uint32, tag = "7")]
    pub egmebanhhnf: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mikfnbbopip {
    #[prost(uint32, tag = "5")]
    pub agebambkkbc: u32,
    #[prost(string, tag = "4")]
    pub mdlndgijnml: ::prost::alloc::string::String,
    #[prost(uint32, tag = "10")]
    pub illodgaefae: u32,
    #[prost(uint32, tag = "9")]
    pub bngfaignphe: u32,
    #[prost(message, optional, tag = "15")]
    pub kndmeilhkej: ::core::option::Option<Kfpmaiaadmo>,
    #[prost(uint32, tag = "1")]
    pub egmebanhhnf: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dboknopcngg {
    #[prost(uint32, tag = "4")]
    pub prop_entity_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ginohihikhn {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(map = "uint32, message", tag = "14")]
    pub gajpnngmhnk: ::std::collections::HashMap<u32, Mhccpddkkda>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mhccpddkkda {
    #[prost(
        oneof = "mhccpddkkda::Jcfkgndaphj",
        tags = "8, 13, 4, 15, 2, 14, 5, 9, 10, 11"
    )]
    pub jcfkgndaphj: ::core::option::Option<mhccpddkkda::Jcfkgndaphj>,
}
/// Nested message and enum types in `MHCCPDDKKDA`.
pub mod mhccpddkkda {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Jcfkgndaphj {
        #[prost(message, tag = "8")]
        Cggnfjcbbkm(super::Glpeeijalgf),
        #[prost(message, tag = "13")]
        Piclegggncf(super::Jcijcafjjkn),
        #[prost(message, tag = "4")]
        Eapmicbgoio(super::Ajmibfecflj),
        #[prost(message, tag = "15")]
        Nnchmgdgdfi(super::Lpilgjepagj),
        #[prost(message, tag = "2")]
        Ndkhogemkja(super::Igilogohejp),
        #[prost(message, tag = "14")]
        Jlfddmekljk(super::Khcbgnlnpel),
        #[prost(message, tag = "5")]
        Lcbecpoogcl(super::Kmhibngafeo),
        #[prost(message, tag = "9")]
        Ceajnliofhf(super::Dmkpfgebilh),
        #[prost(message, tag = "10")]
        Pgpaapopdoc(super::Lfggpngkbch),
        #[prost(message, tag = "11")]
        Pmkehgbpcng(super::Dhmfcidjbfd),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Glpeeijalgf {
    #[prost(int32, tag = "4")]
    pub dmmamjgngnn: i32,
    #[prost(message, optional, tag = "13")]
    pub cost_data: ::core::option::Option<ItemCostData>,
    #[prost(uint32, tag = "2")]
    pub anlincfgfan: u32,
    #[prost(bool, tag = "8")]
    pub fobaoeafnam: bool,
    #[prost(uint32, tag = "11")]
    pub jifkhckpnfm: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jcijcafjjkn {
    #[prost(uint32, tag = "14")]
    pub anlincfgfan: u32,
    #[prost(message, optional, tag = "13")]
    pub cost_data: ::core::option::Option<ItemCostData>,
    #[prost(int32, tag = "8")]
    pub dmmamjgngnn: i32,
    #[prost(uint32, tag = "7")]
    pub jifkhckpnfm: u32,
    #[prost(bool, tag = "12")]
    pub fobaoeafnam: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ajmibfecflj {
    #[prost(uint32, tag = "15")]
    pub haklffpfoke: u32,
    #[prost(uint32, tag = "5")]
    pub cbogmihhmop: u32,
    #[prost(map = "uint32, uint32", tag = "13")]
    pub hcpacbhcmhn: ::std::collections::HashMap<u32, u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lpilgjepagj {
    #[prost(int32, tag = "13")]
    pub dmmamjgngnn: i32,
    #[prost(map = "uint32, bool", tag = "11")]
    pub nfnicipmjii: ::std::collections::HashMap<u32, bool>,
    #[prost(uint32, tag = "6")]
    pub jifkhckpnfm: u32,
    #[prost(message, optional, tag = "8")]
    pub cost_data: ::core::option::Option<ItemCostData>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Igilogohejp {
    #[prost(int32, tag = "12")]
    pub dmmamjgngnn: i32,
    #[prost(message, optional, tag = "2")]
    pub cost_data: ::core::option::Option<ItemCostData>,
    #[prost(uint32, tag = "4")]
    pub jifkhckpnfm: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Coahgflonan {
    #[prost(message, optional, tag = "15")]
    pub jlfddmekljk: ::core::option::Option<Inpinnpihob>,
    #[prost(message, optional, tag = "10")]
    pub hbpblgllien: ::core::option::Option<ItemCostData>,
    #[prost(message, optional, tag = "2")]
    pub cost_data: ::core::option::Option<ItemCostData>,
    #[prost(bool, tag = "14")]
    pub ngkjpcehmba: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Khcbgnlnpel {
    #[prost(message, repeated, tag = "10")]
    pub picfhpkdnel: ::prost::alloc::vec::Vec<Coahgflonan>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Aogiimkcjdj {
    #[prost(message, optional, tag = "1")]
    pub hbpblgllien: ::core::option::Option<ItemCostData>,
    #[prost(bool, tag = "4")]
    pub ngkjpcehmba: bool,
    #[prost(uint32, tag = "11")]
    pub ebaiipmhkoi: u32,
    #[prost(uint32, tag = "7")]
    pub ppmiogcfooc: u32,
    #[prost(message, optional, tag = "2")]
    pub cost_data: ::core::option::Option<ItemCostData>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kmhibngafeo {
    #[prost(message, repeated, tag = "4")]
    pub bjabjjmmojk: ::prost::alloc::vec::Vec<Aogiimkcjdj>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dmkpfgebilh {
    #[prost(message, optional, tag = "8")]
    pub cost_data: ::core::option::Option<ItemCostData>,
    #[prost(uint32, tag = "1")]
    pub jifkhckpnfm: u32,
    #[prost(int32, tag = "11")]
    pub dmmamjgngnn: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lfggpngkbch {
    #[prost(map = "uint32, message", tag = "3")]
    pub iakhmmelmfd: ::std::collections::HashMap<u32, ItemCostData>,
    #[prost(message, optional, tag = "11")]
    pub faidibodmch: ::core::option::Option<ItemCostData>,
    #[prost(int32, tag = "2")]
    pub dmmamjgngnn: i32,
    #[prost(uint32, tag = "12")]
    pub jifkhckpnfm: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kifilcjolch {
    #[prost(message, optional, tag = "9")]
    pub cost_data: ::core::option::Option<ItemCostData>,
    #[prost(uint32, tag = "6")]
    pub gjkjfgeehcb: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dhmfcidjbfd {
    #[prost(message, repeated, tag = "3")]
    pub eldolkcakae: ::prost::alloc::vec::Vec<Kifilcjolch>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bcmdoeoiagb {
    #[prost(uint32, tag = "3")]
    pub prop_entity_id: u32,
    #[prost(uint32, tag = "7")]
    pub hobjminnbop: u32,
    #[prost(message, optional, tag = "15")]
    pub lbobpbhelgj: ::core::option::Option<Akmbehgcbhe>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lmpbjlibhca {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(message, optional, tag = "14")]
    pub mlkioodnllf: ::core::option::Option<Mhccpddkkda>,
    #[prost(uint32, tag = "15")]
    pub hobjminnbop: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Akmbehgcbhe {
    #[prost(
        oneof = "akmbehgcbhe::Lofnlgcfgic",
        tags = "4, 11, 9, 13, 5, 2, 10, 1, 3, 7"
    )]
    pub lofnlgcfgic: ::core::option::Option<akmbehgcbhe::Lofnlgcfgic>,
}
/// Nested message and enum types in `AKMBEHGCBHE`.
pub mod akmbehgcbhe {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Lofnlgcfgic {
        #[prost(message, tag = "4")]
        Cggnfjcbbkm(super::Akkcdlmlkdf),
        #[prost(message, tag = "11")]
        Piclegggncf(super::Alnigmcjfdm),
        #[prost(message, tag = "9")]
        Eapmicbgoio(super::Neoccicfned),
        #[prost(message, tag = "13")]
        Nnchmgdgdfi(super::Kojkplcegen),
        #[prost(message, tag = "5")]
        Ndkhogemkja(super::Bhjhapdlpno),
        #[prost(message, tag = "2")]
        Jlfddmekljk(super::Jdooidbkcim),
        #[prost(message, tag = "10")]
        Lcbecpoogcl(super::Gjbblcipbhd),
        #[prost(message, tag = "1")]
        Ceajnliofhf(super::Lehglceljmf),
        #[prost(message, tag = "3")]
        Pgpaapopdoc(super::Fhjglopmfnc),
        #[prost(message, tag = "7")]
        Pmkehgbpcng(super::Jbncdffpdop),
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Akkcdlmlkdf {
    #[prost(uint32, tag = "7")]
    pub hifgeekagla: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Alnigmcjfdm {
    #[prost(uint32, tag = "3")]
    pub pfmgabppdfl: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Neoccicfned {
    #[prost(uint32, tag = "2")]
    pub amohedgmlee: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kojkplcegen {
    #[prost(uint32, repeated, tag = "5")]
    pub nlklhflbjfm: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bhjhapdlpno {
    #[prost(uint32, tag = "9")]
    pub icaeccokajp: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jdooidbkcim {
    #[prost(uint32, tag = "6")]
    pub fpljoaacdgd: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gjbblcipbhd {
    #[prost(uint32, repeated, tag = "9")]
    pub clopkobkhma: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lehglceljmf {
    #[prost(uint32, repeated, tag = "15")]
    pub dnkccibpfgk: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fhjglopmfnc {
    #[prost(uint32, tag = "9")]
    pub ebaiipmhkoi: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jbncdffpdop {
    #[prost(uint32, tag = "5")]
    pub gjkjfgeehcb: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fkbfooefpae {
    #[prost(uint32, tag = "8")]
    pub infbhpgdlnd: u32,
    #[prost(enumeration = "Hgpokmdgknn", tag = "5")]
    pub status: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ajakdcddamo {
    #[prost(uint32, tag = "12")]
    pub infbhpgdlnd: u32,
    #[prost(uint32, tag = "8")]
    pub eonlmdcbnme: u32,
    #[prost(enumeration = "Hhiclpljnco", tag = "10")]
    pub status: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cklnggbjmhd {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Chlekgndakj {
    #[prost(message, repeated, tag = "9")]
    pub pcpedflnbga: ::prost::alloc::vec::Vec<Fkbfooefpae>,
    #[prost(message, repeated, tag = "15")]
    pub pahpdbiacha: ::prost::alloc::vec::Vec<Ajakdcddamo>,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gfiacehaofi {
    #[prost(uint32, repeated, tag = "10")]
    pub opkmciffcch: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "2")]
    pub fpipmkcagpd: ::prost::alloc::vec::Vec<u32>,
    #[prost(enumeration = "Mhkmpgabbpl", repeated, tag = "15")]
    pub lghphfppjen: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mgepeklcapm {
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "11")]
    pub pcpedflnbga: ::prost::alloc::vec::Vec<Fkbfooefpae>,
    #[prost(message, repeated, tag = "4")]
    pub pahpdbiacha: ::prost::alloc::vec::Vec<Ajakdcddamo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gbpflagfaij {
    #[prost(enumeration = "Ehcobodeeje", tag = "6")]
    pub status: i32,
    #[prost(uint32, tag = "14")]
    pub kbdfbginnbj: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dmodinlgccb {
    #[prost(uint32, tag = "10")]
    pub eonlmdcbnme: u32,
    #[prost(enumeration = "Hhiclpljnco", tag = "6")]
    pub status: i32,
    #[prost(uint32, tag = "14")]
    pub kbdfbginnbj: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gafkhglmdkj {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Akkeabkjkmk {
    #[prost(message, repeated, tag = "11")]
    pub mkcefancaig: ::prost::alloc::vec::Vec<Gbpflagfaij>,
    #[prost(message, repeated, tag = "1")]
    pub pjpjokkfnim: ::prost::alloc::vec::Vec<Dmodinlgccb>,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fghcieomine {
    #[prost(uint32, repeated, tag = "15")]
    pub ldifbjdgffe: ::prost::alloc::vec::Vec<u32>,
    #[prost(enumeration = "Mhkmpgabbpl", repeated, tag = "4")]
    pub anekpinlkfj: ::prost::alloc::vec::Vec<i32>,
    #[prost(uint32, repeated, tag = "3")]
    pub heepoeolilo: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mbdacgmfdba {
    #[prost(message, repeated, tag = "11")]
    pub mkcefancaig: ::prost::alloc::vec::Vec<Gbpflagfaij>,
    #[prost(message, repeated, tag = "3")]
    pub pjpjokkfnim: ::prost::alloc::vec::Vec<Dmodinlgccb>,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ehkegmcgcmh {
    #[prost(uint32, tag = "6")]
    pub deidchamdba: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pndnjbbdhdp {
    #[prost(uint32, tag = "12")]
    pub bimbfjgnpfb: u32,
    #[prost(uint32, tag = "2")]
    pub level: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dopjlbmmphb {
    #[prost(uint32, tag = "12")]
    pub bimbfjgnpfb: u32,
    #[prost(bool, tag = "2")]
    pub kdgbjgopehi: bool,
    #[prost(oneof = "dopjlbmmphb::Oonijkkdllp", tags = "6, 13")]
    pub oonijkkdllp: ::core::option::Option<dopjlbmmphb::Oonijkkdllp>,
}
/// Nested message and enum types in `DOPJLBMMPHB`.
pub mod dopjlbmmphb {
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum Oonijkkdllp {
        #[prost(message, tag = "6")]
        Djnabioeenf(super::Ehkegmcgcmh),
        #[prost(message, tag = "13")]
        Imcajaogclg(super::Pndnjbbdhdp),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lopjejmofbg {
    #[prost(message, repeated, tag = "1")]
    pub bbpapddenhb: ::prost::alloc::vec::Vec<Dopjlbmmphb>,
    #[prost(uint32, tag = "9")]
    pub group_id: u32,
    #[prost(bool, tag = "10")]
    pub enbijbfbnec: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eomodelgnhe {
    #[prost(uint32, tag = "7")]
    pub akkonobbjnk: u32,
    #[prost(uint32, tag = "5")]
    pub eabocpnfklm: u32,
    #[prost(message, repeated, tag = "13")]
    pub maze_group_list: ::prost::alloc::vec::Vec<Lopjejmofbg>,
    #[prost(message, optional, tag = "12")]
    pub kedcohkknak: ::core::option::Option<ItemCostData>,
    #[prost(bool, tag = "10")]
    pub loffeohfpfl: bool,
    #[prost(uint32, tag = "6")]
    pub ddjddbknpff: u32,
    #[prost(uint32, tag = "11")]
    pub hfbkbhjiegd: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jlemaphnddk {
    #[prost(uint32, tag = "2")]
    pub prop_entity_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kgmfoeaieja {
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(message, optional, tag = "14")]
    pub ffmifpfibdd: ::core::option::Option<Eomodelgnhe>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Plnfkhdhdbp {
    #[prost(uint32, tag = "11")]
    pub prop_entity_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cgdancpmjae {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(message, optional, tag = "13")]
    pub ffmifpfibdd: ::core::option::Option<Eomodelgnhe>,
    #[prost(uint32, tag = "8")]
    pub cfbglfojoda: u32,
    #[prost(uint32, tag = "6")]
    pub jpklmppogdh: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kppapmogfgi {
    #[prost(enumeration = "Kcoalennljb", tag = "2")]
    pub r#type: i32,
    #[prost(string, tag = "4")]
    pub lcpllgnjnaj: ::prost::alloc::string::String,
    #[prost(string, tag = "9")]
    pub hkligchhieg: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Noloiljjakg {
    #[prost(string, tag = "12")]
    pub ijppknknlnl: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub jdedckkacgo: ::prost::alloc::string::String,
    #[prost(string, tag = "7")]
    pub nepgeejclah: ::prost::alloc::string::String,
    #[prost(string, tag = "11")]
    pub kfamackfhpm: ::prost::alloc::string::String,
    #[prost(uint32, tag = "1")]
    pub uid: u32,
    #[prost(string, tag = "9")]
    pub jhjgfdmkihg: ::prost::alloc::string::String,
    #[prost(string, tag = "10")]
    pub dfpfalbjhjh: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jnfelckiocm {
    #[prost(enumeration = "Egpimdadfdi", tag = "15")]
    pub status: i32,
    #[prost(message, optional, tag = "7")]
    pub jlnilijomem: ::core::option::Option<Ajpfphkklpg>,
    #[prost(uint32, repeated, tag = "2")]
    pub lghcahbbcam: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "1")]
    pub base_avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "9")]
    pub map_id: u32,
    #[prost(message, optional, tag = "8")]
    pub lchkkhngbgj: ::core::option::Option<Gckblhadlgn>,
    #[prost(uint32, tag = "14")]
    pub kjgimhfkgbn: u32,
    #[prost(uint32, tag = "11")]
    pub ffkpegnbhod: u32,
    #[prost(uint32, tag = "10")]
    pub gmpiiaeggek: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Oendafiaecg {
    #[prost(uint32, tag = "2")]
    pub kkpkaljmamf: u32,
    #[prost(uint32, tag = "14")]
    pub jpkjkimnigg: u32,
    #[prost(uint32, tag = "8")]
    pub bpekcejpofe: u32,
    #[prost(bool, tag = "3")]
    pub ighlhohcckc: bool,
    #[prost(uint32, tag = "6")]
    pub aeieojgcmmo: u32,
    #[prost(uint32, tag = "12")]
    pub hdjcjbbknaf: u32,
    #[prost(uint32, tag = "10")]
    pub hdllmdnlokp: u32,
    #[prost(uint32, tag = "15")]
    pub battle_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Peodocnclnp {
    #[prost(message, optional, tag = "2")]
    pub bopaangkogh: ::core::option::Option<Oendafiaecg>,
    #[prost(message, optional, tag = "6")]
    pub aeloipgfodb: ::core::option::Option<Jnfelckiocm>,
    #[prost(uint32, tag = "3")]
    pub dbahfefglmd: u32,
    #[prost(uint32, tag = "7")]
    pub panel_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jghnppckjoe {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Elkmjmaancm {
    #[prost(uint32, repeated, tag = "4")]
    pub eahbikfallf: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "8")]
    pub data: ::prost::alloc::vec::Vec<Peodocnclnp>,
    #[prost(uint32, tag = "5")]
    pub jchchlmdpen: u32,
    #[prost(uint32, tag = "13")]
    pub anameobfkgn: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bbnhemckdin {
    #[prost(uint32, tag = "10")]
    pub equip_avatar_id: u32,
    #[prost(enumeration = "AvatarType", tag = "9")]
    pub avatar_type: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mkcpgopohnh {
    #[prost(message, repeated, tag = "15")]
    pub avatar_list: ::prost::alloc::vec::Vec<Bbnhemckdin>,
    #[prost(uint32, tag = "6")]
    pub mgigdcmleog: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bnbiambdall {
    #[prost(message, optional, tag = "4")]
    pub bopaangkogh: ::core::option::Option<Oendafiaecg>,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(message, optional, tag = "5")]
    pub battle_info: ::core::option::Option<SceneBattleInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ckkliemdeof {
    #[prost(message, optional, tag = "2")]
    pub bopaangkogh: ::core::option::Option<Oendafiaecg>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bcndknljoep {
    #[prost(bool, tag = "8")]
    pub mdhjkkbnmcf: bool,
    #[prost(uint32, tag = "5")]
    pub level: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fmcedjkihnp {
    #[prost(uint32, tag = "4")]
    pub jchchlmdpen: u32,
    #[prost(uint32, repeated, tag = "7")]
    pub eahbikfallf: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "14")]
    pub level: u32,
    #[prost(message, optional, tag = "2")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(bool, tag = "11")]
    pub mdhjkkbnmcf: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hlekecocgji {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jjppdhehfim {
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(uint32, tag = "6")]
    pub jchchlmdpen: u32,
    #[prost(message, optional, tag = "14")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, repeated, tag = "11")]
    pub eahbikfallf: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hfippdggjol {
    #[prost(message, optional, tag = "10")]
    pub scene: ::core::option::Option<SceneInfo>,
    #[prost(message, optional, tag = "13")]
    pub lineup: ::core::option::Option<LineupInfo>,
    #[prost(message, optional, tag = "11")]
    pub keilfhhnlih: ::core::option::Option<Jjafhfgjmob>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bpaifngedgh {
    #[prost(uint32, tag = "7")]
    pub ppjbgnbmkpm: u32,
    #[prost(enumeration = "Jlcbbkkgoej", tag = "1")]
    pub status: i32,
    #[prost(message, repeated, tag = "9")]
    pub mnfjeiininl: ::prost::alloc::vec::Vec<Oiikgfipmfg>,
    #[prost(uint32, tag = "8")]
    pub ogldnefkndo: u32,
    #[prost(uint32, tag = "4")]
    pub bhpgjcicmjm: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Oiikgfipmfg {
    #[prost(enumeration = "Jiokhlhgeod", tag = "12")]
    pub status: i32,
    #[prost(uint32, tag = "1")]
    pub akdleblpbmd: u32,
    #[prost(uint32, tag = "2")]
    pub jjlogicpoao: u32,
    #[prost(uint32, tag = "11")]
    pub eipnnejnnkj: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mjkkoneiobo {
    #[prost(uint32, tag = "10")]
    pub acgbelaigbo: u32,
    #[prost(uint32, tag = "14")]
    pub lfcdodfmhhn: u32,
    #[prost(enumeration = "Jmpphgigffi", tag = "13")]
    pub reason: i32,
    #[prost(enumeration = "Behfnmkdomk", tag = "5")]
    pub status: i32,
    #[prost(message, repeated, tag = "1")]
    pub ahooafgdehf: ::prost::alloc::vec::Vec<Bpaifngedgh>,
    #[prost(uint32, tag = "15")]
    pub bgokheibnkl: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jchcgfmgbak {
    #[prost(bool, tag = "12")]
    pub jfcnajmihci: bool,
    #[prost(message, repeated, tag = "7")]
    pub bjabjjmmojk: ::prost::alloc::vec::Vec<Jfgflgblcaj>,
    #[prost(uint32, tag = "4")]
    pub nmjaibbldoc: u32,
    #[prost(message, repeated, tag = "15")]
    pub eldolkcakae: ::prost::alloc::vec::Vec<Jbihocioanh>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Llnhfmgmcmn {
    #[prost(uint32, repeated, tag = "3")]
    pub dimhpbcpnlc: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Klohnfgbnph {
    #[prost(uint32, tag = "12")]
    pub laeejiikmpi: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Odfpbaagapo {
    #[prost(uint32, tag = "8")]
    pub jeafpigjdol: u32,
    #[prost(uint32, tag = "2")]
    pub dbahfefglmd: u32,
    #[prost(uint32, repeated, tag = "13")]
    pub base_avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "15")]
    pub ahiibhkdfjb: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Aapkbpeggbh {
    #[prost(message, optional, tag = "6")]
    pub jibdgcfcdio: ::core::option::Option<Nkidddpflje>,
    #[prost(message, optional, tag = "10")]
    pub lineup: ::core::option::Option<Omdefbabnnb>,
    #[prost(message, optional, tag = "2")]
    pub jlfddmekljk: ::core::option::Option<Jchcgfmgbak>,
    #[prost(message, optional, tag = "7")]
    pub cacgekaankl: ::core::option::Option<Klohnfgbnph>,
    #[prost(message, optional, tag = "13")]
    pub kkobbenpfph: ::core::option::Option<Llnhfmgmcmn>,
    #[prost(message, optional, tag = "12")]
    pub cpiogjkfech: ::core::option::Option<Findafkpoof>,
    #[prost(message, optional, tag = "14")]
    pub level: ::core::option::Option<Mjkkoneiobo>,
    #[prost(message, optional, tag = "5")]
    pub basic_info: ::core::option::Option<Mikfnbbopip>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Beackfehjij {
    #[prost(message, optional, tag = "2")]
    pub lcoclenjjai: ::core::option::Option<Hfippdggjol>,
    #[prost(message, optional, tag = "9")]
    pub bhmhlpchklg: ::core::option::Option<Aapkbpeggbh>,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Nmaebmbegol {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fojgiibdbpj {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(message, optional, tag = "3")]
    pub bhmhlpchklg: ::core::option::Option<Aapkbpeggbh>,
    #[prost(message, optional, tag = "6")]
    pub lcoclenjjai: ::core::option::Option<Hfippdggjol>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jpngldlljcp {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Joegnnieccn {
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(message, optional, tag = "13")]
    pub lcoclenjjai: ::core::option::Option<Hfippdggjol>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bkfdiabhnda {
    #[prost(uint32, tag = "11")]
    pub fllablfbeik: u32,
    #[prost(uint32, tag = "12")]
    pub bhpgjcicmjm: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Elmoigeffgb {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(message, optional, tag = "1")]
    pub lcoclenjjai: ::core::option::Option<Hfippdggjol>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Oiohppmcmhe {
    #[prost(uint32, tag = "8")]
    pub fllablfbeik: u32,
    #[prost(uint32, tag = "14")]
    pub lfcdodfmhhn: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ldalhbmjlpd {
    #[prost(message, optional, tag = "12")]
    pub lcoclenjjai: ::core::option::Option<Hfippdggjol>,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nmaakgggdde {
    #[prost(uint32, tag = "8")]
    pub acgbelaigbo: u32,
    #[prost(enumeration = "Jmpphgigffi", tag = "12")]
    pub reason: i32,
    #[prost(uint32, tag = "15")]
    pub lfcdodfmhhn: u32,
    #[prost(enumeration = "Behfnmkdomk", tag = "2")]
    pub status: i32,
    #[prost(message, repeated, tag = "4")]
    pub ahooafgdehf: ::prost::alloc::vec::Vec<Bpaifngedgh>,
    #[prost(uint32, tag = "1")]
    pub bgokheibnkl: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bjmdbiidbph {
    #[prost(message, repeated, tag = "4")]
    pub jidjeamdkde: ::prost::alloc::vec::Vec<Pjebcbnpdic>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Caclanloolk {
    #[prost(bool, tag = "11")]
    pub fbjhgpdkbgm: bool,
    #[prost(uint32, tag = "14")]
    pub efkegdoajbh: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fjjdkdndfdj {
    #[prost(uint32, tag = "8")]
    pub kknghgbhcgg: u32,
    #[prost(bool, tag = "3")]
    pub fbjhgpdkbgm: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ognbigkhhbm {
    #[prost(message, optional, tag = "5")]
    pub gcglnkfdkkn: ::core::option::Option<Caclanloolk>,
    #[prost(message, optional, tag = "15")]
    pub bjlemfmcodd: ::core::option::Option<Fjjdkdndfdj>,
    #[prost(message, optional, tag = "7")]
    pub bhmhlpchklg: ::core::option::Option<Aapkbpeggbh>,
    #[prost(message, optional, tag = "3")]
    pub embagmmhipa: ::core::option::Option<LineupInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hcjgpmdgbjo {
    #[prost(message, repeated, tag = "9")]
    pub klmgaebeagk: ::prost::alloc::vec::Vec<Inpinnpihob>,
    #[prost(message, repeated, tag = "4")]
    pub epckcookclj: ::prost::alloc::vec::Vec<Obipoolidal>,
    #[prost(uint32, repeated, tag = "8")]
    pub blbfdcgceda: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "10")]
    pub mnkcjfelcng: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lphoakokcgl {
    #[prost(message, optional, tag = "8")]
    pub njnjebodmnl: ::core::option::Option<Ognbigkhhbm>,
    #[prost(message, optional, tag = "1")]
    pub lcoclenjjai: ::core::option::Option<Hfippdggjol>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Picmlkbcpgj {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mmfbkkpaiak {
    #[prost(message, optional, tag = "12")]
    pub lcoclenjjai: ::core::option::Option<Hfippdggjol>,
    #[prost(message, optional, tag = "9")]
    pub gfonfdbfbna: ::core::option::Option<ItemList>,
    #[prost(message, optional, tag = "5")]
    pub njnjebodmnl: ::core::option::Option<Ognbigkhhbm>,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(message, optional, tag = "8")]
    pub mgcfoglkmch: ::core::option::Option<Hcjgpmdgbjo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mhpbbobpbdk {
    #[prost(message, optional, tag = "5")]
    pub gficflciejj: ::core::option::Option<ItemCostData>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Phcbeonfbha {
    #[prost(uint32, repeated, tag = "8")]
    pub base_avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "10")]
    pub interacted_prop_entity_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cpmjbehcknb {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(message, optional, tag = "8")]
    pub gficflciejj: ::core::option::Option<ItemCostData>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jcnffmkkakm {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Olfgbamefji {
    #[prost(message, repeated, tag = "332")]
    pub bjabjjmmojk: ::prost::alloc::vec::Vec<Jfgflgblcaj>,
    #[prost(uint32, tag = "9")]
    pub nnnkjkclblo: u32,
    #[prost(uint32, tag = "8")]
    pub fonnghlgjfa: u32,
    #[prost(uint32, tag = "11")]
    pub njiempgeeog: u32,
    #[prost(uint32, repeated, tag = "1092")]
    pub jlhfojodokg: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "14")]
    pub nmjaibbldoc: u32,
    #[prost(uint32, tag = "7")]
    pub blfdfmcffim: u32,
    #[prost(uint32, tag = "15")]
    pub hmkgbmidgop: u32,
    #[prost(uint32, tag = "2")]
    pub bgokheibnkl: u32,
    #[prost(uint32, repeated, tag = "127")]
    pub avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "12")]
    pub ofbiahgopcm: u32,
    #[prost(uint32, tag = "10")]
    pub ipodnbljpol: u32,
    #[prost(message, repeated, tag = "622")]
    pub eldolkcakae: ::prost::alloc::vec::Vec<Jbihocioanh>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Koiicmieaef {
    #[prost(uint32, repeated, tag = "242")]
    pub dpplcddhbge: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pjebcbnpdic {
    #[prost(message, optional, tag = "10")]
    pub holalcipknk: ::core::option::Option<Olfgbamefji>,
    #[prost(bool, tag = "3")]
    pub knbdpfeidnm: bool,
    #[prost(uint32, repeated, tag = "12")]
    pub npbnmmkhkop: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "4")]
    pub dbahfefglmd: u32,
    #[prost(bool, tag = "9")]
    pub is_taken_reward: bool,
    #[prost(uint32, tag = "14")]
    pub ifpoilopfag: u32,
    #[prost(message, optional, tag = "11")]
    pub cgaijcclkbh: ::core::option::Option<Koiicmieaef>,
    #[prost(bool, tag = "15")]
    pub biifelfegnk: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cchiedibofm {
    #[prost(bool, tag = "3")]
    pub knbdpfeidnm: bool,
    #[prost(uint32, tag = "6")]
    pub handcdpibld: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bgapfbpijhp {
    #[prost(uint32, repeated, tag = "11")]
    pub eacemapdndh: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pbbedpiipek {
    #[prost(message, repeated, tag = "8")]
    pub dimgdinccji: ::prost::alloc::vec::Vec<Cchiedibofm>,
    #[prost(message, repeated, tag = "11")]
    pub picfhpkdnel: ::prost::alloc::vec::Vec<Ooceoilkcfi>,
    #[prost(message, repeated, tag = "14")]
    pub bjabjjmmojk: ::prost::alloc::vec::Vec<Eoejhkjllpk>,
    #[prost(message, optional, tag = "4")]
    pub story_buff_info: ::core::option::Option<Bgapfbpijhp>,
    #[prost(message, optional, tag = "15")]
    pub okakamonpfl: ::core::option::Option<Iejppfjfjlj>,
    #[prost(message, repeated, tag = "13")]
    pub jidjeamdkde: ::prost::alloc::vec::Vec<Pjebcbnpdic>,
    #[prost(uint32, repeated, tag = "6")]
    pub kglbndeaphf: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jafojenldjp {
    #[prost(message, optional, tag = "10")]
    pub bhmhlpchklg: ::core::option::Option<Aapkbpeggbh>,
    #[prost(message, optional, tag = "3")]
    pub lagbgldlgcb: ::core::option::Option<Pbbedpiipek>,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mdlnpimicmd {
    #[prost(uint32, tag = "12")]
    pub elpinnnalbd: u32,
    #[prost(uint32, tag = "15")]
    pub gjkjfgeehcb: u32,
    #[prost(uint32, tag = "6")]
    pub fpnodeepfki: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Aagdkjfnakg {
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Chjnekcpada {
    #[prost(uint32, repeated, tag = "6")]
    pub bhkankfpdcp: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dmkcmbhadol {
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Liajhmcjdlo {
    #[prost(bool, tag = "4")]
    pub khdhahnnalm: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Nnjadflfheb {
    #[prost(bool, tag = "1")]
    pub khdhahnnalm: bool,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ambaebkgjib {
    #[prost(bool, tag = "3")]
    pub khdhahnnalm: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Llcclfegkhd {
    #[prost(uint32, tag = "4")]
    pub gjkjfgeehcb: u32,
    #[prost(uint32, repeated, tag = "14")]
    pub bhkankfpdcp: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fjkapmkljae {
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ihbdbadpbeh {
    #[prost(uint32, repeated, tag = "6")]
    pub bhkankfpdcp: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gplnechoocf {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ddiecbdncij {
    #[prost(uint32, repeated, tag = "13")]
    pub bhkankfpdcp: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ajmpfoijaml {
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Iejppfjfjlj {
    #[prost(message, optional, tag = "9")]
    pub ckmahdgiboh: ::core::option::Option<Imjmgeenceh>,
    #[prost(uint32, tag = "6")]
    pub cmadmlialjl: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mkfonfjnkdb {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cmfplabibcd {
    #[prost(message, optional, tag = "10")]
    pub okakamonpfl: ::core::option::Option<Iejppfjfjlj>,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hhmfehgphil {
    #[prost(uint32, tag = "15")]
    pub fagnlgfjaif: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Blchciigndb {
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(message, optional, tag = "13")]
    pub okakamonpfl: ::core::option::Option<Iejppfjfjlj>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ecegehkcebb {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fanodlfgdeg {
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(message, optional, tag = "13")]
    pub bjlemfmcodd: ::core::option::Option<Fjjdkdndfdj>,
    #[prost(message, optional, tag = "12")]
    pub gcglnkfdkkn: ::core::option::Option<Caclanloolk>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gcionhdoocc {
    #[prost(uint32, tag = "11")]
    pub mnbccbabcha: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Eddhmigfdji {
    #[prost(bool, tag = "5")]
    pub pipmgacmjnn: bool,
    #[prost(uint32, tag = "11")]
    pub inbjppapcag: u32,
    #[prost(uint32, tag = "7")]
    pub mbgkckldhib: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Foiacpfkdhk {
    #[prost(bool, tag = "14")]
    pub pipmgacmjnn: bool,
    #[prost(uint32, tag = "12")]
    pub inbjppapcag: u32,
    #[prost(uint32, tag = "3")]
    pub mbgkckldhib: u32,
    #[prost(uint32, repeated, tag = "15")]
    pub onnjgdjnflg: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pogcnjmngpi {
    #[prost(uint32, repeated, tag = "3")]
    pub onnjgdjnflg: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "13")]
    pub inbjppapcag: u32,
    #[prost(bool, tag = "1")]
    pub pipmgacmjnn: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ainblbbfdbj {
    #[prost(uint32, tag = "3")]
    pub inbjppapcag: u32,
    #[prost(uint32, tag = "5")]
    pub nijagoajpem: u32,
    #[prost(bool, tag = "8")]
    pub pipmgacmjnn: bool,
    #[prost(uint32, repeated, tag = "2")]
    pub nhgojdodgma: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ajeeiakemip {
    #[prost(uint32, tag = "4")]
    pub cehfiilmjkm: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Khmjbjlobpg {
    #[prost(uint32, tag = "3")]
    pub cpocngekiib: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gfgdodhmbpk {
    #[prost(uint32, tag = "6")]
    pub kokpceamabc: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Npdipkhdcnf {
    #[prost(uint32, tag = "11")]
    pub inbjppapcag: u32,
    #[prost(uint32, tag = "4")]
    pub iigoemfhgll: u32,
    #[prost(bool, tag = "14")]
    pub pipmgacmjnn: bool,
    #[prost(uint32, repeated, tag = "10")]
    pub nhgojdodgma: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Egalagnaefb {
    #[prost(uint32, tag = "8")]
    pub gpdeiiioipn: u32,
    #[prost(uint32, tag = "7")]
    pub olgljhecdof: u32,
    #[prost(uint32, tag = "10")]
    pub gclebgddiip: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ndgljknkefk {
    #[prost(uint32, tag = "12")]
    pub ojeblmkkmgo: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Egfdajdihnj {
    #[prost(uint32, tag = "2")]
    pub item_id: u32,
    #[prost(uint32, tag = "7")]
    pub mbejblfhcbh: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pnikofbimjl {
    #[prost(uint32, tag = "1")]
    pub eoaefbknffe: u32,
    #[prost(uint32, tag = "7")]
    pub nejdmegnfgk: u32,
    #[prost(uint32, tag = "11")]
    pub num: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jjdkoeehbjo {
    #[prost(uint32, tag = "8")]
    pub ooofgdbldce: u32,
    #[prost(uint32, tag = "6")]
    pub num: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Okgmdmjhcmk {
    #[prost(uint32, tag = "5")]
    pub cehfiilmjkm: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cfkbhpnbcnb {
    #[prost(uint32, tag = "15")]
    pub mbgkckldhib: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bbbeoeoifjk {
    #[prost(uint32, repeated, tag = "3")]
    pub onnjgdjnflg: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, tag = "7")]
    pub pipmgacmjnn: bool,
    #[prost(uint32, tag = "15")]
    pub inbjppapcag: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ahpnapgpjeg {
    #[prost(uint32, tag = "13")]
    pub ojeblmkkmgo: u32,
    #[prost(uint32, tag = "1")]
    pub amojfmfeoge: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fpchmkkcgfa {
    #[prost(uint32, tag = "1")]
    pub affjhmjdibn: u32,
    #[prost(uint32, tag = "11")]
    pub bnckfbfmgmi: u32,
    #[prost(enumeration = "Njchljfiodm", tag = "7")]
    pub lghokgabgck: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ndfookghhop {
    #[prost(bool, tag = "7")]
    pub pipmgacmjnn: bool,
    #[prost(uint32, tag = "1")]
    pub inbjppapcag: u32,
    #[prost(uint32, repeated, tag = "12")]
    pub cegckbndalf: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mdbjbiekkee {
    #[prost(uint32, tag = "8")]
    pub lipapomhmce: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Blcpnbikclp {
    #[prost(uint32, tag = "1")]
    pub count: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Aekpjeldapd {
    #[prost(message, optional, tag = "12")]
    pub knihplngocl: ::core::option::Option<Fpchmkkcgfa>,
    #[prost(enumeration = "Lgmdbcffjof", tag = "4")]
    pub hhmabjdimgm: i32,
    #[prost(uint64, tag = "6")]
    pub pkfcldincal: u64,
    #[prost(oneof = "aekpjeldapd::Ieicdggelne", tags = "1642")]
    pub ieicdggelne: ::core::option::Option<aekpjeldapd::Ieicdggelne>,
}
/// Nested message and enum types in `AEKPJELDAPD`.
pub mod aekpjeldapd {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Ieicdggelne {
        #[prost(message, tag = "1642")]
        Kbobeemcndd(super::Ndfookghhop),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eendhpkpflp {
    #[prost(message, repeated, tag = "5")]
    pub mebjclenpio: ::prost::alloc::vec::Vec<Aekpjeldapd>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bmpibdiifbe {
    #[prost(message, optional, tag = "1")]
    pub pdaampcelaa: ::core::option::Option<Aekpjeldapd>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ichalpipmmj {
    #[prost(uint32, tag = "1")]
    pub hhcbjghkcpc: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Demflhniogf {
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(uint32, tag = "13")]
    pub hhcbjghkcpc: u32,
    #[prost(message, optional, tag = "9")]
    pub jdijkegcibp: ::core::option::Option<ItemList>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jgdghgekgpg {
    #[prost(message, optional, tag = "10")]
    pub pdaampcelaa: ::core::option::Option<Aekpjeldapd>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hocifobceom {
    #[prost(uint64, tag = "13")]
    pub pkfcldincal: u64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hcgbflpocpi {
    #[prost(enumeration = "Lgmdbcffjof", tag = "10")]
    pub hhmabjdimgm: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fjemjbnajfj {
    #[prost(message, optional, tag = "2")]
    pub keilfhhnlih: ::core::option::Option<Jjafhfgjmob>,
    #[prost(message, optional, tag = "7")]
    pub lineup: ::core::option::Option<LineupInfo>,
    #[prost(message, optional, tag = "5")]
    pub scene: ::core::option::Option<SceneInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cfcdhlpoogc {
    #[prost(message, optional, tag = "12")]
    pub ikobkinkhcf: ::core::option::Option<Mikfnbbopip>,
    #[prost(oneof = "cfcdhlpoogc::Ieicdggelne", tags = "298")]
    pub ieicdggelne: ::core::option::Option<cfcdhlpoogc::Ieicdggelne>,
}
/// Nested message and enum types in `CFCDHLPOOGC`.
pub mod cfcdhlpoogc {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Ieicdggelne {
        #[prost(message, tag = "298")]
        Icffjlicimb(super::Lhadmkcgcko),
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Nkpkiaamodg {
    #[prost(uint32, tag = "13")]
    pub ldfehkdcnel: u32,
    #[prost(uint32, tag = "9")]
    pub jdbahpebfjc: u32,
    #[prost(bool, tag = "6")]
    pub fbjhgpdkbgm: bool,
    #[prost(uint32, tag = "7")]
    pub mnnkjpliilj: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Nnijcdkhpkl {
    #[prost(bool, tag = "9")]
    pub fbjhgpdkbgm: bool,
    #[prost(uint32, tag = "10")]
    pub aiplflibpkj: u32,
    #[prost(uint32, tag = "5")]
    pub cdinhfhbmog: u32,
    #[prost(uint32, tag = "7")]
    pub jedjbedkcji: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gpnjmehndmn {
    #[prost(bool, tag = "9")]
    pub fbjhgpdkbgm: bool,
    #[prost(uint32, tag = "14")]
    pub hipjhpjolbe: u32,
    #[prost(uint32, tag = "1")]
    pub japdcmjpiej: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fbhnfjcnhml {
    #[prost(uint32, tag = "10")]
    pub japdcmjpiej: u32,
    #[prost(bool, tag = "1")]
    pub fbjhgpdkbgm: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bmnmbpnbbhm {
    #[prost(bool, tag = "14")]
    pub pgcbeoleioo: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lhadmkcgcko {
    #[prost(message, optional, tag = "11")]
    pub jmidlldkjbi: ::core::option::Option<Cgjnhnmamdh>,
    #[prost(message, optional, tag = "5")]
    pub jibdgcfcdio: ::core::option::Option<Nkidddpflje>,
    #[prost(message, optional, tag = "14")]
    pub ijbphigkmhf: ::core::option::Option<Aggmhdjgfdi>,
    #[prost(message, optional, tag = "7")]
    pub lmpgbonbhgn: ::core::option::Option<Bmnmbpnbbhm>,
    #[prost(message, optional, tag = "6")]
    pub bdjebpnjelp: ::core::option::Option<Fbnjofcemil>,
    #[prost(message, optional, tag = "4")]
    pub lineup: ::core::option::Option<Omdefbabnnb>,
    #[prost(message, optional, tag = "3")]
    pub kkobbenpfph: ::core::option::Option<Fnijjhaenbl>,
    #[prost(message, optional, tag = "12")]
    pub hpdbjalemmo: ::core::option::Option<Kaajbaoakbo>,
    #[prost(message, optional, tag = "2")]
    pub level: ::core::option::Option<Gekleellcbf>,
    #[prost(message, optional, tag = "8")]
    pub lkkfhfdpfke: ::core::option::Option<Kcacnhcadec>,
    #[prost(message, optional, tag = "15")]
    pub cpiogjkfech: ::core::option::Option<Findafkpoof>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gekleellcbf {
    #[prost(bool, tag = "2")]
    pub ejoijgclcjo: bool,
    #[prost(bool, tag = "12")]
    pub lgbohdicfpk: bool,
    #[prost(message, repeated, tag = "1")]
    pub ahooafgdehf: ::prost::alloc::vec::Vec<Babhbomomdf>,
    #[prost(enumeration = "Akkhkmecafl", tag = "7")]
    pub reason: i32,
    #[prost(uint32, tag = "15")]
    pub lfcdodfmhhn: u32,
    #[prost(enumeration = "Ogadimmljhn", tag = "3")]
    pub status: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Aggmhdjgfdi {
    #[prost(uint32, tag = "1")]
    pub klgmnchbicp: u32,
    #[prost(uint32, tag = "10")]
    pub ognhpkojhjp: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fnijjhaenbl {
    #[prost(uint32, repeated, tag = "9")]
    pub dimhpbcpnlc: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Babhbomomdf {
    #[prost(uint32, tag = "2")]
    pub ogldnefkndo: u32,
    #[prost(enumeration = "Odbnigdlncf", tag = "11")]
    pub status: i32,
    #[prost(uint32, tag = "15")]
    pub bhpgjcicmjm: u32,
    #[prost(uint32, tag = "7")]
    pub ppjbgnbmkpm: u32,
    #[prost(message, repeated, tag = "6")]
    pub mnfjeiininl: ::prost::alloc::vec::Vec<Lhomiedaoid>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lhomiedaoid {
    #[prost(enumeration = "Lmiknfdlffo", tag = "8")]
    pub status: i32,
    #[prost(uint32, tag = "3")]
    pub akdleblpbmd: u32,
    #[prost(uint32, tag = "11")]
    pub jjlogicpoao: u32,
    #[prost(uint32, tag = "7")]
    pub eipnnejnnkj: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Beneiabjkjj {
    #[prost(bool, tag = "13")]
    pub ejoijgclcjo: bool,
    #[prost(uint32, repeated, tag = "1")]
    pub base_avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "5")]
    pub dbahfefglmd: u32,
    #[prost(bool, tag = "9")]
    pub lgbohdicfpk: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jhdpekdnlja {
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(message, optional, tag = "11")]
    pub bhmhlpchklg: ::core::option::Option<Cfcdhlpoogc>,
    #[prost(uint32, tag = "1")]
    pub khjcgnllfoh: u32,
    #[prost(message, optional, tag = "8")]
    pub lcoclenjjai: ::core::option::Option<Fjemjbnajfj>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bghmeobmold {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lihhhjpdfjp {
    #[prost(message, optional, tag = "13")]
    pub lcoclenjjai: ::core::option::Option<Fjemjbnajfj>,
    #[prost(message, optional, tag = "7")]
    pub bhmhlpchklg: ::core::option::Option<Cfcdhlpoogc>,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Eakflbegfoc {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Klbfiaedcka {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(message, optional, tag = "12")]
    pub lcoclenjjai: ::core::option::Option<Fjemjbnajfj>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pgajdcgcldk {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jhllljajkep {
    #[prost(message, optional, tag = "8")]
    pub embagmmhipa: ::core::option::Option<LineupInfo>,
    #[prost(message, optional, tag = "4")]
    pub clkhpondddo: ::core::option::Option<Kclchjmnpgl>,
    #[prost(message, optional, tag = "10")]
    pub bhmhlpchklg: ::core::option::Option<Cfcdhlpoogc>,
    #[prost(message, optional, tag = "15")]
    pub pfoepfphfnj: ::core::option::Option<Fbhnfjcnhml>,
    #[prost(message, optional, tag = "2")]
    pub cjcojamleel: ::core::option::Option<Nkpkiaamodg>,
    #[prost(message, optional, tag = "1")]
    pub gcglnkfdkkn: ::core::option::Option<Nnijcdkhpkl>,
    #[prost(message, optional, tag = "13")]
    pub kgciaiafibe: ::core::option::Option<Gpnjmehndmn>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fokbkliafol {
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(message, optional, tag = "9")]
    pub lcoclenjjai: ::core::option::Option<Fjemjbnajfj>,
    #[prost(message, optional, tag = "14")]
    pub njnjebodmnl: ::core::option::Option<Jhllljajkep>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hcbpgmhlbpn {
    #[prost(uint32, tag = "3")]
    pub fllablfbeik: u32,
    #[prost(uint32, tag = "10")]
    pub bhpgjcicmjm: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cdglinbmgnk {
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(message, optional, tag = "9")]
    pub lcoclenjjai: ::core::option::Option<Fjemjbnajfj>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ehoiefkoagf {
    #[prost(uint32, tag = "8")]
    pub lfcdodfmhhn: u32,
    #[prost(uint32, tag = "15")]
    pub fllablfbeik: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jpagijlidlh {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(message, optional, tag = "9")]
    pub lcoclenjjai: ::core::option::Option<Fjemjbnajfj>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Edlkhklmefn {
    #[prost(uint32, tag = "7")]
    pub lfcdodfmhhn: u32,
    #[prost(message, repeated, tag = "5")]
    pub ahooafgdehf: ::prost::alloc::vec::Vec<Babhbomomdf>,
    #[prost(enumeration = "Ogadimmljhn", tag = "12")]
    pub status: i32,
    #[prost(enumeration = "Akkhkmecafl", tag = "6")]
    pub reason: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dhmmalpjoeo {
    #[prost(uint32, tag = "5")]
    pub acgkfedndfh: u32,
    #[prost(uint32, repeated, tag = "15")]
    pub lopmhjfbhim: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cmjjojdpfce {
    #[prost(message, optional, tag = "9")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(uint32, tag = "3")]
    pub exp: u32,
    #[prost(uint32, repeated, tag = "12")]
    pub ckbmgabeego: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pndlkbfadjj {
    #[prost(uint32, tag = "14")]
    pub exp: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ahaamlbkfhf {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Olkfphpbpdl {
    #[prost(uint32, repeated, tag = "1")]
    pub hdmdaodjacb: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, tag = "8")]
    pub knbdpfeidnm: bool,
    #[prost(uint32, tag = "7")]
    pub dbahfefglmd: u32,
    #[prost(bool, tag = "2")]
    pub gmopljjgbpo: bool,
    #[prost(bool, tag = "14")]
    pub biifelfegnk: bool,
    #[prost(bool, tag = "13")]
    pub is_taken_reward: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lhaeabojgop {
    #[prost(bool, tag = "14")]
    pub gpodhhaohnp: bool,
    #[prost(uint32, tag = "8")]
    pub lfpccpoljpc: u32,
    #[prost(uint32, tag = "5")]
    pub khjcgnllfoh: u32,
    #[prost(int64, tag = "12")]
    pub end_time: i64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ndnkbaggdhd {
    #[prost(uint32, tag = "2")]
    pub exp: u32,
    #[prost(uint32, repeated, tag = "9")]
    pub ckbmgabeego: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Boicekfmcic {
    #[prost(uint32, tag = "7")]
    pub bjceklknlcd: u32,
    #[prost(message, optional, tag = "5")]
    pub ckmahdgiboh: ::core::option::Option<Imjmgeenceh>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jigdnfdnojd {
    #[prost(uint32, tag = "5")]
    pub handcdpibld: u32,
    #[prost(bool, tag = "11")]
    pub knbdpfeidnm: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pmbnjoonhpa {
    #[prost(uint32, tag = "8")]
    pub kaeojcobihc: u32,
    #[prost(uint32, tag = "15")]
    pub acgkfedndfh: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kgdofadndaj {
    #[prost(uint32, repeated, tag = "4")]
    pub kcdlmnincge: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "2")]
    pub boflhofkacn: u32,
    #[prost(uint32, repeated, tag = "1")]
    pub bkgjpcclidn: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "15")]
    pub ppconkkpipm: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "6")]
    pub idoecnpkgce: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "13")]
    pub fajcnmekknn: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "7")]
    pub nffbjbbcdmg: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kclchjmnpgl {
    #[prost(uint32, tag = "15")]
    pub ngiambeihpi: u32,
    #[prost(uint32, tag = "9")]
    pub ofgbjcccike: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Chgggegamdi {
    #[prost(message, optional, tag = "9")]
    pub jdbmbikpbjb: ::core::option::Option<Lhaeabojgop>,
    #[prost(message, repeated, tag = "6")]
    pub gmopekcolbe: ::prost::alloc::vec::Vec<Cjpkpjfjkdg>,
    #[prost(message, optional, tag = "13")]
    pub hndbkklomlc: ::core::option::Option<Ndnkbaggdhd>,
    #[prost(message, optional, tag = "1")]
    pub ehobbjmedee: ::core::option::Option<Boicekfmcic>,
    #[prost(message, optional, tag = "11")]
    pub lkcefcljcbm: ::core::option::Option<Kclchjmnpgl>,
    #[prost(message, repeated, tag = "5")]
    pub dimgdinccji: ::prost::alloc::vec::Vec<Jigdnfdnojd>,
    #[prost(message, repeated, tag = "4")]
    pub jidjeamdkde: ::prost::alloc::vec::Vec<Olkfphpbpdl>,
    #[prost(message, optional, tag = "12")]
    pub llaoogchhdk: ::core::option::Option<Gigpoffbieo>,
    #[prost(message, optional, tag = "2")]
    pub iakcmplpoee: ::core::option::Option<Kgdofadndaj>,
    #[prost(message, optional, tag = "15")]
    pub fejgmnnfflg: ::core::option::Option<Pmbnjoonhpa>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ekmabilmfgp {
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(message, optional, tag = "8")]
    pub bhmhlpchklg: ::core::option::Option<Cfcdhlpoogc>,
    #[prost(message, optional, tag = "10")]
    pub lagbgldlgcb: ::core::option::Option<Chgggegamdi>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Igganjclbgc {
    #[prost(message, repeated, tag = "2")]
    pub jidjeamdkde: ::prost::alloc::vec::Vec<Olkfphpbpdl>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cjpkpjfjkdg {
    #[prost(message, optional, tag = "15")]
    pub fejgmnnfflg: ::core::option::Option<Pmbnjoonhpa>,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    #[prost(int64, tag = "5")]
    pub end_time: i64,
    #[prost(uint32, tag = "6")]
    pub khncedgfpgl: u32,
    #[prost(int64, tag = "13")]
    pub time: i64,
    #[prost(message, optional, tag = "14")]
    pub bhmhlpchklg: ::core::option::Option<Cfcdhlpoogc>,
    #[prost(message, optional, tag = "12")]
    pub data: ::core::option::Option<Bkffnnaiodc>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bkffnnaiodc {
    #[prost(message, repeated, tag = "8")]
    pub ckgfonmaeko: ::prost::alloc::vec::Vec<Gjoibmfanhl>,
    #[prost(message, repeated, tag = "15")]
    pub buff_list: ::prost::alloc::vec::Vec<Ffamnkoaihf>,
    #[prost(uint32, tag = "14")]
    pub cpiogjkfech: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jaikokahclg {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ilmjeobpdlk {
    #[prost(message, repeated, tag = "2")]
    pub edjpodpnmed: ::prost::alloc::vec::Vec<Cjpkpjfjkdg>,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jhenedomodk {
    #[prost(uint32, tag = "14")]
    pub khncedgfpgl: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Eabbdeiedcb {
    #[prost(uint32, tag = "8")]
    pub khncedgfpgl: u32,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Odhiicjdkol {
    #[prost(uint32, tag = "14")]
    pub khncedgfpgl: u32,
    #[prost(string, tag = "13")]
    pub name: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Klcphcomdpf {
    #[prost(uint32, tag = "12")]
    pub khncedgfpgl: u32,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(string, tag = "7")]
    pub name: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Iomgaokiclc {
    #[prost(uint32, tag = "15")]
    pub khncedgfpgl: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ockcoecjejg {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Npegplaknpo {
    #[prost(message, optional, tag = "10")]
    pub ehobbjmedee: ::core::option::Option<Boicekfmcic>,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Opdifhcimbe {
    #[prost(uint32, tag = "4")]
    pub fagnlgfjaif: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ihgofikkcce {
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(message, optional, tag = "2")]
    pub ehobbjmedee: ::core::option::Option<Boicekfmcic>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Phgkpbpddad {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gcepboakgci {
    #[prost(message, optional, tag = "11")]
    pub ehobbjmedee: ::core::option::Option<Boicekfmcic>,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gfhomfllknd {
    #[prost(message, repeated, tag = "14")]
    pub avatar_list: ::prost::alloc::vec::Vec<Phhkombgppk>,
    #[prost(bool, tag = "1")]
    pub eiddmghlpbp: bool,
    #[prost(uint32, tag = "15")]
    pub pilmkhckmed: u32,
    #[prost(uint32, tag = "6")]
    pub ibgnlboebcg: u32,
    #[prost(uint32, tag = "10")]
    pub pbalfienefo: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ndmmgdagiai {
    #[prost(message, optional, tag = "8")]
    pub lcoclenjjai: ::core::option::Option<Fjemjbnajfj>,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dcpepjdfjgm {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mccgkglheje {
    #[prost(message, optional, tag = "7")]
    pub lcoclenjjai: ::core::option::Option<Fjemjbnajfj>,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gohlbliaddp {
    #[prost(bool, tag = "2")]
    pub eiddmghlpbp: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Magdgkdoggf {
    #[prost(message, optional, tag = "7")]
    pub battle_info: ::core::option::Option<SceneBattleInfo>,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bfihhaakhka {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gjkffjjhckf {
    #[prost(uint32, tag = "8")]
    pub pbalfienefo: u32,
    #[prost(uint32, tag = "13")]
    pub ibgnlboebcg: u32,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(uint32, tag = "14")]
    pub pilmkhckmed: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kdimmbpehip {
    #[prost(uint32, repeated, tag = "11")]
    pub gggfigcpklf: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jniaogiiogb {
    #[prost(uint32, tag = "5")]
    pub deidchamdba: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jcccacnfdjg {
    #[prost(uint32, tag = "12")]
    pub deidchamdba: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jfihgdpoiid {
    #[prost(uint32, tag = "3")]
    pub buff_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ecgochpmcpd {
    #[prost(uint32, tag = "9")]
    pub event_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Apfjlofinfj {
    #[prost(uint32, tag = "13")]
    pub ambdkdamhlh: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fidfnncjaje {
    #[prost(uint32, tag = "6")]
    pub level: u32,
    #[prost(uint32, tag = "11")]
    pub ijppknknlnl: u32,
    #[prost(uint32, tag = "14")]
    pub dchpogobdko: u32,
    #[prost(uint32, tag = "3")]
    pub iboekjbomog: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Idjepibjfdf {
    #[prost(oneof = "idjepibjfdf::Ieicdggelne", tags = "10, 4, 15, 11, 13, 12")]
    pub ieicdggelne: ::core::option::Option<idjepibjfdf::Ieicdggelne>,
}
/// Nested message and enum types in `IDJEPIBJFDF`.
pub mod idjepibjfdf {
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum Ieicdggelne {
        #[prost(message, tag = "10")]
        Iihopmeeaja(super::Jniaogiiogb),
        #[prost(message, tag = "4")]
        Gpolbdgoood(super::Jcccacnfdjg),
        #[prost(message, tag = "15")]
        Lkkfhfdpfke(super::Jfihgdpoiid),
        #[prost(message, tag = "11")]
        Nfldodiabcl(super::Ecgochpmcpd),
        #[prost(message, tag = "13")]
        Hpdbjalemmo(super::Apfjlofinfj),
        #[prost(message, tag = "12")]
        Jmidlldkjbi(super::Fidfnncjaje),
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hbbpljnfjoe {
    #[prost(uint32, tag = "15")]
    pub dbahfefglmd: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mbkbnhihphh {
    #[prost(message, optional, tag = "10")]
    pub njnjebodmnl: ::core::option::Option<Jhllljajkep>,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lfeghebnlid {
    #[prost(uint32, tag = "15")]
    pub khncedgfpgl: u32,
    #[prost(string, tag = "14")]
    pub name: ::prost::alloc::string::String,
    #[prost(uint32, tag = "10")]
    pub dbahfefglmd: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Knfnpchjnea {
    #[prost(message, optional, tag = "9")]
    pub ohhjkgfofhb: ::core::option::Option<Cjpkpjfjkdg>,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(message, optional, tag = "2")]
    pub gfonfdbfbna: ::core::option::Option<ItemList>,
    #[prost(message, optional, tag = "10")]
    pub lcoclenjjai: ::core::option::Option<Fjemjbnajfj>,
    #[prost(message, optional, tag = "12")]
    pub jplaapjccbh: ::core::option::Option<ItemList>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Aahkkcdiddl {
    #[prost(message, optional, tag = "11")]
    pub jdbmbikpbjb: ::core::option::Option<Lhaeabojgop>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mkghijogpej {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fgpheaekdfk {
    #[prost(message, optional, tag = "5")]
    pub kgciaiafibe: ::core::option::Option<Gpnjmehndmn>,
    #[prost(message, optional, tag = "15")]
    pub pfoepfphfnj: ::core::option::Option<Fbhnfjcnhml>,
    #[prost(message, optional, tag = "4")]
    pub cjcojamleel: ::core::option::Option<Nkpkiaamodg>,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(message, optional, tag = "12")]
    pub gcglnkfdkkn: ::core::option::Option<Nnijcdkhpkl>,
    #[prost(message, optional, tag = "2")]
    pub clkhpondddo: ::core::option::Option<Kclchjmnpgl>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dandbokpcod {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Khcphancilb {
    #[prost(uint32, repeated, tag = "3")]
    pub lnejmjbfllh: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "15")]
    pub hkdoclopkoh: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nogkpeibcgp {
    #[prost(message, optional, tag = "11")]
    pub gficflciejj: ::core::option::Option<ItemCostData>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kgniibgnpnc {
    #[prost(uint32, repeated, tag = "13")]
    pub base_avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "5")]
    pub interacted_prop_entity_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lhpbcldiocf {
    #[prost(message, optional, tag = "8")]
    pub gficflciejj: ::core::option::Option<ItemCostData>,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fhocchflafe {
    #[prost(message, optional, tag = "2")]
    pub lcoclenjjai: ::core::option::Option<Fjemjbnajfj>,
    #[prost(message, optional, tag = "6")]
    pub njnjebodmnl: ::core::option::Option<Jhllljajkep>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gigpoffbieo {
    #[prost(message, optional, tag = "8")]
    pub ckmahdgiboh: ::core::option::Option<Imjmgeenceh>,
    #[prost(uint32, tag = "9")]
    pub cmoghiandfl: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Nknjfcgheif {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Acnoibhnlcd {
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(message, optional, tag = "13")]
    pub llaoogchhdk: ::core::option::Option<Gigpoffbieo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lbccbgppnnd {
    #[prost(uint32, tag = "4")]
    pub fagnlgfjaif: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Caakgibcgjf {
    #[prost(message, optional, tag = "14")]
    pub llaoogchhdk: ::core::option::Option<Gigpoffbieo>,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Palmbojajce {
    #[prost(uint32, tag = "5")]
    pub ldfgifdfpcf: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Aomfjflcdon {
    #[prost(uint32, tag = "9")]
    pub kicglckbinc: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pgafadiaona {
    #[prost(uint32, tag = "9")]
    pub kicglckbinc: u32,
    #[prost(uint32, repeated, tag = "7")]
    pub bchaohddila: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(uint32, tag = "10")]
    pub gacha_random: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dfagjnnkkdm {
    #[prost(uint32, tag = "9")]
    pub gacha_random: u32,
    #[prost(uint32, tag = "11")]
    pub kicglckbinc: u32,
    #[prost(uint32, tag = "7")]
    pub ifngnhhcngl: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ahbfbjkmoco {
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(message, optional, tag = "5")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "13")]
    pub reward_display_type: u32,
    #[prost(uint32, tag = "8")]
    pub penilhglhhm: u32,
    #[prost(uint32, tag = "3")]
    pub kicglckbinc: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kjoehgljepa {
    #[prost(uint32, tag = "4")]
    pub kicglckbinc: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakeRollShopRewardScRsp {
    #[prost(message, optional, tag = "6")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "14")]
    pub group_type: u32,
    #[prost(uint32, tag = "1")]
    pub roll_shop_id: u32,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SceneActorInfo {
    #[prost(uint32, tag = "6")]
    pub uid: u32,
    #[prost(enumeration = "AvatarType", tag = "2")]
    pub avatar_type: i32,
    #[prost(uint32, tag = "13")]
    pub map_layer: u32,
    #[prost(uint32, tag = "5")]
    pub base_avatar_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct NpcMonsterRogueInfo {
    #[prost(uint32, tag = "4")]
    pub level: u32,
    #[prost(uint32, tag = "2")]
    pub ehieoodecmi: u32,
    #[prost(uint32, tag = "14")]
    pub elite_group: u32,
    #[prost(uint32, tag = "9")]
    pub hard_level_group: u32,
    #[prost(uint32, tag = "10")]
    pub dneampllfme: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Edbjjknjpfm {
    #[prost(oneof = "edbjjknjpfm::Ieicdggelne", tags = "10")]
    pub ieicdggelne: ::core::option::Option<edbjjknjpfm::Ieicdggelne>,
}
/// Nested message and enum types in `EDBJJKNJPFM`.
pub mod edbjjknjpfm {
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum Ieicdggelne {
        #[prost(message, tag = "10")]
        Loddncnpano(super::NpcMonsterRogueInfo),
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SceneNpcMonsterInfo {
    #[prost(uint32, tag = "6")]
    pub monster_list: u32,
    #[prost(message, optional, tag = "1")]
    pub extra_info: ::core::option::Option<Edbjjknjpfm>,
    #[prost(uint32, tag = "15")]
    pub scene_event_id: u32,
    #[prost(bool, tag = "13")]
    pub idpjidnlehh: bool,
    #[prost(bool, tag = "2")]
    pub mpfedfbkkdf: bool,
    #[prost(uint32, tag = "9")]
    pub world_level: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct NpcDialogueEventParam {
    #[prost(uint32, tag = "11")]
    pub ddjpkflbigf: u32,
    #[prost(uint32, tag = "14")]
    pub gddcgekojoi: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Achopaofigl {
    #[prost(message, repeated, tag = "9")]
    pub hpeoadajiee: ::prost::alloc::vec::Vec<NpcDialogueEventParam>,
    #[prost(bool, tag = "5")]
    pub eccdglbkeje: bool,
    #[prost(bool, tag = "2")]
    pub lomilomcaom: bool,
    #[prost(uint32, tag = "8")]
    pub bnclfoabaip: u32,
    #[prost(uint32, tag = "12")]
    pub kapmkjghiei: u32,
    #[prost(uint32, tag = "7")]
    pub onlhfcoglal: u32,
    #[prost(uint32, tag = "14")]
    pub cdjecokfiof: u32,
    #[prost(bool, tag = "15")]
    pub jenfhombkke: bool,
    #[prost(map = "uint32, uint32", tag = "10")]
    pub kjcbneindhl: ::std::collections::HashMap<u32, u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Clfacbcgifl {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kkfkkppldai {
    #[prost(uint32, tag = "5")]
    pub bledoknmjdf: u32,
    #[prost(uint32, tag = "9")]
    pub amlkpohdeln: u32,
    #[prost(bool, tag = "15")]
    pub is_meet: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NpcExtraInfo {
    #[prost(oneof = "npc_extra_info::Ieicdggelne", tags = "14, 12, 6")]
    pub ieicdggelne: ::core::option::Option<npc_extra_info::Ieicdggelne>,
}
/// Nested message and enum types in `NpcExtraInfo`.
pub mod npc_extra_info {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Ieicdggelne {
        #[prost(message, tag = "14")]
        Loddncnpano(super::Achopaofigl),
        #[prost(message, tag = "12")]
        Jkjopmefcbo(super::Kkfkkppldai),
        #[prost(message, tag = "6")]
        Pnbjjbjnmgl(super::Clfacbcgifl),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SceneNpcInfo {
    #[prost(message, optional, tag = "13")]
    pub extra_info: ::core::option::Option<NpcExtraInfo>,
    #[prost(uint32, tag = "3")]
    pub npc_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Anikplfekmg {
    #[prost(uint32, tag = "13")]
    pub bbnfiifmgak: u32,
    #[prost(uint32, tag = "2")]
    pub ccdepapjnko: u32,
    #[prost(uint32, tag = "15")]
    pub mdbedjldpgm: u32,
    #[prost(uint32, tag = "5")]
    pub jjlogicpoao: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PropAeonInfo {
    #[prost(uint32, tag = "1")]
    pub dialogue_group_id: u32,
    #[prost(uint32, tag = "12")]
    pub add_exp: u32,
    #[prost(uint32, tag = "6")]
    pub aeon_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Aoiheklndid {
    #[prost(bool, tag = "3")]
    pub algafomniia: bool,
    #[prost(bool, tag = "13")]
    pub akcghbfgbcc: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hdocjdhlapd {
    #[prost(uint32, tag = "13")]
    pub eipnnejnnkj: u32,
    #[prost(uint32, tag = "1")]
    pub nbocipljmhi: u32,
    #[prost(bool, tag = "2")]
    pub pjdnhbhddha: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jeghkicdaoo {
    #[prost(bool, tag = "12")]
    pub pjdnhbhddha: bool,
    #[prost(uint32, tag = "11")]
    pub nbocipljmhi: u32,
    #[prost(uint32, tag = "13")]
    pub eipnnejnnkj: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Akmciglbjad {
    #[prost(uint32, tag = "10")]
    pub hobjminnbop: u32,
    #[prost(bool, tag = "15")]
    pub gldjnhiggje: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eekihhefaic {
    #[prost(uint32, tag = "7")]
    pub pmjaippjfkc: u32,
    #[prost(message, repeated, tag = "15")]
    pub gnoncmjmcbf: ::prost::alloc::vec::Vec<Akmciglbjad>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eigoiecdmna {
    #[prost(message, optional, tag = "7")]
    pub ffmifpfibdd: ::core::option::Option<Eomodelgnhe>,
    #[prost(uint32, tag = "4")]
    pub mgdmhlgjhoc: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ojckhbbbfef {
    #[prost(uint32, tag = "10")]
    pub kigaehdgklm: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lnojkicccme {
    #[prost(bytes = "vec", tag = "11")]
    pub ddcjbfloame: ::prost::alloc::vec::Vec<u8>,
    #[prost(bool, tag = "15")]
    pub mbankgmdfmj: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PropExtraInfo {
    #[prost(message, optional, tag = "1")]
    pub timeline_info: ::core::option::Option<Lnojkicccme>,
    #[prost(oneof = "prop_extra_info::InfoCase", tags = "4, 13, 8, 2, 3, 14, 12, 10")]
    pub info_case: ::core::option::Option<prop_extra_info::InfoCase>,
}
/// Nested message and enum types in `PropExtraInfo`.
pub mod prop_extra_info {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum InfoCase {
        #[prost(message, tag = "4")]
        RogueInfo(super::Anikplfekmg),
        #[prost(message, tag = "13")]
        AeonInfo(super::PropAeonInfo),
        #[prost(message, tag = "8")]
        ChessRogueInfo(super::Aoiheklndid),
        #[prost(message, tag = "2")]
        RogueTournDoorInfo(super::Hdocjdhlapd),
        #[prost(message, tag = "3")]
        RogueTournWorkbenchInfo(super::Eekihhefaic),
        #[prost(message, tag = "14")]
        RogueGambleMachineInfo(super::Eigoiecdmna),
        #[prost(message, tag = "12")]
        RogueCurseChestInfo(super::Ojckhbbbfef),
        #[prost(message, tag = "10")]
        RogueMagicDoorInfo(super::Jeghkicdaoo),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ScenePropInfo {
    #[prost(uint64, tag = "14")]
    pub create_time_ms: u64,
    #[prost(uint32, tag = "7")]
    pub prop_id: u32,
    #[prost(message, optional, tag = "1")]
    pub extra_info: ::core::option::Option<PropExtraInfo>,
    #[prost(uint32, tag = "2")]
    pub prop_state: u32,
    #[prost(uint32, tag = "9")]
    pub life_time_ms: u32,
    #[prost(string, repeated, tag = "15")]
    pub trigger_name_list: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SceneSummonUnitInfo {
    #[prost(int32, tag = "15")]
    pub life_time_ms: i32,
    #[prost(string, repeated, tag = "11")]
    pub trigger_name_list: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(uint32, tag = "4")]
    pub caster_entity_id: u32,
    #[prost(uint64, tag = "7")]
    pub create_time_ms: u64,
    #[prost(uint32, tag = "13")]
    pub attach_entity_id: u32,
    #[prost(uint32, tag = "5")]
    pub summon_unit_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SceneEntityInfo {
    #[prost(message, optional, tag = "11")]
    pub actor: ::core::option::Option<SceneActorInfo>,
    #[prost(message, optional, tag = "4")]
    pub npc_monster: ::core::option::Option<SceneNpcMonsterInfo>,
    #[prost(message, optional, tag = "7")]
    pub npc: ::core::option::Option<SceneNpcInfo>,
    #[prost(message, optional, tag = "12")]
    pub prop: ::core::option::Option<ScenePropInfo>,
    #[prost(message, optional, tag = "5")]
    pub summon_unit: ::core::option::Option<SceneSummonUnitInfo>,
    #[prost(uint32, tag = "14")]
    pub group_id: u32,
    #[prost(uint32, tag = "3")]
    pub inst_id: u32,
    #[prost(uint32, tag = "1")]
    pub entity_id: u32,
    #[prost(message, optional, tag = "13")]
    pub motion: ::core::option::Option<MotionInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BuffInfo {
    #[prost(uint32, tag = "6")]
    pub count: u32,
    #[prost(uint32, tag = "1")]
    pub level: u32,
    #[prost(map = "string, float", tag = "14")]
    pub dynamic_values: ::std::collections::HashMap<::prost::alloc::string::String, f32>,
    #[prost(uint64, tag = "5")]
    pub add_time_ms: u64,
    #[prost(uint32, tag = "8")]
    pub buff_id: u32,
    #[prost(uint32, tag = "10")]
    pub base_avatar_id: u32,
    #[prost(float, tag = "7")]
    pub life_time: f32,
    #[prost(uint32, tag = "12")]
    pub buff_summon_entity_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EntityBuffInfo {
    #[prost(message, repeated, tag = "6")]
    pub buff_list: ::prost::alloc::vec::Vec<BuffInfo>,
    #[prost(uint32, tag = "5")]
    pub entity_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Nomfjhmoeah {
    #[prost(uint32, tag = "2")]
    pub value: u32,
    #[prost(uint32, tag = "14")]
    pub ohdeoighiem: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CustomSaveData {
    #[prost(string, tag = "9")]
    pub aamhhecocoi: ::prost::alloc::string::String,
    #[prost(uint32, tag = "12")]
    pub group_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kegmihdfpmm {
    #[prost(uint32, tag = "6")]
    pub blogjdckahm: u32,
    #[prost(uint32, tag = "2")]
    pub cppdjfkiihk: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SceneGroupInfo {
    #[prost(uint32, tag = "5")]
    pub group_id: u32,
    /// map<string, int32> HEJAMOOJBCJ = 2;
    #[prost(uint32, tag = "1")]
    pub state: u32,
    #[prost(message, repeated, tag = "10")]
    pub entity_list: ::prost::alloc::vec::Vec<SceneEntityInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ClientGroupInfo {
    #[prost(uint32, tag = "12")]
    pub group_id: u32,
    #[prost(uint32, tag = "5")]
    pub state: u32,
    #[prost(bool, tag = "10")]
    pub is_default: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MissionStatusBySceneInfo {
    #[prost(message, repeated, tag = "9")]
    pub sub_mission_status_list: ::prost::alloc::vec::Vec<Mission>,
    #[prost(uint32, repeated, tag = "10")]
    pub ndnonhfimfi: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "14")]
    pub icbikgmghik: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "4")]
    pub main_mission_mcv_list: ::prost::alloc::vec::Vec<MainMissionCustomValue>,
    #[prost(uint32, repeated, tag = "2")]
    pub finished_main_mission_id_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SceneInfo {
    #[prost(map = "uint32, message", tag = "9")]
    pub mpehibkeobe: ::std::collections::HashMap<u32, Kegmihdfpmm>,
    #[prost(message, repeated, tag = "944")]
    pub client_group_list: ::prost::alloc::vec::Vec<ClientGroupInfo>,
    #[prost(uint32, repeated, tag = "3")]
    pub lighten_section_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "8")]
    pub plane_id: u32,
    #[prost(map = "string, int32", tag = "997")]
    pub floor_saved_data: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        i32,
    >,
    #[prost(message, repeated, tag = "5")]
    pub entity_buff_info_list: ::prost::alloc::vec::Vec<EntityBuffInfo>,
    #[prost(uint32, tag = "61")]
    pub dimension_id: u32,
    #[prost(uint32, tag = "14")]
    pub floor_id: u32,
    #[prost(uint32, tag = "1467")]
    pub game_story_line_id: u32,
    #[prost(message, repeated, tag = "10")]
    pub entity_list: ::prost::alloc::vec::Vec<SceneEntityInfo>,
    #[prost(message, optional, tag = "713")]
    pub scene_mission_info: ::core::option::Option<MissionStatusBySceneInfo>,
    #[prost(uint32, repeated, tag = "1496")]
    pub djbibijmebh: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "4")]
    pub default_pos: u32,
    #[prost(message, repeated, tag = "2")]
    pub gkpnkmeeibm: ::prost::alloc::vec::Vec<CustomSaveData>,
    #[prost(message, repeated, tag = "328")]
    pub scene_group_list: ::prost::alloc::vec::Vec<SceneGroupInfo>,
    #[prost(message, repeated, tag = "1")]
    pub icclnhkdbbm: ::prost::alloc::vec::Vec<BuffInfo>,
    #[prost(uint32, tag = "1356")]
    pub content_id: u32,
    #[prost(uint32, tag = "12")]
    pub entry_id: u32,
    #[prost(uint32, tag = "6")]
    pub leader_entity_id: u32,
    #[prost(uint32, tag = "7")]
    pub world_id: u32,
    #[prost(uint32, tag = "15")]
    pub game_mode_type: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EntityMotion {
    #[prost(message, optional, tag = "9")]
    pub motion: ::core::option::Option<MotionInfo>,
    #[prost(uint32, tag = "8")]
    pub map_layer: u32,
    #[prost(uint32, tag = "5")]
    pub entity_id: u32,
    #[prost(bool, tag = "7")]
    pub nfopikdkpgg: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SceneEntityMoveCsReq {
    #[prost(uint32, tag = "2")]
    pub entry_id: u32,
    #[prost(uint64, tag = "13")]
    pub pemlejjbaje: u64,
    #[prost(message, repeated, tag = "4")]
    pub entity_motion_list: ::prost::alloc::vec::Vec<EntityMotion>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SceneEntityMoveScRsp {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(message, optional, tag = "14")]
    pub download_data: ::core::option::Option<ClientDownloadData>,
    #[prost(message, repeated, tag = "2")]
    pub entity_motion_list: ::prost::alloc::vec::Vec<EntityMotion>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SceneEntityMoveScNotify {
    #[prost(message, optional, tag = "8")]
    pub motion: ::core::option::Option<MotionInfo>,
    #[prost(uint32, tag = "6")]
    pub entity_id: u32,
    #[prost(uint32, tag = "14")]
    pub default_pos: u32,
    #[prost(uint32, tag = "1")]
    pub entry_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SceneUpdatePositionVersionNotify {
    #[prost(uint32, tag = "3")]
    pub pos_version: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct InteractPropCsReq {
    #[prost(uint32, tag = "7")]
    pub prop_entity_id: u32,
    #[prost(uint32, tag = "12")]
    pub interact_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct InteractPropScRsp {
    #[prost(uint32, tag = "2")]
    pub prop_state: u32,
    #[prost(uint32, tag = "14")]
    pub prop_entity_id: u32,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Daehnkjjidi {
    #[prost(uint64, tag = "15")]
    pub miilnlhddjm: u64,
    #[prost(bool, tag = "13")]
    pub is_close_map: bool,
    #[prost(message, optional, tag = "7")]
    pub djnfcmfddoa: ::core::option::Option<Lnojkicccme>,
    #[prost(uint32, tag = "8")]
    pub prop_entity_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lahioibkpgo {
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(uint32, tag = "12")]
    pub prop_entity_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HitMonsterBattleInfo {
    #[prost(uint32, tag = "4")]
    pub gbllcemjjfi: u32,
    #[prost(enumeration = "MonsterBattleType", tag = "10")]
    pub endjgmlkpbp: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DynamicValue {
    #[prost(float, tag = "7")]
    pub value: f32,
    #[prost(string, tag = "3")]
    pub key: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AssistMonsterEntityInfo {
    #[prost(uint32, repeated, tag = "3")]
    pub hfanpojacjo: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SceneCastSkillCsReq {
    #[prost(uint32, tag = "1")]
    pub hchdhljcije: u32,
    #[prost(uint32, repeated, tag = "4")]
    pub assist_monster_entity_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "14")]
    pub attacked_group_id: u32,
    #[prost(message, repeated, tag = "10")]
    pub assist_monster_entity_info: ::prost::alloc::vec::Vec<AssistMonsterEntityInfo>,
    #[prost(enumeration = "SkillExtraTag", repeated, tag = "11")]
    pub skill_extra_tags: ::prost::alloc::vec::Vec<i32>,
    #[prost(uint32, tag = "12")]
    pub skill_index: u32,
    #[prost(uint32, tag = "8")]
    pub caster_id: u32,
    #[prost(message, optional, tag = "9")]
    pub target_motion: ::core::option::Option<MotionInfo>,
    #[prost(message, repeated, tag = "3")]
    pub dynamic_values: ::prost::alloc::vec::Vec<DynamicValue>,
    #[prost(uint32, repeated, tag = "2")]
    pub hit_target_entity_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(string, tag = "15")]
    pub maze_ability_str: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SceneCastSkillScRsp {
    #[prost(uint32, tag = "15")]
    pub attacked_group_id: u32,
    #[prost(message, repeated, tag = "13")]
    pub monster_battle_info: ::prost::alloc::vec::Vec<HitMonsterBattleInfo>,
    #[prost(message, optional, tag = "9")]
    pub battle_info: ::core::option::Option<SceneBattleInfo>,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SceneCastSkillCostMpCsReq {
    #[prost(uint32, tag = "3")]
    pub skill_index: u32,
    #[prost(uint32, tag = "8")]
    pub attacked_group_id: u32,
    #[prost(uint32, tag = "1")]
    pub caster_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SceneCastSkillCostMpScRsp {
    #[prost(uint32, tag = "7")]
    pub attacked_group_id: u32,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SceneCastSkillMpUpdateScNotify {
    #[prost(uint32, tag = "13")]
    pub mp: u32,
    #[prost(uint32, tag = "3")]
    pub attacked_group_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SceneEnterStageCsReq {
    #[prost(bool, tag = "15")]
    pub pmjahilblfl: bool,
    #[prost(uint32, tag = "1")]
    pub event_id: u32,
    #[prost(enumeration = "RebattleType", tag = "3")]
    pub rebattle_type: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SceneEnterStageScRsp {
    #[prost(message, optional, tag = "8")]
    pub battle_info: ::core::option::Option<SceneBattleInfo>,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SceneReviveAfterRebattleCsReq {
    #[prost(enumeration = "RebattleType", tag = "10")]
    pub rebattle_type: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SceneReviveAfterRebattleScRsp {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetCurSceneInfoCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetCurSceneInfoScRsp {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(message, optional, tag = "8")]
    pub scene: ::core::option::Option<SceneInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EntityBuffChangeInfo {
    #[prost(uint32, tag = "5")]
    pub attacked_group_id: u32,
    #[prost(enumeration = "SceneEntityBuffChangeType", tag = "15")]
    pub reason: i32,
    #[prost(uint32, tag = "2")]
    pub entity_id: u32,
    #[prost(oneof = "entity_buff_change_info::Ieicdggelne", tags = "14, 8")]
    pub ieicdggelne: ::core::option::Option<entity_buff_change_info::Ieicdggelne>,
}
/// Nested message and enum types in `EntityBuffChangeInfo`.
pub mod entity_buff_change_info {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Ieicdggelne {
        #[prost(message, tag = "14")]
        Pcjlghbijcm(super::BuffInfo),
        #[prost(uint32, tag = "8")]
        Hcahekmgean(u32),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SyncEntityBuffChangeListScNotify {
    #[prost(message, repeated, tag = "6")]
    pub entity_buff_change_list: ::prost::alloc::vec::Vec<EntityBuffChangeInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bipgpkhcjng {
    #[prost(uint32, tag = "1")]
    pub floor_id: u32,
    #[prost(uint32, tag = "13")]
    pub prop_entity_id: u32,
    #[prost(uint32, tag = "3")]
    pub plane_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kbeojiajbho {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gpopgofkhfj {
    #[prost(int64, tag = "9")]
    pub jbicindpigm: i64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Nkfbpfnhcdl {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ebkdcidefeg {
    #[prost(message, optional, tag = "5")]
    pub scene: ::core::option::Option<SceneInfo>,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EnterSectionCsReq {
    #[prost(uint32, tag = "3")]
    pub section_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EnterSectionScRsp {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bbnoindefkd {
    #[prost(uint32, tag = "11")]
    pub entity_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bgmhibgbjmj {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RecoverAllLineupCsReq {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RecoverAllLineupScRsp {
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SavePointsInfoNotify {
    #[prost(int64, tag = "2")]
    pub refresh_time: i64,
    #[prost(uint32, tag = "12")]
    pub valid_times: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StartCocoonStageCsReq {
    #[prost(uint32, tag = "3")]
    pub world_level: u32,
    #[prost(uint32, tag = "12")]
    pub wave: u32,
    #[prost(uint32, tag = "5")]
    pub prop_entity_id: u32,
    #[prost(uint32, tag = "4")]
    pub cocoon_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StartCocoonStageScRsp {
    #[prost(message, optional, tag = "6")]
    pub battle_info: ::core::option::Option<SceneBattleInfo>,
    #[prost(uint32, tag = "1")]
    pub prop_entity_id: u32,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(uint32, tag = "15")]
    pub wave: u32,
    #[prost(uint32, tag = "11")]
    pub cocoon_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ffihdggaekn {
    #[prost(bool, tag = "7")]
    pub mjjmpiflmkf: bool,
    #[prost(message, optional, tag = "13")]
    pub motion: ::core::option::Option<MotionInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mnildbfihnm {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetClientPausedCsReq {
    #[prost(bool, tag = "11")]
    pub is_paused: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetClientPausedScRsp {
    #[prost(bool, tag = "11")]
    pub is_paused: bool,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Plfdilgnllh {
    #[prost(uint32, tag = "12")]
    pub entity_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jbedhcjjdgc {
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(uint32, tag = "3")]
    pub entity_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jpfhhinhohi {
    #[prost(uint32, tag = "1")]
    pub world_level: u32,
    #[prost(uint32, tag = "4")]
    pub entity_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lnphfebjkaa {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(uint32, tag = "9")]
    pub world_level: u32,
    #[prost(uint32, tag = "13")]
    pub entity_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Heejkkagimo {
    #[prost(uint32, tag = "1")]
    pub jlafldchdgj: u32,
    #[prost(uint32, tag = "13")]
    pub equip_avatar_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fpdakbkbjkf {
    #[prost(uint32, tag = "2")]
    pub eidnigifnaa: u32,
    #[prost(message, repeated, tag = "11")]
    pub bcglmlabogf: ::prost::alloc::vec::Vec<Heejkkagimo>,
    #[prost(bool, tag = "7")]
    pub ghdepancgpf: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Niikljibjep {
    #[prost(message, optional, tag = "1")]
    pub gigkdapgnme: ::core::option::Option<Nomfjhmoeah>,
    #[prost(uint32, tag = "11")]
    pub floor_id: u32,
    #[prost(uint32, tag = "9")]
    pub plane_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oklenhliigg {
    #[prost(string, tag = "15")]
    pub aamhhecocoi: ::prost::alloc::string::String,
    #[prost(uint32, tag = "1")]
    pub entry_id: u32,
    #[prost(uint32, tag = "8")]
    pub group_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Aiafojmjhkk {
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(uint32, tag = "11")]
    pub group_id: u32,
    #[prost(uint32, tag = "8")]
    pub entry_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Igpopojdloh {
    #[prost(uint32, tag = "3")]
    pub stage_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hakndgdaeof {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(uint32, tag = "8")]
    pub stage_id: u32,
    #[prost(message, optional, tag = "3")]
    pub battle_info: ::core::option::Option<SceneBattleInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mfkpbbgbiao {
    #[prost(uint32, tag = "5")]
    pub entry_id: u32,
    #[prost(message, optional, tag = "9")]
    pub dlbabhbnfcf: ::core::option::Option<EntityMotion>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mbjfpbahegb {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(message, optional, tag = "6")]
    pub dlbabhbnfcf: ::core::option::Option<EntityMotion>,
    #[prost(uint32, tag = "10")]
    pub default_pos: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EnterSceneCsReq {
    #[prost(bool, tag = "7")]
    pub is_close_map: bool,
    #[prost(uint32, tag = "1")]
    pub game_story_line_id: u32,
    #[prost(uint32, tag = "6")]
    pub entry_id: u32,
    #[prost(uint32, tag = "4")]
    pub content_id: u32,
    #[prost(uint32, tag = "12")]
    pub teleport_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EnterSceneScRsp {
    #[prost(uint32, tag = "5")]
    pub content_id: u32,
    #[prost(bool, tag = "14")]
    pub is_close_map: bool,
    #[prost(bool, tag = "15")]
    pub is_over_map: bool,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(uint32, tag = "2")]
    pub game_story_line_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EnterSceneByServerScNotify {
    #[prost(message, optional, tag = "5")]
    pub lineup: ::core::option::Option<LineupInfo>,
    #[prost(message, optional, tag = "11")]
    pub scene: ::core::option::Option<SceneInfo>,
    #[prost(enumeration = "EnterSceneReason", tag = "13")]
    pub reason: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ScenePlaneEventScNotify {
    /// ItemList EPOJGHEBPKC = 11;
    /// ItemList MHDJADHNDKD = 12;
    /// ItemList get_item_list_wrong = 1;
    /// ItemList MEEKFPCOBAI = 7;
    #[prost(message, optional, tag = "11")]
    pub get_item_list: ::core::option::Option<ItemList>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetSceneMapInfoCsReq {
    #[prost(uint32, tag = "8")]
    pub entry_story_line_id: u32,
    #[prost(uint32, repeated, tag = "1")]
    pub entry_id: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, tag = "6")]
    pub igfikghllno: bool,
    #[prost(uint32, repeated, tag = "5")]
    pub entry_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "11")]
    pub content_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MazePropState {
    #[prost(uint32, tag = "13")]
    pub config_id: u32,
    #[prost(uint32, tag = "4")]
    pub group_id: u32,
    #[prost(uint32, tag = "15")]
    pub state: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MazeGroup {
    #[prost(uint32, repeated, tag = "10")]
    pub nobkeonakle: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "5")]
    pub group_id: u32,
    #[prost(bool, tag = "11")]
    pub ilbeaaoojjp: bool,
    #[prost(int64, tag = "4")]
    pub inldcclioan: i64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChestInfo {
    #[prost(enumeration = "ChestType", tag = "6")]
    pub chest_type: i32,
    #[prost(uint32, tag = "11")]
    pub igocljodfcd: u32,
    #[prost(uint32, tag = "1")]
    pub plplgfbffcl: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Npaogkfkaae {
    #[prost(uint32, tag = "10")]
    pub fljindnjphl: u32,
    #[prost(uint32, tag = "9")]
    pub fokcifjmjgl: u32,
    #[prost(uint32, tag = "6")]
    pub r#type: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SceneMapInfo {
    #[prost(message, repeated, tag = "5")]
    pub maze_prop_list: ::prost::alloc::vec::Vec<MazePropState>,
    #[prost(uint32, tag = "3")]
    pub floor_id: u32,
    #[prost(uint32, repeated, tag = "12")]
    pub unlock_teleport_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "10")]
    pub cur_map_entry_id: u32,
    #[prost(message, repeated, tag = "11")]
    pub maze_group_list: ::prost::alloc::vec::Vec<MazeGroup>,
    #[prost(message, repeated, tag = "8")]
    pub jmldmocnmhm: ::prost::alloc::vec::Vec<Npaogkfkaae>,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "4")]
    pub lighten_section_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "15")]
    pub chest_list: ::prost::alloc::vec::Vec<ChestInfo>,
    #[prost(uint32, tag = "7")]
    pub entry_id: u32,
    #[prost(uint32, tag = "9")]
    pub dimension_id: u32,
    #[prost(map = "string, int32", tag = "6")]
    pub floor_saved_data: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        i32,
    >,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetSceneMapInfoScRsp {
    #[prost(uint32, tag = "10")]
    pub entry_story_line_id: u32,
    #[prost(bool, tag = "7")]
    pub igfikghllno: bool,
    #[prost(message, repeated, tag = "12")]
    pub map_info_list: ::prost::alloc::vec::Vec<SceneMapInfo>,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(uint32, tag = "14")]
    pub content_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SyncServerSceneChangeNotify {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hkijfkjgmcm {
    #[prost(uint32, tag = "9")]
    pub eabocpnfklm: u32,
    #[prost(uint32, tag = "4")]
    pub nmglnhpanah: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jdhnnohmmef {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mdbdlpeodkd {
    #[prost(enumeration = "GameplayCounterUpdateReason", tag = "11")]
    pub reason: i32,
    #[prost(uint32, tag = "4")]
    pub blogjdckahm: u32,
    #[prost(uint32, tag = "8")]
    pub nmglnhpanah: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mfkpbciakcm {
    #[prost(uint32, tag = "5")]
    pub nmglnhpanah: u32,
    #[prost(uint32, tag = "2")]
    pub labooddaloe: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Llbmdkipmhm {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fbjocfcinko {
    #[prost(uint32, tag = "3")]
    pub floor_id: u32,
    #[prost(map = "string, int32", tag = "6")]
    pub oaifmglieep: ::std::collections::HashMap<::prost::alloc::string::String, i32>,
    #[prost(uint32, tag = "13")]
    pub dimension_id: u32,
    #[prost(uint32, tag = "4")]
    pub plane_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pcfofdpklhj {
    #[prost(uint32, repeated, tag = "2")]
    pub entry_id_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cgolbmhdaca {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "7")]
    pub unlock_teleport_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mkmamjecdah {
    #[prost(uint32, tag = "12")]
    pub kigaehdgklm: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SceneGroupEntityRefreshInfo {
    #[prost(message, optional, tag = "15")]
    pub refresh_entity_info: ::core::option::Option<SceneEntityInfo>,
    #[prost(uint32, tag = "6")]
    pub dblndmhlfpm: u32,
    #[prost(uint32, tag = "13")]
    pub delete_entity: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cmgfhbhaffb {
    #[prost(int32, tag = "3")]
    pub agfijniebkf: i32,
    #[prost(string, tag = "9")]
    pub jaibieekheg: ::prost::alloc::string::String,
    #[prost(int32, tag = "4")]
    pub dlmamkinnco: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SceneGroupRefreshInfo {
    /// repeated CMGFHBHAFFB BCCGJIHNCDN = 14;
    #[prost(enumeration = "SceneGroupRefreshType", tag = "15")]
    pub refresh_type: i32,
    #[prost(message, repeated, tag = "8")]
    pub refresh_entity_list: ::prost::alloc::vec::Vec<SceneGroupEntityRefreshInfo>,
    #[prost(uint32, tag = "9")]
    pub group_id: u32,
    #[prost(uint32, tag = "2")]
    pub state: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SceneGroupRefreshScNotify {
    /// uint32 floor_id = 5;
    ///
    /// uint32 dimension_id = 11;
    #[prost(message, repeated, tag = "14")]
    pub refresh_group_list: ::prost::alloc::vec::Vec<SceneGroupRefreshInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GroupStateInfo {
    #[prost(uint32, tag = "15")]
    pub entry_id: u32,
    #[prost(uint32, tag = "5")]
    pub group_id: u32,
    #[prost(uint32, tag = "2")]
    pub gdnopaabghf: u32,
    #[prost(uint32, tag = "9")]
    pub gfbgladjflm: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Epalkaafopl {
    #[prost(message, optional, tag = "1")]
    pub ioehgagdfjj: ::core::option::Option<GroupStateInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hdjpniadmmh {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(message, optional, tag = "2")]
    pub ioehgagdfjj: ::core::option::Option<GroupStateInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Neepailhcad {
    #[prost(message, optional, tag = "13")]
    pub ioehgagdfjj: ::core::option::Option<GroupStateInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EnteredSceneInfo {
    #[prost(uint32, tag = "3")]
    pub plane_id: u32,
    #[prost(uint32, tag = "2")]
    pub floor_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetEnteredSceneCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetEnteredSceneScRsp {
    #[prost(message, repeated, tag = "11")]
    pub entered_scene_info_list: ::prost::alloc::vec::Vec<EnteredSceneInfo>,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EnteredSceneChangeScNotify {
    #[prost(message, repeated, tag = "7")]
    pub entered_scene_info_list: ::prost::alloc::vec::Vec<EnteredSceneInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kiomieggben {
    #[prost(message, optional, tag = "8")]
    pub lndeobpihdp: ::core::option::Option<MotionInfo>,
    #[prost(uint32, repeated, tag = "13")]
    pub olpgliglhgc: ::prost::alloc::vec::Vec<u32>,
    #[prost(string, tag = "3")]
    pub kkcegaibado: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub aakolahmapg: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jgdkaeidjnd {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(string, tag = "11")]
    pub kkcegaibado: ::prost::alloc::string::String,
    #[prost(uint32, tag = "9")]
    pub aakolahmapg: u32,
    #[prost(bool, tag = "12")]
    pub jlmepobnakg: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ahmjlgkllkf {
    #[prost(uint32, tag = "8")]
    pub aakolahmapg: u32,
    #[prost(string, tag = "14")]
    pub kkcegaibado: ::prost::alloc::string::String,
    #[prost(uint32, repeated, tag = "4")]
    pub olpgliglhgc: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ppkgldlfmhb {
    #[prost(uint32, repeated, tag = "10")]
    pub hfanpojacjo: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Amhalmphadg {
    #[prost(uint32, repeated, tag = "8")]
    pub hfanpojacjo: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ndjaiefkjdc {
    #[prost(uint32, repeated, tag = "12")]
    pub entry_id_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mecgplppplf {
    #[prost(uint32, tag = "4")]
    pub entry_id: u32,
    #[prost(uint32, tag = "6")]
    pub teleport_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pfgigakamgi {
    #[prost(uint32, tag = "15")]
    pub floor_id: u32,
    #[prost(string, tag = "11")]
    pub jaibieekheg: ::prost::alloc::string::String,
    #[prost(uint32, tag = "9")]
    pub dimension_id: u32,
    #[prost(int32, tag = "14")]
    pub mojohjebcnj: i32,
    #[prost(uint32, tag = "4")]
    pub group_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fkphapjnaed {
    #[prost(string, tag = "5")]
    pub jaibieekheg: ::prost::alloc::string::String,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(uint32, tag = "7")]
    pub group_id: u32,
    #[prost(uint32, tag = "12")]
    pub dimension_id: u32,
    #[prost(int32, tag = "6")]
    pub agfijniebkf: i32,
    #[prost(uint32, tag = "13")]
    pub floor_id: u32,
    #[prost(int32, tag = "2")]
    pub dlmamkinnco: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hhompkipkpb {
    #[prost(uint32, tag = "15")]
    pub edhepfamiec: u32,
    #[prost(bytes = "vec", tag = "14")]
    pub data: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Odfdcofifne {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Aniemjcbmeh {
    #[prost(message, repeated, tag = "7")]
    pub lfbeohkkdoi: ::prost::alloc::vec::Vec<Hhompkipkpb>,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Flgfmaoeilg {
    #[prost(uint32, tag = "10")]
    pub edhepfamiec: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dmlkmbpbndf {
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(message, optional, tag = "4")]
    pub chldhlbhlld: ::core::option::Option<Hhompkipkpb>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hepbihimjac {
    #[prost(message, optional, tag = "11")]
    pub chldhlbhlld: ::core::option::Option<Hhompkipkpb>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Loiedlcjaed {
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(uint32, tag = "4")]
    pub edhepfamiec: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Shop {
    #[prost(uint32, tag = "1")]
    pub city_level: u32,
    #[prost(uint32, tag = "13")]
    pub shop_id: u32,
    #[prost(uint32, tag = "5")]
    pub city_exp: u32,
    #[prost(int64, tag = "2")]
    pub begin_time: i64,
    #[prost(message, repeated, tag = "3")]
    pub goods_list: ::prost::alloc::vec::Vec<Goods>,
    #[prost(int64, tag = "15")]
    pub end_time: i64,
    #[prost(uint64, tag = "11")]
    pub city_taken_level_reward: u64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Goods {
    #[prost(uint32, tag = "8")]
    pub item_id: u32,
    #[prost(uint32, tag = "13")]
    pub buy_times: u32,
    #[prost(uint32, tag = "11")]
    pub goods_id: u32,
    #[prost(int64, tag = "9")]
    pub begin_time: i64,
    #[prost(int64, tag = "2")]
    pub end_time: i64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fckafidilmg {
    #[prost(uint32, tag = "9")]
    pub mejollhldhb: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetShopListScRsp {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "12")]
    pub shop_list: ::prost::alloc::vec::Vec<Shop>,
    #[prost(uint32, tag = "11")]
    pub shop_type: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cmobcapipll {
    #[prost(uint32, tag = "10")]
    pub item_id: u32,
    #[prost(uint32, tag = "7")]
    pub interacted_prop_entity_id: u32,
    #[prost(uint32, tag = "5")]
    pub knangdkhiej: u32,
    #[prost(uint32, repeated, tag = "14")]
    pub fmpnheaimdn: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "9")]
    pub shop_id: u32,
    #[prost(uint32, tag = "2")]
    pub oaajmpeljhd: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BuyGoodsScRsp {
    #[prost(uint32, tag = "13")]
    pub goods_buy_times: u32,
    #[prost(uint32, tag = "15")]
    pub shop_id: u32,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(message, optional, tag = "11")]
    pub return_item_list: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "1")]
    pub goods_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Glkecelepce {
    #[prost(uint32, tag = "6")]
    pub shop_id: u32,
    #[prost(uint32, tag = "13")]
    pub level: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakeCityShopRewardScRsp {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(uint32, tag = "6")]
    pub shop_id: u32,
    #[prost(message, optional, tag = "15")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "10")]
    pub level: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CityShopInfoScNotify {
    #[prost(uint32, tag = "3")]
    pub exp: u32,
    #[prost(uint32, tag = "10")]
    pub shop_id: u32,
    #[prost(uint32, tag = "8")]
    pub level: u32,
    #[prost(uint64, tag = "14")]
    pub taken_level_reward: u64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fafgmlpadmi {
    #[prost(bool, tag = "10")]
    pub halbhknpikh: bool,
    #[prost(uint32, tag = "4")]
    pub bejeedaebbe: u32,
    #[prost(uint32, tag = "8")]
    pub unique_id: u32,
    #[prost(uint32, tag = "9")]
    pub fclnoogehmc: u32,
    #[prost(uint32, repeated, tag = "15")]
    pub igjcppkaibi: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "12")]
    pub item_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ipjaiinegel {
    #[prost(uint32, tag = "12")]
    pub ecbalmaebjc: u32,
    #[prost(uint32, tag = "10")]
    pub bejeedaebbe: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hineahnnjol {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Amijinmjhpi {
    #[prost(uint32, repeated, tag = "6")]
    pub dplkbeehplb: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "11")]
    pub bnhndbnabfn: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "4")]
    pub aagihkbfmfi: ::prost::alloc::vec::Vec<Fafgmlpadmi>,
    #[prost(uint32, repeated, tag = "15")]
    pub kmoadeogapa: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "7")]
    pub pblcahnmfjg: u32,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "2")]
    pub inihlancnfi: ::prost::alloc::vec::Vec<Ipjaiinegel>,
    #[prost(uint32, repeated, tag = "13")]
    pub pmcmecdlemc: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "8")]
    pub kjfhkicggde: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Acopfjagdan {
    #[prost(uint32, tag = "4")]
    pub lheonphgbnb: u32,
    #[prost(uint32, repeated, tag = "10")]
    pub hdcbacooind: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gmdmlbndcad {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "14")]
    pub goeaofnfjod: ::prost::alloc::vec::Vec<Ipjaiinegel>,
    #[prost(bool, tag = "2")]
    pub iklpncgbppc: bool,
    #[prost(message, optional, tag = "10")]
    pub kpkdhghdgnb: ::core::option::Option<Fafgmlpadmi>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Clgejegdoho {
    #[prost(uint32, tag = "4")]
    pub unique_id: u32,
    #[prost(uint32, tag = "9")]
    pub item_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ccfofenahca {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "11")]
    pub goeaofnfjod: ::prost::alloc::vec::Vec<Ipjaiinegel>,
    #[prost(message, optional, tag = "4")]
    pub eflcmhmajal: ::core::option::Option<Fafgmlpadmi>,
    #[prost(bool, tag = "10")]
    pub iklpncgbppc: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kfibelfohcf {
    #[prost(uint32, tag = "7")]
    pub nileedjlgin: u32,
    #[prost(uint32, tag = "11")]
    pub op_type: u32,
    #[prost(uint32, tag = "9")]
    pub algeienioan: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hhpgbifodoj {
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "3")]
    pub kjfhkicggde: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Khbdfdgdllk {
    #[prost(uint32, repeated, tag = "4")]
    pub dejaooebbha: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Caincjcdale {
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "1")]
    pub nfheagelici: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jpakgaebcfg {
    #[prost(bool, tag = "9")]
    pub fpmncagjebg: bool,
    #[prost(message, repeated, tag = "6")]
    pub aikmbppnokd: ::prost::alloc::vec::Vec<Fafgmlpadmi>,
    #[prost(bool, tag = "4")]
    pub iklpncgbppc: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lclihajnndf {
    #[prost(uint32, tag = "7")]
    pub item_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ehmchgflggo {
    #[prost(uint32, tag = "14")]
    pub item_id: u32,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hbfkbbbehgj {
    #[prost(uint32, tag = "1")]
    pub hlnmajidifd: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jjnkpicglpg {
    #[prost(uint32, tag = "5")]
    pub hlnmajidifd: u32,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(message, optional, tag = "14")]
    pub reward: ::core::option::Option<ItemList>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mjcjaikpllm {
    #[prost(bool, tag = "5")]
    pub acelagjphma: bool,
    #[prost(uint32, tag = "3")]
    pub mpaecapoheo: u32,
    #[prost(uint32, tag = "6")]
    pub group_id: u32,
    #[prost(uint32, tag = "13")]
    pub cbindiaamjg: u32,
    #[prost(uint32, tag = "4")]
    pub ifangmhnkbb: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hecaeihocce {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Holcfkiobgn {
    #[prost(message, repeated, tag = "3")]
    pub bdiimmhjlcn: ::prost::alloc::vec::Vec<Mjcjaikpllm>,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Aedaoiffign {
    #[prost(enumeration = "AvatarType", tag = "9")]
    pub avatar_type: i32,
    #[prost(uint32, tag = "5")]
    pub equip_avatar_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jdolccabfoh {
    #[prost(uint32, tag = "1")]
    pub nedfibonlkb: u32,
    #[prost(message, repeated, tag = "10")]
    pub avatar_list: ::prost::alloc::vec::Vec<Aedaoiffign>,
    #[prost(uint32, tag = "15")]
    pub group_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bcokphcmnoh {
    #[prost(message, optional, tag = "10")]
    pub battle_info: ::core::option::Option<SceneBattleInfo>,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(uint32, tag = "8")]
    pub nedfibonlkb: u32,
    #[prost(uint32, tag = "12")]
    pub group_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ahckmccdiij {
    #[prost(uint32, tag = "14")]
    pub group_id: u32,
    #[prost(message, optional, tag = "2")]
    pub fmcdalalfia: ::core::option::Option<Mjcjaikpllm>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Nphijijdphc {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kcbpbdjnpeg {
    #[prost(uint32, repeated, tag = "8")]
    pub fmihhbhfhoa: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "12")]
    pub lghcahbbcam: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "13")]
    pub glhflieimjk: u32,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cpdncfchajg {
    #[prost(uint32, tag = "15")]
    pub glhflieimjk: u32,
    #[prost(uint32, repeated, tag = "1")]
    pub lghcahbbcam: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "4")]
    pub fimcejgdagf: u32,
    #[prost(uint32, repeated, tag = "3")]
    pub fmihhbhfhoa: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mdogepcpfjo {
    #[prost(uint32, tag = "15")]
    pub glhflieimjk: u32,
    #[prost(bool, tag = "7")]
    pub koocceighma: bool,
    #[prost(enumeration = "Amjocdiaphf", tag = "8")]
    pub nfojnohloac: i32,
    #[prost(uint32, tag = "4")]
    pub kidkhjecjlf: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pooibgcamcd {
    #[prost(bool, tag = "14")]
    pub cliigmnmhna: bool,
    #[prost(uint32, repeated, tag = "11")]
    pub kfmffggjmne: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "10")]
    pub iblbnianphd: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StrongChallengeAvatar {
    #[prost(enumeration = "AvatarType", tag = "2")]
    pub avatar_type: i32,
    #[prost(uint32, tag = "1")]
    pub avatar_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jpfjgfopkhb {
    #[prost(message, repeated, tag = "4")]
    pub avatar_list: ::prost::alloc::vec::Vec<StrongChallengeAvatar>,
    #[prost(uint32, repeated, tag = "6")]
    pub buff_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Caaakpfoeji {
    #[prost(uint32, tag = "3")]
    pub max_score: u32,
    #[prost(uint32, tag = "9")]
    pub jgbainfdban: u32,
    #[prost(message, optional, tag = "1")]
    pub ahinpckgkjg: ::core::option::Option<Jpfjgfopkhb>,
    #[prost(uint32, tag = "8")]
    pub stage_id: u32,
    #[prost(uint32, tag = "5")]
    pub panel_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hlkgcnfccia {
    #[prost(map = "uint32, message", tag = "3")]
    pub alcedmlhflm: ::std::collections::HashMap<u32, Caaakpfoeji>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dcigbdpoocp {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Opfoldibjpe {
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(message, optional, tag = "15")]
    pub giilgffkhda: ::core::option::Option<Hlkgcnfccia>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ammblgiceai {
    #[prost(message, repeated, tag = "1")]
    pub avatar_list: ::prost::alloc::vec::Vec<StrongChallengeAvatar>,
    #[prost(uint32, tag = "4")]
    pub stage_id: u32,
    #[prost(uint32, repeated, tag = "5")]
    pub buff_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Papojheablf {
    #[prost(uint32, tag = "13")]
    pub stage_id: u32,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(message, optional, tag = "12")]
    pub battle_info: ::core::option::Option<SceneBattleInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bhophdiknhe {
    #[prost(uint32, tag = "5")]
    pub total_damage: u32,
    #[prost(uint32, tag = "11")]
    pub ahjfpngdbdo: u32,
    #[prost(enumeration = "BattleEndStatus", tag = "1")]
    pub end_status: i32,
    #[prost(uint32, tag = "13")]
    pub ggbecchphcd: u32,
    #[prost(uint32, tag = "14")]
    pub max_score: u32,
    #[prost(uint32, tag = "8")]
    pub stage_id: u32,
    #[prost(uint32, tag = "4")]
    pub jamlokncakc: u32,
    #[prost(uint32, tag = "3")]
    pub score_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pgbhmolfbmm {
    #[prost(uint32, tag = "15")]
    pub star: u32,
    #[prost(uint32, tag = "13")]
    pub group_id: u32,
    #[prost(uint32, tag = "10")]
    pub nedfibonlkb: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Popifpmlman {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lcdfpjkepcn {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "15")]
    pub jhomkemcdmg: ::prost::alloc::vec::Vec<Pgbhmolfbmm>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Onoeplfnell {
    #[prost(enumeration = "AvatarType", tag = "10")]
    pub avatar_type: i32,
    #[prost(uint32, tag = "6")]
    pub equip_avatar_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fclmmimneki {
    #[prost(message, optional, tag = "4")]
    pub mnoedeclhbj: ::core::option::Option<Onoeplfnell>,
    #[prost(uint32, tag = "10")]
    pub group_id: u32,
    #[prost(message, repeated, tag = "11")]
    pub avatar_list: ::prost::alloc::vec::Vec<Onoeplfnell>,
    #[prost(uint32, tag = "15")]
    pub nedfibonlkb: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hbhjhhobndn {
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(uint32, tag = "11")]
    pub group_id: u32,
    #[prost(message, optional, tag = "15")]
    pub battle_info: ::core::option::Option<SceneBattleInfo>,
    #[prost(uint32, tag = "14")]
    pub nedfibonlkb: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fnglnjjjjgi {
    #[prost(uint32, tag = "6")]
    pub group_id: u32,
    #[prost(uint32, tag = "1")]
    pub nedfibonlkb: u32,
    #[prost(uint32, tag = "3")]
    pub star: u32,
    #[prost(uint32, tag = "8")]
    pub hmffhgbkogl: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fpppjcpijjf {
    #[prost(uint32, tag = "13")]
    pub mcbiohmimgn: u32,
    #[prost(uint32, tag = "11")]
    pub gfjiiabanlm: u32,
    #[prost(bytes = "vec", tag = "10")]
    pub mjnnblcdcbj: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint32, tag = "1")]
    pub config_id: u32,
    #[prost(message, optional, tag = "12")]
    pub ofolpkmalgi: ::core::option::Option<MotionInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Koenhfbkmih {
    #[prost(uint32, tag = "15")]
    pub config_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Egggcfapahg {
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(uint32, tag = "11")]
    pub abojjandfno: u32,
    #[prost(message, repeated, tag = "1")]
    pub lbomdfhffcf: ::prost::alloc::vec::Vec<Fpppjcpijjf>,
    #[prost(uint32, tag = "2")]
    pub dlnghhdmjjm: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ffccfllhhmc {
    #[prost(uint32, tag = "10")]
    pub config_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pogciochlcf {
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(uint32, tag = "15")]
    pub config_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jammdojmepn {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hohcgkaglip {
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(message, optional, tag = "14")]
    pub cmfmacmipee: ::core::option::Option<Fpppjcpijjf>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pmgecpbkjcj {
    #[prost(enumeration = "Leglgdjopkc", tag = "13")]
    pub op_type: i32,
    #[prost(uint32, tag = "3")]
    pub group_id: u32,
    #[prost(uint32, tag = "7")]
    pub kdlpeighjak: u32,
    #[prost(uint32, tag = "9")]
    pub iefmadjgadb: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mahjcopdgdm {
    #[prost(message, optional, tag = "8")]
    pub opbhjagoagg: ::core::option::Option<Fpppjcpijjf>,
    #[prost(message, optional, tag = "13")]
    pub clbmgbfanlc: ::core::option::Option<Pmgecpbkjcj>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cgajjaddpci {
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(message, optional, tag = "10")]
    pub cmfmacmipee: ::core::option::Option<Fpppjcpijjf>,
    #[prost(message, optional, tag = "11")]
    pub clbmgbfanlc: ::core::option::Option<Pmgecpbkjcj>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mmanbfncbdo {
    #[prost(uint32, tag = "1")]
    pub mcbiohmimgn: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bbkeffclbml {
    #[prost(uint32, tag = "4")]
    pub mcbiohmimgn: u32,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Alefdnllklb {
    #[prost(uint32, repeated, tag = "7")]
    pub fdeigepccbp: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "4")]
    pub nncjoeckcka: ::core::option::Option<Bppmeigahgi>,
    #[prost(message, optional, tag = "10")]
    pub afpdjdkneni: ::core::option::Option<Ocbolhfoigi>,
    #[prost(message, optional, tag = "14")]
    pub skill_info: ::core::option::Option<Gjbniiinkfb>,
    #[prost(message, optional, tag = "3")]
    pub ljgcpnogifo: ::core::option::Option<Dmjlkifemmn>,
    #[prost(message, optional, tag = "1")]
    pub gbeabimobic: ::core::option::Option<Pgggcfbkdpk>,
    #[prost(uint32, tag = "2")]
    pub eenjbpmndol: u32,
    #[prost(message, optional, tag = "5")]
    pub kndmeilhkej: ::core::option::Option<Jkmfmmpmnam>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gjbniiinkfb {
    #[prost(uint32, tag = "5")]
    pub bilegelkmcb: u32,
    #[prost(uint32, repeated, tag = "4")]
    pub cckhkbnmapn: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "13")]
    pub mcegaibnmgb: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pgggcfbkdpk {
    #[prost(uint32, repeated, tag = "12")]
    pub cnbckefnfge: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "8")]
    pub game_story_line_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mmoibacbpka {
    #[prost(enumeration = "Hdijjmdpile", tag = "14")]
    pub pjgbfknjpno: i32,
    #[prost(uint32, tag = "10")]
    pub value: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bppmeigahgi {
    #[prost(message, repeated, tag = "7")]
    pub migfmpjbelg: ::prost::alloc::vec::Vec<Mmoibacbpka>,
    #[prost(uint32, tag = "6")]
    pub pdmdkapcojm: u32,
    #[prost(uint32, tag = "3")]
    pub iomgdikelia: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Leehjgnbgnk {
    #[prost(uint32, tag = "6")]
    pub level: u32,
    #[prost(uint32, tag = "15")]
    pub hbapccegnme: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ocbolhfoigi {
    #[prost(message, repeated, tag = "2")]
    pub fmdkhadmcoc: ::prost::alloc::vec::Vec<Leehjgnbgnk>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dmjlkifemmn {
    #[prost(uint32, tag = "58")]
    pub ighlabggije: u32,
    #[prost(oneof = "dmjlkifemmn::Ieicdggelne", tags = "3, 9")]
    pub ieicdggelne: ::core::option::Option<dmjlkifemmn::Ieicdggelne>,
}
/// Nested message and enum types in `DMJLKIFEMMN`.
pub mod dmjlkifemmn {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Ieicdggelne {
        #[prost(message, tag = "3")]
        Gaibhjhdohb(super::Klinpbnkiia),
        #[prost(message, tag = "9")]
        Kpjafbcpegi(super::Pbmkkicmlda),
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Piibojcejjn {
    #[prost(uint32, tag = "3")]
    pub colbgejelgi: u32,
    #[prost(uint32, tag = "6")]
    pub gimlndloffa: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Klinpbnkiia {
    #[prost(uint32, repeated, tag = "3")]
    pub eijdeopofnb: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "15")]
    pub dncbpcenkif: ::prost::alloc::vec::Vec<Piibojcejjn>,
    #[prost(enumeration = "Bjncdefeeji", tag = "8")]
    pub ccljmnckecp: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pbmkkicmlda {
    #[prost(uint32, tag = "15")]
    pub fhbomfblgpd: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jkmfmmpmnam {
    #[prost(oneof = "jkmfmmpmnam::Ieicdggelne", tags = "4, 9, 11, 2, 15, 1, 3, 14")]
    pub ieicdggelne: ::core::option::Option<jkmfmmpmnam::Ieicdggelne>,
}
/// Nested message and enum types in `JKMFMMPMNAM`.
pub mod jkmfmmpmnam {
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum Ieicdggelne {
        #[prost(message, tag = "4")]
        Kangpcokfne(super::Dpdiegoagbp),
        #[prost(message, tag = "9")]
        Hhcifnfmkla(super::Fpegpjceoei),
        #[prost(message, tag = "11")]
        Ocgplmnkmlk(super::Fkhfonpkdip),
        #[prost(message, tag = "2")]
        Akmnkladolm(super::Aejccmeplgo),
        #[prost(message, tag = "15")]
        Kkddandlfbd(super::Nigcopghamj),
        #[prost(message, tag = "1")]
        Affnconkekp(super::Khphaifnjei),
        #[prost(message, tag = "3")]
        Cnibngjdnjp(super::Plodidcjoka),
        #[prost(message, tag = "14")]
        Oapmklfjkkg(super::Khcakpomgnk),
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dpdiegoagbp {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fpegpjceoei {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fkhfonpkdip {
    #[prost(uint32, tag = "12")]
    pub dgaklnofdpp: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Aejccmeplgo {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Nigcopghamj {
    #[prost(bool, tag = "4")]
    pub hhgapdfindi: bool,
    #[prost(uint32, tag = "7")]
    pub bglehmkmapg: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Khphaifnjei {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Plodidcjoka {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Khcakpomgnk {
    #[prost(bool, tag = "8")]
    pub mmkijaemnbl: bool,
    #[prost(uint32, tag = "12")]
    pub bglehmkmapg: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Omojdeifdam {
    #[prost(enumeration = "Pkhjbpmibba", tag = "8")]
    pub source: i32,
    #[prost(message, optional, tag = "9")]
    pub pbhmgchkjgo: ::core::option::Option<Cghkidbjhfh>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cghkidbjhfh {
    #[prost(
        oneof = "cghkidbjhfh::Ieicdggelne",
        tags = "9, 13, 12, 7, 8, 11, 1, 14, 1621, 2033, 279, 1686"
    )]
    pub ieicdggelne: ::core::option::Option<cghkidbjhfh::Ieicdggelne>,
}
/// Nested message and enum types in `CGHKIDBJHFH`.
pub mod cghkidbjhfh {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Ieicdggelne {
        #[prost(message, tag = "9")]
        Pjabkifdnnd(super::Nlcalklpgog),
        #[prost(message, tag = "13")]
        Nihifemokam(super::Ojlehppjbbc),
        #[prost(message, tag = "12")]
        Mlcgalihaip(super::Ojlehppjbbc),
        #[prost(message, tag = "7")]
        Bidddnipble(super::Ocjgnpifobm),
        #[prost(message, tag = "8")]
        Dijhpehonok(super::Nmenkignbca),
        #[prost(message, tag = "11")]
        Edhbkecgoli(super::Nigcopghamj),
        #[prost(message, tag = "1")]
        Mfhbhkimdca(super::Hjkdngihmaa),
        #[prost(uint32, tag = "14")]
        Npfpajlclnn(u32),
        #[prost(uint32, tag = "1621")]
        Iomgdikelia(u32),
        #[prost(message, tag = "2033")]
        Gkahdhelild(super::Khcakpomgnk),
        #[prost(message, tag = "279")]
        Gnpeameljdj(super::Khphaifnjei),
        #[prost(uint32, tag = "1686")]
        Cbakihcdenp(u32),
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hjkdngihmaa {
    #[prost(uint32, tag = "12")]
    pub dgaklnofdpp: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Nlcalklpgog {
    #[prost(uint32, tag = "13")]
    pub bmalpkekbel: u32,
    #[prost(enumeration = "Hdijjmdpile", tag = "11")]
    pub pjgbfknjpno: i32,
    #[prost(uint32, tag = "10")]
    pub ogjofmcmfpg: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ojlehppjbbc {
    #[prost(uint32, tag = "8")]
    pub ogjofmcmfpg: u32,
    #[prost(uint32, tag = "7")]
    pub bmalpkekbel: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ocjgnpifobm {
    #[prost(uint32, tag = "8")]
    pub hbapccegnme: u32,
    #[prost(uint32, tag = "3")]
    pub level: u32,
    #[prost(uint32, tag = "1")]
    pub gffbdandhmk: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nmenkignbca {
    #[prost(uint32, tag = "6")]
    pub eenjbpmndol: u32,
    #[prost(message, optional, tag = "5")]
    pub ifnmbngifph: ::core::option::Option<Dmjlkifemmn>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fgpbibijcoh {
    #[prost(uint32, tag = "6")]
    pub bglehmkmapg: u32,
    #[prost(bool, tag = "15")]
    pub hhgapdfindi: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Elfhacgfjla {
    #[prost(message, repeated, tag = "3")]
    pub leadmneimdp: ::prost::alloc::vec::Vec<Omojdeifdam>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hdfkpeebgen {
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(uint32, tag = "8")]
    pub progress: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nokodmnohmn {
    #[prost(message, repeated, tag = "9")]
    pub nckcmgcbehk: ::prost::alloc::vec::Vec<Hdfkpeebgen>,
    #[prost(uint32, repeated, tag = "12")]
    pub onilffenamo: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lhjkepdfkne {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kkbllpimofe {
    #[prost(uint32, tag = "6")]
    pub dchgiodeddk: u32,
    #[prost(message, optional, tag = "1")]
    pub kjkbkegighk: ::core::option::Option<Nokodmnohmn>,
    #[prost(uint32, repeated, tag = "7")]
    pub fabkphmjghl: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "9")]
    pub cnbckefnfge: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(message, optional, tag = "13")]
    pub gajbfpcpigm: ::core::option::Option<Alefdnllklb>,
    #[prost(uint32, repeated, tag = "10")]
    pub joefnhggago: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, tag = "5")]
    pub klbpecanfig: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jjlbimdbbfo {
    #[prost(uint32, repeated, tag = "11")]
    pub bhnfgpehomo: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "10")]
    pub phajehibkfi: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kcegaodicji {
    #[prost(uint32, repeated, tag = "15")]
    pub bhnfgpehomo: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fgkecaodgej {
    #[prost(enumeration = "Bjncdefeeji", tag = "11")]
    pub ifenlnhlbab: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pegepjmhjib {
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(bool, tag = "2")]
    pub mllaefjemcf: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lpnmkobgogp {
    #[prost(uint32, tag = "6")]
    pub kdmlllghjon: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Aoggaifednb {
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cpecmgmhidj {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bbojcpfomik {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pcmeebkmahe {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dlmipajapdf {
    #[prost(message, optional, tag = "14")]
    pub battle_info: ::core::option::Option<SceneBattleInfo>,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Eaponepjpjp {
    #[prost(uint32, tag = "3")]
    pub skill_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jeadddhehnd {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(uint32, tag = "13")]
    pub skill_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jikihmkjieo {
    #[prost(uint32, tag = "2")]
    pub game_story_line_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mfcgpeomkje {
    #[prost(message, optional, tag = "14")]
    pub gajbfpcpigm: ::core::option::Option<Alefdnllklb>,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Loapbemidam {
    #[prost(uint32, tag = "5")]
    pub bglehmkmapg: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jenllnijobe {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(uint32, tag = "13")]
    pub bglehmkmapg: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jjkijlkpokl {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Oeigkgmblbg {
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dgndifjabgo {
    #[prost(uint32, repeated, tag = "1")]
    pub ccdchkkmgjf: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "12")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "11")]
    pub game_story_line_id: u32,
    #[prost(uint32, tag = "14")]
    pub pigeebckcoo: u32,
    #[prost(uint32, tag = "15")]
    pub ifnmbngifph: u32,
    #[prost(enumeration = "Hdmkphalalg", tag = "13")]
    pub reason: i32,
    #[prost(uint32, repeated, tag = "9")]
    pub ppimfpoookb: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "5")]
    pub fpbnipmhanh: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Enfadgfgdbj {
    #[prost(message, repeated, tag = "14")]
    pub nckcmgcbehk: ::prost::alloc::vec::Vec<Hdfkpeebgen>,
    #[prost(uint32, repeated, tag = "7")]
    pub onilffenamo: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mkhlgdkelho {
    #[prost(uint32, tag = "7")]
    pub decjmbhnnhd: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kflbgenlbff {
    #[prost(uint32, tag = "8")]
    pub decjmbhnnhd: u32,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cjhkgenfdch {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fhbbiagbeji {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(message, optional, tag = "13")]
    pub gajbfpcpigm: ::core::option::Option<Alefdnllklb>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ccmjflhnggi {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hiohbjoandd {
    #[prost(message, optional, tag = "10")]
    pub battle_info: ::core::option::Option<SceneBattleInfo>,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oaphhnljchk {
    #[prost(uint32, tag = "13")]
    pub cgfcmknccdc: u32,
    #[prost(message, repeated, tag = "12")]
    pub mcccnliiibc: ::prost::alloc::vec::Vec<Mmoibacbpka>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Nndfdpaekjj {
    #[prost(uint32, tag = "6")]
    pub game_story_line_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eaflombbljk {
    #[prost(message, optional, tag = "1")]
    pub gajbfpcpigm: ::core::option::Option<Alefdnllklb>,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Oodjieahfbf {
    #[prost(uint32, tag = "4")]
    pub skill_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Efpcokhfflp {
    #[prost(uint32, tag = "2")]
    pub skill_id: u32,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kpmhlmpafhh {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fdmepflfbkm {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Blpmhfgioac {
    #[prost(uint32, tag = "13")]
    pub keneknbjgmg: u32,
    #[prost(uint32, tag = "2")]
    pub stamina: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Opgpojaahhg {
    #[prost(string, tag = "4")]
    pub signature: ::prost::alloc::string::String,
    #[prost(bool, tag = "9")]
    pub pagjkdjigpi: bool,
    #[prost(message, repeated, tag = "12")]
    pub unlocked_head_icon_list: ::prost::alloc::vec::Vec<HeadIconData>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AvatarSync {
    #[prost(message, repeated, tag = "6")]
    pub avatar_list: ::prost::alloc::vec::Vec<Avatar>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dbanapeaalp {
    #[prost(message, repeated, tag = "13")]
    pub gaegmbiogoh: ::prost::alloc::vec::Vec<Fhabeikafbo>,
    #[prost(message, repeated, tag = "5")]
    pub mission_list: ::prost::alloc::vec::Vec<Mission>,
    #[prost(uint32, repeated, tag = "10")]
    pub anihpckngbm: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "2")]
    pub hnepoedcidk: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "4")]
    pub ejbggjonbol: ::prost::alloc::vec::Vec<Ikammklboco>,
    #[prost(uint32, repeated, tag = "1")]
    pub finished_main_mission_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "15")]
    pub mcfonopkokd: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dmbmpahkhla {
    #[prost(uint32, repeated, tag = "14")]
    pub lkkidnjcfja: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "4")]
    pub dingkfdbcjj: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lpfmhajhdmm {
    #[prost(message, repeated, tag = "4")]
    pub omaalpkjiih: ::prost::alloc::vec::Vec<Lopcjeojhcb>,
    #[prost(uint32, repeated, tag = "8")]
    pub cngldjnpopi: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "14")]
    pub lnejlgefple: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "11")]
    pub kmmbeandijh: ::prost::alloc::vec::Vec<Gemjdhnlklc>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayerSyncScNotify {
    #[prost(uint32, repeated, tag = "645")]
    pub olflkcbbjoh: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "576")]
    pub bkebjfipjeh: ::core::option::Option<Lpfmhajhdmm>,
    #[prost(uint32, repeated, tag = "7")]
    pub inkhdoglemn: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "632")]
    pub mjoklhfpgad: ::core::option::Option<ItemList>,
    #[prost(message, repeated, tag = "4")]
    pub equipment_list: ::prost::alloc::vec::Vec<Equipment>,
    #[prost(message, repeated, tag = "120")]
    pub multi_path_avatar_info_list: ::prost::alloc::vec::Vec<MultiPathAvatarInfo>,
    #[prost(message, repeated, tag = "1019")]
    pub fcokffeapmi: ::prost::alloc::vec::Vec<Material>,
    #[prost(message, repeated, tag = "10")]
    pub wait_del_resource_list: ::prost::alloc::vec::Vec<WaitDelResource>,
    #[prost(message, optional, tag = "8")]
    pub avatar_sync: ::core::option::Option<AvatarSync>,
    #[prost(message, repeated, tag = "12")]
    pub relic_list: ::prost::alloc::vec::Vec<Relic>,
    #[prost(uint32, tag = "1356")]
    pub total_achievement_exp: u32,
    #[prost(message, optional, tag = "2")]
    pub gejlekbbfnc: ::core::option::Option<Dbanapeaalp>,
    #[prost(message, optional, tag = "1863")]
    pub omjopkgjplg: ::core::option::Option<Dmbmpahkhla>,
    #[prost(message, optional, tag = "5")]
    pub iggogfjfpdj: ::core::option::Option<Blpmhfgioac>,
    #[prost(uint32, repeated, tag = "1")]
    pub dginpelinhi: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "71")]
    pub pclghhfjmga: ::core::option::Option<Opgpojaahhg>,
    #[prost(message, repeated, tag = "6")]
    pub material_list: ::prost::alloc::vec::Vec<Material>,
    #[prost(message, repeated, tag = "15")]
    pub quest_list: ::prost::alloc::vec::Vec<Quest>,
    #[prost(message, optional, tag = "14")]
    pub basic_info: ::core::option::Option<PlayerBasicInfo>,
    #[prost(message, repeated, tag = "2019")]
    pub igipeimgeaa: ::prost::alloc::vec::Vec<Gkdihiffhfd>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetNpcTakenRewardCsReq {
    #[prost(uint32, tag = "6")]
    pub npc_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetNpcTakenRewardScRsp {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(uint32, tag = "13")]
    pub npc_id: u32,
    #[prost(uint32, repeated, tag = "5")]
    pub talk_event_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TakeTalkRewardCsReq {
    #[prost(uint32, tag = "14")]
    pub iemoeoimhma: u32,
    #[prost(message, optional, tag = "3")]
    pub olconcnjmmp: ::core::option::Option<Vector>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakeTalkRewardScRsp {
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(message, optional, tag = "13")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "10")]
    pub iemoeoimhma: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetFirstTalkNpcCsReq {
    #[prost(uint32, repeated, tag = "1")]
    pub npc_id_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FirstNpcTalkInfo {
    #[prost(bool, tag = "5")]
    pub is_meet: bool,
    #[prost(uint32, tag = "6")]
    pub first_npc_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetFirstTalkNpcScRsp {
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "13")]
    pub npc_talk_info_list: ::prost::alloc::vec::Vec<FirstNpcTalkInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FinishFirstTalkNpcCsReq {
    #[prost(uint32, tag = "3")]
    pub npc_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FinishFirstTalkNpcScRsp {
    #[prost(uint32, tag = "1")]
    pub npc_id: u32,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ojjhhhgomnh {
    #[prost(uint32, tag = "10")]
    pub pkdcpmnagbc: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kihhnloogag {
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(uint32, tag = "10")]
    pub pkdcpmnagbc: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct NpcTalkInfo {
    #[prost(uint32, tag = "8")]
    pub npc_talk_id: u32,
    #[prost(bool, tag = "15")]
    pub is_meet: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetFirstTalkByPerformanceNpcCsReq {
    #[prost(uint32, repeated, tag = "8")]
    pub npc_talk_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetFirstTalkByPerformanceNpcScRsp {
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "10")]
    pub npc_talk_info_list: ::prost::alloc::vec::Vec<NpcTalkInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FinishFirstTalkByPerformanceNpcCsReq {
    #[prost(uint32, tag = "7")]
    pub npc_talk_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FinishFirstTalkByPerformanceNpcScRsp {
    #[prost(message, optional, tag = "9")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "11")]
    pub npc_talk_id: u32,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ejdgknkhkhh {
    #[prost(uint32, tag = "9")]
    pub id: u32,
    #[prost(uint32, tag = "6")]
    pub level: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bkmgdphacke {
    #[prost(bool, tag = "9")]
    pub biinncndpcg: bool,
    #[prost(uint32, tag = "15")]
    pub id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Floickmnmll {
    #[prost(message, repeated, tag = "14")]
    pub cnijnmdgedd: ::prost::alloc::vec::Vec<Ejdgknkhkhh>,
    #[prost(message, repeated, tag = "2")]
    pub dgpejfljnoj: ::prost::alloc::vec::Vec<Bkmgdphacke>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ofdgogdbhac {
    #[prost(uint32, repeated, tag = "3")]
    pub libllkbldch: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Agoophcebga {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Feaopdeblkh {
    #[prost(uint32, tag = "3")]
    pub fdckfkfkhlo: u32,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(map = "uint32, uint32", tag = "6")]
    pub ndcjjpgnfln: ::std::collections::HashMap<u32, u32>,
    #[prost(message, optional, tag = "11")]
    pub ipninopekbp: ::core::option::Option<Ofdgogdbhac>,
    #[prost(message, optional, tag = "13")]
    pub hefjejhojea: ::core::option::Option<Floickmnmll>,
    #[prost(map = "uint32, uint32", tag = "4")]
    pub jkemdjiamhi: ::std::collections::HashMap<u32, u32>,
    #[prost(uint32, tag = "1")]
    pub fgnhlhedlpn: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jkknjebjoae {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cejejdmndmc {
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(uint32, tag = "5")]
    pub fdckfkfkhlo: u32,
    #[prost(map = "uint32, uint32", tag = "14")]
    pub cjencdiflcf: ::std::collections::HashMap<u32, u32>,
    #[prost(uint32, tag = "10")]
    pub fgnhlhedlpn: u32,
    #[prost(map = "uint32, uint32", tag = "9")]
    pub iikbcnbjkki: ::std::collections::HashMap<u32, u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ianilbpclkd {
    #[prost(uint32, repeated, tag = "15")]
    pub ppimfpoookb: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oppapmhjmpi {
    #[prost(uint32, repeated, tag = "11")]
    pub ppimfpoookb: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(map = "uint32, uint32", tag = "4")]
    pub ndcjjpgnfln: ::std::collections::HashMap<u32, u32>,
    #[prost(map = "uint32, uint32", tag = "15")]
    pub jkemdjiamhi: ::std::collections::HashMap<u32, u32>,
    #[prost(message, optional, tag = "2")]
    pub ppdggociede: ::core::option::Option<Ejdgknkhkhh>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kpdnpgfdobi {
    #[prost(uint32, tag = "6")]
    pub bglehmkmapg: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pmglnlddnje {
    #[prost(uint32, tag = "9")]
    pub bglehmkmapg: u32,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(message, optional, tag = "2")]
    pub hefjejhojea: ::core::option::Option<Floickmnmll>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hdmjlgmdifg {
    #[prost(uint32, tag = "15")]
    pub fgnhlhedlpn: u32,
    #[prost(uint32, tag = "5")]
    pub sub_mission_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lddnfmiheeh {
    #[prost(uint32, tag = "12")]
    pub nblhjjjegno: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ekpjdgckgmn {
    #[prost(uint32, tag = "1")]
    pub nblhjjjegno: u32,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ogjdnlijkfb {
    #[prost(uint32, tag = "3")]
    pub max_score: u32,
    #[prost(uint32, tag = "9")]
    pub kegcjppokbk: u32,
    #[prost(uint32, tag = "13")]
    pub ninlfbglbll: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kpkgboghijn {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Phnaeikgjhb {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "7")]
    pub kadgmhhgkmp: ::prost::alloc::vec::Vec<Ogjdnlijkfb>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lfjaaeapbje {
    #[prost(message, repeated, tag = "13")]
    pub kadgmhhgkmp: ::prost::alloc::vec::Vec<Ogjdnlijkfb>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jpaddpiggck {
    #[prost(uint32, tag = "2")]
    pub hoehiobiiej: u32,
    #[prost(uint32, tag = "9")]
    pub npjeecedpok: u32,
    #[prost(uint32, tag = "5")]
    pub fcepipccomn: u32,
    #[prost(uint32, tag = "13")]
    pub fidioihllga: u32,
    #[prost(message, optional, tag = "6")]
    pub dfccbdpnlea: ::core::option::Option<Ogjdnlijkfb>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Depeahjnkgj {
    #[prost(uint32, tag = "6")]
    pub equip_avatar_id: u32,
    #[prost(enumeration = "AvatarType", tag = "1")]
    pub avatar_type: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ndncapjmpeg {
    #[prost(uint32, tag = "9")]
    pub ninlfbglbll: u32,
    #[prost(uint32, repeated, tag = "1")]
    pub buff_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "5")]
    pub avatar_list: ::prost::alloc::vec::Vec<Depeahjnkgj>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ahgenonaofk {
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(uint32, tag = "8")]
    pub ninlfbglbll: u32,
    #[prost(message, optional, tag = "9")]
    pub battle_info: ::core::option::Option<SceneBattleInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Iomopenembf {
    #[prost(uint32, tag = "10")]
    pub fanokembmpb: u32,
    #[prost(string, tag = "8")]
    pub nkioiioiaog: ::prost::alloc::string::String,
    #[prost(uint32, tag = "13")]
    pub nlfnjpmacpm: u32,
    #[prost(string, tag = "5")]
    pub hbjkeebdjml: ::prost::alloc::string::String,
    #[prost(uint32, tag = "6")]
    pub adinnbpinak: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Akoibdegonh {
    #[prost(uint32, tag = "14")]
    pub adinnbpinak: u32,
    #[prost(uint32, tag = "2")]
    pub fanokembmpb: u32,
    #[prost(string, tag = "10")]
    pub hbjkeebdjml: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Illgpcdigcm {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(string, tag = "8")]
    pub hbjkeebdjml: ::prost::alloc::string::String,
    #[prost(uint32, tag = "3")]
    pub fanokembmpb: u32,
    #[prost(uint32, tag = "10")]
    pub adinnbpinak: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cimbhjdhafo {
    #[prost(uint32, repeated, tag = "7")]
    pub ponennkhcmj: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eeelmipkgij {
    #[prost(message, repeated, tag = "8")]
    pub nkkkopacokg: ::prost::alloc::vec::Vec<Iomopenembf>,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eigpgmemlaj {
    #[prost(message, repeated, tag = "11")]
    pub nkkkopacokg: ::prost::alloc::vec::Vec<Iomopenembf>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mccfkfomiba {
    #[prost(message, repeated, tag = "12")]
    pub nkkkopacokg: ::prost::alloc::vec::Vec<Iomopenembf>,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cgligecgakn {
    #[prost(uint32, tag = "14")]
    pub stage_id: u32,
    #[prost(uint32, tag = "12")]
    pub max_score: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Emfnmifofmh {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oinmkchedbo {
    #[prost(message, repeated, tag = "15")]
    pub emgfldopkgl: ::prost::alloc::vec::Vec<Cgligecgakn>,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Geoaeofjogc {
    #[prost(uint32, tag = "5")]
    pub entity_id: u32,
    #[prost(bool, tag = "7")]
    pub kfboaonldem: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gbhmocojbgb {
    #[prost(uint32, tag = "15")]
    pub stage_id: u32,
    #[prost(uint32, tag = "13")]
    pub bclnmidffoh: u32,
    #[prost(message, repeated, tag = "10")]
    pub lpihaniojfi: ::prost::alloc::vec::Vec<Geoaeofjogc>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fphpghhmodg {
    #[prost(uint32, tag = "7")]
    pub stage_id: u32,
    #[prost(message, repeated, tag = "15")]
    pub lpihaniojfi: ::prost::alloc::vec::Vec<Geoaeofjogc>,
    #[prost(uint32, tag = "9")]
    pub score_id: u32,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dlgopbgkggl {
    #[prost(uint32, tag = "4")]
    pub stage_id: u32,
    #[prost(bool, tag = "14")]
    pub djfcmlipdab: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ldkcmmdkegj {
    #[prost(uint32, tag = "3")]
    pub mdlndgijnml: u32,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lgkckikgnen {
    #[prost(uint32, tag = "8")]
    pub stage_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ihljchkajpg {
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fplmdelmjkb {
    #[prost(uint32, repeated, tag = "5")]
    pub hcpgealodme: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "3")]
    pub bblblafighm: u32,
    #[prost(uint32, tag = "9")]
    pub hplkcinapmf: u32,
    #[prost(uint32, tag = "13")]
    pub unique_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hbcinikpafi {
    #[prost(message, repeated, tag = "15")]
    pub fodpdmpband: ::prost::alloc::vec::Vec<Fplmdelmjkb>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cgconjfffbb {
    #[prost(message, optional, tag = "3")]
    pub fodpdmpband: ::core::option::Option<Hbcinikpafi>,
    #[prost(bool, tag = "10")]
    pub lkllmpokogh: bool,
    #[prost(uint32, tag = "9")]
    pub hafckonehfm: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kknlmcjigaf {
    #[prost(uint32, tag = "8")]
    pub caoapdccpca: u32,
    #[prost(uint32, tag = "6")]
    pub unique_id: u32,
    #[prost(uint32, tag = "13")]
    pub hfnhlcfnhkd: u32,
    #[prost(uint32, tag = "4")]
    pub ghfaihlceln: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kackjjdjoni {
    #[prost(uint32, tag = "1")]
    pub blhpiciofai: u32,
    #[prost(uint32, tag = "5")]
    pub hcfocpkfobg: u32,
    #[prost(uint32, tag = "9")]
    pub papkgjojpii: u32,
    #[prost(uint32, tag = "11")]
    pub jodnmdoamkc: u32,
    #[prost(uint32, repeated, tag = "10")]
    pub kddppgocomb: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "15")]
    pub ncdcgfkoloe: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Edfabkmnbli {
    #[prost(message, optional, tag = "4")]
    pub gdghcbghlnd: ::core::option::Option<Kackjjdjoni>,
    #[prost(uint32, tag = "7")]
    pub lljefmpdjkh: u32,
    #[prost(uint32, tag = "8")]
    pub bihmelmjhpo: u32,
    #[prost(message, repeated, tag = "15")]
    pub mkoambmkdid: ::prost::alloc::vec::Vec<Kknlmcjigaf>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fpdfcgkiile {
    #[prost(uint32, tag = "15")]
    pub khhlnggecpb: u32,
    #[prost(uint32, tag = "2")]
    pub kpakapnhnnd: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gockblnjibg {
    #[prost(uint32, tag = "2")]
    pub jgmipmdppij: u32,
    #[prost(uint32, tag = "14")]
    pub skill_level: u32,
    #[prost(uint32, tag = "7")]
    pub skill_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Maonnnelgcc {
    #[prost(uint32, tag = "1")]
    pub mihlfgcgkno: u32,
    #[prost(uint32, tag = "14")]
    pub aljlkaoeldp: u32,
    #[prost(message, optional, tag = "12")]
    pub bojbpoelfci: ::core::option::Option<Fpdfcgkiile>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Adgnfgfbcpe {
    #[prost(uint32, tag = "4")]
    pub aljlkaoeldp: u32,
    #[prost(uint32, tag = "9")]
    pub record_id: u32,
    #[prost(bool, tag = "3")]
    pub cinmlckbhim: bool,
    #[prost(uint32, repeated, tag = "1")]
    pub pclmnbilaph: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lhleehcbmol {
    #[prost(uint32, tag = "13")]
    pub pkidbdgpilo: u32,
    #[prost(message, repeated, tag = "5")]
    pub skill_list: ::prost::alloc::vec::Vec<Gockblnjibg>,
    #[prost(uint32, tag = "11")]
    pub bblblafighm: u32,
    #[prost(uint32, repeated, tag = "15")]
    pub cfkpaicdjpj: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "3")]
    pub oafaaeemnfb: u32,
    #[prost(message, repeated, tag = "9")]
    pub kbgdcehiffj: ::prost::alloc::vec::Vec<Maonnnelgcc>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oibmnpclnjj {
    #[prost(uint32, repeated, tag = "4")]
    pub pclmnbilaph: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "8")]
    pub mebofhokepi: ::prost::alloc::vec::Vec<Adgnfgfbcpe>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kfldamaaikb {
    #[prost(uint32, repeated, tag = "15")]
    pub hbccbgbfplo: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "10")]
    pub opdipfbcfdp: ::prost::alloc::vec::Vec<Mcnckbnoejg>,
    #[prost(uint32, repeated, tag = "5")]
    pub elfphfpkbfi: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "9")]
    pub dbahfefglmd: u32,
    #[prost(uint32, tag = "3")]
    pub progress: u32,
    #[prost(message, optional, tag = "7")]
    pub mlhdkjmfdai: ::core::option::Option<Daipphmlpcb>,
    #[prost(uint32, repeated, tag = "1")]
    pub knojnbjiokb: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Indffnnhohc {
    #[prost(uint32, repeated, tag = "2")]
    pub elfphfpkbfi: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "3")]
    pub dbahfefglmd: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ppkdpajpagf {
    #[prost(enumeration = "Knoococanam", tag = "3")]
    pub status: i32,
    #[prost(uint32, tag = "2")]
    pub gjfhpcieboj: u32,
    #[prost(uint32, tag = "4")]
    pub jlhdkolmeda: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Daipphmlpcb {
    #[prost(message, repeated, tag = "13")]
    pub imekhgciedn: ::prost::alloc::vec::Vec<Ppkdpajpagf>,
    #[prost(uint32, tag = "8")]
    pub heidcikedpd: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mcnckbnoejg {
    #[prost(uint32, tag = "14")]
    pub cigajenpmkh: u32,
    #[prost(uint32, tag = "3")]
    pub fpnodeepfki: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hhallekojia {
    #[prost(uint32, tag = "9")]
    pub dbjhemippim: u32,
    #[prost(uint32, tag = "6")]
    pub cnajoignmlj: u32,
    #[prost(uint32, repeated, tag = "11")]
    pub cigacghpdgk: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "2")]
    pub flbnekgidbo: u32,
    #[prost(uint32, tag = "15")]
    pub ppffkfgollj: u32,
    #[prost(uint32, repeated, tag = "12")]
    pub mcfmaepokbk: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "5")]
    pub eohbbeakodf: ::prost::alloc::vec::Vec<Indffnnhohc>,
    #[prost(message, repeated, tag = "13")]
    pub llephoelgda: ::prost::alloc::vec::Vec<Kfldamaaikb>,
    #[prost(uint32, tag = "10")]
    pub eebnaapbkcn: u32,
    #[prost(uint32, tag = "1")]
    pub obokglcmkke: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lpkdpmlbejo {
    #[prost(uint32, tag = "14")]
    pub klgbflnjkbl: u32,
    #[prost(uint32, tag = "11")]
    pub record_id: u32,
    #[prost(message, optional, tag = "12")]
    pub nhjjbkokldb: ::core::option::Option<Hhallekojia>,
    #[prost(message, optional, tag = "1")]
    pub ijmekpadhjj: ::core::option::Option<Oibmnpclnjj>,
    #[prost(message, optional, tag = "10")]
    pub cefmbafcnpk: ::core::option::Option<Cdngndnlnaj>,
    #[prost(uint32, tag = "8")]
    pub aianofknlhg: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cdngndnlnaj {
    #[prost(message, optional, tag = "8")]
    pub aakhcnedbcd: ::core::option::Option<Lhleehcbmol>,
    #[prost(message, optional, tag = "4")]
    pub hbheajijegf: ::core::option::Option<Cgconjfffbb>,
    #[prost(message, optional, tag = "3")]
    pub eeihdcpolef: ::core::option::Option<Edfabkmnbli>,
    #[prost(uint32, tag = "14")]
    pub goneakbdgek: u32,
    #[prost(message, optional, tag = "2")]
    pub gbfclmlimhc: ::core::option::Option<Gcfehmenonm>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dboehmhgicc {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cfnecnjgenn {
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(message, optional, tag = "7")]
    pub behnkmghghd: ::core::option::Option<Lpkdpmlbejo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Iagdgoeblal {
    #[prost(uint32, tag = "14")]
    pub eeghhhkcghb: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Knbkoedfcbe {
    #[prost(uint32, tag = "9")]
    pub eeghhhkcghb: u32,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oognjjipcnk {
    #[prost(message, repeated, tag = "1")]
    pub peadiocnimf: ::prost::alloc::vec::Vec<Kknlmcjigaf>,
    #[prost(uint32, tag = "6")]
    pub gheeoeohmfi: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jgpgpfcleai {
    #[prost(message, optional, tag = "13")]
    pub hilomekafbp: ::core::option::Option<Fkmbflmegeb>,
    #[prost(uint32, tag = "2")]
    pub eeghhhkcghb: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fkmbflmegeb {
    #[prost(message, repeated, tag = "4")]
    pub foaplialhdi: ::prost::alloc::vec::Vec<Baepnhdciem>,
    #[prost(message, repeated, tag = "6")]
    pub kbgdcehiffj: ::prost::alloc::vec::Vec<Maonnnelgcc>,
    #[prost(uint32, tag = "3")]
    pub heijcnlnhhi: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Baepnhdciem {
    #[prost(uint32, repeated, tag = "13")]
    pub switch_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "12")]
    pub ijfihgcknhg: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nclcbopcejg {
    #[prost(message, optional, tag = "1")]
    pub hmffhbhalge: ::core::option::Option<Fplmdelmjkb>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Idbeommckik {
    #[prost(message, optional, tag = "12")]
    pub bojbpoelfci: ::core::option::Option<Fpdfcgkiile>,
    #[prost(uint32, tag = "9")]
    pub aljlkaoeldp: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ibomhkhbaao {
    #[prost(message, repeated, tag = "1")]
    pub nfeolnaogdk: ::prost::alloc::vec::Vec<Idbeommckik>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Enjhdlhkino {
    #[prost(message, optional, tag = "10")]
    pub kndmeilhkej: ::core::option::Option<Gcfehmenonm>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fnoghghpjpd {
    #[prost(uint32, tag = "12")]
    pub bblblafighm: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jldhcfggeao {
    #[prost(message, optional, tag = "13")]
    pub mhmeddehbhi: ::core::option::Option<Gockblnjibg>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pfgiahaidlm {
    #[prost(message, repeated, tag = "7")]
    pub skill_list: ::prost::alloc::vec::Vec<Gockblnjibg>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jhmnlcobjcj {
    #[prost(message, optional, tag = "1")]
    pub abbnhmggpil: ::core::option::Option<Adgnfgfbcpe>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fkjlbfniggm {
    #[prost(uint32, repeated, tag = "2")]
    pub pclmnbilaph: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hakmebiajcf {
    #[prost(message, repeated, tag = "5")]
    pub mkoambmkdid: ::prost::alloc::vec::Vec<Kknlmcjigaf>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hmopiblfcln {
    #[prost(message, optional, tag = "13")]
    pub lnmmkfmeajm: ::core::option::Option<Hbcinikpafi>,
    #[prost(uint32, tag = "7")]
    pub hafckonehfm: u32,
    #[prost(message, optional, tag = "10")]
    pub gdghcbghlnd: ::core::option::Option<Kackjjdjoni>,
    #[prost(bool, tag = "8")]
    pub lkllmpokogh: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Plkcmgdedck {
    #[prost(enumeration = "Cbejajenohj", tag = "2")]
    pub src: i32,
    #[prost(
        oneof = "plkcmgdedck::Lgnaklfmhff",
        tags = "1409, 1137, 1942, 636, 1789, 1413, 1416, 55, 1290, 769"
    )]
    pub lgnaklfmhff: ::core::option::Option<plkcmgdedck::Lgnaklfmhff>,
}
/// Nested message and enum types in `PLKCMGDEDCK`.
pub mod plkcmgdedck {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Lgnaklfmhff {
        #[prost(message, tag = "1409")]
        Lnmmkfmeajm(super::Hbcinikpafi),
        #[prost(message, tag = "1137")]
        Fpfdjndnpim(super::Ibomhkhbaao),
        #[prost(message, tag = "1942")]
        Njkjnbdboca(super::Enjhdlhkino),
        #[prost(message, tag = "636")]
        Lgjgbighonp(super::Fnoghghpjpd),
        #[prost(message, tag = "1789")]
        Dgnkbngipki(super::Hakmebiajcf),
        #[prost(message, tag = "1413")]
        Mkkpchhnhcj(super::Jldhcfggeao),
        #[prost(message, tag = "1416")]
        Pkpjefggboo(super::Hmopiblfcln),
        #[prost(message, tag = "55")]
        Nhacnnjpalp(super::Pfgiahaidlm),
        #[prost(message, tag = "1290")]
        Ahpdpooljle(super::Jhmnlcobjcj),
        #[prost(message, tag = "769")]
        Afmieicdnea(super::Fkjlbfniggm),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jfjklhgfdkp {
    #[prost(message, repeated, tag = "5")]
    pub fflpklldhlm: ::prost::alloc::vec::Vec<Plkcmgdedck>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gcfehmenonm {
    #[prost(uint32, tag = "11")]
    pub hbapccegnme: u32,
    #[prost(oneof = "gcfehmenonm::Ajobhbklmji", tags = "1030, 740, 1451, 478")]
    pub ajobhbklmji: ::core::option::Option<gcfehmenonm::Ajobhbklmji>,
}
/// Nested message and enum types in `GCFEHMENONM`.
pub mod gcfehmenonm {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Ajobhbklmji {
        #[prost(message, tag = "1030")]
        Iamkdjcfmib(super::Njkenncjlcf),
        #[prost(message, tag = "740")]
        Leehaeobeba(super::Miiaiodleoa),
        #[prost(message, tag = "1451")]
        Oaoofnjgidh(super::Emmdenjbfpf),
        #[prost(message, tag = "478")]
        Pmmgocjfeej(super::Epbgfbedanm),
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hhpiafbhjcf {
    #[prost(uint32, tag = "12")]
    pub kdmlllghjon: u32,
    #[prost(bool, tag = "7")]
    pub pipmgacmjnn: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Njkenncjlcf {
    #[prost(uint32, tag = "1")]
    pub event_id: u32,
    #[prost(message, repeated, tag = "12")]
    pub lekpkocnjal: ::prost::alloc::vec::Vec<Hhpiafbhjcf>,
    #[prost(enumeration = "Ijdnojemian", tag = "8")]
    pub hoiokbkgfdn: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hpfkgddifhg {
    #[prost(uint32, tag = "6")]
    pub event_id: u32,
    #[prost(uint32, tag = "3")]
    pub kdmlllghjon: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bfifanaocpc {
    #[prost(message, optional, tag = "3")]
    pub hilomekafbp: ::core::option::Option<Fkmbflmegeb>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ocmhofemnhi {
    #[prost(uint32, tag = "2")]
    pub level: u32,
    #[prost(uint32, tag = "6")]
    pub skill_id: u32,
    #[prost(uint32, tag = "7")]
    pub jgmipmdppij: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Miiaiodleoa {
    #[prost(uint32, tag = "11")]
    pub aljlkaoeldp: u32,
    #[prost(message, repeated, tag = "5")]
    pub ganakfaibfc: ::prost::alloc::vec::Vec<Ocmhofemnhi>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Epbgfbedanm {
    #[prost(uint32, tag = "1")]
    pub idaihkmmdek: u32,
    #[prost(message, repeated, tag = "3")]
    pub llijagdkjco: ::prost::alloc::vec::Vec<Gockblnjibg>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Glbfbnhfcno {
    #[prost(uint32, tag = "12")]
    pub iehhdalhgpi: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mbinmaonbcd {
    #[prost(message, repeated, tag = "13")]
    pub skill_list: ::prost::alloc::vec::Vec<Gockblnjibg>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pjjdmmbkkcn {
    #[prost(uint32, tag = "4")]
    pub aljlkaoeldp: u32,
    #[prost(uint32, tag = "6")]
    pub unique_id: u32,
    #[prost(uint32, tag = "14")]
    pub khhlnggecpb: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Heojldbkkge {
    #[prost(uint32, tag = "3")]
    pub num: u32,
    #[prost(uint32, tag = "4")]
    pub aljlkaoeldp: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Emmdenjbfpf {
    #[prost(uint32, tag = "14")]
    pub npjeecedpok: u32,
    #[prost(uint32, tag = "9")]
    pub cfokigihcfp: u32,
    #[prost(uint32, tag = "3")]
    pub mliijgoaeck: u32,
    #[prost(uint32, tag = "2")]
    pub kmlppmnmpke: u32,
    #[prost(message, repeated, tag = "8")]
    pub kjmliamgdle: ::prost::alloc::vec::Vec<Bjgldljkidh>,
    #[prost(message, repeated, tag = "12")]
    pub ccgbhhfbafj: ::prost::alloc::vec::Vec<Heojldbkkge>,
    #[prost(uint32, tag = "6")]
    pub mlipplkiifd: u32,
    #[prost(message, repeated, tag = "15")]
    pub mmeiphbnked: ::prost::alloc::vec::Vec<Pjjdmmbkkcn>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PlaySkillBrief {
    #[prost(enumeration = "Lcdemgacekd", tag = "6")]
    pub skill_type: i32,
    #[prost(uint32, tag = "11")]
    pub skill_id: u32,
    #[prost(uint32, tag = "14")]
    pub skill_param: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayCardBrief {
    #[prost(uint32, tag = "2")]
    pub base_value: u32,
    #[prost(message, repeated, tag = "5")]
    pub skill_brief_list: ::prost::alloc::vec::Vec<PlaySkillBrief>,
    #[prost(uint32, tag = "6")]
    pub unique_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Phoefkfbikd {
    #[prost(uint32, repeated, tag = "6")]
    pub npojmhhibki: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "4")]
    pub mkegodinhnc: u32,
    #[prost(message, optional, tag = "3")]
    pub ojcjnbgnicf: ::core::option::Option<ItemList>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pecglkcicgo {
    #[prost(uint32, repeated, tag = "14")]
    pub canngfdafoe: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jbocjhndamc {
    #[prost(enumeration = "Dmlcpakdblj", tag = "6")]
    pub ijppknknlnl: i32,
    #[prost(uint32, tag = "14")]
    pub npjeecedpok: u32,
    #[prost(message, optional, tag = "9")]
    pub gdghcbghlnd: ::core::option::Option<Kackjjdjoni>,
    #[prost(message, repeated, tag = "12")]
    pub omggnaeahif: ::prost::alloc::vec::Vec<PlayCardBrief>,
    #[prost(message, repeated, tag = "7")]
    pub bihfecjhpgh: ::prost::alloc::vec::Vec<PlaySkillBrief>,
    #[prost(message, repeated, tag = "8")]
    pub ccgbhhfbafj: ::prost::alloc::vec::Vec<Heojldbkkge>,
    #[prost(message, optional, tag = "3")]
    pub mfakjhfmaib: ::core::option::Option<Phoefkfbikd>,
    #[prost(uint32, tag = "15")]
    pub score_id: u32,
    #[prost(message, repeated, tag = "2")]
    pub mmeiphbnked: ::prost::alloc::vec::Vec<Pjjdmmbkkcn>,
    #[prost(uint32, tag = "5")]
    pub cfokigihcfp: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Encjkpgoial {
    #[prost(uint32, repeated, tag = "9")]
    pub canngfdafoe: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fbglldnlgpe {
    #[prost(uint32, tag = "6")]
    pub kmlppmnmpke: u32,
    #[prost(message, repeated, tag = "2")]
    pub nicgnemched: ::prost::alloc::vec::Vec<PlaySkillBrief>,
    #[prost(message, repeated, tag = "8")]
    pub ccgbhhfbafj: ::prost::alloc::vec::Vec<Heojldbkkge>,
    #[prost(message, repeated, tag = "9")]
    pub mmeiphbnked: ::prost::alloc::vec::Vec<Pjjdmmbkkcn>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bheibfhjfid {
    #[prost(uint32, tag = "14")]
    pub hbapccegnme: u32,
    #[prost(oneof = "bheibfhjfid::Phkgcbnejco", tags = "2026, 127, 1821, 914")]
    pub phkgcbnejco: ::core::option::Option<bheibfhjfid::Phkgcbnejco>,
}
/// Nested message and enum types in `BHEIBFHJFID`.
pub mod bheibfhjfid {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Phkgcbnejco {
        #[prost(message, tag = "2026")]
        Iamkdjcfmib(super::Hpfkgddifhg),
        #[prost(message, tag = "127")]
        Pmmgocjfeej(super::Glbfbnhfcno),
        #[prost(message, tag = "1821")]
        Lgbjaeldpnb(super::Pecglkcicgo),
        #[prost(message, tag = "914")]
        Bgjmfbhcmkl(super::Encjkpgoial),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fknagadelde {
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(uint32, tag = "13")]
    pub hbapccegnme: u32,
    #[prost(bool, tag = "6")]
    pub dlncbjfgkaa: bool,
    #[prost(message, optional, tag = "7")]
    pub hilomekafbp: ::core::option::Option<Fkmbflmegeb>,
    #[prost(oneof = "fknagadelde::Phkgcbnejco", tags = "1806, 1251, 529, 1364")]
    pub phkgcbnejco: ::core::option::Option<fknagadelde::Phkgcbnejco>,
}
/// Nested message and enum types in `FKNAGADELDE`.
pub mod fknagadelde {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Phkgcbnejco {
        #[prost(message, tag = "1806")]
        Laelpnhhjik(super::Bfifanaocpc),
        #[prost(message, tag = "1251")]
        Pmojbjmkfan(super::Mbinmaonbcd),
        #[prost(message, tag = "529")]
        Afdndbaddkp(super::Jbocjhndamc),
        #[prost(message, tag = "1364")]
        Ledfncdfamk(super::Fbglldnlgpe),
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lhhgjpgiafe {
    #[prost(uint32, tag = "2")]
    pub gjfhpcieboj: u32,
    #[prost(uint32, tag = "13")]
    pub heidcikedpd: u32,
    #[prost(message, optional, tag = "8")]
    pub alaoddbghpl: ::core::option::Option<Mcnckbnoejg>,
    #[prost(uint32, tag = "10")]
    pub dbahfefglmd: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Flpdeabalab {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(uint32, tag = "7")]
    pub dbjhemippim: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cikohjnagon {
    #[prost(message, optional, tag = "14")]
    pub kcjbmkjlfba: ::core::option::Option<Mcnckbnoejg>,
    #[prost(uint32, tag = "5")]
    pub dbahfefglmd: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Igioflajolk {
    #[prost(uint32, tag = "8")]
    pub dbahfefglmd: u32,
    #[prost(uint32, tag = "1")]
    pub cigajenpmkh: u32,
    #[prost(uint32, tag = "10")]
    pub fpnodeepfki: u32,
    #[prost(bool, tag = "5")]
    pub ganhklnpapi: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Igoglpajand {
    #[prost(uint32, tag = "2")]
    pub dbahfefglmd: u32,
    #[prost(message, repeated, tag = "11")]
    pub fflpklldhlm: ::prost::alloc::vec::Vec<Cikohjnagon>,
    #[prost(bool, tag = "15")]
    pub ganhklnpapi: bool,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "3")]
    pub opdipfbcfdp: ::prost::alloc::vec::Vec<Mcnckbnoejg>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kmbdkdlnhmc {
    #[prost(uint32, tag = "8")]
    pub okhcjkljghf: u32,
    #[prost(message, repeated, tag = "10")]
    pub cgfihjccgcd: ::prost::alloc::vec::Vec<Ppkdpajpagf>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jnahojlcnja {
    #[prost(uint32, tag = "7")]
    pub heidcikedpd: u32,
    #[prost(message, repeated, tag = "8")]
    pub cgfihjccgcd: ::prost::alloc::vec::Vec<Ppkdpajpagf>,
    #[prost(uint32, tag = "10")]
    pub dbahfefglmd: u32,
    #[prost(uint32, tag = "2")]
    pub progress: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Iefkfkfmepl {
    #[prost(uint32, tag = "6")]
    pub obokglcmkke: u32,
    #[prost(uint32, tag = "5")]
    pub ppffkfgollj: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fnpmcdnkdfj {
    #[prost(uint32, tag = "9")]
    pub bdccopiehin: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gegjhbmloem {
    #[prost(uint32, tag = "11")]
    pub flbnekgidbo: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bfddpplmkpg {
    #[prost(uint32, tag = "3")]
    pub mnleikiehhp: u32,
    #[prost(uint32, tag = "11")]
    pub dbahfefglmd: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kmlehllogjg {
    #[prost(uint32, tag = "2")]
    pub cigajenpmkh: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Okfgjeihljm {
    #[prost(uint32, tag = "1")]
    pub fbfihjiiabo: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kakjcjomfgh {
    #[prost(uint32, tag = "12")]
    pub cnajoignmlj: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mclncbcpaff {
    #[prost(uint32, tag = "12")]
    pub dbahfefglmd: u32,
    #[prost(uint32, repeated, tag = "9")]
    pub cgfihjccgcd: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lndgcgobdjl {
    #[prost(message, repeated, tag = "6")]
    pub llephoelgda: ::prost::alloc::vec::Vec<Mclncbcpaff>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ppkgjkifelk {
    #[prost(
        oneof = "ppkgjkifelk::Lgnaklfmhff",
        tags = "44, 647, 1528, 82, 1921, 1791, 189, 2016, 568, 1940"
    )]
    pub lgnaklfmhff: ::core::option::Option<ppkgjkifelk::Lgnaklfmhff>,
}
/// Nested message and enum types in `PPKGJKIFELK`.
pub mod ppkgjkifelk {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Lgnaklfmhff {
        #[prost(message, tag = "44")]
        Maplogdnbgb(super::Okfgjeihljm),
        #[prost(message, tag = "647")]
        Ekflejankme(super::Kmbdkdlnhmc),
        #[prost(message, tag = "1528")]
        Jobejafkecd(super::Jnahojlcnja),
        #[prost(message, tag = "82")]
        Dblbhnphhkb(super::Iefkfkfmepl),
        #[prost(message, tag = "1921")]
        Ckbnojapnnb(super::Fnpmcdnkdfj),
        #[prost(message, tag = "1791")]
        Nepconhofkj(super::Bfddpplmkpg),
        #[prost(message, tag = "189")]
        Egdgpikbnlk(super::Kmlehllogjg),
        #[prost(message, tag = "2016")]
        Bhofhhemlog(super::Gegjhbmloem),
        #[prost(message, tag = "568")]
        Haeadfoolnd(super::Kakjcjomfgh),
        #[prost(message, tag = "1940")]
        Gaibcbghhgl(super::Lndgcgobdjl),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bmophhibhcp {
    #[prost(message, repeated, tag = "8")]
    pub bjdfkemkaol: ::prost::alloc::vec::Vec<Ppkgjkifelk>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dghajaoffae {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lcofpkjdpji {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Npbhfjlhlnl {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jjlkbfpgbig {
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bjgldljkidh {
    #[prost(uint32, tag = "10")]
    pub level: u32,
    #[prost(enumeration = "Dmlcpakdblj", tag = "13")]
    pub jllnmgbenaf: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fpkbmiholmg {
    #[prost(uint32, tag = "10")]
    pub aianofknlhg: u32,
    #[prost(uint32, repeated, tag = "4")]
    pub olbagkmfdaj: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "12")]
    pub record_id: u32,
    #[prost(message, optional, tag = "5")]
    pub hanfphgemgf: ::core::option::Option<Oibmnpclnjj>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dkgfbnfiobl {
    #[prost(uint32, tag = "12")]
    pub goneakbdgek: u32,
    #[prost(uint32, repeated, tag = "11")]
    pub kbgdcehiffj: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ipcphcipfbg {
    #[prost(message, optional, tag = "12")]
    pub kmdphcmbjgb: ::core::option::Option<Cdngndnlnaj>,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ccglodldccg {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Paklhdbgcle {
    #[prost(uint32, tag = "10")]
    pub buff_id: u32,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Flacigjggcj {
    #[prost(uint32, tag = "7")]
    pub ecclpifmmpp: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Emlbhkhibgi {
    #[prost(uint32, tag = "8")]
    pub ecclpifmmpp: u32,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(message, optional, tag = "15")]
    pub item_list: ::core::option::Option<ItemList>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gbcdkgekcpp {
    #[prost(bool, tag = "6")]
    pub is_meet: bool,
    #[prost(uint32, tag = "1")]
    pub bledoknmjdf: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Oacbeipobji {
    #[prost(uint32, tag = "4")]
    pub bledoknmjdf: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fkifbighaap {
    #[prost(message, optional, tag = "13")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(uint32, tag = "6")]
    pub bledoknmjdf: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lminionbham {
    #[prost(uint32, repeated, tag = "15")]
    pub oifnlnbkdma: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Alndkemkebb {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "3")]
    pub ecfopdhgkfb: ::prost::alloc::vec::Vec<Gbcdkgekcpp>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Belcdbigmeo {
    #[prost(uint64, tag = "12")]
    pub akalbjecjik: u64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ocgdcmpoeda {
    #[prost(uint32, tag = "1")]
    pub bledoknmjdf: u32,
    #[prost(message, optional, tag = "12")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(enumeration = "Iippjkhmpch", tag = "11")]
    pub r#type: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hglkmjfehmb {
    #[prost(uint32, repeated, tag = "15")]
    pub edhhgcpdkik: ::prost::alloc::vec::Vec<u32>,
    #[prost(enumeration = "Llmibdpfjnd", tag = "14")]
    pub status: i32,
    #[prost(bool, tag = "6")]
    pub ijabkdepgma: bool,
    #[prost(uint32, tag = "4")]
    pub bledoknmjdf: u32,
    #[prost(uint32, tag = "8")]
    pub opaokgjbooe: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jdjcncppamf {
    #[prost(enumeration = "Jfjjfgaeoab", tag = "1")]
    pub r#type: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hngkfnoajfh {
    #[prost(uint32, repeated, tag = "3")]
    pub famhpmfoijh: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "6")]
    pub fdmfkaljbaj: ::prost::alloc::vec::Vec<Hglkmjfehmb>,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fnlkmoefpda {
    #[prost(uint32, tag = "10")]
    pub bledoknmjdf: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Odjgbfimgck {
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "11")]
    pub edhhgcpdkik: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "4")]
    pub bledoknmjdf: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Onldpcljmlp {
    #[prost(uint32, repeated, tag = "5")]
    pub famhpmfoijh: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gmjifoalloj {
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Nhbddinfkoh {
    #[prost(uint32, tag = "8")]
    pub kbcdecdnefm: u32,
    #[prost(int32, tag = "1")]
    pub ieagbpemflg: i32,
    #[prost(int32, tag = "13")]
    pub lljaegobhmp: i32,
    #[prost(uint64, tag = "12")]
    pub unique_id: u64,
    #[prost(uint32, tag = "9")]
    pub item_id: u32,
    #[prost(uint32, tag = "6")]
    pub iimoplcfhah: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kchjhcljock {
    #[prost(enumeration = "Hgkkppljboi", tag = "2")]
    pub clfgfaboiop: i32,
    #[prost(message, repeated, tag = "15")]
    pub hjbpkcfkhli: ::prost::alloc::vec::Vec<Nhbddinfkoh>,
    #[prost(uint32, tag = "4")]
    pub diphgghfmcp: u32,
    #[prost(uint32, tag = "14")]
    pub cpodejofpdd: u32,
    #[prost(enumeration = "Dcjaopdinoi", tag = "12")]
    pub embkicmefco: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Nkpemnopmno {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oepeplalcob {
    #[prost(map = "uint32, uint32", tag = "2")]
    pub fkbbomhekpe: ::std::collections::HashMap<u32, u32>,
    #[prost(uint32, tag = "9")]
    pub custom_value: u32,
    #[prost(map = "uint32, message", tag = "12")]
    pub mibclbgmdla: ::std::collections::HashMap<u32, Kchjhcljock>,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Icifonjonfa {
    #[prost(uint32, tag = "4")]
    pub cpodejofpdd: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ellahnnapln {
    #[prost(uint32, tag = "14")]
    pub cpodejofpdd: u32,
    #[prost(uint32, tag = "15")]
    pub diphgghfmcp: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Iohebkbcgne {
    #[prost(message, optional, tag = "11")]
    pub cagglkliimf: ::core::option::Option<Kchjhcljock>,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(message, optional, tag = "5")]
    pub reward: ::core::option::Option<ItemList>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fbleaepjamc {
    #[prost(uint32, tag = "11")]
    pub cpodejofpdd: u32,
    #[prost(uint32, tag = "6")]
    pub item_id: u32,
    #[prost(uint32, tag = "14")]
    pub iimoplcfhah: u32,
    #[prost(int32, tag = "15")]
    pub ieagbpemflg: i32,
    #[prost(int32, tag = "5")]
    pub lljaegobhmp: i32,
    #[prost(uint32, tag = "1")]
    pub kbcdecdnefm: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Chepgamcbih {
    #[prost(message, optional, tag = "15")]
    pub cagglkliimf: ::core::option::Option<Kchjhcljock>,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Chggoniioha {
    #[prost(uint64, tag = "14")]
    pub unique_id: u64,
    #[prost(uint32, tag = "2")]
    pub cpodejofpdd: u32,
    #[prost(uint32, tag = "11")]
    pub item_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ecbkpcaldfd {
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(message, optional, tag = "12")]
    pub cagglkliimf: ::core::option::Option<Kchjhcljock>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bnifahofpcl {
    #[prost(int32, tag = "8")]
    pub lljaegobhmp: i32,
    #[prost(int32, tag = "10")]
    pub ieagbpemflg: i32,
    #[prost(uint32, tag = "12")]
    pub kbcdecdnefm: u32,
    #[prost(uint32, tag = "9")]
    pub cpodejofpdd: u32,
    #[prost(uint32, tag = "13")]
    pub iimoplcfhah: u32,
    #[prost(uint32, tag = "1")]
    pub item_id: u32,
    #[prost(uint64, tag = "4")]
    pub unique_id: u64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Blkkmebcfnc {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(message, optional, tag = "15")]
    pub cagglkliimf: ::core::option::Option<Kchjhcljock>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cccdifafkda {
    #[prost(uint32, tag = "12")]
    pub num: u32,
    #[prost(uint32, tag = "4")]
    pub fkkobdmfhil: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gkdihiffhfd {
    #[prost(uint32, tag = "13")]
    pub fkkobdmfhil: u32,
    #[prost(uint32, tag = "8")]
    pub num: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Efdcmpemnde {
    #[prost(uint32, tag = "4")]
    pub value: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Nhhpghkfoka {
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fpnialgeagm {
    #[prost(enumeration = "Dcjaopdinoi", tag = "14")]
    pub geibgfdenja: i32,
    #[prost(uint32, tag = "8")]
    pub cpodejofpdd: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bidkikbgmpf {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hbdadeijemo {
    #[prost(uint32, tag = "3")]
    pub cpodejofpdd: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dfliiemhjbi {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(message, optional, tag = "1")]
    pub cagglkliimf: ::core::option::Option<Kchjhcljock>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kbjphlnapgi {
    #[prost(uint32, tag = "2")]
    pub item_id: u32,
    #[prost(int32, tag = "14")]
    pub ieagbpemflg: i32,
    #[prost(uint32, tag = "11")]
    pub iimoplcfhah: u32,
    #[prost(uint32, tag = "12")]
    pub kbcdecdnefm: u32,
    #[prost(int32, tag = "9")]
    pub lljaegobhmp: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nljpmpbfpaf {
    #[prost(message, repeated, tag = "9")]
    pub gedglncpggn: ::prost::alloc::vec::Vec<Kbjphlnapgi>,
    #[prost(uint32, tag = "13")]
    pub cpodejofpdd: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hoofpbmcibh {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(message, optional, tag = "3")]
    pub cagglkliimf: ::core::option::Option<Kchjhcljock>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TreasureDungeonRecordData {
    #[prost(enumeration = "Imknbjcoiop", tag = "4")]
    pub r#type: i32,
    #[prost(uint32, tag = "5")]
    pub param1: u32,
    #[prost(uint32, tag = "1")]
    pub source_grid_id: u32,
    #[prost(uint32, tag = "9")]
    pub param2: u32,
    #[prost(uint32, tag = "8")]
    pub target_grid_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oekojkflfmm {
    #[prost(message, optional, tag = "14")]
    pub dlejpjjcelj: ::core::option::Option<Klcknklponm>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kiihpdmppak {
    #[prost(uint32, tag = "11")]
    pub aecncdpjpdg: u32,
    #[prost(uint32, tag = "12")]
    pub nlmdemohboo: u32,
    #[prost(bool, tag = "14")]
    pub is_win: bool,
    #[prost(uint32, tag = "8")]
    pub pikapdjhgnd: u32,
    #[prost(map = "uint32, uint32", tag = "15")]
    pub kgmmpgfgodj: ::std::collections::HashMap<u32, u32>,
    #[prost(uint32, tag = "2")]
    pub hohhbihfjeh: u32,
    #[prost(map = "uint32, uint32", tag = "6")]
    pub jbcgkldmhnl: ::std::collections::HashMap<u32, u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Klcknklponm {
    #[prost(message, repeated, tag = "407")]
    pub buff_list: ::prost::alloc::vec::Vec<Enbnfolcdie>,
    #[prost(uint32, tag = "3")]
    pub pikapdjhgnd: u32,
    #[prost(message, repeated, tag = "1940")]
    pub kjjomephjee: ::prost::alloc::vec::Vec<Lkhhgjppmpp>,
    #[prost(message, repeated, tag = "13")]
    pub mkoambmkdid: ::prost::alloc::vec::Vec<Lkcmfeaahhm>,
    #[prost(uint32, tag = "2")]
    pub map_id: u32,
    #[prost(uint32, tag = "333")]
    pub iialglddnad: u32,
    #[prost(bool, tag = "230")]
    pub nodbpkhojec: bool,
    #[prost(uint32, tag = "11")]
    pub fcjeckcickb: u32,
    #[prost(uint32, tag = "4")]
    pub jafnpnmohcm: u32,
    #[prost(uint32, tag = "14")]
    pub phhkbaenbmm: u32,
    #[prost(bool, tag = "1017")]
    pub nmfapgolodj: bool,
    #[prost(message, repeated, tag = "1694")]
    pub item_list: ::prost::alloc::vec::Vec<Lhanbgnjcif>,
    #[prost(uint32, tag = "10")]
    pub nlmdemohboo: u32,
    #[prost(uint32, tag = "1")]
    pub ncbhadloaga: u32,
    #[prost(message, repeated, tag = "1427")]
    pub gffojccklfm: ::prost::alloc::vec::Vec<Pcaignjkafa>,
    #[prost(bool, tag = "757")]
    pub cfdpdenppdh: bool,
    #[prost(message, repeated, tag = "2003")]
    pub avatar_list: ::prost::alloc::vec::Vec<Pcaignjkafa>,
    #[prost(message, repeated, tag = "8")]
    pub bbckfjihidm: ::prost::alloc::vec::Vec<TreasureDungeonRecordData>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lhanbgnjcif {
    #[prost(uint32, tag = "7")]
    pub item_id: u32,
    #[prost(uint32, tag = "2")]
    pub mbejblfhcbh: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pcaignjkafa {
    #[prost(message, optional, tag = "12")]
    pub sp: ::core::option::Option<AmountInfo>,
    #[prost(uint32, tag = "4")]
    pub hp: u32,
    #[prost(uint32, tag = "9")]
    pub avatar_type: u32,
    #[prost(uint32, tag = "7")]
    pub eajljnbnpnp: u32,
    #[prost(uint32, tag = "15")]
    pub equip_avatar_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lkhhgjppmpp {
    #[prost(uint32, tag = "7")]
    pub equip_avatar_id: u32,
    #[prost(uint32, tag = "12")]
    pub avatar_type: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Enbnfolcdie {
    #[prost(uint32, tag = "12")]
    pub buff_id: u32,
    #[prost(uint32, tag = "13")]
    pub akahnmlnefn: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lkcmfeaahhm {
    #[prost(uint32, tag = "12")]
    pub ollhobhdden: u32,
    #[prost(bool, tag = "8")]
    pub hemjhdoeebl: bool,
    #[prost(bool, tag = "4")]
    pub knlfeldecal: bool,
    #[prost(bool, tag = "9")]
    pub demncglljcp: bool,
    #[prost(uint32, tag = "10")]
    pub monhibbpkee: u32,
    #[prost(message, repeated, tag = "1314")]
    pub buff_list: ::prost::alloc::vec::Vec<Gggcocpgbbh>,
    #[prost(bool, tag = "1")]
    pub limmileapjm: bool,
    #[prost(uint32, tag = "2")]
    pub hfnhlcfnhkd: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gggcocpgbbh {
    #[prost(uint32, tag = "4")]
    pub leaaebafchp: u32,
    #[prost(uint32, tag = "1")]
    pub buff_id: u32,
    #[prost(uint32, tag = "14")]
    pub hfnhlcfnhkd: u32,
    #[prost(uint32, tag = "13")]
    pub egkdinmmena: u32,
    #[prost(uint32, tag = "12")]
    pub ecghnfccbjj: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Abhfabfgpof {
    #[prost(uint32, tag = "8")]
    pub pikapdjhgnd: u32,
    #[prost(uint32, tag = "2")]
    pub fcjeckcickb: u32,
    #[prost(uint32, tag = "9")]
    pub nlmdemohboo: u32,
    #[prost(bool, tag = "3")]
    pub biinncndpcg: bool,
    #[prost(uint32, tag = "10")]
    pub nkhkdjkegdh: u32,
    #[prost(bool, tag = "12")]
    pub cloonoifefo: bool,
    #[prost(uint32, tag = "1")]
    pub jafnpnmohcm: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Nkfckcachec {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hpffpdglgkl {
    #[prost(message, repeated, tag = "9")]
    pub hiookmoandn: ::prost::alloc::vec::Vec<Abhfabfgpof>,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Akoombklamp {
    #[prost(message, repeated, tag = "7")]
    pub avatar_list: ::prost::alloc::vec::Vec<Jackejlkjna>,
    #[prost(uint32, tag = "6")]
    pub nlmdemohboo: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gmlflpnfdoh {
    #[prost(message, optional, tag = "3")]
    pub dlejpjjcelj: ::core::option::Option<Klcknklponm>,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gfdioljomaj {
    #[prost(uint32, tag = "15")]
    pub hfnhlcfnhkd: u32,
    #[prost(uint32, tag = "13")]
    pub nlmdemohboo: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Iaabeneaadf {
    #[prost(message, optional, tag = "1")]
    pub dlejpjjcelj: ::core::option::Option<Klcknklponm>,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jfmckkgfkfi {
    #[prost(uint32, tag = "7")]
    pub caoapdccpca: u32,
    #[prost(uint32, tag = "6")]
    pub hfnhlcfnhkd: u32,
    #[prost(uint32, tag = "11")]
    pub nlmdemohboo: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mmeedejfbac {
    #[prost(message, optional, tag = "6")]
    pub dlejpjjcelj: ::core::option::Option<Klcknklponm>,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gehceafochn {
    #[prost(uint32, tag = "2")]
    pub hfnhlcfnhkd: u32,
    #[prost(uint32, tag = "1")]
    pub item_id: u32,
    #[prost(uint32, tag = "5")]
    pub nlmdemohboo: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Olhdfpojcnn {
    #[prost(message, optional, tag = "9")]
    pub dlejpjjcelj: ::core::option::Option<Klcknklponm>,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jackejlkjna {
    #[prost(uint32, tag = "5")]
    pub equip_avatar_id: u32,
    #[prost(enumeration = "AvatarType", tag = "14")]
    pub avatar_type: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lbmfnalblok {
    #[prost(uint32, tag = "14")]
    pub nlmdemohboo: u32,
    #[prost(message, repeated, tag = "6")]
    pub avatar_list: ::prost::alloc::vec::Vec<Jackejlkjna>,
    #[prost(uint32, tag = "1")]
    pub hfnhlcfnhkd: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kafebfdknie {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(message, optional, tag = "14")]
    pub battle_info: ::core::option::Option<SceneBattleInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fpkjpabnapf {
    #[prost(bool, tag = "13")]
    pub pcpdfjhdjcc: bool,
    #[prost(uint32, tag = "10")]
    pub nlmdemohboo: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Iamobnbmcif {
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Tutorial {
    #[prost(uint32, tag = "8")]
    pub id: u32,
    #[prost(enumeration = "TutorialStatus", tag = "13")]
    pub status: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TutorialGuide {
    #[prost(enumeration = "TutorialStatus", tag = "7")]
    pub status: i32,
    #[prost(uint32, tag = "5")]
    pub id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetTutorialCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetTutorialScRsp {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "6")]
    pub tutorial_list: ::prost::alloc::vec::Vec<Tutorial>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetTutorialGuideCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetTutorialGuideScRsp {
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "11")]
    pub tutorial_guide_list: ::prost::alloc::vec::Vec<TutorialGuide>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UnlockTutorialCsReq {
    #[prost(uint32, tag = "9")]
    pub dpgfmfhggpo: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UnlockTutorialScRsp {
    #[prost(message, optional, tag = "6")]
    pub tutorial: ::core::option::Option<Tutorial>,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Acgnlialggg {
    #[prost(uint32, tag = "11")]
    pub group_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UnlockTutorialGuideScRsp {
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(message, optional, tag = "3")]
    pub tutorial_guide: ::core::option::Option<TutorialGuide>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ajemphnpadk {
    #[prost(uint32, tag = "6")]
    pub dpgfmfhggpo: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FinishTutorialScRsp {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(message, optional, tag = "14")]
    pub tutorial: ::core::option::Option<Tutorial>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Flhgcmbllfh {
    #[prost(uint32, tag = "12")]
    pub group_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FinishTutorialGuideScRsp {
    #[prost(message, optional, tag = "4")]
    pub tutorial_guide: ::core::option::Option<TutorialGuide>,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(message, optional, tag = "5")]
    pub reward: ::core::option::Option<ItemList>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Oiphnjefjlp {
    #[prost(bool, tag = "1")]
    pub is_new: bool,
    #[prost(uint32, tag = "14")]
    pub id: u32,
    #[prost(uint32, tag = "9")]
    pub khfgdkngfdp: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eikmjejlmgc {
    #[prost(uint32, tag = "4")]
    pub nckelkegbgl: u32,
    #[prost(uint32, tag = "5")]
    pub id: u32,
    #[prost(bool, tag = "1")]
    pub is_new: bool,
    #[prost(uint32, repeated, tag = "7")]
    pub ioodmakjdif: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ljjokghfidf {
    #[prost(message, repeated, tag = "13")]
    pub konbfjpinhn: ::prost::alloc::vec::Vec<Oiphnjefjlp>,
    #[prost(message, optional, tag = "15")]
    pub gokhjlmpnff: ::core::option::Option<Eikmjejlmgc>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Plhmkhofdhi {
    #[prost(uint32, tag = "15")]
    pub kiekjeffphk: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bebaegdmbel {
    #[prost(uint32, tag = "13")]
    pub hoeahbifkci: u32,
    #[prost(message, optional, tag = "6")]
    pub fjjflkcmidj: ::core::option::Option<Ljjokghfidf>,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fpgaehakkaf {
    #[prost(uint32, tag = "1")]
    pub nkcmnafaioi: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hmbalmgnpck {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(uint32, tag = "1")]
    pub hoeahbifkci: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ihihlpfgcgn {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Legfmfinlnl {
    #[prost(uint32, tag = "5")]
    pub hoeahbifkci: u32,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "7")]
    pub ielpiclbbji: ::prost::alloc::vec::Vec<Eikmjejlmgc>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mibolepdjab {
    #[prost(uint32, tag = "5")]
    pub nkcmnafaioi: u32,
    #[prost(uint32, tag = "8")]
    pub kiekjeffphk: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Inmipninicf {
    #[prost(uint32, tag = "8")]
    pub kiekjeffphk: u32,
    #[prost(uint32, tag = "5")]
    pub akdghhnklej: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fmeooohlmej {
    #[prost(uint32, tag = "10")]
    pub kiekjeffphk: u32,
    #[prost(uint32, tag = "15")]
    pub akdghhnklej: u32,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hfpffjimckm {
    #[prost(uint32, tag = "5")]
    pub lkjmlidaodm: u32,
    #[prost(bool, tag = "12")]
    pub bdnflicnfhn: bool,
    #[prost(message, optional, tag = "4")]
    pub motion: ::core::option::Option<MotionInfo>,
    #[prost(message, repeated, tag = "6")]
    pub opcldnllnfh: ::prost::alloc::vec::Vec<Vector>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hehpioggieg {
    #[prost(bool, tag = "11")]
    pub bdnflicnfhn: bool,
    #[prost(uint32, tag = "14")]
    pub lkjmlidaodm: u32,
    #[prost(uint32, tag = "4")]
    pub id: u32,
    #[prost(message, repeated, tag = "6")]
    pub opcldnllnfh: ::prost::alloc::vec::Vec<Vector>,
    #[prost(string, tag = "10")]
    pub miilnlhddjm: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "12")]
    pub hefjejhojea: ::core::option::Option<Hfpffjimckm>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ppnceloonkk {
    #[prost(uint32, tag = "8")]
    pub id: u32,
    #[prost(message, optional, tag = "15")]
    pub motion: ::core::option::Option<MotionInfo>,
    #[prost(bool, tag = "12")]
    pub djfcmlipdab: bool,
    #[prost(message, optional, tag = "13")]
    pub ioehgagdfjj: ::core::option::Option<GroupStateInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cllnmgkefam {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(message, optional, tag = "6")]
    pub dnplihjgjih: ::core::option::Option<Hehpioggieg>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gmmcjkmegno {
    #[prost(message, optional, tag = "11")]
    pub motion: ::core::option::Option<MotionInfo>,
    #[prost(uint32, tag = "3")]
    pub id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lbhkncbdgco {
    #[prost(message, optional, tag = "7")]
    pub dnplihjgjih: ::core::option::Option<Hehpioggieg>,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gigaeocilff {
    #[prost(uint32, tag = "14")]
    pub id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gagannmhepa {
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(message, optional, tag = "6")]
    pub dnplihjgjih: ::core::option::Option<Hehpioggieg>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fefmjkkemkp {
    #[prost(uint32, tag = "3")]
    pub id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cklcoehemke {
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(message, optional, tag = "7")]
    pub dnplihjgjih: ::core::option::Option<Hehpioggieg>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Knpedhpkkhc {
    #[prost(uint32, tag = "13")]
    pub id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ljemhmmiagf {
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(message, optional, tag = "15")]
    pub dnplihjgjih: ::core::option::Option<Hehpioggieg>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lpfghgcjbil {
    #[prost(message, optional, tag = "11")]
    pub dnplihjgjih: ::core::option::Option<Hehpioggieg>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dpapcgkgekc {
    #[prost(uint32, repeated, tag = "12")]
    pub hit_target_entity_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "9")]
    pub mibcfimmikg: ::core::option::Option<Vector>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jndkcclfkif {
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(message, optional, tag = "1")]
    pub dnplihjgjih: ::core::option::Option<Hehpioggieg>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fdkodkfmhlk {
    #[prost(message, optional, tag = "7")]
    pub mibcfimmikg: ::core::option::Option<Vector>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jabepkainfo {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(message, optional, tag = "2")]
    pub dnplihjgjih: ::core::option::Option<Hehpioggieg>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fkollcmefij {
    #[prost(uint32, tag = "9")]
    pub group_id: u32,
    #[prost(uint32, tag = "1")]
    pub config_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fkhkjgfhahe {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Phhdagnaabo {
    #[prost(uint32, repeated, tag = "4")]
    pub hit_target_entity_id_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ihpnampdbgj {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ccifholfgng {
    #[prost(uint32, tag = "1")]
    pub npebnekdlen: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lemiokmiodl {
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(uint32, tag = "15")]
    pub npebnekdlen: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lnkfbaedodi {
    #[prost(uint32, tag = "1")]
    pub dghngblhail: u32,
    #[prost(uint32, tag = "2")]
    pub mpgpgfkbmhg: u32,
    #[prost(uint32, tag = "3")]
    pub gkjkkdaopam: u32,
    #[prost(uint32, tag = "4")]
    pub olccimlmmad: u32,
    #[prost(uint32, tag = "5")]
    pub elhepmnlapg: u32,
    #[prost(uint32, tag = "6")]
    pub piamlfbihpi: u32,
    #[prost(uint32, tag = "7")]
    pub cfcajemdfkj: u32,
    #[prost(uint32, tag = "8")]
    pub fephhkigoop: u32,
    #[prost(uint32, tag = "9")]
    pub mopdhnencpc: u32,
    #[prost(uint32, tag = "10")]
    pub edfpconikdc: u32,
    #[prost(uint32, tag = "11")]
    pub id: u32,
    #[prost(uint32, tag = "12")]
    pub hoghlbeedga: u32,
    #[prost(uint32, tag = "13")]
    pub bipfifcjcbn: u32,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum PlaneType {
    PlaneUnknown = 0,
    PlaneTown = 1,
    PlaneMaze = 2,
    PlaneTrain = 3,
    PlaneChallenge = 4,
    PlaneRogue = 5,
    PlaneRaid = 6,
    PlaneAetherDivide = 7,
    PlaneTrialActivity = 8,
}
impl PlaneType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::PlaneUnknown => "PlaneUnknown",
            Self::PlaneTown => "PlaneTown",
            Self::PlaneMaze => "PlaneMaze",
            Self::PlaneTrain => "PlaneTrain",
            Self::PlaneChallenge => "PlaneChallenge",
            Self::PlaneRogue => "PlaneRogue",
            Self::PlaneRaid => "PlaneRaid",
            Self::PlaneAetherDivide => "PlaneAetherDivide",
            Self::PlaneTrialActivity => "PlaneTrialActivity",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PlaneUnknown" => Some(Self::PlaneUnknown),
            "PlaneTown" => Some(Self::PlaneTown),
            "PlaneMaze" => Some(Self::PlaneMaze),
            "PlaneTrain" => Some(Self::PlaneTrain),
            "PlaneChallenge" => Some(Self::PlaneChallenge),
            "PlaneRogue" => Some(Self::PlaneRogue),
            "PlaneRaid" => Some(Self::PlaneRaid),
            "PlaneAetherDivide" => Some(Self::PlaneAetherDivide),
            "PlaneTrialActivity" => Some(Self::PlaneTrialActivity),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum AvatarSlotType {
    AvatarSlot1 = 0,
    AvatarSlot2 = 1,
    AvatarSlot3 = 2,
}
impl AvatarSlotType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::AvatarSlot1 => "AVATAR_SLOT_1",
            Self::AvatarSlot2 => "AVATAR_SLOT_2",
            Self::AvatarSlot3 => "AVATAR_SLOT_3",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "AVATAR_SLOT_1" => Some(Self::AvatarSlot1),
            "AVATAR_SLOT_2" => Some(Self::AvatarSlot2),
            "AVATAR_SLOT_3" => Some(Self::AvatarSlot3),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ItemType {
    None = 0,
    ItemAvatarCard = 1,
    ItemEquipment = 2,
    ItemMaterial = 3,
    ItemAvatarExp = 4,
    ItemRelic = 5,
}
impl ItemType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "ITEM_TYPE_NONE",
            Self::ItemAvatarCard => "ITEM_AVATAR_CARD",
            Self::ItemEquipment => "ITEM_EQUIPMENT",
            Self::ItemMaterial => "ITEM_MATERIAL",
            Self::ItemAvatarExp => "ITEM_AVATAR_EXP",
            Self::ItemRelic => "ITEM_RELIC",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ITEM_TYPE_NONE" => Some(Self::None),
            "ITEM_AVATAR_CARD" => Some(Self::ItemAvatarCard),
            "ITEM_EQUIPMENT" => Some(Self::ItemEquipment),
            "ITEM_MATERIAL" => Some(Self::ItemMaterial),
            "ITEM_AVATAR_EXP" => Some(Self::ItemAvatarExp),
            "ITEM_RELIC" => Some(Self::ItemRelic),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum VirtualItemType {
    VirtualItemNone = 0,
    VirtualItemHcoin = 1,
    VirtualItemScoin = 2,
    VirtualItemMcoin = 3,
    VirtualItemStamina = 11,
    VirtualItemReserveStamina = 12,
    VirtualItemAvatarExp = 21,
    VirtualItemExp = 22,
    VirtualItemDailyActivePoint = 23,
    VirtualItemMpMax = 24,
    VirtualItemPlayerReturnPoint = 25,
    VirtualItemBattleCollegePoint = 26,
    VirtualItemRogueCoin = 31,
    VirtualItemRogueTalentCoin = 32,
    VirtualItemRogueRewardKey = 33,
    VirtualItemAchievementExp = 41,
    VirtualItemBpExp = 51,
    VirtualItemBpRealExp = 52,
    VirtualItemMuseumFunds = 53,
    VirtualTrainpartyBuildingFunds = 54,
    VirtualTrainpartyAreaUnlockCoin = 55,
    VirtualTrainpartyMobility = 56,
    VirtualItemWarriorExp = 190,
    VirtualItemRogueExp = 191,
    VirtualItemMageExp = 192,
    VirtualItemShamanExp = 193,
    VirtualItemWarlockExp = 194,
    VirtualItemKnightExp = 195,
    VirtualItemPriestExp = 196,
    VirtualItemPunkLordPoint = 100000,
    VirtualItemGameplayCounterMonsterSneakVision = 280001,
    VirtualItemGameplayCounterWolfBroBullet = 280002,
    VirtualItemAlleyFunds = 281001,
    VirtualItemRoguePumanCoupon = 281012,
    VirtualItemMonthCard = 300101,
    VirtualItemBpNormal = 300102,
    VirtualItemBpDeluxe = 300103,
    VirtualItemBpUpgrade = 300104,
    VirtualItemHeliobusFans = 281002,
    VirtualItemSpaceZooHybridItem = 281003,
    VirtualItemSpaceZooExpPoint = 281004,
    VirtualItemRogueNousTalentCoin = 281013,
    VirtualItemEvolveBuildCoin = 281019,
    VirtualItemDrinkMakerTip = 281005,
    VirtualItemMonopolyDice = 281014,
    VirtualItemMonopolyCoin = 281015,
    VirtualItemMonopolyCheatdice = 281016,
    VirtualItemMonopolyReroll = 281017,
    VirtualItemRogueTournPermanentTalentCoin = 281018,
    VirtualItemRogueTournSeasonTalentCoin = 281020,
    VirtualItemRogueTournExp = 281022,
    VirtualItemMatchthreeCoin = 281024,
    VirtualItemSwordTrainingSkillPoint = 281023,
    VirtualItemFightFestCoin = 281025,
    VirtualItemRogueMagicTalentCoin = 281026,
}
impl VirtualItemType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::VirtualItemNone => "VIRTUAL_ITEM_NONE",
            Self::VirtualItemHcoin => "VIRTUAL_ITEM_HCOIN",
            Self::VirtualItemScoin => "VIRTUAL_ITEM_SCOIN",
            Self::VirtualItemMcoin => "VIRTUAL_ITEM_MCOIN",
            Self::VirtualItemStamina => "VIRTUAL_ITEM_STAMINA",
            Self::VirtualItemReserveStamina => "VIRTUAL_ITEM_RESERVE_STAMINA",
            Self::VirtualItemAvatarExp => "VIRTUAL_ITEM_AVATAR_EXP",
            Self::VirtualItemExp => "VIRTUAL_ITEM_EXP",
            Self::VirtualItemDailyActivePoint => "VIRTUAL_ITEM_DAILY_ACTIVE_POINT",
            Self::VirtualItemMpMax => "VIRTUAL_ITEM_MP_MAX",
            Self::VirtualItemPlayerReturnPoint => "VIRTUAL_ITEM_PLAYER_RETURN_POINT",
            Self::VirtualItemBattleCollegePoint => "VIRTUAL_ITEM_BATTLE_COLLEGE_POINT",
            Self::VirtualItemRogueCoin => "VIRTUAL_ITEM_ROGUE_COIN",
            Self::VirtualItemRogueTalentCoin => "VIRTUAL_ITEM_ROGUE_TALENT_COIN",
            Self::VirtualItemRogueRewardKey => "VIRTUAL_ITEM_ROGUE_REWARD_KEY",
            Self::VirtualItemAchievementExp => "VIRTUAL_ITEM_ACHIEVEMENT_EXP",
            Self::VirtualItemBpExp => "VIRTUAL_ITEM_BP_EXP",
            Self::VirtualItemBpRealExp => "VIRTUAL_ITEM_BP_REAL_EXP",
            Self::VirtualItemMuseumFunds => "VIRTUAL_ITEM_MUSEUM_FUNDS",
            Self::VirtualTrainpartyBuildingFunds => "VIRTUAL_TRAINPARTY_BUILDING_FUNDS",
            Self::VirtualTrainpartyAreaUnlockCoin => {
                "VIRTUAL_TRAINPARTY_AREA_UNLOCK_COIN"
            }
            Self::VirtualTrainpartyMobility => "VIRTUAL_TRAINPARTY_MOBILITY",
            Self::VirtualItemWarriorExp => "VIRTUAL_ITEM_WARRIOR_EXP",
            Self::VirtualItemRogueExp => "VIRTUAL_ITEM_ROGUE_EXP",
            Self::VirtualItemMageExp => "VIRTUAL_ITEM_MAGE_EXP",
            Self::VirtualItemShamanExp => "VIRTUAL_ITEM_SHAMAN_EXP",
            Self::VirtualItemWarlockExp => "VIRTUAL_ITEM_WARLOCK_EXP",
            Self::VirtualItemKnightExp => "VIRTUAL_ITEM_KNIGHT_EXP",
            Self::VirtualItemPriestExp => "VIRTUAL_ITEM_PRIEST_EXP",
            Self::VirtualItemPunkLordPoint => "VIRTUAL_ITEM_PUNK_LORD_POINT",
            Self::VirtualItemGameplayCounterMonsterSneakVision => {
                "VIRTUAL_ITEM_GAMEPLAY_COUNTER_MONSTER_SNEAK_VISION"
            }
            Self::VirtualItemGameplayCounterWolfBroBullet => {
                "VIRTUAL_ITEM_GAMEPLAY_COUNTER_WOLF_BRO_BULLET"
            }
            Self::VirtualItemAlleyFunds => "VIRTUAL_ITEM_ALLEY_FUNDS",
            Self::VirtualItemRoguePumanCoupon => "VIRTUAL_ITEM_ROGUE_PUMAN_COUPON",
            Self::VirtualItemMonthCard => "VIRTUAL_ITEM_MONTH_CARD",
            Self::VirtualItemBpNormal => "VIRTUAL_ITEM_BP_NORMAL",
            Self::VirtualItemBpDeluxe => "VIRTUAL_ITEM_BP_DELUXE",
            Self::VirtualItemBpUpgrade => "VIRTUAL_ITEM_BP_UPGRADE",
            Self::VirtualItemHeliobusFans => "VIRTUAL_ITEM_HELIOBUS_FANS",
            Self::VirtualItemSpaceZooHybridItem => "VIRTUAL_ITEM_SPACE_ZOO_HYBRID_ITEM",
            Self::VirtualItemSpaceZooExpPoint => "VIRTUAL_ITEM_SPACE_ZOO_EXP_POINT",
            Self::VirtualItemRogueNousTalentCoin => "VIRTUAL_ITEM_ROGUE_NOUS_TALENT_COIN",
            Self::VirtualItemEvolveBuildCoin => "VIRTUAL_ITEM_EVOLVE_BUILD_COIN",
            Self::VirtualItemDrinkMakerTip => "VIRTUAL_ITEM_DRINK_MAKER_TIP",
            Self::VirtualItemMonopolyDice => "VIRTUAL_ITEM_MONOPOLY_DICE",
            Self::VirtualItemMonopolyCoin => "VIRTUAL_ITEM_MONOPOLY_COIN",
            Self::VirtualItemMonopolyCheatdice => "VIRTUAL_ITEM_MONOPOLY_CHEATDICE",
            Self::VirtualItemMonopolyReroll => "VIRTUAL_ITEM_MONOPOLY_REROLL",
            Self::VirtualItemRogueTournPermanentTalentCoin => {
                "VIRTUAL_ITEM_ROGUE_TOURN_PERMANENT_TALENT_COIN"
            }
            Self::VirtualItemRogueTournSeasonTalentCoin => {
                "VIRTUAL_ITEM_ROGUE_TOURN_SEASON_TALENT_COIN"
            }
            Self::VirtualItemRogueTournExp => "VIRTUAL_ITEM_ROGUE_TOURN_EXP",
            Self::VirtualItemMatchthreeCoin => "VIRTUAL_ITEM_MATCHTHREE_COIN",
            Self::VirtualItemSwordTrainingSkillPoint => {
                "VIRTUAL_ITEM_SWORD_TRAINING_SKILL_POINT"
            }
            Self::VirtualItemFightFestCoin => "VIRTUAL_ITEM_FIGHT_FEST_COIN",
            Self::VirtualItemRogueMagicTalentCoin => {
                "VIRTUAL_ITEM_ROGUE_MAGIC_TALENT_COIN"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "VIRTUAL_ITEM_NONE" => Some(Self::VirtualItemNone),
            "VIRTUAL_ITEM_HCOIN" => Some(Self::VirtualItemHcoin),
            "VIRTUAL_ITEM_SCOIN" => Some(Self::VirtualItemScoin),
            "VIRTUAL_ITEM_MCOIN" => Some(Self::VirtualItemMcoin),
            "VIRTUAL_ITEM_STAMINA" => Some(Self::VirtualItemStamina),
            "VIRTUAL_ITEM_RESERVE_STAMINA" => Some(Self::VirtualItemReserveStamina),
            "VIRTUAL_ITEM_AVATAR_EXP" => Some(Self::VirtualItemAvatarExp),
            "VIRTUAL_ITEM_EXP" => Some(Self::VirtualItemExp),
            "VIRTUAL_ITEM_DAILY_ACTIVE_POINT" => Some(Self::VirtualItemDailyActivePoint),
            "VIRTUAL_ITEM_MP_MAX" => Some(Self::VirtualItemMpMax),
            "VIRTUAL_ITEM_PLAYER_RETURN_POINT" => {
                Some(Self::VirtualItemPlayerReturnPoint)
            }
            "VIRTUAL_ITEM_BATTLE_COLLEGE_POINT" => {
                Some(Self::VirtualItemBattleCollegePoint)
            }
            "VIRTUAL_ITEM_ROGUE_COIN" => Some(Self::VirtualItemRogueCoin),
            "VIRTUAL_ITEM_ROGUE_TALENT_COIN" => Some(Self::VirtualItemRogueTalentCoin),
            "VIRTUAL_ITEM_ROGUE_REWARD_KEY" => Some(Self::VirtualItemRogueRewardKey),
            "VIRTUAL_ITEM_ACHIEVEMENT_EXP" => Some(Self::VirtualItemAchievementExp),
            "VIRTUAL_ITEM_BP_EXP" => Some(Self::VirtualItemBpExp),
            "VIRTUAL_ITEM_BP_REAL_EXP" => Some(Self::VirtualItemBpRealExp),
            "VIRTUAL_ITEM_MUSEUM_FUNDS" => Some(Self::VirtualItemMuseumFunds),
            "VIRTUAL_TRAINPARTY_BUILDING_FUNDS" => {
                Some(Self::VirtualTrainpartyBuildingFunds)
            }
            "VIRTUAL_TRAINPARTY_AREA_UNLOCK_COIN" => {
                Some(Self::VirtualTrainpartyAreaUnlockCoin)
            }
            "VIRTUAL_TRAINPARTY_MOBILITY" => Some(Self::VirtualTrainpartyMobility),
            "VIRTUAL_ITEM_WARRIOR_EXP" => Some(Self::VirtualItemWarriorExp),
            "VIRTUAL_ITEM_ROGUE_EXP" => Some(Self::VirtualItemRogueExp),
            "VIRTUAL_ITEM_MAGE_EXP" => Some(Self::VirtualItemMageExp),
            "VIRTUAL_ITEM_SHAMAN_EXP" => Some(Self::VirtualItemShamanExp),
            "VIRTUAL_ITEM_WARLOCK_EXP" => Some(Self::VirtualItemWarlockExp),
            "VIRTUAL_ITEM_KNIGHT_EXP" => Some(Self::VirtualItemKnightExp),
            "VIRTUAL_ITEM_PRIEST_EXP" => Some(Self::VirtualItemPriestExp),
            "VIRTUAL_ITEM_PUNK_LORD_POINT" => Some(Self::VirtualItemPunkLordPoint),
            "VIRTUAL_ITEM_GAMEPLAY_COUNTER_MONSTER_SNEAK_VISION" => {
                Some(Self::VirtualItemGameplayCounterMonsterSneakVision)
            }
            "VIRTUAL_ITEM_GAMEPLAY_COUNTER_WOLF_BRO_BULLET" => {
                Some(Self::VirtualItemGameplayCounterWolfBroBullet)
            }
            "VIRTUAL_ITEM_ALLEY_FUNDS" => Some(Self::VirtualItemAlleyFunds),
            "VIRTUAL_ITEM_ROGUE_PUMAN_COUPON" => Some(Self::VirtualItemRoguePumanCoupon),
            "VIRTUAL_ITEM_MONTH_CARD" => Some(Self::VirtualItemMonthCard),
            "VIRTUAL_ITEM_BP_NORMAL" => Some(Self::VirtualItemBpNormal),
            "VIRTUAL_ITEM_BP_DELUXE" => Some(Self::VirtualItemBpDeluxe),
            "VIRTUAL_ITEM_BP_UPGRADE" => Some(Self::VirtualItemBpUpgrade),
            "VIRTUAL_ITEM_HELIOBUS_FANS" => Some(Self::VirtualItemHeliobusFans),
            "VIRTUAL_ITEM_SPACE_ZOO_HYBRID_ITEM" => {
                Some(Self::VirtualItemSpaceZooHybridItem)
            }
            "VIRTUAL_ITEM_SPACE_ZOO_EXP_POINT" => Some(Self::VirtualItemSpaceZooExpPoint),
            "VIRTUAL_ITEM_ROGUE_NOUS_TALENT_COIN" => {
                Some(Self::VirtualItemRogueNousTalentCoin)
            }
            "VIRTUAL_ITEM_EVOLVE_BUILD_COIN" => Some(Self::VirtualItemEvolveBuildCoin),
            "VIRTUAL_ITEM_DRINK_MAKER_TIP" => Some(Self::VirtualItemDrinkMakerTip),
            "VIRTUAL_ITEM_MONOPOLY_DICE" => Some(Self::VirtualItemMonopolyDice),
            "VIRTUAL_ITEM_MONOPOLY_COIN" => Some(Self::VirtualItemMonopolyCoin),
            "VIRTUAL_ITEM_MONOPOLY_CHEATDICE" => Some(Self::VirtualItemMonopolyCheatdice),
            "VIRTUAL_ITEM_MONOPOLY_REROLL" => Some(Self::VirtualItemMonopolyReroll),
            "VIRTUAL_ITEM_ROGUE_TOURN_PERMANENT_TALENT_COIN" => {
                Some(Self::VirtualItemRogueTournPermanentTalentCoin)
            }
            "VIRTUAL_ITEM_ROGUE_TOURN_SEASON_TALENT_COIN" => {
                Some(Self::VirtualItemRogueTournSeasonTalentCoin)
            }
            "VIRTUAL_ITEM_ROGUE_TOURN_EXP" => Some(Self::VirtualItemRogueTournExp),
            "VIRTUAL_ITEM_MATCHTHREE_COIN" => Some(Self::VirtualItemMatchthreeCoin),
            "VIRTUAL_ITEM_SWORD_TRAINING_SKILL_POINT" => {
                Some(Self::VirtualItemSwordTrainingSkillPoint)
            }
            "VIRTUAL_ITEM_FIGHT_FEST_COIN" => Some(Self::VirtualItemFightFestCoin),
            "VIRTUAL_ITEM_ROGUE_MAGIC_TALENT_COIN" => {
                Some(Self::VirtualItemRogueMagicTalentCoin)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum GameplayCounterType {
    GameplayCounterNone = 0,
    GameplayCounterMonsterSneakVision = 280001,
}
impl GameplayCounterType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::GameplayCounterNone => "GAMEPLAY_COUNTER_NONE",
            Self::GameplayCounterMonsterSneakVision => {
                "GAMEPLAY_COUNTER_MONSTER_SNEAK_VISION"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "GAMEPLAY_COUNTER_NONE" => Some(Self::GameplayCounterNone),
            "GAMEPLAY_COUNTER_MONSTER_SNEAK_VISION" => {
                Some(Self::GameplayCounterMonsterSneakVision)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum BlackLimitLevel {
    All = 0,
}
impl BlackLimitLevel {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::All => "BLACK_LIMIT_LEVEL_ALL",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "BLACK_LIMIT_LEVEL_ALL" => Some(Self::All),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum AreaType {
    AreaNone = 0,
    AreaCn = 1,
    AreaJp = 2,
    AreaAsia = 3,
    AreaWest = 4,
    AreaKr = 5,
    AreaOverseas = 6,
}
impl AreaType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::AreaNone => "AREA_NONE",
            Self::AreaCn => "AREA_CN",
            Self::AreaJp => "AREA_JP",
            Self::AreaAsia => "AREA_ASIA",
            Self::AreaWest => "AREA_WEST",
            Self::AreaKr => "AREA_KR",
            Self::AreaOverseas => "AREA_OVERSEAS",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "AREA_NONE" => Some(Self::AreaNone),
            "AREA_CN" => Some(Self::AreaCn),
            "AREA_JP" => Some(Self::AreaJp),
            "AREA_ASIA" => Some(Self::AreaAsia),
            "AREA_WEST" => Some(Self::AreaWest),
            "AREA_KR" => Some(Self::AreaKr),
            "AREA_OVERSEAS" => Some(Self::AreaOverseas),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum EntityType {
    EntityNone = 0,
    EntityAvatar = 1,
    EntityMonster = 2,
    EntityNpc = 3,
    EntityProp = 4,
    EntityTrigger = 5,
    EntityEnv = 6,
    EntitySummonUnit = 7,
}
impl EntityType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::EntityNone => "ENTITY_NONE",
            Self::EntityAvatar => "ENTITY_AVATAR",
            Self::EntityMonster => "ENTITY_MONSTER",
            Self::EntityNpc => "ENTITY_NPC",
            Self::EntityProp => "ENTITY_PROP",
            Self::EntityTrigger => "ENTITY_TRIGGER",
            Self::EntityEnv => "ENTITY_ENV",
            Self::EntitySummonUnit => "ENTITY_SUMMON_UNIT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ENTITY_NONE" => Some(Self::EntityNone),
            "ENTITY_AVATAR" => Some(Self::EntityAvatar),
            "ENTITY_MONSTER" => Some(Self::EntityMonster),
            "ENTITY_NPC" => Some(Self::EntityNpc),
            "ENTITY_PROP" => Some(Self::EntityProp),
            "ENTITY_TRIGGER" => Some(Self::EntityTrigger),
            "ENTITY_ENV" => Some(Self::EntityEnv),
            "ENTITY_SUMMON_UNIT" => Some(Self::EntitySummonUnit),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum LanguageType {
    LanguageNone = 0,
    LanguageSc = 1,
    LanguageTc = 2,
    LanguageEn = 3,
    LanguageKr = 4,
    LanguageJp = 5,
    LanguageFr = 6,
    LanguageDe = 7,
    LanguageEs = 8,
    LanguagePt = 9,
    LanguageRu = 10,
    LanguageTh = 11,
    LanguageVi = 12,
    LanguageId = 13,
}
impl LanguageType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::LanguageNone => "LANGUAGE_NONE",
            Self::LanguageSc => "LANGUAGE_SC",
            Self::LanguageTc => "LANGUAGE_TC",
            Self::LanguageEn => "LANGUAGE_EN",
            Self::LanguageKr => "LANGUAGE_KR",
            Self::LanguageJp => "LANGUAGE_JP",
            Self::LanguageFr => "LANGUAGE_FR",
            Self::LanguageDe => "LANGUAGE_DE",
            Self::LanguageEs => "LANGUAGE_ES",
            Self::LanguagePt => "LANGUAGE_PT",
            Self::LanguageRu => "LANGUAGE_RU",
            Self::LanguageTh => "LANGUAGE_TH",
            Self::LanguageVi => "LANGUAGE_VI",
            Self::LanguageId => "LANGUAGE_ID",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "LANGUAGE_NONE" => Some(Self::LanguageNone),
            "LANGUAGE_SC" => Some(Self::LanguageSc),
            "LANGUAGE_TC" => Some(Self::LanguageTc),
            "LANGUAGE_EN" => Some(Self::LanguageEn),
            "LANGUAGE_KR" => Some(Self::LanguageKr),
            "LANGUAGE_JP" => Some(Self::LanguageJp),
            "LANGUAGE_FR" => Some(Self::LanguageFr),
            "LANGUAGE_DE" => Some(Self::LanguageDe),
            "LANGUAGE_ES" => Some(Self::LanguageEs),
            "LANGUAGE_PT" => Some(Self::LanguagePt),
            "LANGUAGE_RU" => Some(Self::LanguageRu),
            "LANGUAGE_TH" => Some(Self::LanguageTh),
            "LANGUAGE_VI" => Some(Self::LanguageVi),
            "LANGUAGE_ID" => Some(Self::LanguageId),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum PlatformType {
    Editor = 0,
    Ios = 1,
    Android = 2,
    Pc = 3,
    Web = 4,
    Wap = 5,
    Ps4 = 6,
    Nintendo = 7,
    CloudAndroid = 8,
    CloudPc = 9,
    CloudIos = 10,
    Ps5 = 11,
    Mac = 12,
    CloudMac = 13,
    CloudWebAndroid = 20,
    CloudWebIos = 21,
    CloudWebPc = 22,
    CloudWebMac = 23,
    CloudWebTouch = 24,
    CloudWebKeyboard = 25,
}
impl PlatformType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Editor => "EDITOR",
            Self::Ios => "IOS",
            Self::Android => "ANDROID",
            Self::Pc => "PC",
            Self::Web => "WEB",
            Self::Wap => "WAP",
            Self::Ps4 => "PS4",
            Self::Nintendo => "NINTENDO",
            Self::CloudAndroid => "CLOUD_ANDROID",
            Self::CloudPc => "CLOUD_PC",
            Self::CloudIos => "CLOUD_IOS",
            Self::Ps5 => "PS5",
            Self::Mac => "MAC",
            Self::CloudMac => "CLOUD_MAC",
            Self::CloudWebAndroid => "CLOUD_WEB_ANDROID",
            Self::CloudWebIos => "CLOUD_WEB_IOS",
            Self::CloudWebPc => "CLOUD_WEB_PC",
            Self::CloudWebMac => "CLOUD_WEB_MAC",
            Self::CloudWebTouch => "CLOUD_WEB_TOUCH",
            Self::CloudWebKeyboard => "CLOUD_WEB_KEYBOARD",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "EDITOR" => Some(Self::Editor),
            "IOS" => Some(Self::Ios),
            "ANDROID" => Some(Self::Android),
            "PC" => Some(Self::Pc),
            "WEB" => Some(Self::Web),
            "WAP" => Some(Self::Wap),
            "PS4" => Some(Self::Ps4),
            "NINTENDO" => Some(Self::Nintendo),
            "CLOUD_ANDROID" => Some(Self::CloudAndroid),
            "CLOUD_PC" => Some(Self::CloudPc),
            "CLOUD_IOS" => Some(Self::CloudIos),
            "PS5" => Some(Self::Ps5),
            "MAC" => Some(Self::Mac),
            "CLOUD_MAC" => Some(Self::CloudMac),
            "CLOUD_WEB_ANDROID" => Some(Self::CloudWebAndroid),
            "CLOUD_WEB_IOS" => Some(Self::CloudWebIos),
            "CLOUD_WEB_PC" => Some(Self::CloudWebPc),
            "CLOUD_WEB_MAC" => Some(Self::CloudWebMac),
            "CLOUD_WEB_TOUCH" => Some(Self::CloudWebTouch),
            "CLOUD_WEB_KEYBOARD" => Some(Self::CloudWebKeyboard),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ReloginType {
    NoKick = 0,
    ForceKick = 1,
    IdleKick = 2,
    Silence = 3,
}
impl ReloginType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::NoKick => "NO_KICK",
            Self::ForceKick => "FORCE_KICK",
            Self::IdleKick => "IDLE_KICK",
            Self::Silence => "SILENCE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "NO_KICK" => Some(Self::NoKick),
            "FORCE_KICK" => Some(Self::ForceKick),
            "IDLE_KICK" => Some(Self::IdleKick),
            "SILENCE" => Some(Self::Silence),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum AvatarType {
    None = 0,
    AvatarTrialType = 1,
    AvatarLimitType = 2,
    AvatarFormalType = 3,
    AvatarAssistType = 4,
    AvatarAetherDivideType = 5,
    AvatarUpgradeAvailableType = 6,
}
impl AvatarType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "AVATAR_TYPE_NONE",
            Self::AvatarTrialType => "AVATAR_TRIAL_TYPE",
            Self::AvatarLimitType => "AVATAR_LIMIT_TYPE",
            Self::AvatarFormalType => "AVATAR_FORMAL_TYPE",
            Self::AvatarAssistType => "AVATAR_ASSIST_TYPE",
            Self::AvatarAetherDivideType => "AVATAR_AETHER_DIVIDE_TYPE",
            Self::AvatarUpgradeAvailableType => "AVATAR_UPGRADE_AVAILABLE_TYPE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "AVATAR_TYPE_NONE" => Some(Self::None),
            "AVATAR_TRIAL_TYPE" => Some(Self::AvatarTrialType),
            "AVATAR_LIMIT_TYPE" => Some(Self::AvatarLimitType),
            "AVATAR_FORMAL_TYPE" => Some(Self::AvatarFormalType),
            "AVATAR_ASSIST_TYPE" => Some(Self::AvatarAssistType),
            "AVATAR_AETHER_DIVIDE_TYPE" => Some(Self::AvatarAetherDivideType),
            "AVATAR_UPGRADE_AVAILABLE_TYPE" => Some(Self::AvatarUpgradeAvailableType),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum MultiPathAvatarType {
    None = 0,
    Mar7thKnightType = 1001,
    Mar7thRogueType = 1224,
    BoyWarriorType = 8001,
    GirlWarriorType = 8002,
    BoyKnightType = 8003,
    GirlKnightType = 8004,
    BoyShamanType = 8005,
    GirlShamanType = 8006,
    BoyMemoryType = 8007,
    GirlMemoryType = 8008,
}
impl MultiPathAvatarType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "MultiPathAvatarTypeNone",
            Self::Mar7thKnightType => "Mar_7thKnightType",
            Self::Mar7thRogueType => "Mar_7thRogueType",
            Self::BoyWarriorType => "BoyWarriorType",
            Self::GirlWarriorType => "GirlWarriorType",
            Self::BoyKnightType => "BoyKnightType",
            Self::GirlKnightType => "GirlKnightType",
            Self::BoyShamanType => "BoyShamanType",
            Self::GirlShamanType => "GirlShamanType",
            Self::BoyMemoryType => "BoyMemoryType",
            Self::GirlMemoryType => "GirlMemoryType",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MultiPathAvatarTypeNone" => Some(Self::None),
            "Mar_7thKnightType" => Some(Self::Mar7thKnightType),
            "Mar_7thRogueType" => Some(Self::Mar7thRogueType),
            "BoyWarriorType" => Some(Self::BoyWarriorType),
            "GirlWarriorType" => Some(Self::GirlWarriorType),
            "BoyKnightType" => Some(Self::BoyKnightType),
            "GirlKnightType" => Some(Self::GirlKnightType),
            "BoyShamanType" => Some(Self::BoyShamanType),
            "GirlShamanType" => Some(Self::GirlShamanType),
            "BoyMemoryType" => Some(Self::BoyMemoryType),
            "GirlMemoryType" => Some(Self::GirlMemoryType),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Gender {
    None = 0,
    Man = 1,
    Woman = 2,
}
impl Gender {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "GenderNone",
            Self::Man => "GenderMan",
            Self::Woman => "GenderWoman",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "GenderNone" => Some(Self::None),
            "GenderMan" => Some(Self::Man),
            "GenderWoman" => Some(Self::Woman),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ProductType {
    ProductNone = 0,
    ProductNormal = 1,
    ProductLimit = 2,
    ProductLimitNoPay = 3,
    ProductNoProcessOrder = 4,
}
impl ProductType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::ProductNone => "PRODUCT_NONE",
            Self::ProductNormal => "PRODUCT_NORMAL",
            Self::ProductLimit => "PRODUCT_LIMIT",
            Self::ProductLimitNoPay => "PRODUCT_LIMIT_NO_PAY",
            Self::ProductNoProcessOrder => "PRODUCT_NO_PROCESS_ORDER",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PRODUCT_NONE" => Some(Self::ProductNone),
            "PRODUCT_NORMAL" => Some(Self::ProductNormal),
            "PRODUCT_LIMIT" => Some(Self::ProductLimit),
            "PRODUCT_LIMIT_NO_PAY" => Some(Self::ProductLimitNoPay),
            "PRODUCT_NO_PROCESS_ORDER" => Some(Self::ProductNoProcessOrder),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ProductGiftType {
    ProductGiftNone = 0,
    ProductGiftCoin = 1,
    ProductGiftMonthCard = 2,
    ProductGiftBp68 = 3,
    ProductGiftBp128 = 4,
    ProductGiftBp68Upgrade128 = 5,
    ProductGiftPointCard = 6,
    ProductGiftPsPreOrder1 = 7,
    ProductGiftPsPreOrder2 = 8,
    ProductGiftGooglePoints100 = 9,
    ProductGiftGooglePoints150 = 10,
    ProductGiftPsPointCard030 = 11,
    ProductGiftPsPointCard050 = 12,
    ProductGiftPsPointCard100 = 13,
}
impl ProductGiftType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::ProductGiftNone => "PRODUCT_GIFT_NONE",
            Self::ProductGiftCoin => "PRODUCT_GIFT_COIN",
            Self::ProductGiftMonthCard => "PRODUCT_GIFT_MONTH_CARD",
            Self::ProductGiftBp68 => "PRODUCT_GIFT_BP_68",
            Self::ProductGiftBp128 => "PRODUCT_GIFT_BP_128",
            Self::ProductGiftBp68Upgrade128 => "PRODUCT_GIFT_BP68_UPGRADE_128",
            Self::ProductGiftPointCard => "PRODUCT_GIFT_POINT_CARD",
            Self::ProductGiftPsPreOrder1 => "PRODUCT_GIFT_PS_PRE_ORDER_1",
            Self::ProductGiftPsPreOrder2 => "PRODUCT_GIFT_PS_PRE_ORDER_2",
            Self::ProductGiftGooglePoints100 => "PRODUCT_GIFT_GOOGLE_POINTS_100",
            Self::ProductGiftGooglePoints150 => "PRODUCT_GIFT_GOOGLE_POINTS_150",
            Self::ProductGiftPsPointCard030 => "PRODUCT_GIFT_PS_POINT_CARD_030",
            Self::ProductGiftPsPointCard050 => "PRODUCT_GIFT_PS_POINT_CARD_050",
            Self::ProductGiftPsPointCard100 => "PRODUCT_GIFT_PS_POINT_CARD_100",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PRODUCT_GIFT_NONE" => Some(Self::ProductGiftNone),
            "PRODUCT_GIFT_COIN" => Some(Self::ProductGiftCoin),
            "PRODUCT_GIFT_MONTH_CARD" => Some(Self::ProductGiftMonthCard),
            "PRODUCT_GIFT_BP_68" => Some(Self::ProductGiftBp68),
            "PRODUCT_GIFT_BP_128" => Some(Self::ProductGiftBp128),
            "PRODUCT_GIFT_BP68_UPGRADE_128" => Some(Self::ProductGiftBp68Upgrade128),
            "PRODUCT_GIFT_POINT_CARD" => Some(Self::ProductGiftPointCard),
            "PRODUCT_GIFT_PS_PRE_ORDER_1" => Some(Self::ProductGiftPsPreOrder1),
            "PRODUCT_GIFT_PS_PRE_ORDER_2" => Some(Self::ProductGiftPsPreOrder2),
            "PRODUCT_GIFT_GOOGLE_POINTS_100" => Some(Self::ProductGiftGooglePoints100),
            "PRODUCT_GIFT_GOOGLE_POINTS_150" => Some(Self::ProductGiftGooglePoints150),
            "PRODUCT_GIFT_PS_POINT_CARD_030" => Some(Self::ProductGiftPsPointCard030),
            "PRODUCT_GIFT_PS_POINT_CARD_050" => Some(Self::ProductGiftPsPointCard050),
            "PRODUCT_GIFT_PS_POINT_CARD_100" => Some(Self::ProductGiftPsPointCard100),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum FeatureSwitchType {
    FeatureSwitchNone = 0,
    FeatureSwitchShop = 1,
    FeatureSwitchLineupName = 2,
    FeatureSwitchRechargeShop = 3,
    FeatureSwitchNickname = 4,
    FeatureSwitchSignature = 5,
    FeatureSwitchBattlepass = 6,
    FeatureSwitchPunkLord = 7,
    FeatureSwitchMonthcardDaily = 8,
    FeatureSwitchPictureShare = 9,
    FeatureSwitchRogue = 10,
    FeatureSwitchChallenge = 11,
    FeatureSwitchCocoon = 12,
    FeatureSwitchRaid = 13,
    FeatureSwitchMazePlaneEvent = 14,
    FeatureSwitchActivityPanel = 15,
    FeatureSwitchMailbox = 16,
    FeatureSwitchQuest = 17,
    FeatureSwitchGacha = 18,
    FeatureSwitchChat = 19,
    FeatureSwitchModifyFriendAlias = 20,
    FeatureSwitchUseItem = 21,
    FeatureSwitchActivitySchedule = 22,
    FeatureSwitchFarmElement = 23,
    FeatureSwitchAchievementLevel = 24,
    FeatureSwitchDailyActiveLevel = 25,
    FeatureSwitchPlayerReturn = 26,
    FeatureSwitchFirstSetNickname = 27,
    FeatureSwitchMainMissionReward = 28,
    FeatureSwitchSubMissionReward = 29,
    FeatureSwitchPamMission = 30,
    FeatureSwitchDestroyItem = 32,
    FeatureSwitchConsumeItemTurn = 33,
    FeatureSwitchRogueModifier = 34,
    FeatureSwitchChessRogue = 35,
    FeatureSwitchChessRogueBoard = 36,
    FeatureSwitchRollShop = 37,
    FeatureSwitchH5Return = 38,
    FeatureSwitchOffering = 39,
    FeatureSwitchServerRedPoint = 40,
    FeatureSwitchMonopolyOptionRatio = 41,
    FeatureSwitchMonopolyGetRaffleTicket = 42,
    FeatureSwitchMonopolyTakeRaffleReward = 43,
    FeatureSwitchChallengeRecommendLineup = 44,
    FeatureSwitchPsnMemberShipCheck = 45,
    FeatureSwitchPlayerBoardDevelopment = 46,
    FeatureSwitchPvp = 47,
    FeatureSwitchRogueMode = 48,
    FeatureSwitchRogueTournUgc = 49,
    FeatureSwitchRelicFilterPlanName = 50,
    FeatureSwitchMazeItemUseBuffDrop = 51,
    FeatureSwitchRedDot = 52,
    FeatureSwitchGameStateService = 53,
    FeatureSwitchBenefitIndex = 54,
    FeatureSwitchRogueTournBuildRef = 55,
    FeatureSwitchPreAvatarSetGrowthTarget = 56,
    FeatureSwitchMarseventhSkinHint = 57,
}
impl FeatureSwitchType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::FeatureSwitchNone => "FEATURE_SWITCH_NONE",
            Self::FeatureSwitchShop => "FEATURE_SWITCH_SHOP",
            Self::FeatureSwitchLineupName => "FEATURE_SWITCH_LINEUP_NAME",
            Self::FeatureSwitchRechargeShop => "FEATURE_SWITCH_RECHARGE_SHOP",
            Self::FeatureSwitchNickname => "FEATURE_SWITCH_NICKNAME",
            Self::FeatureSwitchSignature => "FEATURE_SWITCH_SIGNATURE",
            Self::FeatureSwitchBattlepass => "FEATURE_SWITCH_BATTLEPASS",
            Self::FeatureSwitchPunkLord => "FEATURE_SWITCH_PUNK_LORD",
            Self::FeatureSwitchMonthcardDaily => "FEATURE_SWITCH_MONTHCARD_DAILY",
            Self::FeatureSwitchPictureShare => "FEATURE_SWITCH_PICTURE_SHARE",
            Self::FeatureSwitchRogue => "FEATURE_SWITCH_ROGUE",
            Self::FeatureSwitchChallenge => "FEATURE_SWITCH_CHALLENGE",
            Self::FeatureSwitchCocoon => "FEATURE_SWITCH_COCOON",
            Self::FeatureSwitchRaid => "FEATURE_SWITCH_RAID",
            Self::FeatureSwitchMazePlaneEvent => "FEATURE_SWITCH_MAZE_PLANE_EVENT",
            Self::FeatureSwitchActivityPanel => "FEATURE_SWITCH_ACTIVITY_PANEL",
            Self::FeatureSwitchMailbox => "FEATURE_SWITCH_MAILBOX",
            Self::FeatureSwitchQuest => "FEATURE_SWITCH_QUEST",
            Self::FeatureSwitchGacha => "FEATURE_SWITCH_GACHA",
            Self::FeatureSwitchChat => "FEATURE_SWITCH_CHAT",
            Self::FeatureSwitchModifyFriendAlias => "FEATURE_SWITCH_MODIFY_FRIEND_ALIAS",
            Self::FeatureSwitchUseItem => "FEATURE_SWITCH_USE_ITEM",
            Self::FeatureSwitchActivitySchedule => "FEATURE_SWITCH_ACTIVITY_SCHEDULE",
            Self::FeatureSwitchFarmElement => "FEATURE_SWITCH_FARM_ELEMENT",
            Self::FeatureSwitchAchievementLevel => "FEATURE_SWITCH_ACHIEVEMENT_LEVEL",
            Self::FeatureSwitchDailyActiveLevel => "FEATURE_SWITCH_DAILY_ACTIVE_LEVEL",
            Self::FeatureSwitchPlayerReturn => "FEATURE_SWITCH_PLAYER_RETURN",
            Self::FeatureSwitchFirstSetNickname => "FEATURE_SWITCH_FIRST_SET_NICKNAME",
            Self::FeatureSwitchMainMissionReward => "FEATURE_SWITCH_MAIN_MISSION_REWARD",
            Self::FeatureSwitchSubMissionReward => "FEATURE_SWITCH_SUB_MISSION_REWARD",
            Self::FeatureSwitchPamMission => "FEATURE_SWITCH_PAM_MISSION",
            Self::FeatureSwitchDestroyItem => "FEATURE_SWITCH_DESTROY_ITEM",
            Self::FeatureSwitchConsumeItemTurn => "FEATURE_SWITCH_CONSUME_ITEM_TURN",
            Self::FeatureSwitchRogueModifier => "FEATURE_SWITCH_ROGUE_MODIFIER",
            Self::FeatureSwitchChessRogue => "FEATURE_SWITCH_CHESS_ROGUE",
            Self::FeatureSwitchChessRogueBoard => "FEATURE_SWITCH_CHESS_ROGUE_BOARD",
            Self::FeatureSwitchRollShop => "FEATURE_SWITCH_ROLL_SHOP",
            Self::FeatureSwitchH5Return => "FEATURE_SWITCH_H5_RETURN",
            Self::FeatureSwitchOffering => "FEATURE_SWITCH_OFFERING",
            Self::FeatureSwitchServerRedPoint => "FEATURE_SWITCH_SERVER_RED_POINT",
            Self::FeatureSwitchMonopolyOptionRatio => {
                "FEATURE_SWITCH_MONOPOLY_OPTION_RATIO"
            }
            Self::FeatureSwitchMonopolyGetRaffleTicket => {
                "FEATURE_SWITCH_MONOPOLY_GET_RAFFLE_TICKET"
            }
            Self::FeatureSwitchMonopolyTakeRaffleReward => {
                "FEATURE_SWITCH_MONOPOLY_TAKE_RAFFLE_REWARD"
            }
            Self::FeatureSwitchChallengeRecommendLineup => {
                "FEATURE_SWITCH_CHALLENGE_RECOMMEND_LINEUP"
            }
            Self::FeatureSwitchPsnMemberShipCheck => {
                "FEATURE_SWITCH_PSN_MEMBER_SHIP_CHECK"
            }
            Self::FeatureSwitchPlayerBoardDevelopment => {
                "FEATURE_SWITCH_PLAYER_BOARD_DEVELOPMENT"
            }
            Self::FeatureSwitchPvp => "FEATURE_SWITCH_PVP",
            Self::FeatureSwitchRogueMode => "FEATURE_SWITCH_ROGUE_MODE",
            Self::FeatureSwitchRogueTournUgc => "FEATURE_SWITCH_ROGUE_TOURN_UGC",
            Self::FeatureSwitchRelicFilterPlanName => {
                "FEATURE_SWITCH_RELIC_FILTER_PLAN_NAME"
            }
            Self::FeatureSwitchMazeItemUseBuffDrop => {
                "FEATURE_SWITCH_MAZE_ITEM_USE_BUFF_DROP"
            }
            Self::FeatureSwitchRedDot => "FEATURE_SWITCH_RED_DOT",
            Self::FeatureSwitchGameStateService => "FEATURE_SWITCH_GAME_STATE_SERVICE",
            Self::FeatureSwitchBenefitIndex => "FEATURE_SWITCH_BENEFIT_INDEX",
            Self::FeatureSwitchRogueTournBuildRef => {
                "FEATURE_SWITCH_ROGUE_TOURN_BUILD_REF"
            }
            Self::FeatureSwitchPreAvatarSetGrowthTarget => {
                "FEATURE_SWITCH_PRE_AVATAR_SET_GROWTH_TARGET"
            }
            Self::FeatureSwitchMarseventhSkinHint => {
                "FEATURE_SWITCH_MARSEVENTH_SKIN_HINT"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "FEATURE_SWITCH_NONE" => Some(Self::FeatureSwitchNone),
            "FEATURE_SWITCH_SHOP" => Some(Self::FeatureSwitchShop),
            "FEATURE_SWITCH_LINEUP_NAME" => Some(Self::FeatureSwitchLineupName),
            "FEATURE_SWITCH_RECHARGE_SHOP" => Some(Self::FeatureSwitchRechargeShop),
            "FEATURE_SWITCH_NICKNAME" => Some(Self::FeatureSwitchNickname),
            "FEATURE_SWITCH_SIGNATURE" => Some(Self::FeatureSwitchSignature),
            "FEATURE_SWITCH_BATTLEPASS" => Some(Self::FeatureSwitchBattlepass),
            "FEATURE_SWITCH_PUNK_LORD" => Some(Self::FeatureSwitchPunkLord),
            "FEATURE_SWITCH_MONTHCARD_DAILY" => Some(Self::FeatureSwitchMonthcardDaily),
            "FEATURE_SWITCH_PICTURE_SHARE" => Some(Self::FeatureSwitchPictureShare),
            "FEATURE_SWITCH_ROGUE" => Some(Self::FeatureSwitchRogue),
            "FEATURE_SWITCH_CHALLENGE" => Some(Self::FeatureSwitchChallenge),
            "FEATURE_SWITCH_COCOON" => Some(Self::FeatureSwitchCocoon),
            "FEATURE_SWITCH_RAID" => Some(Self::FeatureSwitchRaid),
            "FEATURE_SWITCH_MAZE_PLANE_EVENT" => Some(Self::FeatureSwitchMazePlaneEvent),
            "FEATURE_SWITCH_ACTIVITY_PANEL" => Some(Self::FeatureSwitchActivityPanel),
            "FEATURE_SWITCH_MAILBOX" => Some(Self::FeatureSwitchMailbox),
            "FEATURE_SWITCH_QUEST" => Some(Self::FeatureSwitchQuest),
            "FEATURE_SWITCH_GACHA" => Some(Self::FeatureSwitchGacha),
            "FEATURE_SWITCH_CHAT" => Some(Self::FeatureSwitchChat),
            "FEATURE_SWITCH_MODIFY_FRIEND_ALIAS" => {
                Some(Self::FeatureSwitchModifyFriendAlias)
            }
            "FEATURE_SWITCH_USE_ITEM" => Some(Self::FeatureSwitchUseItem),
            "FEATURE_SWITCH_ACTIVITY_SCHEDULE" => {
                Some(Self::FeatureSwitchActivitySchedule)
            }
            "FEATURE_SWITCH_FARM_ELEMENT" => Some(Self::FeatureSwitchFarmElement),
            "FEATURE_SWITCH_ACHIEVEMENT_LEVEL" => {
                Some(Self::FeatureSwitchAchievementLevel)
            }
            "FEATURE_SWITCH_DAILY_ACTIVE_LEVEL" => {
                Some(Self::FeatureSwitchDailyActiveLevel)
            }
            "FEATURE_SWITCH_PLAYER_RETURN" => Some(Self::FeatureSwitchPlayerReturn),
            "FEATURE_SWITCH_FIRST_SET_NICKNAME" => {
                Some(Self::FeatureSwitchFirstSetNickname)
            }
            "FEATURE_SWITCH_MAIN_MISSION_REWARD" => {
                Some(Self::FeatureSwitchMainMissionReward)
            }
            "FEATURE_SWITCH_SUB_MISSION_REWARD" => {
                Some(Self::FeatureSwitchSubMissionReward)
            }
            "FEATURE_SWITCH_PAM_MISSION" => Some(Self::FeatureSwitchPamMission),
            "FEATURE_SWITCH_DESTROY_ITEM" => Some(Self::FeatureSwitchDestroyItem),
            "FEATURE_SWITCH_CONSUME_ITEM_TURN" => {
                Some(Self::FeatureSwitchConsumeItemTurn)
            }
            "FEATURE_SWITCH_ROGUE_MODIFIER" => Some(Self::FeatureSwitchRogueModifier),
            "FEATURE_SWITCH_CHESS_ROGUE" => Some(Self::FeatureSwitchChessRogue),
            "FEATURE_SWITCH_CHESS_ROGUE_BOARD" => {
                Some(Self::FeatureSwitchChessRogueBoard)
            }
            "FEATURE_SWITCH_ROLL_SHOP" => Some(Self::FeatureSwitchRollShop),
            "FEATURE_SWITCH_H5_RETURN" => Some(Self::FeatureSwitchH5Return),
            "FEATURE_SWITCH_OFFERING" => Some(Self::FeatureSwitchOffering),
            "FEATURE_SWITCH_SERVER_RED_POINT" => Some(Self::FeatureSwitchServerRedPoint),
            "FEATURE_SWITCH_MONOPOLY_OPTION_RATIO" => {
                Some(Self::FeatureSwitchMonopolyOptionRatio)
            }
            "FEATURE_SWITCH_MONOPOLY_GET_RAFFLE_TICKET" => {
                Some(Self::FeatureSwitchMonopolyGetRaffleTicket)
            }
            "FEATURE_SWITCH_MONOPOLY_TAKE_RAFFLE_REWARD" => {
                Some(Self::FeatureSwitchMonopolyTakeRaffleReward)
            }
            "FEATURE_SWITCH_CHALLENGE_RECOMMEND_LINEUP" => {
                Some(Self::FeatureSwitchChallengeRecommendLineup)
            }
            "FEATURE_SWITCH_PSN_MEMBER_SHIP_CHECK" => {
                Some(Self::FeatureSwitchPsnMemberShipCheck)
            }
            "FEATURE_SWITCH_PLAYER_BOARD_DEVELOPMENT" => {
                Some(Self::FeatureSwitchPlayerBoardDevelopment)
            }
            "FEATURE_SWITCH_PVP" => Some(Self::FeatureSwitchPvp),
            "FEATURE_SWITCH_ROGUE_MODE" => Some(Self::FeatureSwitchRogueMode),
            "FEATURE_SWITCH_ROGUE_TOURN_UGC" => Some(Self::FeatureSwitchRogueTournUgc),
            "FEATURE_SWITCH_RELIC_FILTER_PLAN_NAME" => {
                Some(Self::FeatureSwitchRelicFilterPlanName)
            }
            "FEATURE_SWITCH_MAZE_ITEM_USE_BUFF_DROP" => {
                Some(Self::FeatureSwitchMazeItemUseBuffDrop)
            }
            "FEATURE_SWITCH_RED_DOT" => Some(Self::FeatureSwitchRedDot),
            "FEATURE_SWITCH_GAME_STATE_SERVICE" => {
                Some(Self::FeatureSwitchGameStateService)
            }
            "FEATURE_SWITCH_BENEFIT_INDEX" => Some(Self::FeatureSwitchBenefitIndex),
            "FEATURE_SWITCH_ROGUE_TOURN_BUILD_REF" => {
                Some(Self::FeatureSwitchRogueTournBuildRef)
            }
            "FEATURE_SWITCH_PRE_AVATAR_SET_GROWTH_TARGET" => {
                Some(Self::FeatureSwitchPreAvatarSetGrowthTarget)
            }
            "FEATURE_SWITCH_MARSEVENTH_SKIN_HINT" => {
                Some(Self::FeatureSwitchMarseventhSkinHint)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum SecretKeyType {
    SecretKeyNone = 0,
    SecretKeyServerCheck = 1,
    SecretKeyVideo = 2,
    SecretKeyBattleTime = 3,
}
impl SecretKeyType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::SecretKeyNone => "SECRET_KEY_NONE",
            Self::SecretKeyServerCheck => "SECRET_KEY_SERVER_CHECK",
            Self::SecretKeyVideo => "SECRET_KEY_VIDEO",
            Self::SecretKeyBattleTime => "SECRET_KEY_BATTLE_TIME",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SECRET_KEY_NONE" => Some(Self::SecretKeyNone),
            "SECRET_KEY_SERVER_CHECK" => Some(Self::SecretKeyServerCheck),
            "SECRET_KEY_VIDEO" => Some(Self::SecretKeyVideo),
            "SECRET_KEY_BATTLE_TIME" => Some(Self::SecretKeyBattleTime),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ReplayType {
    None = 0,
    PunkLord = 1,
}
impl ReplayType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "REPLAY_TYPE_NONE",
            Self::PunkLord => "REPLAY_TYPE_PUNK_LORD",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "REPLAY_TYPE_NONE" => Some(Self::None),
            "REPLAY_TYPE_PUNK_LORD" => Some(Self::PunkLord),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum PunkLordShareType {
    None = 0,
    Friend = 1,
    All = 2,
}
impl PunkLordShareType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "PUNK_LORD_SHARE_TYPE_NONE",
            Self::Friend => "PUNK_LORD_SHARE_TYPE_FRIEND",
            Self::All => "PUNK_LORD_SHARE_TYPE_ALL",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PUNK_LORD_SHARE_TYPE_NONE" => Some(Self::None),
            "PUNK_LORD_SHARE_TYPE_FRIEND" => Some(Self::Friend),
            "PUNK_LORD_SHARE_TYPE_ALL" => Some(Self::All),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum PunkLordAttackerStatus {
    None = 0,
    Attacked = 1,
    Attacking = 2,
    AttackedAndAttacking = 3,
}
impl PunkLordAttackerStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "PUNK_LORD_ATTACKER_STATUS_NONE",
            Self::Attacked => "PUNK_LORD_ATTACKER_STATUS_ATTACKED",
            Self::Attacking => "PUNK_LORD_ATTACKER_STATUS_ATTACKING",
            Self::AttackedAndAttacking => {
                "PUNK_LORD_ATTACKER_STATUS_ATTACKED_AND_ATTACKING"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PUNK_LORD_ATTACKER_STATUS_NONE" => Some(Self::None),
            "PUNK_LORD_ATTACKER_STATUS_ATTACKED" => Some(Self::Attacked),
            "PUNK_LORD_ATTACKER_STATUS_ATTACKING" => Some(Self::Attacking),
            "PUNK_LORD_ATTACKER_STATUS_ATTACKED_AND_ATTACKING" => {
                Some(Self::AttackedAndAttacking)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum PunkLordMonsterInfoNotifyReason {
    None = 0,
    EnterRaid = 1,
    BattleEnd = 2,
    LeaveRaid = 3,
}
impl PunkLordMonsterInfoNotifyReason {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "PUNK_LORD_MONSTER_INFO_NOTIFY_REASON_NONE",
            Self::EnterRaid => "PUNK_LORD_MONSTER_INFO_NOTIFY_REASON_ENTER_RAID",
            Self::BattleEnd => "PUNK_LORD_MONSTER_INFO_NOTIFY_REASON_BATTLE_END",
            Self::LeaveRaid => "PUNK_LORD_MONSTER_INFO_NOTIFY_REASON_LEAVE_RAID",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PUNK_LORD_MONSTER_INFO_NOTIFY_REASON_NONE" => Some(Self::None),
            "PUNK_LORD_MONSTER_INFO_NOTIFY_REASON_ENTER_RAID" => Some(Self::EnterRaid),
            "PUNK_LORD_MONSTER_INFO_NOTIFY_REASON_BATTLE_END" => Some(Self::BattleEnd),
            "PUNK_LORD_MONSTER_INFO_NOTIFY_REASON_LEAVE_RAID" => Some(Self::LeaveRaid),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ChatType {
    None = 0,
    Private = 1,
    Group = 2,
}
impl ChatType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CHAT_TYPE_NONE",
            Self::Private => "CHAT_TYPE_PRIVATE",
            Self::Group => "CHAT_TYPE_GROUP",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CHAT_TYPE_NONE" => Some(Self::None),
            "CHAT_TYPE_PRIVATE" => Some(Self::Private),
            "CHAT_TYPE_GROUP" => Some(Self::Group),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum MsgType {
    None = 0,
    CustomText = 1,
    Emoji = 2,
    Invite = 3,
}
impl MsgType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "MSG_TYPE_NONE",
            Self::CustomText => "MSG_TYPE_CUSTOM_TEXT",
            Self::Emoji => "MSG_TYPE_EMOJI",
            Self::Invite => "MSG_TYPE_INVITE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MSG_TYPE_NONE" => Some(Self::None),
            "MSG_TYPE_CUSTOM_TEXT" => Some(Self::CustomText),
            "MSG_TYPE_EMOJI" => Some(Self::Emoji),
            "MSG_TYPE_INVITE" => Some(Self::Invite),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ShieldType {
    None = 0,
    Replace = 1,
    Shied = 2,
}
impl ShieldType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "SHIELD_TYPE_NONE",
            Self::Replace => "SHIELD_TYPE_REPLACE",
            Self::Shied => "SHIELD_TYPE_SHIED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SHIELD_TYPE_NONE" => Some(Self::None),
            "SHIELD_TYPE_REPLACE" => Some(Self::Replace),
            "SHIELD_TYPE_SHIED" => Some(Self::Shied),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum FuncUnlockIdType {
    FuncUnlockIdNone = 0,
    FuncUnlockIdRelic = 403,
    FuncUnlockIdRelicNum = 404,
    FuncUnlockIdEquipment = 401,
    FuncUnlockIdSkilltree = 402,
    FuncUnlockIdGacha = 2300,
    FuncUnlockIdExpedition = 3100,
    FuncUnlockIdCompose = 4100,
    FuncUnlockIdFightactivity = 3700,
}
impl FuncUnlockIdType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::FuncUnlockIdNone => "FUNC_UNLOCK_ID_NONE",
            Self::FuncUnlockIdRelic => "FUNC_UNLOCK_ID_RELIC",
            Self::FuncUnlockIdRelicNum => "FUNC_UNLOCK_ID_RELIC_NUM",
            Self::FuncUnlockIdEquipment => "FUNC_UNLOCK_ID_EQUIPMENT",
            Self::FuncUnlockIdSkilltree => "FUNC_UNLOCK_ID_SKILLTREE",
            Self::FuncUnlockIdGacha => "FUNC_UNLOCK_ID_GACHA",
            Self::FuncUnlockIdExpedition => "FUNC_UNLOCK_ID_EXPEDITION",
            Self::FuncUnlockIdCompose => "FUNC_UNLOCK_ID_COMPOSE",
            Self::FuncUnlockIdFightactivity => "FUNC_UNLOCK_ID_FIGHTACTIVITY",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "FUNC_UNLOCK_ID_NONE" => Some(Self::FuncUnlockIdNone),
            "FUNC_UNLOCK_ID_RELIC" => Some(Self::FuncUnlockIdRelic),
            "FUNC_UNLOCK_ID_RELIC_NUM" => Some(Self::FuncUnlockIdRelicNum),
            "FUNC_UNLOCK_ID_EQUIPMENT" => Some(Self::FuncUnlockIdEquipment),
            "FUNC_UNLOCK_ID_SKILLTREE" => Some(Self::FuncUnlockIdSkilltree),
            "FUNC_UNLOCK_ID_GACHA" => Some(Self::FuncUnlockIdGacha),
            "FUNC_UNLOCK_ID_EXPEDITION" => Some(Self::FuncUnlockIdExpedition),
            "FUNC_UNLOCK_ID_COMPOSE" => Some(Self::FuncUnlockIdCompose),
            "FUNC_UNLOCK_ID_FIGHTACTIVITY" => Some(Self::FuncUnlockIdFightactivity),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum AssistAvatarType {
    AssistAvatarUnknow = 0,
    AssistAvatarLevel = 1,
    AssistAvatarRank = 2,
}
impl AssistAvatarType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::AssistAvatarUnknow => "ASSIST_AVATAR_UNKNOW",
            Self::AssistAvatarLevel => "ASSIST_AVATAR_LEVEL",
            Self::AssistAvatarRank => "ASSIST_AVATAR_RANK",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ASSIST_AVATAR_UNKNOW" => Some(Self::AssistAvatarUnknow),
            "ASSIST_AVATAR_LEVEL" => Some(Self::AssistAvatarLevel),
            "ASSIST_AVATAR_RANK" => Some(Self::AssistAvatarRank),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum DevelopmentType {
    DevelopmentNone = 0,
    DevelopmentRogueCosmos = 1,
    DevelopmentRogueChess = 2,
    DevelopmentRogueChessNous = 3,
    DevelopmentMemoryChallenge = 4,
    DevelopmentStoryChallenge = 5,
    DevelopmentUnlockAvatar = 6,
    DevelopmentUnlockEquipment = 7,
    DevelopmentActivityStart = 8,
    DevelopmentActivityEnd = 9,
    DevelopmentBossChallenge = 10,
    DevelopmentRogueTourn = 11,
    DevelopmentRogueTournWeek = 12,
    DevelopmentRogueMagic = 13,
}
impl DevelopmentType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::DevelopmentNone => "DEVELOPMENT_NONE",
            Self::DevelopmentRogueCosmos => "DEVELOPMENT_ROGUE_COSMOS",
            Self::DevelopmentRogueChess => "DEVELOPMENT_ROGUE_CHESS",
            Self::DevelopmentRogueChessNous => "DEVELOPMENT_ROGUE_CHESS_NOUS",
            Self::DevelopmentMemoryChallenge => "DEVELOPMENT_MEMORY_CHALLENGE",
            Self::DevelopmentStoryChallenge => "DEVELOPMENT_STORY_CHALLENGE",
            Self::DevelopmentUnlockAvatar => "DEVELOPMENT_UNLOCK_AVATAR",
            Self::DevelopmentUnlockEquipment => "DEVELOPMENT_UNLOCK_EQUIPMENT",
            Self::DevelopmentActivityStart => "DEVELOPMENT_ACTIVITY_START",
            Self::DevelopmentActivityEnd => "DEVELOPMENT_ACTIVITY_END",
            Self::DevelopmentBossChallenge => "DEVELOPMENT_BOSS_CHALLENGE",
            Self::DevelopmentRogueTourn => "DEVELOPMENT_ROGUE_TOURN",
            Self::DevelopmentRogueTournWeek => "DEVELOPMENT_ROGUE_TOURN_WEEK",
            Self::DevelopmentRogueMagic => "DEVELOPMENT_ROGUE_MAGIC",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "DEVELOPMENT_NONE" => Some(Self::DevelopmentNone),
            "DEVELOPMENT_ROGUE_COSMOS" => Some(Self::DevelopmentRogueCosmos),
            "DEVELOPMENT_ROGUE_CHESS" => Some(Self::DevelopmentRogueChess),
            "DEVELOPMENT_ROGUE_CHESS_NOUS" => Some(Self::DevelopmentRogueChessNous),
            "DEVELOPMENT_MEMORY_CHALLENGE" => Some(Self::DevelopmentMemoryChallenge),
            "DEVELOPMENT_STORY_CHALLENGE" => Some(Self::DevelopmentStoryChallenge),
            "DEVELOPMENT_UNLOCK_AVATAR" => Some(Self::DevelopmentUnlockAvatar),
            "DEVELOPMENT_UNLOCK_EQUIPMENT" => Some(Self::DevelopmentUnlockEquipment),
            "DEVELOPMENT_ACTIVITY_START" => Some(Self::DevelopmentActivityStart),
            "DEVELOPMENT_ACTIVITY_END" => Some(Self::DevelopmentActivityEnd),
            "DEVELOPMENT_BOSS_CHALLENGE" => Some(Self::DevelopmentBossChallenge),
            "DEVELOPMENT_ROGUE_TOURN" => Some(Self::DevelopmentRogueTourn),
            "DEVELOPMENT_ROGUE_TOURN_WEEK" => Some(Self::DevelopmentRogueTournWeek),
            "DEVELOPMENT_ROGUE_MAGIC" => Some(Self::DevelopmentRogueMagic),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum PlayingState {
    None = 0,
    PlayingRogueCosmos = 1,
    PlayingRogueChess = 2,
    PlayingRogueChessNous = 3,
    PlayingChallengeMemory = 4,
    PlayingChallengeStory = 5,
    PlayingChallengeBoss = 6,
    PlayingRogueTourn = 7,
    PlayingRogueMagic = 8,
}
impl PlayingState {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "PLAYING_STATE_NONE",
            Self::PlayingRogueCosmos => "PLAYING_ROGUE_COSMOS",
            Self::PlayingRogueChess => "PLAYING_ROGUE_CHESS",
            Self::PlayingRogueChessNous => "PLAYING_ROGUE_CHESS_NOUS",
            Self::PlayingChallengeMemory => "PLAYING_CHALLENGE_MEMORY",
            Self::PlayingChallengeStory => "PLAYING_CHALLENGE_STORY",
            Self::PlayingChallengeBoss => "PLAYING_CHALLENGE_BOSS",
            Self::PlayingRogueTourn => "PLAYING_ROGUE_TOURN",
            Self::PlayingRogueMagic => "PLAYING_ROGUE_MAGIC",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PLAYING_STATE_NONE" => Some(Self::None),
            "PLAYING_ROGUE_COSMOS" => Some(Self::PlayingRogueCosmos),
            "PLAYING_ROGUE_CHESS" => Some(Self::PlayingRogueChess),
            "PLAYING_ROGUE_CHESS_NOUS" => Some(Self::PlayingRogueChessNous),
            "PLAYING_CHALLENGE_MEMORY" => Some(Self::PlayingChallengeMemory),
            "PLAYING_CHALLENGE_STORY" => Some(Self::PlayingChallengeStory),
            "PLAYING_CHALLENGE_BOSS" => Some(Self::PlayingChallengeBoss),
            "PLAYING_ROGUE_TOURN" => Some(Self::PlayingRogueTourn),
            "PLAYING_ROGUE_MAGIC" => Some(Self::PlayingRogueMagic),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum MatchRoomCharacterType {
    MatchRoomCharacterNone = 0,
    MatchRoomCharacterLeader = 1,
    MatchRoomCharacterMember = 2,
    MatchRoomCharacterWatcher = 3,
}
impl MatchRoomCharacterType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::MatchRoomCharacterNone => "MatchRoomCharacter_None",
            Self::MatchRoomCharacterLeader => "MatchRoomCharacter_Leader",
            Self::MatchRoomCharacterMember => "MatchRoomCharacter_Member",
            Self::MatchRoomCharacterWatcher => "MatchRoomCharacter_Watcher",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MatchRoomCharacter_None" => Some(Self::MatchRoomCharacterNone),
            "MatchRoomCharacter_Leader" => Some(Self::MatchRoomCharacterLeader),
            "MatchRoomCharacter_Member" => Some(Self::MatchRoomCharacterMember),
            "MatchRoomCharacter_Watcher" => Some(Self::MatchRoomCharacterWatcher),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum MatchRoomCharacterStatus {
    None = 0,
    Idle = 1,
    Operating = 2,
    Ready = 3,
    Fighting = 4,
    Watching = 5,
}
impl MatchRoomCharacterStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "MatchRoomCharacterStatus_None",
            Self::Idle => "MatchRoomCharacterStatus_Idle",
            Self::Operating => "MatchRoomCharacterStatus_Operating",
            Self::Ready => "MatchRoomCharacterStatus_Ready",
            Self::Fighting => "MatchRoomCharacterStatus_Fighting",
            Self::Watching => "MatchRoomCharacterStatus_Watching",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MatchRoomCharacterStatus_None" => Some(Self::None),
            "MatchRoomCharacterStatus_Idle" => Some(Self::Idle),
            "MatchRoomCharacterStatus_Operating" => Some(Self::Operating),
            "MatchRoomCharacterStatus_Ready" => Some(Self::Ready),
            "MatchRoomCharacterStatus_Fighting" => Some(Self::Fighting),
            "MatchRoomCharacterStatus_Watching" => Some(Self::Watching),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum BattleCheckStrategyType {
    BattleCheckStrategyIdentical = 0,
    BattleCheckStrategyServer = 1,
    BattleCheckStrategyClient = 2,
}
impl BattleCheckStrategyType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::BattleCheckStrategyIdentical => "BATTLE_CHECK_STRATEGY_IDENTICAL",
            Self::BattleCheckStrategyServer => "BATTLE_CHECK_STRATEGY_SERVER",
            Self::BattleCheckStrategyClient => "BATTLE_CHECK_STRATEGY_CLIENT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "BATTLE_CHECK_STRATEGY_IDENTICAL" => Some(Self::BattleCheckStrategyIdentical),
            "BATTLE_CHECK_STRATEGY_SERVER" => Some(Self::BattleCheckStrategyServer),
            "BATTLE_CHECK_STRATEGY_CLIENT" => Some(Self::BattleCheckStrategyClient),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum BattleCheckResultType {
    BattleCheckResultSucc = 0,
    BattleCheckResultFail = 1,
    BattleCheckResultPass = 2,
}
impl BattleCheckResultType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::BattleCheckResultSucc => "BATTLE_CHECK_RESULT_SUCC",
            Self::BattleCheckResultFail => "BATTLE_CHECK_RESULT_FAIL",
            Self::BattleCheckResultPass => "BATTLE_CHECK_RESULT_PASS",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "BATTLE_CHECK_RESULT_SUCC" => Some(Self::BattleCheckResultSucc),
            "BATTLE_CHECK_RESULT_FAIL" => Some(Self::BattleCheckResultFail),
            "BATTLE_CHECK_RESULT_PASS" => Some(Self::BattleCheckResultPass),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum BattleModuleType {
    BattleModuleMaze = 0,
    BattleModuleChallenge = 1,
    BattleModuleCocoon = 2,
    BattleModuleRogue = 3,
    BattleModuleChallengeActivity = 4,
    BattleModuleTrialLevel = 5,
    BattleModuleAetherDivide = 6,
}
impl BattleModuleType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::BattleModuleMaze => "BATTLE_MODULE_MAZE",
            Self::BattleModuleChallenge => "BATTLE_MODULE_CHALLENGE",
            Self::BattleModuleCocoon => "BATTLE_MODULE_COCOON",
            Self::BattleModuleRogue => "BATTLE_MODULE_ROGUE",
            Self::BattleModuleChallengeActivity => "BATTLE_MODULE_CHALLENGE_ACTIVITY",
            Self::BattleModuleTrialLevel => "BATTLE_MODULE_TRIAL_LEVEL",
            Self::BattleModuleAetherDivide => "BATTLE_MODULE_AETHER_DIVIDE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "BATTLE_MODULE_MAZE" => Some(Self::BattleModuleMaze),
            "BATTLE_MODULE_CHALLENGE" => Some(Self::BattleModuleChallenge),
            "BATTLE_MODULE_COCOON" => Some(Self::BattleModuleCocoon),
            "BATTLE_MODULE_ROGUE" => Some(Self::BattleModuleRogue),
            "BATTLE_MODULE_CHALLENGE_ACTIVITY" => {
                Some(Self::BattleModuleChallengeActivity)
            }
            "BATTLE_MODULE_TRIAL_LEVEL" => Some(Self::BattleModuleTrialLevel),
            "BATTLE_MODULE_AETHER_DIVIDE" => Some(Self::BattleModuleAetherDivide),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum AetherdivideSpiritLineupType {
    AetherdivideSpiritLineupNone = 0,
    AetherdivideSpiritLineupNormal = 1,
    AetherdivideSpiritLineupTrial = 2,
}
impl AetherdivideSpiritLineupType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::AetherdivideSpiritLineupNone => "AETHERDIVIDE_SPIRIT_LINEUP_NONE",
            Self::AetherdivideSpiritLineupNormal => "AETHERDIVIDE_SPIRIT_LINEUP_NORMAL",
            Self::AetherdivideSpiritLineupTrial => "AETHERDIVIDE_SPIRIT_LINEUP_TRIAL",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "AETHERDIVIDE_SPIRIT_LINEUP_NONE" => Some(Self::AetherdivideSpiritLineupNone),
            "AETHERDIVIDE_SPIRIT_LINEUP_NORMAL" => {
                Some(Self::AetherdivideSpiritLineupNormal)
            }
            "AETHERDIVIDE_SPIRIT_LINEUP_TRIAL" => {
                Some(Self::AetherdivideSpiritLineupTrial)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum BattleTargetType {
    None = 0,
    Score = 1,
    Achievement = 2,
    Raid = 3,
    ChallengeScore = 4,
    Common = 5,
    ClientAchievement = 6,
}
impl BattleTargetType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "BATTLE_TARGET_TYPE_NONE",
            Self::Score => "BATTLE_TARGET_TYPE_SCORE",
            Self::Achievement => "BATTLE_TARGET_TYPE_ACHIEVEMENT",
            Self::Raid => "BATTLE_TARGET_TYPE_RAID",
            Self::ChallengeScore => "BATTLE_TARGET_TYPE_CHALLENGE_SCORE",
            Self::Common => "BATTLE_TARGET_TYPE_COMMON",
            Self::ClientAchievement => "BATTLE_TARGET_TYPE_CLIENT_ACHIEVEMENT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "BATTLE_TARGET_TYPE_NONE" => Some(Self::None),
            "BATTLE_TARGET_TYPE_SCORE" => Some(Self::Score),
            "BATTLE_TARGET_TYPE_ACHIEVEMENT" => Some(Self::Achievement),
            "BATTLE_TARGET_TYPE_RAID" => Some(Self::Raid),
            "BATTLE_TARGET_TYPE_CHALLENGE_SCORE" => Some(Self::ChallengeScore),
            "BATTLE_TARGET_TYPE_COMMON" => Some(Self::Common),
            "BATTLE_TARGET_TYPE_CLIENT_ACHIEVEMENT" => Some(Self::ClientAchievement),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum DeathSource {
    Unknown = 0,
    KilledByOthers = 1,
    KilledBySelf = 2,
    Escape = 3,
}
impl DeathSource {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown => "UNKNOWN",
            Self::KilledByOthers => "KILLED_BY_OTHERS",
            Self::KilledBySelf => "KILLED_BY_SELF",
            Self::Escape => "ESCAPE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UNKNOWN" => Some(Self::Unknown),
            "KILLED_BY_OTHERS" => Some(Self::KilledByOthers),
            "KILLED_BY_SELF" => Some(Self::KilledBySelf),
            "ESCAPE" => Some(Self::Escape),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum BattleTag {
    TagNone = 0,
    TagHideNpcMonster = 1,
}
impl BattleTag {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::TagNone => "TAG_NONE",
            Self::TagHideNpcMonster => "TAG_HIDE_NPC_MONSTER",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "TAG_NONE" => Some(Self::TagNone),
            "TAG_HIDE_NPC_MONSTER" => Some(Self::TagHideNpcMonster),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Hembndjafda {
    NormalCreate = 0,
    FormChange = 1,
}
impl Hembndjafda {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::NormalCreate => "NORMAL_CREATE",
            Self::FormChange => "FORM_CHANGE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "NORMAL_CREATE" => Some(Self::NormalCreate),
            "FORM_CHANGE" => Some(Self::FormChange),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum BattleEndReason {
    None = 0,
    AllDie = 1,
    TurnLimit = 2,
}
impl BattleEndReason {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "BATTLE_END_REASON_NONE",
            Self::AllDie => "BATTLE_END_REASON_ALL_DIE",
            Self::TurnLimit => "BATTLE_END_REASON_TURN_LIMIT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "BATTLE_END_REASON_NONE" => Some(Self::None),
            "BATTLE_END_REASON_ALL_DIE" => Some(Self::AllDie),
            "BATTLE_END_REASON_TURN_LIMIT" => Some(Self::TurnLimit),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum BattleStaticticEventType {
    BattleStaticticEventNone = 0,
    BattleStaticticEventTreasureDungeonAddExplore = 1,
    BattleStaticticEventTreasureDungeonOpenGrid = 2,
    BattleStaticticEventTreasureDungeonPickupItem = 3,
    BattleStaticticEventTreasureDungeonUseBuff = 4,
    BattleStaticticEventTelevisionActivityUpdateMazeBuffLayer = 5,
    BattleStaticticEventRogueTournTitanExtraCoin = 6,
    BattleStaticticEventRogueTournTitanExtraCoinTimes = 7,
}
impl BattleStaticticEventType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::BattleStaticticEventNone => "BATTLE_STATICTIC_EVENT_NONE",
            Self::BattleStaticticEventTreasureDungeonAddExplore => {
                "BATTLE_STATICTIC_EVENT_TREASURE_DUNGEON_ADD_EXPLORE"
            }
            Self::BattleStaticticEventTreasureDungeonOpenGrid => {
                "BATTLE_STATICTIC_EVENT_TREASURE_DUNGEON_OPEN_GRID"
            }
            Self::BattleStaticticEventTreasureDungeonPickupItem => {
                "BATTLE_STATICTIC_EVENT_TREASURE_DUNGEON_PICKUP_ITEM"
            }
            Self::BattleStaticticEventTreasureDungeonUseBuff => {
                "BATTLE_STATICTIC_EVENT_TREASURE_DUNGEON_USE_BUFF"
            }
            Self::BattleStaticticEventTelevisionActivityUpdateMazeBuffLayer => {
                "BATTLE_STATICTIC_EVENT_TELEVISION_ACTIVITY_UPDATE_MAZE_BUFF_LAYER"
            }
            Self::BattleStaticticEventRogueTournTitanExtraCoin => {
                "BATTLE_STATICTIC_EVENT_ROGUE_TOURN_TITAN_EXTRA_COIN"
            }
            Self::BattleStaticticEventRogueTournTitanExtraCoinTimes => {
                "BATTLE_STATICTIC_EVENT_ROGUE_TOURN_TITAN_EXTRA_COIN_TIMES"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "BATTLE_STATICTIC_EVENT_NONE" => Some(Self::BattleStaticticEventNone),
            "BATTLE_STATICTIC_EVENT_TREASURE_DUNGEON_ADD_EXPLORE" => {
                Some(Self::BattleStaticticEventTreasureDungeonAddExplore)
            }
            "BATTLE_STATICTIC_EVENT_TREASURE_DUNGEON_OPEN_GRID" => {
                Some(Self::BattleStaticticEventTreasureDungeonOpenGrid)
            }
            "BATTLE_STATICTIC_EVENT_TREASURE_DUNGEON_PICKUP_ITEM" => {
                Some(Self::BattleStaticticEventTreasureDungeonPickupItem)
            }
            "BATTLE_STATICTIC_EVENT_TREASURE_DUNGEON_USE_BUFF" => {
                Some(Self::BattleStaticticEventTreasureDungeonUseBuff)
            }
            "BATTLE_STATICTIC_EVENT_TELEVISION_ACTIVITY_UPDATE_MAZE_BUFF_LAYER" => {
                Some(Self::BattleStaticticEventTelevisionActivityUpdateMazeBuffLayer)
            }
            "BATTLE_STATICTIC_EVENT_ROGUE_TOURN_TITAN_EXTRA_COIN" => {
                Some(Self::BattleStaticticEventRogueTournTitanExtraCoin)
            }
            "BATTLE_STATICTIC_EVENT_ROGUE_TOURN_TITAN_EXTRA_COIN_TIMES" => {
                Some(Self::BattleStaticticEventRogueTournTitanExtraCoinTimes)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Jegleikmncl {
    KNone = 0,
    KkillEliteMonsterNum = 1,
    KkillMonsterNum = 2,
}
impl Jegleikmncl {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::KNone => "kNone",
            Self::KkillEliteMonsterNum => "kkillEliteMonsterNum",
            Self::KkillMonsterNum => "kkillMonsterNum",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "kNone" => Some(Self::KNone),
            "kkillEliteMonsterNum" => Some(Self::KkillEliteMonsterNum),
            "kkillMonsterNum" => Some(Self::KkillMonsterNum),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum BattleEndStatus {
    BattleEndNone = 0,
    BattleEndWin = 1,
    BattleEndLose = 2,
    BattleEndQuit = 3,
}
impl BattleEndStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::BattleEndNone => "BATTLE_END_NONE",
            Self::BattleEndWin => "BATTLE_END_WIN",
            Self::BattleEndLose => "BATTLE_END_LOSE",
            Self::BattleEndQuit => "BATTLE_END_QUIT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "BATTLE_END_NONE" => Some(Self::BattleEndNone),
            "BATTLE_END_WIN" => Some(Self::BattleEndWin),
            "BATTLE_END_LOSE" => Some(Self::BattleEndLose),
            "BATTLE_END_QUIT" => Some(Self::BattleEndQuit),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum FightGameMode {
    None = 0,
    Match3 = 1,
}
impl FightGameMode {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "FIGHT_GAME_MODE_NONE",
            Self::Match3 => "FIGHT_GAME_MODE_MATCH3",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "FIGHT_GAME_MODE_NONE" => Some(Self::None),
            "FIGHT_GAME_MODE_MATCH3" => Some(Self::Match3),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum FightKickoutType {
    FightKickoutUnknown = 0,
    FightKickoutBlack = 1,
    FightKickoutByGm = 2,
    FightKickoutTimeout = 3,
    FightKickoutSessionReset = 4,
}
impl FightKickoutType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::FightKickoutUnknown => "FIGHT_KICKOUT_UNKNOWN",
            Self::FightKickoutBlack => "FIGHT_KICKOUT_BLACK",
            Self::FightKickoutByGm => "FIGHT_KICKOUT_BY_GM",
            Self::FightKickoutTimeout => "FIGHT_KICKOUT_TIMEOUT",
            Self::FightKickoutSessionReset => "FIGHT_KICKOUT_SESSION_RESET",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "FIGHT_KICKOUT_UNKNOWN" => Some(Self::FightKickoutUnknown),
            "FIGHT_KICKOUT_BLACK" => Some(Self::FightKickoutBlack),
            "FIGHT_KICKOUT_BY_GM" => Some(Self::FightKickoutByGm),
            "FIGHT_KICKOUT_TIMEOUT" => Some(Self::FightKickoutTimeout),
            "FIGHT_KICKOUT_SESSION_RESET" => Some(Self::FightKickoutSessionReset),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum LobbyCharacterType {
    LobbyCharacterNone = 0,
    LobbyCharacterLeader = 1,
    LobbyCharacterMember = 2,
    LobbyCharacterWatcher = 3,
}
impl LobbyCharacterType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::LobbyCharacterNone => "LobbyCharacter_None",
            Self::LobbyCharacterLeader => "LobbyCharacter_Leader",
            Self::LobbyCharacterMember => "LobbyCharacter_Member",
            Self::LobbyCharacterWatcher => "LobbyCharacter_Watcher",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "LobbyCharacter_None" => Some(Self::LobbyCharacterNone),
            "LobbyCharacter_Leader" => Some(Self::LobbyCharacterLeader),
            "LobbyCharacter_Member" => Some(Self::LobbyCharacterMember),
            "LobbyCharacter_Watcher" => Some(Self::LobbyCharacterWatcher),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum LobbyCharacterStatus {
    None = 0,
    Idle = 1,
    Operating = 2,
    Ready = 3,
    Fighting = 4,
    Watching = 5,
    Matching = 6,
}
impl LobbyCharacterStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "LobbyCharacterStatus_None",
            Self::Idle => "LobbyCharacterStatus_Idle",
            Self::Operating => "LobbyCharacterStatus_Operating",
            Self::Ready => "LobbyCharacterStatus_Ready",
            Self::Fighting => "LobbyCharacterStatus_Fighting",
            Self::Watching => "LobbyCharacterStatus_Watching",
            Self::Matching => "LobbyCharacterStatus_Matching",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "LobbyCharacterStatus_None" => Some(Self::None),
            "LobbyCharacterStatus_Idle" => Some(Self::Idle),
            "LobbyCharacterStatus_Operating" => Some(Self::Operating),
            "LobbyCharacterStatus_Ready" => Some(Self::Ready),
            "LobbyCharacterStatus_Fighting" => Some(Self::Fighting),
            "LobbyCharacterStatus_Watching" => Some(Self::Watching),
            "LobbyCharacterStatus_Matching" => Some(Self::Matching),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum LobbyModifyType {
    None = 0,
    Idle = 1,
    Ready = 2,
    Operating = 3,
    CancelMatch = 4,
    Match = 5,
    QuitLobby = 6,
    KickOut = 7,
    TimeOut = 8,
    JoinLobby = 9,
    LobbyDismiss = 10,
    MatchTimeOut = 11,
    FightStart = 12,
    Logout = 13,
    FightEnd = 14,
    FightRoomDestroyInInit = 15,
}
impl LobbyModifyType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "LobbyModifyType_None",
            Self::Idle => "LobbyModifyType_Idle",
            Self::Ready => "LobbyModifyType_Ready",
            Self::Operating => "LobbyModifyType_Operating",
            Self::CancelMatch => "LobbyModifyType_CancelMatch",
            Self::Match => "LobbyModifyType_Match",
            Self::QuitLobby => "LobbyModifyType_QuitLobby",
            Self::KickOut => "LobbyModifyType_KickOut",
            Self::TimeOut => "LobbyModifyType_TimeOut",
            Self::JoinLobby => "LobbyModifyType_JoinLobby",
            Self::LobbyDismiss => "LobbyModifyType_LobbyDismiss",
            Self::MatchTimeOut => "LobbyModifyType_MatchTimeOut",
            Self::FightStart => "LobbyModifyType_FightStart",
            Self::Logout => "LobbyModifyType_Logout",
            Self::FightEnd => "LobbyModifyType_FightEnd",
            Self::FightRoomDestroyInInit => "LobbyModifyType_FightRoomDestroyInInit",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "LobbyModifyType_None" => Some(Self::None),
            "LobbyModifyType_Idle" => Some(Self::Idle),
            "LobbyModifyType_Ready" => Some(Self::Ready),
            "LobbyModifyType_Operating" => Some(Self::Operating),
            "LobbyModifyType_CancelMatch" => Some(Self::CancelMatch),
            "LobbyModifyType_Match" => Some(Self::Match),
            "LobbyModifyType_QuitLobby" => Some(Self::QuitLobby),
            "LobbyModifyType_KickOut" => Some(Self::KickOut),
            "LobbyModifyType_TimeOut" => Some(Self::TimeOut),
            "LobbyModifyType_JoinLobby" => Some(Self::JoinLobby),
            "LobbyModifyType_LobbyDismiss" => Some(Self::LobbyDismiss),
            "LobbyModifyType_MatchTimeOut" => Some(Self::MatchTimeOut),
            "LobbyModifyType_FightStart" => Some(Self::FightStart),
            "LobbyModifyType_Logout" => Some(Self::Logout),
            "LobbyModifyType_FightEnd" => Some(Self::FightEnd),
            "LobbyModifyType_FightRoomDestroyInInit" => {
                Some(Self::FightRoomDestroyInInit)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum FightRoomDestroyReason {
    None = 0,
    SvrStop = 1,
    GameEnd = 2,
}
impl FightRoomDestroyReason {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "FIGHT_ROOM_DESTROY_REASON_NONE",
            Self::SvrStop => "FIGHT_ROOM_DESTROY_REASON_SVR_STOP",
            Self::GameEnd => "FIGHT_ROOM_DESTROY_REASON_GAME_END",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "FIGHT_ROOM_DESTROY_REASON_NONE" => Some(Self::None),
            "FIGHT_ROOM_DESTROY_REASON_SVR_STOP" => Some(Self::SvrStop),
            "FIGHT_ROOM_DESTROY_REASON_GAME_END" => Some(Self::GameEnd),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Match3FinishReason {
    Default = 0,
    Leave = 1,
    Die = 2,
    Gameend = 3,
    Kickout = 4,
}
impl Match3FinishReason {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Default => "MATCH3_FINISH_REASON_DEFAULT",
            Self::Leave => "MATCH3_FINISH_REASON_LEAVE",
            Self::Die => "MATCH3_FINISH_REASON_DIE",
            Self::Gameend => "MATCH3_FINISH_REASON_GAMEEND",
            Self::Kickout => "MATCH3_FINISH_REASON_KICKOUT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MATCH3_FINISH_REASON_DEFAULT" => Some(Self::Default),
            "MATCH3_FINISH_REASON_LEAVE" => Some(Self::Leave),
            "MATCH3_FINISH_REASON_DIE" => Some(Self::Die),
            "MATCH3_FINISH_REASON_GAMEEND" => Some(Self::Gameend),
            "MATCH3_FINISH_REASON_KICKOUT" => Some(Self::Kickout),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum MatchUnitType {
    None = 0,
    Normal = 1,
    Robot = 2,
    Gm = 3,
}
impl MatchUnitType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "MATCH_UNIT_TYPE_NONE",
            Self::Normal => "MATCH_UNIT_TYPE_NORMAL",
            Self::Robot => "MATCH_UNIT_TYPE_ROBOT",
            Self::Gm => "MATCH_UNIT_TYPE_GM",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MATCH_UNIT_TYPE_NONE" => Some(Self::None),
            "MATCH_UNIT_TYPE_NORMAL" => Some(Self::Normal),
            "MATCH_UNIT_TYPE_ROBOT" => Some(Self::Robot),
            "MATCH_UNIT_TYPE_GM" => Some(Self::Gm),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Retcode {
    RetSucc = 0,
    RetFail = 1,
    RetServerInternalError = 2,
    RetTimeout = 3,
    RetRepeatedReq = 4,
    RetReqParaInvalid = 5,
    RetPlayerDataError = 6,
    RetPlayerClientPaused = 7,
    RetFuncCheckFailed = 8,
    RetFeatureSwitchClosed = 9,
    RetFreqOverLimit = 10,
    RetSystemBusy = 11,
    RetPlayerNotOnline = 12,
    RetOperationInCd = 13,
    RetRepeateLogin = 1000,
    RetRetryLogin = 1001,
    RetWaitLogin = 1002,
    RetNotInWhiteList = 1003,
    RetInBlackList = 1004,
    RetAccountVerifyError = 1005,
    RetAccountParaError = 1006,
    RetAntiAddictLogin = 1007,
    RetCheckSumError = 1008,
    RetReachMaxPlayerNum = 1009,
    RetAlreadyRegistered = 1010,
    RetGenderError = 1011,
    SetNicknameRetCallbackProcessing = 1012,
    RetInGmBindAccess = 1013,
    RetQuestRewardAlreadyTaken = 1100,
    RetQuestNotAccept = 1101,
    RetQuestNotFinish = 1102,
    RetQuestStatusError = 1103,
    RetAchievementLevelNotReach = 1104,
    RetAchievementLevelAlreadyTaken = 1105,
    RetAvatarNotExist = 1200,
    RetAvatarResExpNotEnough = 1201,
    RetAvatarExpReachPromotionLimit = 1202,
    RetAvatarReachMaxPromotion = 1203,
    RetSkilltreeConfigNotExist = 1204,
    RetSkilltreeAlreadyUnlock = 1205,
    RetSkilltreePreLocked = 1206,
    RetSkilltreeLevelNotMeet = 1207,
    RetSkilltreeRankNotMeet = 1208,
    RetAvatarDressNoEquipment = 1209,
    RetAvatarExpItemNotExist = 1210,
    RetSkilltreePointLocked = 1211,
    RetSkilltreePointLevelUpgradeNotMatch = 1212,
    RetSkilltreePointLevelReachMax = 1213,
    RetWorldLevelNotMeet = 1214,
    RetPlayerLevelNotMeet = 1215,
    RetAvatarRankNotMatch = 1216,
    RetAvatarRankReachMax = 1217,
    RetHeroBasicTypeNotMatch = 1218,
    RetAvatarPromotionNotMeet = 1219,
    RetPromotionRewardConfigNotExist = 1220,
    RetPromotionRewardAlreadyTaken = 1221,
    RetAvatarSkinItemNotExist = 1222,
    RetAvatarSkinAlreadyDressed = 1223,
    RetAvatarNotDressSkin = 1224,
    RetAvatarSkinNotMatchAvatar = 1225,
    RetAvatarPathNotMatch = 1226,
    RetItemNotExist = 1300,
    RetItemCostNotEnough = 1301,
    RetItemCostTooMuch = 1302,
    RetItemNoCost = 1303,
    RetItemNotEnough = 1304,
    RetItemInvalid = 1305,
    RetItemConfigNotExist = 1306,
    RetScoinNotEnough = 1307,
    RetItemRewardExceedLimit = 1308,
    RetItemInvalidUse = 1309,
    RetItemUseConfigNotExist = 1310,
    RetRewardConfigNotExist = 1311,
    RetItemExceedLimit = 1312,
    RetItemCountInvalid = 1313,
    RetItemUseTargetTypeInvalid = 1314,
    RetItemUseSatietyFull = 1315,
    RetItemComposeNotExist = 1316,
    RetRelicComposeNotExist = 1317,
    RetItemCanNotSell = 1318,
    RetItemSellExceddLimit = 1319,
    RetItemNotInCostList = 1320,
    RetItemSpecialCostNotEnough = 1321,
    RetItemSpecialCostTooMuch = 1322,
    RetItemFormulaNotExist = 1323,
    RetItemAutoGiftOptionalNotExist = 1324,
    RetRelicComposeRelicInvalid = 1325,
    RetRelicComposeMainAffixIdInvalid = 1326,
    RetRelicComposeWrongFormulaType = 1327,
    RetRelicComposeRelicNotExist = 1328,
    RetRelicComposeBlackGoldCountInvalid = 1329,
    RetRelicComposeBlackGoldNotNeed = 1330,
    RetMonthCardCannotUse = 1331,
    RetItemRewardExceedDisappear = 1332,
    RetItemNeedRecycle = 1333,
    RetItemComposeExceedLimit = 1334,
    RetItemCanNotDestroy = 1335,
    RetItemAlreadyMark = 1336,
    RetItemMarkExceedLimit = 1337,
    RetItemNotMark = 1338,
    RetItenTurnFoodNotSet = 1339,
    RetItemTurnFoodAlreadySet = 1340,
    RetItemTurnFoodConsumeTypeError = 1341,
    RetItemTurnFoodSwitchAlreadyOpen = 1342,
    RetItemTurnFoodSwitchAlreadyClose = 1343,
    RetHcoinExchangeTooMuch = 1344,
    RetItemTurnFoodSceneTypeError = 1345,
    RetEquipmentAlreadyDressed = 1350,
    RetEquipmentNotExist = 1351,
    RetEquipmentReachLevelLimit = 1352,
    RetEquipmentConsumeSelf = 1353,
    RetEquipmentAlreadyLocked = 1354,
    RetEquipmentAlreadyUnlocked = 1355,
    RetEquipmentLocked = 1356,
    RetEquipmentSelectNumOverLimit = 1357,
    RetEquipmentRankUpMustConsumeSameTid = 1358,
    RetEquipmentPromotionReachMax = 1359,
    RetEquipmentRankUpReachMax = 1360,
    RetEquipmentLevelReachMax = 1361,
    RetEquipmentExceedLimit = 1362,
    RetRelicNotExist = 1363,
    RetRelicReachLevelLimit = 1364,
    RetRelicConsumeSelf = 1365,
    RetRelicAlreadyDressed = 1366,
    RetRelicLocked = 1367,
    RetRelicAlreadyLocked = 1368,
    RetRelicAlreadyUnlocked = 1369,
    RetRelicLevelIsNotZero = 1370,
    RetUniqueIdRepeated = 1371,
    RetEquipmentLevelNotMeet = 1372,
    RetEquipmentItemNotInCostList = 1373,
    RetEquipmentLevelGreaterThanOne = 1374,
    RetEquipmentAlreadyRanked = 1375,
    RetRelicExceedLimit = 1376,
    RetRelicAlreadyDiscarded = 1377,
    RetRelicAlreadyUndiscarded = 1378,
    RetEquipmentBatchLockTooFast = 1379,
    RetRelicFilterPlanSlotEmpty = 1380,
    RetRelicFilterPlanNumExceedLimit = 1381,
    RetRelicFilterPlanNameUtf8Error = 1382,
    RetRelicFilterPlanNameFormatError = 1383,
    RetRelicFilterPlanNoChange = 1384,
    RetRelicReforgeNotConfirmed = 1385,
    RetLineupInvalidIndex = 1400,
    RetLineupInvalidMemberPos = 1401,
    RetLineupSwapNotExist = 1402,
    RetLineupAvatarAlreadyIn = 1403,
    RetLineupCreateAvatarError = 1404,
    RetLineupAvatarInitError = 1405,
    RetLineupNotExist = 1406,
    RetLineupOnlyOneMember = 1407,
    RetLineupSameLeaderSlot = 1408,
    RetLineupNoLeaderSelect = 1409,
    RetLineupSwapSameSlot = 1410,
    RetLineupAvatarNotExist = 1411,
    RetLineupTrialAvatarCanNotQuit = 1412,
    RetLineupVirtualLineupPlaneNotMatch = 1413,
    RetLineupNotValidLeader = 1414,
    RetLineupSameIndex = 1415,
    RetLineupIsEmpty = 1416,
    RetLineupNameFormatError = 1417,
    RetLineupTypeNotMatch = 1418,
    RetLineupReplaceAllFailed = 1419,
    RetLineupNotAllowEdit = 1420,
    RetLineupAvatarIsAlive = 1421,
    RetLineupAssistHasOnlyMember = 1422,
    RetLineupAssistCannotSwitch = 1423,
    RetLineupAvatarTypeInvalid = 1424,
    RetLineupNameUtf8Error = 1425,
    RetLineupLeaderLock = 1426,
    RetLineupStoryLineNotMatch = 1427,
    RetLineupAvatarLock = 1428,
    RetLineupAvatarInvalid = 1429,
    RetLineupAvatarAlreadyInit = 1430,
    RetLineupLimited = 1431,
    RetMailNotExist = 1700,
    RetMailRangeInvalid = 1701,
    RetMailMailIdInvalid = 1702,
    RetMailNoMailTakeAttachment = 1703,
    RetMailNoMailToDel = 1704,
    RetMailTypeInvalid = 1705,
    RetMailParaInvalid = 1706,
    RetMailAttachementInvalid = 1707,
    RetMailTicketInvalid = 1708,
    RetMailTicketRepeated = 1709,
    RetStageSettleError = 1800,
    RetStageConfigNotExist = 1801,
    RetStageNotFound = 1802,
    RetStageCocoonPropNotValid = 1804,
    RetStageCocoonWaveNotValid = 1805,
    RetStagePropIdNotEqual = 1806,
    RetStageCocoonWaveOver = 1807,
    RetStageWeekCocoonOverCnt = 1808,
    RetStageCocoonNotOpen = 1809,
    RetStageTrialNotOpen = 1810,
    RetStageFarmNotOpen = 1811,
    RetStageFarmTypeError = 1812,
    RetChapterLock = 1900,
    RetChapterChallengeNumNotEnough = 1901,
    RetChapterRewardIdNotExist = 1902,
    RetChapterRewardAlreadyTaken = 1903,
    RetBattleStageNotMatch = 2000,
    RetInBattleNow = 2001,
    RetBattleCheat = 2002,
    RetBattleFail = 2003,
    RetBattleNoLineup = 2004,
    RetBattleLineupEmpty = 2005,
    RetBattleVersionNotMatch = 2006,
    RetBattleQuitByServer = 2007,
    RetInBattleCheck = 2008,
    RetBattleCheckNeedRetry = 2009,
    RetBattleCostTimeCheckFail = 2010,
    RetLackExchangeStaminaTimes = 2100,
    RetLackStamina = 2101,
    RetStaminaFull = 2102,
    RetAuthkeySignTypeError = 2103,
    RetAuthkeySignVerError = 2104,
    RetNicknameFormatError = 2105,
    RetSensitiveWords = 2106,
    RetLevelRewardHasTaken = 2107,
    RetLevelRewardLevelError = 2108,
    RetLanguageInvalid = 2109,
    RetNicknameInCd = 2110,
    RetGameplayBirthdayInvalid = 2111,
    RetGameplayBirthdayAlreadySet = 2112,
    RetNicknameUtf8Error = 2113,
    RetNicknameDigitLimitError = 2114,
    RetSensitiveWordsPlatformError = 2115,
    RetPlayerSettingTypeInvalid = 2116,
    RetMazeLackTicket = 2201,
    RetMazeNotUnlock = 2202,
    RetMazeNoAbility = 2204,
    RetMazeNoPlane = 2205,
    RetMazeMapNotExist = 2207,
    RetMazeMpNotEnough = 2213,
    RetSpringNotEnable = 2214,
    RetSpringTooFar = 2216,
    RetNotInMaze = 2218,
    RetMazeTimeOfDayTypeError = 2223,
    RetSceneTransferLockedByTask = 2224,
    RetPlotNotUnlock = 2300,
    RetMissionNotExist = 2400,
    RetMissionAlreadyDone = 2401,
    RetDailyTaskNotFinish = 2402,
    RetDailyTaskRewardHasTaken = 2403,
    RetMissionNotFinish = 2404,
    RetMissionNotDoing = 2405,
    RetMissionFinishWayNotMatch = 2406,
    RetMissionSceneNotMatch = 2407,
    RetMissionCustomValueNotValid = 2408,
    RetMissionSubMissionNotMatch = 2409,
    RetAdventureMapNotExist = 2500,
    RetSceneEntityNotExist = 2600,
    RetNotInScene = 2601,
    RetSceneMonsterNotExist = 2602,
    RetInteractConfigNotExist = 2603,
    RetUnsupportedPropState = 2604,
    RetSceneEntryIdNotMatch = 2605,
    RetSceneEntityMoveCheckFailed = 2606,
    RetAssistMonsterCountLimit = 2607,
    RetSceneUseSkillFail = 2608,
    RetPropIsHidden = 2609,
    RetLoadingSuccAlready = 2610,
    RetSceneEntityTypeInvalid = 2611,
    RetInteractTypeInvalid = 2612,
    RetInteractNotInRegion = 2613,
    RetInteractSubTypeInvalid = 2614,
    RetNotLeaderEntity = 2615,
    RetMonsterIsNotFarmElement = 2616,
    RetMonsterConfigNotExist = 2617,
    RetAvatarHpAlreadyFull = 2618,
    RetCurInteractEntityNotMatch = 2619,
    RetPlaneTypeNotAllow = 2620,
    RetGroupNotExist = 2621,
    RetGroupSaveDataInCd = 2622,
    RetGroupSaveLenghReachMax = 2623,
    RetRecentElementNotExist = 2624,
    RetRecentElementStageNotMatch = 2625,
    RetScenePositionVersionNotMatch = 2626,
    RetGameplayCounterNotExist = 2627,
    RetGameplayCounterNotEnough = 2628,
    RetGroupStateNotMatch = 2629,
    RetSceneEntityPosNotMatch = 2630,
    RetGroupStateCustomSaveDataOff = 2631,
    RetSceneNotMatch = 2632,
    RetPropTypeInvalid = 2633,
    RetBuyTimesLimit = 2700,
    RetBuyLimitType = 2701,
    RetShopNotOpen = 2702,
    RetGoodsNotOpen = 2703,
    RetCityLevelRewardTaken = 2704,
    RetCityLevelNotMeet = 2705,
    RetSingleBuyLimit = 2706,
    RetTutorialNotUnlock = 2751,
    RetTutorialUnlockAlready = 2752,
    RetTutorialFinishAlready = 2753,
    RetTutorialPreNotUnlock = 2754,
    RetTutorialPlayerLevelNotMatch = 2755,
    RetTutorialTutorialNotFound = 2756,
    RetChallengeNotExist = 2801,
    RetChallengeNotUnlock = 2802,
    RetChallengeAlready = 2803,
    RetChallengeLineupEditForbidden = 2804,
    RetChallengeLineupEmpty = 2805,
    RetChallengeNotDoing = 2806,
    RetChallengeNotFinish = 2807,
    RetChallengeTargetNotFinish = 2808,
    RetChallengeTargetRewardTaken = 2809,
    RetChallengeTimeNotValid = 2810,
    RetChallengeStarsCountNotMeet = 2811,
    RetChallengeStarsRewardTaken = 2812,
    RetChallengeStarsNotExist = 2813,
    RetChallengeCurSceneNotEntryFloor = 2814,
    RetChallengeNoTeamArchive = 2815,
    RetChallengeLineupAvatarTypeInvalid = 2816,
    RetChallengeLineupRecommendInCd = 2817,
    RetBasicTypeAlready = 2850,
    RetNoBasicType = 2851,
    RetNotChooseBasicType = 2852,
    RetNotFuncClose = 2853,
    RetNotChooseGender = 2854,
    RetNotReqUnlockBasicType = 2855,
    RetAvatarPathLocked = 2856,
    RetRogueStatusNotMatch = 2901,
    RetRogueSelectBuffNotExist = 2902,
    RetRogueCoinNotEnough = 2903,
    RetRogueStaminaNotEnough = 2904,
    RetRogueAppraisalCountNotEnough = 2905,
    RetRoguePropAlreadyUsed = 2906,
    RetRogueRecordAlreadySaved = 2907,
    RetRogueRollBuffMaxCount = 2908,
    RetRoguePickAvatarInvalid = 2909,
    RetRogueQuestExpire = 2910,
    RetRogueQuestRewardAlready = 2911,
    RetRogueReviveCountNotEnough = 2912,
    RetRogueAreaInvalid = 2913,
    RetRogueScoreRewardPoolInvalid = 2914,
    RetRogueScoreRewardRowInvalid = 2915,
    RetRogueAeonLevelNotMeet = 2916,
    RetRogueAeonLevelRewardAlreadyTaken = 2917,
    RetRogueAeonConfigNotExist = 2918,
    RetRogueTrialAvatarInvalid = 2919,
    RetRogueHandbookRewardAlreadyTaken = 2920,
    RetRogueRoomTypeNotMatch = 2921,
    RetRogueShopGoodNotFound = 2922,
    RetRogueShopGoodAlreadyBought = 2923,
    RetRogueShopGoodAlreadyOwn = 2924,
    RetRogueShopMiracleNotExist = 2925,
    RetRogueShopNotExist = 2926,
    RetRogueShopCannotRefresh = 2927,
    RetRogueSelectBuffCertainMismatch = 2928,
    RetRogueActionQueueNotEmptyBattle = 2929,
    RetRogueActionQueueNotEmptyOthers = 2930,
    RetMissionEventConfigNotExist = 2951,
    RetMissionEventNotClient = 2952,
    RetMissionEventFinished = 2953,
    RetMissionEventDoing = 2954,
    RetHasChallengeMissionEvent = 2955,
    RetNotChallengeMissionEvent = 2956,
    RetGachaIdNotExist = 3001,
    RetGachaNumInvalid = 3002,
    RetGachaFirstGachaMustOne = 3003,
    RetGachaReqDuplicated = 3004,
    RetGachaNotInSchedule = 3005,
    RetGachaNewbieClose = 3006,
    RetGachaTodayLimited = 3007,
    RetGachaNotSupport = 3008,
    RetGachaCeilingNotEnough = 3009,
    RetGachaCeilingClose = 3010,
    RetNotInRaid = 3101,
    RetRaidDoing = 3102,
    RetNotProp = 3103,
    RetRaidIdNotMatch = 3104,
    RetRaidRestartNotMatch = 3105,
    RetRaidLimit = 3106,
    RetRaidAvatarListEmpty = 3107,
    RetRaidAvatarNotExist = 3108,
    RetChallengeRaidRewardAlready = 3109,
    RetChallengeRaidScoreNotReach = 3110,
    RetChallengeRaidNotOpen = 3111,
    RetRaidFinished = 3112,
    RetRaidWorldLevelNotLock = 3113,
    RetRaidCannotUseAssist = 3114,
    RetRaidAvatarNotMatch = 3115,
    RetRaidCanNotSave = 3116,
    RetRaidNoSave = 3117,
    RetActivityRaidNotOpen = 3118,
    RetRaidAvatarCaptainNotExist = 3119,
    RetRaidStoryLineNotMatch = 3120,
    RetTalkEventAlreadyTaken = 3151,
    RetNpcAlreadyMeet = 3152,
    RetNpcNotInConfig = 3153,
    RetDialogueGroupDismatch = 3154,
    RetDialogueEventInvalid = 3155,
    RetTalkEventTakeProtoNotMatch = 3156,
    RetTalkEventNotValid = 3157,
    RetExpeditionConfigNotExist = 3201,
    RetExpeditionRewardConfigNotExist = 3202,
    RetExpeditionNotUnlocked = 3203,
    RetExpeditionAlreadyAccepted = 3204,
    RetExpeditionRepeatedAvatar = 3205,
    RetAvatarAlreadyDispatched = 3206,
    RetExpeditionNotAccepted = 3207,
    RetExpeditionNotFinish = 3208,
    RetExpeditionAlreadyFinish = 3209,
    RetExpeditionTeamCountLimit = 3210,
    RetExpeditionAvatarNumNotMatch = 3211,
    RetExpeditionNotOpen = 3212,
    RetExpeditionFriendAvatarNotValid = 3213,
    RetExpeditionNotPublished = 3214,
    RetLoginActivityHasTaken = 3301,
    RetLoginActivityDaysLack = 3302,
    RetTrialActivityRewardAlreadyTake = 3303,
    RetTrialActivityStageNotFinish = 3304,
    RetMaterialSubmitActivityHasTaken = 3305,
    RetMaterialSubmitActivityMaterialNotSubmitted = 3306,
    RetMaterialSubmitActivityMaterialAlreadySubmitted = 3307,
    RetFantasticStoryActivityStoryError = 3308,
    RetFantasticStoryActivityStoryNotOpen = 3309,
    RetFantasticStoryActivityBattleError = 3310,
    RetFantasticStoryActivityBattleNotOpen = 3311,
    RetFantasticStoryActivityBattleAvatarError = 3312,
    RetFantasticStoryActivityBattleBuffError = 3313,
    RetFantasticStoryActivityPreBattleScoreNotEnough = 3314,
    RetTrialActivityAlreadyInTrialActivity = 3315,
    RetCommonActivityNotOpen = 3316,
    RetBenefitNotReady = 3317,
    RetCommonActivityBusy = 3318,
    RetMessageConfigNotExist = 3501,
    RetMessageSectionNotTake = 3502,
    RetMessageGroupNotTake = 3503,
    RetMessageSectionIdNotMatch = 3504,
    RetMessageSectionCanNotFinish = 3505,
    RetMessageItemCanNotFinish = 3506,
    RetMessageItemRaidCanNotFinish = 3507,
    RetFriendAlreadyIsFriend = 3601,
    RetFriendIsNotFriend = 3602,
    RetFriendApplyExpire = 3603,
    RetFriendInBlacklist = 3604,
    RetFriendNotInBlacklist = 3605,
    RetFriendNumberLimit = 3606,
    RetFriendBlacklistNumberLimit = 3607,
    RetFriendDailyApplyLimit = 3608,
    RetFriendInHandleLimit = 3609,
    RetFriendApplyInCd = 3610,
    RetFriendRemarkNameFormatError = 3611,
    RetFriendPlayerNotFound = 3612,
    RetFriendInTargetBlacklist = 3613,
    RetFriendTargetNumberLimit = 3614,
    RetAssistQueryTooFast = 3615,
    RetAssistNotExist = 3616,
    RetAssistUsedAlready = 3617,
    RetFriendReportReasonFormatError = 3618,
    RetFriendReportSensitiveWords = 3619,
    RetAssistUsedTimesOver = 3620,
    RetAssistQuitAlready = 3621,
    RetAssistAvatarInLineup = 3622,
    RetAssistNoReward = 3623,
    RetFriendSearchNumLimit = 3624,
    RetFriendSearchInCd = 3625,
    RetFriendRemarkNameUtf8Error = 3626,
    RetFriendReportReasonUtf8Error = 3627,
    RetAssistSetAlready = 3628,
    RetFriendTargetForbidOtherApply = 3629,
    RetFriendMarkedCntMax = 3630,
    RetFriendMarkedAlready = 3631,
    RetFriendNotMarked = 3632,
    RetFriendChallengeLineupRecommendInCd = 3633,
    RetViewPlayerCardInCd = 3634,
    RetViewPlayerBattleRecordInCd = 3635,
    RetPlayerBoardHeadIconNotExist = 3701,
    RetPlayerBoardHeadIconLocked = 3702,
    RetPlayerBoardHeadIconAlreadyUnlocked = 3703,
    RetPlayerBoardDisplayAvatarNotExist = 3704,
    RetPlayerBoardDisplayAvatarExceedLimit = 3705,
    RetPlayerBoardDisplayRepeatedAvatar = 3706,
    RetPlayerBoardDisplayAvatarSamePos = 3707,
    RetPlayerBoardDisplayAvatarLocked = 3708,
    RetSignatureLengthExceedLimit = 3709,
    RetSignatureSensitiveWords = 3710,
    RetPlayerBoardAssistAvatarNotExist = 3712,
    RetPlayerBoardAssistAvatarLocked = 3713,
    RetSignatureUtf8Error = 3714,
    RetPlayerBoardAssistAvatarCntError = 3715,
    RetBattlePassTierNotValid = 3801,
    RetBattlePassLevelNotMeet = 3802,
    RetBattlePassRewardTakeAlready = 3803,
    RetBattlePassNotPremium = 3804,
    RetBattlePassNotDoing = 3805,
    RetBattlePassLevelInvalid = 3806,
    RetBattlePassNotUnlock = 3807,
    RetBattlePassNoReward = 3808,
    RetBattlePassQuestNotValid = 3809,
    RetBattlePassNotChooseOptional = 3810,
    RetBattlePassNotTakeReward = 3811,
    RetBattlePassOptionalNotValid = 3812,
    RetBattlePassBuyAlready = 3813,
    RetBattlePassNearEnd = 3814,
    RetMusicLocked = 3901,
    RetMusicNotExist = 3902,
    RetMusicUnlockFailed = 3903,
    RetPunkLordLackSummonTimes = 4001,
    RetPunkLordAttackingMonsterLimit = 4002,
    RetPunkLordMonsterNotExist = 4003,
    RetPunkLordMonsterAlreadyShared = 4004,
    RetPunkLordMonsterExpired = 4005,
    RetPunkLordSelfMonsterAttackLimit = 4006,
    RetPunkLordLackSupportTimes = 4007,
    RetPunkLordMonsterAlreadyKilled = 4008,
    RetPunkLordMonsterAttackerLimit = 4009,
    RetPunkLordWorldLevleNotValid = 4010,
    RetPunkLordRewardLevleNotExist = 4011,
    RetPunkLordPointNotMeet = 4012,
    RetPunkLordInAttacking = 4013,
    RetPunkLordOperationInCd = 4014,
    RetPunkLordRewardAlreadyTaken = 4015,
    RetPunkLordOverBonusRewardLimit = 4016,
    RetPunkLordNotInSchedule = 4017,
    RetPunkLordMonsterNotAttacked = 4018,
    RetPunkLordMonsterNotKilled = 4019,
    RetPunkLordMonsterKilledScoreAlreadyTake = 4020,
    RetPunkLordRewardLevleAlreadyTake = 4021,
    RetDailyActiveLevelInvalid = 4101,
    RetDailyActiveLevelRewardAlreadyTaken = 4102,
    RetDailyActiveLevelApNotEnough = 4103,
    RetDailyMeetPam = 4201,
    RetReplayIdNotMatch = 4251,
    RetReplayReqNotValid = 4252,
    RetFightActivityDifficultyLevelNotPassed = 4301,
    RetFightActivityDifficultyLevelRewardAlreadyTake = 4302,
    RetFightActivityStageNotOpen = 4303,
    RetFightActivityLevelNotUnlock = 4304,
    RetTrainVisitorVisitorNotExist = 4351,
    RetTrainVisitorBehaviorNotExist = 4352,
    RetTrainVisitorBehaviorFinished = 4353,
    RetTrainVisitorAllBehaviorRewardTaken = 4354,
    RetTrainVisitorGetOnMissionNotFinish = 4355,
    RetTrainVisitorNotGetOffOrBeTrainMember = 4356,
    RetTextJoinUnknowIsOverride = 4401,
    RetTextJoinIdNotExist = 4402,
    RetTextJoinCanNotOverride = 4403,
    RetTextJoinItemIdError = 4404,
    RetTextJoinSensitiveCheckError = 4405,
    RetTextJoinMustOverride = 4406,
    RetTextJoinTextEmpty = 4407,
    RetTextJoinTextFormatError = 4408,
    RetTextJoinTextUtf8Error = 4409,
    RetTextJoinBatchReqIdRepeat = 4410,
    RetTextJoinTypeNotSupportBatchReq = 4411,
    RetTextJoinAvatarIdNotExist = 4412,
    RetTextJoinUnknowType = 4413,
    RetPamMissionMissionIdError = 4451,
    RetPamMissionMissionExpire = 4452,
    RetChatTypeNotExist = 4501,
    RetMsgTypeNotExist = 4502,
    RetChatNoTargetUid = 4503,
    RetChatMsgEmpty = 4504,
    RetChatMsgExceedLimit = 4505,
    RetChatMsgSensitiveCheckError = 4506,
    RetChatMsgUtf8Error = 4507,
    RetChatForbidSwitchOpen = 4508,
    RetChatForbid = 4509,
    RetChatMsgIncludeSpecialStr = 4510,
    RetChatMsgEmojiNotExist = 4511,
    RetChatMsgEmojiGenderNotMatch = 4512,
    RetChatMsgEmojiNotMarked = 4513,
    RetChatMsgEmojiAlreadyMarked = 4514,
    RetChatMsgEmojiMarkedMaxLimit = 4515,
    RetBoxingClubChallengeNotOpen = 4601,
    RetMuseumNotOpen = 4651,
    RetMuseumTurnCntNotMatch = 4652,
    RetMuseumPhaseNotReach = 4653,
    RetMuseumUnknowStuff = 4654,
    RetMuseumUnknowArea = 4655,
    RetMuseumUnknowPos = 4656,
    RetMuseumStuffAlreadyInArea = 4657,
    RetMuseumStuffNotInArea = 4658,
    RetMuseumGetNpcRepeat = 4659,
    RetMuseumGetNpcUnlock = 4660,
    RetMuseumGetNpcNotEnough = 4661,
    RetMuseumChangeStuffAreaError = 4662,
    RetMuseumNotInit = 4663,
    RetMuseumEventError = 4664,
    RetMuseumUnknowChooseEventId = 4665,
    RetMuseumEventOrderNotMatch = 4666,
    RetMuseumEventPhaseNotUnlock = 4667,
    RetMuseumEventMissionNotFound = 4668,
    RetMuseumAreaLevelUpAlready = 4669,
    RetMuseumStuffAlreadyUsed = 4670,
    RetMuseumEventRoundNotUnlock = 4671,
    RetMuseumStuffInArea = 4672,
    RetMuseumStuffDispatch = 4673,
    RetMuseumIsEnd = 4674,
    RetMuseumStuffLeaving = 4675,
    RetMuseumEventMissionNotFinish = 4678,
    RetMuseumCollectRewardNotExist = 4679,
    RetMuseumCollectRewardAlreadyTaken = 4680,
    RetMuseumAcceptMissionMaxLimit = 4681,
    RetRogueChallengeNotOpen = 4701,
    RetRogueChallengeAssisRefreshLimit = 4702,
    RetAlleyNotInit = 4721,
    RetAlleyNotOpen = 4722,
    RetAlleyMapNotExist = 4724,
    RetAlleyEmptyPosList = 4725,
    RetAlleyLinePosInvalid = 4726,
    RetAlleyShopNotUnlock = 4727,
    RetAlleyDepotFull = 4728,
    RetAlleyShopNotInclude = 4729,
    RetAlleyEventNotUnlock = 4730,
    RetAlleyEventNotRefresh = 4731,
    RetAlleyEventStateDoing = 4732,
    RetAlleyEventStateFinish = 4733,
    RetAlleyEventError = 4734,
    RetAlleyRewardLevelError = 4735,
    RetAlleyRewardPrestigeNotEnough = 4736,
    RetAlleyShipEmpty = 4737,
    RetAlleyShipIdDismatch = 4738,
    RetAlleyShipNotExist = 4739,
    RetAlleyShipNotUnlock = 4740,
    RetAlleyGoodsNotExist = 4741,
    RetAlleyGoodsNotUnlock = 4742,
    RetAlleyProfitNotPositive = 4743,
    RetAlleySpecialOrderDismatch = 4744,
    RetAlleyOrderGoodsOverLimit = 4745,
    RetAlleySpecialOrderConditionNotMeet = 4746,
    RetAlleyDepotSizeOverLimit = 4747,
    RetAlleyGoodsNotEnough = 4748,
    RetAlleyOrderIndexInvalid = 4749,
    RetAlleyRewardAlreadyTake = 4750,
    RetAlleyRewardNotExist = 4751,
    RetAlleyMainMissionNotDoing = 4752,
    RetAlleyCriticalEventNotFinish = 4753,
    RetAlleyShopGoodsNotValid = 4754,
    RetAlleySlashNotOpen = 4755,
    RetAlleyPlacingAnchorInvalid = 4756,
    RetAlleyPlacingGoodsIndexInvalid = 4757,
    RetAlleySaveMapTooQuick = 4758,
    RetAlleyMapNotLink = 4759,
    RetAlleyFundsNotLowerBase = 4760,
    RetAlleyEventNotFinish = 4761,
    RetAlleyNormalOrderNotMeet = 4762,
    RetPlayerReturnNotOpen = 4801,
    RetPlayerReturnIsSigned = 4802,
    RetPlayerReturnPointNotEnough = 4803,
    RetPlayerReturnConditionInvalid = 4804,
    RetPlayerReturnHasSigned = 4805,
    RetPlayerReturnRewardTaken = 4806,
    RetAetherDivideNoLineup = 4851,
    RetAetherDivideLineupInvalid = 4852,
    RetChatBubbleIdError = 4901,
    RetChatBubbleIdNotUnlock = 4902,
    RetPhoneThemeIdError = 4903,
    RetPhoneThemeIdNotUnlock = 4904,
    RetChatBubbleSelectIsCurrent = 4905,
    RetPhoneThemeSelectIsCurrent = 4906,
    RetChessRogueConfigNotFound = 4951,
    RetChessRogueConfigInvalid = 4952,
    RetChessRogueNoValidRoom = 4963,
    RetChessRogueNoCellInfo = 4964,
    RetChessRogueCellNotFinish = 4965,
    RetChessRogueCellIsLocked = 4966,
    RetChessRogueScheduleNotMatch = 4967,
    RetChessRogueStatusFail = 4968,
    RetChessRogueAreaNotExist = 4969,
    RetChessRogueLineupFail = 4970,
    RetChessRogueAeonFail = 4980,
    RetChessRogueEnterCellFail = 4981,
    RetChessRogueRollDiceFail = 4982,
    RetChessRogueDiceStatusFail = 4983,
    RetChessRogueDiceCntNotFull = 4984,
    RetChessRogueUnlock = 4985,
    RetChessRoguePickAvatarFail = 4986,
    RetChessRogueAvatarInvalid = 4987,
    RetChessRogueCellCanNotSelect = 4988,
    RetChessRogueDiceConfirmed = 4989,
    RetChessRogueNousDiceNotMatch = 4990,
    RetChessRogueNousDiceRarityFail = 4991,
    RetChessRogueNousDiceSurfaceDuplicate = 4992,
    RetChessRogueNotInRogue = 4993,
    RetChessRogueNousDiceBranchLimit = 4994,
    RetHeliobusNotOpen = 5101,
    RetHeliobusSnsPostNotUnlock = 5102,
    RetHeliobusSnsAlreadyRead = 5103,
    RetHeliobusSnsAlreadyLiked = 5104,
    RetHeliobusSnsAlreadyCommented = 5105,
    RetHeliobusSnsInMission = 5106,
    RetHeliobusSnsAlreadyPosted = 5107,
    RetHeliobusSnsNotDoingMission = 5108,
    RetHeliobusRewardLevelMax = 5109,
    RetHeliobusIncomeNotEnough = 5110,
    RetHeliobusSnsCommentNotUnlock = 5111,
    RetHeliobusChallengeNotUnlock = 5112,
    RetHeliobusChallengeIdError = 5113,
    RetHeliobusSkillNotUnlock = 5114,
    RetHeliobusAcceptPostMissionFail = 5115,
    RetHeliobusSkillNotSelected = 5116,
    RetHeliobusPlaneTypeInvalid = 5117,
    RetReddotParamInvalid = 5151,
    RetReddotActivityNotOpen = 5152,
    RetRogueEndlessActivityConfigError = 5201,
    RetRogueEndlessActivityNotOpen = 5202,
    RetRogueEndlessActivityOverBonusRewardLimit = 5203,
    RetRogueEndlessActivityScoreNotMeet = 5204,
    RetRogueEndlessActivityRewardLevleAlreadyTake = 5205,
    RetHeartDialScriptNotFound = 5251,
    RetHeartDialScriptEmotionTheSame = 5252,
    RetHeartDialScriptStepNotNormal = 5253,
    RetHeartDialScriptConditionNotMatch = 5254,
    RetHeartDialScriptSubmitItemNumNotMatch = 5255,
    RetHeartDialScriptSubmitItemIdNotMatch = 5256,
    RetHeartDialDialogueNotFound = 5257,
    RetHeartDialDialogueAlreadyPerformed = 5258,
    RetHeartDialNpcNotFound = 5259,
    RetHeartDialTraceConfigNotFound = 5260,
    RetHeartDialFloorTraceExist = 5261,
    RetHeartDialTraceFloorNotMatch = 5262,
    RetTravelBrochureConfigError = 5301,
    RetTravelBrochureParamInvalid = 5302,
    RetTravelBrochureLocked = 5303,
    RetTravelBrochureCannotOperate = 5304,
    RetTravelBrochureWorldIdNotMatch = 5305,
    RetTravelBrochureHasNoWorldBook = 5306,
    RetTravelBrochurePageFull = 5307,
    RetMapRotationNotInRegion = 5351,
    RetMapRotationRotaterAlreadyDeployed = 5352,
    RetMapRotationEnergyNotEnough = 5353,
    RetMapRotationEntityNotOnCurPose = 5354,
    RetMapRotationRotaterNotDeployed = 5355,
    RetMapRotationPoseRotaterMismatch = 5356,
    RetMapRotationRotaterNotRemovable = 5357,
    RetMapRotationRotaterDisposable = 5358,
    RetSpaceZooActivityCatNotFound = 5401,
    RetSpaceZooActivityCatParamInvalid = 5402,
    RetSpaceZooActivityCatItemNotEnough = 5403,
    RetSpaceZooActivityCatBagFull = 5404,
    RetSpaceZooActivityCatNotToMutate = 5405,
    RetSpaceZooActivityCatStateError = 5406,
    RetSpaceZooActivityCatCatteryLocked = 5407,
    RetSpaceZooActivityCatOutNow = 5408,
    RetSpaceZooActivityCatConfigNotFound = 5409,
    RetSpaceZooActivityCatFeatureNotFound = 5410,
    RetSpaceZooActivityCatAddCatError = 5411,
    RetSpaceZooActivityCatMoneyNotEnough = 5412,
    RetSpaceZooActivityCatCondNotMatch = 5413,
    RetStrongChallengeActivityStageCfgMiss = 5501,
    RetStrongChallengeActivityStageNotOpen = 5502,
    RetStrongChallengeActivityBuffError = 5503,
    RetRollShopNotFound = 5551,
    RetRollShopGroupEmpty = 5552,
    RetRollShopEmpty = 5553,
    RetRollShopGachaReqDuplicated = 5554,
    RetRollShopRandomError = 5555,
    RetRollShopGroupTypeNotFound = 5556,
    RetRollShopHasStoredRewardAlready = 5557,
    RetRollShopNoStoredReward = 5558,
    RetRollShopNotInValidScene = 5559,
    RetRollShopInvalidRollShopType = 5560,
    RetActivityRaidCollectionPrevNotFinish = 5601,
    RetActivityRaidCollectionGroupEnterNextUnavailable = 5602,
    RetActivityRaidCollectionIsLast = 5603,
    RetActivityRaidCollectionIsNotNext = 5604,
    RetOfferingNotUnlock = 5651,
    RetOfferingLevelNotUnlock = 5652,
    RetOfferingReachMaxLevel = 5653,
    RetOfferingItemNotEnough = 5654,
    RetOfferingLongtailNotOpen = 5655,
    RetOfferingRewardCondition = 5656,
    RetDrinkMakerChatInvalid = 5701,
    RetDrinkMakerParamInvalid = 5702,
    RetDrinkMakerParamNotUnlock = 5703,
    RetDrinkMakerConfigNotFound = 5704,
    RetDrinkMakerNotLastChat = 5705,
    RetDrinkMakerDayAndFreePhaseNotOpen = 5706,
    RetMonopolyNotOpen = 5751,
    RetMonopolyConfigError = 5752,
    RetMonopolyDiceNotEnough = 5753,
    RetMonopolyCurCellNotFinish = 5754,
    RetMonopolyCoinNotEnough = 5755,
    RetMonopolyCellWaitPending = 5756,
    RetMonopolyCellStateError = 5757,
    RetMonopolyCellContentError = 5758,
    RetMonopolyItemNotEnough = 5759,
    RetMonopolyCellContentCannotGiveup = 5760,
    RetMonopolyAssetLevelInvalid = 5761,
    RetMonopolyTurnNotFinish = 5762,
    RetMonopolyGuideNotFinish = 5763,
    RetMonopolyRaffleRewardReissued = 5764,
    RetMonopolyNoGameActive = 5771,
    RetMonopolyGameRatioNotIncreasable = 5772,
    RetMonopolyGameRatioMax = 5773,
    RetMonopolyGameTargetRatioInvalid = 5774,
    RetMonopolyGameBingoFlipPosInvalid = 5775,
    RetMonopolyGameGuessAlreadyChoose = 5776,
    RetMonopolyGameGuessChooseInvalid = 5777,
    RetMonopolyGameGuessInformationAlreadyBought = 5778,
    RetMonopolyGameRaiseRatioNotUnlock = 5779,
    RetMonopolyFriendNotSynced = 5785,
    RetMonopolyGetFriendRankingListInCd = 5786,
    RetMonopolyLikeTargetNotFriend = 5787,
    RetMonopolyDailyAlreadyLiked = 5788,
    RetMonopolySocialEventStatusNotMatch = 5789,
    RetMonopolySocialEventServerCacheNotExist = 5790,
    RetMonopolyActivityIdNotMatch = 5791,
    RetMonopolyRafflePoolNotExist = 5792,
    RetMonopolyRafflePoolTimeNotMatch = 5793,
    RetMonopolyRafflePoolPhaseNotMeet = 5794,
    RetMonopolyRafflePoolShowTimeNotMeet = 5795,
    RetMonopolyRaffleTicketNotFound = 5796,
    RetMonopolyRaffleTicketTimeNotMeet = 5797,
    RetMonopolyRaffleTicketRewardAlreadyTaken = 5798,
    RetMonopolyRafflePoolNotInRaffleTime = 5799,
    RetMonopolyMbtiReportRewardAlreadyTaken = 5800,
    RetEvolveBuildLevelGaming = 5801,
    RetEveolveBuildLevelBanRandom = 5802,
    RetEvolveBuildFirstRewardAlreadyTaken = 5803,
    RetEvolveBuildLevelUnfinish = 5804,
    RetEvolveBuildShopAbilityMaxLevel = 5805,
    RetEvolveBuildShopAbilityMinLevel = 5806,
    RetEvolveBuildShopAbilityNotGet = 5807,
    RetEvolveBuildLevelLock = 5808,
    RetEvolveBuildExpNotEnough = 5809,
    RetEvolveBuildShopAbilityLevelError = 5810,
    RetEvolveBuildActivityNotOpen = 5811,
    RetEvolveBuildShopAbilityEmpty = 5812,
    RetEvolveBuildLevelNotStart = 5813,
    RetEvolveBuildShopLock = 5814,
    RetEvolveBuildRewardLock = 5815,
    RetEvolveBuildRewardLevelMax = 5816,
    RetEvolveBuildRewardAlreadyAllTaken = 5717,
    RetClockParkConfigError = 5851,
    RetClockParkEffectError = 5852,
    RetClockParkScriptAlreadyUnlock = 5853,
    RetClockParkScriptUnlockConditionNotMeet = 5854,
    RetClockParkTalentAlreadyUnlock = 5855,
    RetClockParkScriptLocked = 5856,
    RetClockParkHasOngoingScript = 5857,
    RetClockParkNoOngoingScript = 5858,
    RetClockParkDicePlacementError = 5859,
    RetClockParkMismatchStatus = 5860,
    RetClockParkNoBuff = 5861,
    RetClockParkSlotMachineGachaReqDuplicated = 5862,
    RetClockParkSlotMachineCostNotEnough = 5863,
    RetClockParkSlotMachineGachaCntExceedLimit = 5864,
    RetClockParkNotOpen = 5865,
    RetTournRogueStatusMismatch = 5901,
    RetMagicRogueStatusMismatch = 5902,
    RetAutoMountMagicUnitNoMatchedMagicScepter = 5903,
    RetMagicUnitWorkbenchReforgeGenFail = 5904,
    RetMatchAlreadyInMatch = 6201,
    RetMatchNotInMatch = 6202,
    RetMatchPlayNotOpen = 6203,
    RetCrossStateError = 6204,
    RetMatchVersionNotEqual = 6205,
    RetMatchPlayerNotInLobbyRoom = 6206,
    RetLobbyStateNotMatch = 6207,
    RetLobbyRoomNotExist = 6208,
    RetLobbyRoomPalyerFull = 6209,
    RetLobbyRoomPalyerNotReady = 6210,
    RetLobbyRoomPalyerFighting = 6211,
    RetFightRoomNotExist = 6250,
    RetFightMatch3PlayerStateErr = 6251,
    RetFightMatch3RoomStateErr = 6252,
    RetCrossStateTimeOut = 6253,
    RetSwordTrainingNoActiveGame = 6301,
    RetSwordTrainingNoPendingActionMatch = 6302,
    RetSwordTrainingPartnerAbilityInvalid = 6303,
    RetSwordTrainingSkillAlreadyLearned = 6304,
    RetSwordTrainingConditionNotMeet = 6305,
    RetSwordTrainingParentSkillNotLearned = 6306,
    RetSwordTrainingSkillTypeNotUnlock = 6307,
    RetSwordTrainingGameAlreadyExist = 6308,
    RetSwordTrainingEndingHintNotMatch = 6309,
    RetSwordTrainingStorylineConfigNotFound = 6310,
    RetSwordTrainingStoryConfigNotFound = 6311,
    RetSwordTrainingUnlockNotFinish = 6312,
    RetSwordTrainingOptionMismatch = 6313,
    RetSwordTrainingRestoreWithoutExamFailed = 6314,
    RetSwordTrainingNoRestoreGameAvailable = 6315,
    RetSwordTrainingEndingStoryNotMatch = 6316,
    RetSwordTrainingEndingNotFinish = 6317,
    RetSwordTrainingEndingRewardTaken = 6318,
    RetSwordTrainingCombatRankNotChange = 6319,
    RetSwordTrainingDirectBattleDisable = 6320,
    RetFightFestPhaseNotMatch = 6351,
    RetFightFestScoreRaceAlreadyFinish = 6352,
    RetFightFestChallengeLocked = 6353,
    RetFightFestCoachSkillLocked = 6354,
    RetFightFestCoachSkillEquipTypeExisted = 6355,
    RetFightFestScoreRaceMissionDoind = 6356,
    RetFightFestCoachSkillNoEquip = 6357,
    RetPetNotExist = 6401,
    RetPetAlreadySummoned = 6402,
    RetPetNotSummoned = 6403,
    RetMusicRhythmLevelTimeTooShort = 6451,
    RetMusicRhythmNotInLevel = 6452,
    RetMusicRhythmPreDifficultyNotPass = 6453,
    RetMusicRhythmSongLimited = 6454,
    RetMusicRhythmSongLocked = 6455,
    RetMusicRhythmTrackLocked = 6456,
    RetMusicRhythmLevelNotUnlock = 6457,
    RetMusicRhythmSongSfxLocked = 6458,
    RetTrainPartyCoinNotEnough = 6501,
    RetTrainPartyDiyTagNotMatch = 6502,
    RetTrainPartyUseCardMobilityNotEnough = 6503,
    RetTrainPartyAreaUnlockCoinNotEnough = 6504,
    RetTarotBookEnergyNotEnough = 6601,
    RetTarotBookPackNotAvailable = 6602,
    RetTarotBookStoryAlreadyUnlock = 6603,
    RetTarotBookCardNotEnough = 6604,
    RetTarotBookClueNotEnough = 6605,
    RetTarotBookUnlockStoryCardNotSame = 6606,
    RetTarotBookStoryNotUnlock = 6607,
    RetTarotBookStoryAlreadyFinish = 6608,
    RetTarotBookInteractionAlreadyFinish = 6609,
    RetChimeraChimeraNotUnlock = 6621,
    RetChimeraChimeraDuplicated = 6622,
    RetChimeraChimeraTypeError = 6623,
    RetChimeraWorkMismatchRound = 6624,
    RetChimeraWorkRoundOptionNotMeet = 6625,
    RetChimeraEndlessNotUnlock = 6626,
    RetChimeraInEndless = 6627,
    RetChimeraNotInEndless = 6628,
    RetChimeraChimeraFallInEndless = 6629,
}
impl Retcode {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RetSucc => "RET_SUCC",
            Self::RetFail => "RET_FAIL",
            Self::RetServerInternalError => "RET_SERVER_INTERNAL_ERROR",
            Self::RetTimeout => "RET_TIMEOUT",
            Self::RetRepeatedReq => "RET_REPEATED_REQ",
            Self::RetReqParaInvalid => "RET_REQ_PARA_INVALID",
            Self::RetPlayerDataError => "RET_PLAYER_DATA_ERROR",
            Self::RetPlayerClientPaused => "RET_PLAYER_CLIENT_PAUSED",
            Self::RetFuncCheckFailed => "RET_FUNC_CHECK_FAILED",
            Self::RetFeatureSwitchClosed => "RET_FEATURE_SWITCH_CLOSED",
            Self::RetFreqOverLimit => "RET_FREQ_OVER_LIMIT",
            Self::RetSystemBusy => "RET_SYSTEM_BUSY",
            Self::RetPlayerNotOnline => "RET_PLAYER_NOT_ONLINE",
            Self::RetOperationInCd => "RET_OPERATION_IN_CD",
            Self::RetRepeateLogin => "RET_REPEATE_LOGIN",
            Self::RetRetryLogin => "RET_RETRY_LOGIN",
            Self::RetWaitLogin => "RET_WAIT_LOGIN",
            Self::RetNotInWhiteList => "RET_NOT_IN_WHITE_LIST",
            Self::RetInBlackList => "RET_IN_BLACK_LIST",
            Self::RetAccountVerifyError => "RET_ACCOUNT_VERIFY_ERROR",
            Self::RetAccountParaError => "RET_ACCOUNT_PARA_ERROR",
            Self::RetAntiAddictLogin => "RET_ANTI_ADDICT_LOGIN",
            Self::RetCheckSumError => "RET_CHECK_SUM_ERROR",
            Self::RetReachMaxPlayerNum => "RET_REACH_MAX_PLAYER_NUM",
            Self::RetAlreadyRegistered => "RET_ALREADY_REGISTERED",
            Self::RetGenderError => "RET_GENDER_ERROR",
            Self::SetNicknameRetCallbackProcessing => {
                "SET_NICKNAME_RET_CALLBACK_PROCESSING"
            }
            Self::RetInGmBindAccess => "RET_IN_GM_BIND_ACCESS",
            Self::RetQuestRewardAlreadyTaken => "RET_QUEST_REWARD_ALREADY_TAKEN",
            Self::RetQuestNotAccept => "RET_QUEST_NOT_ACCEPT",
            Self::RetQuestNotFinish => "RET_QUEST_NOT_FINISH",
            Self::RetQuestStatusError => "RET_QUEST_STATUS_ERROR",
            Self::RetAchievementLevelNotReach => "RET_ACHIEVEMENT_LEVEL_NOT_REACH",
            Self::RetAchievementLevelAlreadyTaken => {
                "RET_ACHIEVEMENT_LEVEL_ALREADY_TAKEN"
            }
            Self::RetAvatarNotExist => "RET_AVATAR_NOT_EXIST",
            Self::RetAvatarResExpNotEnough => "RET_AVATAR_RES_EXP_NOT_ENOUGH",
            Self::RetAvatarExpReachPromotionLimit => {
                "RET_AVATAR_EXP_REACH_PROMOTION_LIMIT"
            }
            Self::RetAvatarReachMaxPromotion => "RET_AVATAR_REACH_MAX_PROMOTION",
            Self::RetSkilltreeConfigNotExist => "RET_SKILLTREE_CONFIG_NOT_EXIST",
            Self::RetSkilltreeAlreadyUnlock => "RET_SKILLTREE_ALREADY_UNLOCK",
            Self::RetSkilltreePreLocked => "RET_SKILLTREE_PRE_LOCKED",
            Self::RetSkilltreeLevelNotMeet => "RET_SKILLTREE_LEVEL_NOT_MEET",
            Self::RetSkilltreeRankNotMeet => "RET_SKILLTREE_RANK_NOT_MEET",
            Self::RetAvatarDressNoEquipment => "RET_AVATAR_DRESS_NO_EQUIPMENT",
            Self::RetAvatarExpItemNotExist => "RET_AVATAR_EXP_ITEM_NOT_EXIST",
            Self::RetSkilltreePointLocked => "RET_SKILLTREE_POINT_LOCKED",
            Self::RetSkilltreePointLevelUpgradeNotMatch => {
                "RET_SKILLTREE_POINT_LEVEL_UPGRADE_NOT_MATCH"
            }
            Self::RetSkilltreePointLevelReachMax => "RET_SKILLTREE_POINT_LEVEL_REACH_MAX",
            Self::RetWorldLevelNotMeet => "RET_WORLD_LEVEL_NOT_MEET",
            Self::RetPlayerLevelNotMeet => "RET_PLAYER_LEVEL_NOT_MEET",
            Self::RetAvatarRankNotMatch => "RET_AVATAR_RANK_NOT_MATCH",
            Self::RetAvatarRankReachMax => "RET_AVATAR_RANK_REACH_MAX",
            Self::RetHeroBasicTypeNotMatch => "RET_HERO_BASIC_TYPE_NOT_MATCH",
            Self::RetAvatarPromotionNotMeet => "RET_AVATAR_PROMOTION_NOT_MEET",
            Self::RetPromotionRewardConfigNotExist => {
                "RET_PROMOTION_REWARD_CONFIG_NOT_EXIST"
            }
            Self::RetPromotionRewardAlreadyTaken => "RET_PROMOTION_REWARD_ALREADY_TAKEN",
            Self::RetAvatarSkinItemNotExist => "RET_AVATAR_SKIN_ITEM_NOT_EXIST",
            Self::RetAvatarSkinAlreadyDressed => "RET_AVATAR_SKIN_ALREADY_DRESSED",
            Self::RetAvatarNotDressSkin => "RET_AVATAR_NOT_DRESS_SKIN",
            Self::RetAvatarSkinNotMatchAvatar => "RET_AVATAR_SKIN_NOT_MATCH_AVATAR",
            Self::RetAvatarPathNotMatch => "RET_AVATAR_PATH_NOT_MATCH",
            Self::RetItemNotExist => "RET_ITEM_NOT_EXIST",
            Self::RetItemCostNotEnough => "RET_ITEM_COST_NOT_ENOUGH",
            Self::RetItemCostTooMuch => "RET_ITEM_COST_TOO_MUCH",
            Self::RetItemNoCost => "RET_ITEM_NO_COST",
            Self::RetItemNotEnough => "RET_ITEM_NOT_ENOUGH",
            Self::RetItemInvalid => "RET_ITEM_INVALID",
            Self::RetItemConfigNotExist => "RET_ITEM_CONFIG_NOT_EXIST",
            Self::RetScoinNotEnough => "RET_SCOIN_NOT_ENOUGH",
            Self::RetItemRewardExceedLimit => "RET_ITEM_REWARD_EXCEED_LIMIT",
            Self::RetItemInvalidUse => "RET_ITEM_INVALID_USE",
            Self::RetItemUseConfigNotExist => "RET_ITEM_USE_CONFIG_NOT_EXIST",
            Self::RetRewardConfigNotExist => "RET_REWARD_CONFIG_NOT_EXIST",
            Self::RetItemExceedLimit => "RET_ITEM_EXCEED_LIMIT",
            Self::RetItemCountInvalid => "RET_ITEM_COUNT_INVALID",
            Self::RetItemUseTargetTypeInvalid => "RET_ITEM_USE_TARGET_TYPE_INVALID",
            Self::RetItemUseSatietyFull => "RET_ITEM_USE_SATIETY_FULL",
            Self::RetItemComposeNotExist => "RET_ITEM_COMPOSE_NOT_EXIST",
            Self::RetRelicComposeNotExist => "RET_RELIC_COMPOSE_NOT_EXIST",
            Self::RetItemCanNotSell => "RET_ITEM_CAN_NOT_SELL",
            Self::RetItemSellExceddLimit => "RET_ITEM_SELL_EXCEDD_LIMIT",
            Self::RetItemNotInCostList => "RET_ITEM_NOT_IN_COST_LIST",
            Self::RetItemSpecialCostNotEnough => "RET_ITEM_SPECIAL_COST_NOT_ENOUGH",
            Self::RetItemSpecialCostTooMuch => "RET_ITEM_SPECIAL_COST_TOO_MUCH",
            Self::RetItemFormulaNotExist => "RET_ITEM_FORMULA_NOT_EXIST",
            Self::RetItemAutoGiftOptionalNotExist => {
                "RET_ITEM_AUTO_GIFT_OPTIONAL_NOT_EXIST"
            }
            Self::RetRelicComposeRelicInvalid => "RET_RELIC_COMPOSE_RELIC_INVALID",
            Self::RetRelicComposeMainAffixIdInvalid => {
                "RET_RELIC_COMPOSE_MAIN_AFFIX_ID_INVALID"
            }
            Self::RetRelicComposeWrongFormulaType => {
                "RET_RELIC_COMPOSE_WRONG_FORMULA_TYPE"
            }
            Self::RetRelicComposeRelicNotExist => "RET_RELIC_COMPOSE_RELIC_NOT_EXIST",
            Self::RetRelicComposeBlackGoldCountInvalid => {
                "RET_RELIC_COMPOSE_BLACK_GOLD_COUNT_INVALID"
            }
            Self::RetRelicComposeBlackGoldNotNeed => {
                "RET_RELIC_COMPOSE_BLACK_GOLD_NOT_NEED"
            }
            Self::RetMonthCardCannotUse => "RET_MONTH_CARD_CANNOT_USE",
            Self::RetItemRewardExceedDisappear => "RET_ITEM_REWARD_EXCEED_DISAPPEAR",
            Self::RetItemNeedRecycle => "RET_ITEM_NEED_RECYCLE",
            Self::RetItemComposeExceedLimit => "RET_ITEM_COMPOSE_EXCEED_LIMIT",
            Self::RetItemCanNotDestroy => "RET_ITEM_CAN_NOT_DESTROY",
            Self::RetItemAlreadyMark => "RET_ITEM_ALREADY_MARK",
            Self::RetItemMarkExceedLimit => "RET_ITEM_MARK_EXCEED_LIMIT",
            Self::RetItemNotMark => "RET_ITEM_NOT_MARK",
            Self::RetItenTurnFoodNotSet => "RET_ITEN_TURN_FOOD_NOT_SET",
            Self::RetItemTurnFoodAlreadySet => "RET_ITEM_TURN_FOOD_ALREADY_SET",
            Self::RetItemTurnFoodConsumeTypeError => {
                "RET_ITEM_TURN_FOOD_CONSUME_TYPE_ERROR"
            }
            Self::RetItemTurnFoodSwitchAlreadyOpen => {
                "RET_ITEM_TURN_FOOD_SWITCH_ALREADY_OPEN"
            }
            Self::RetItemTurnFoodSwitchAlreadyClose => {
                "RET_ITEM_TURN_FOOD_SWITCH_ALREADY_CLOSE"
            }
            Self::RetHcoinExchangeTooMuch => "RET_HCOIN_EXCHANGE_TOO_MUCH",
            Self::RetItemTurnFoodSceneTypeError => "RET_ITEM_TURN_FOOD_SCENE_TYPE_ERROR",
            Self::RetEquipmentAlreadyDressed => "RET_EQUIPMENT_ALREADY_DRESSED",
            Self::RetEquipmentNotExist => "RET_EQUIPMENT_NOT_EXIST",
            Self::RetEquipmentReachLevelLimit => "RET_EQUIPMENT_REACH_LEVEL_LIMIT",
            Self::RetEquipmentConsumeSelf => "RET_EQUIPMENT_CONSUME_SELF",
            Self::RetEquipmentAlreadyLocked => "RET_EQUIPMENT_ALREADY_LOCKED",
            Self::RetEquipmentAlreadyUnlocked => "RET_EQUIPMENT_ALREADY_UNLOCKED",
            Self::RetEquipmentLocked => "RET_EQUIPMENT_LOCKED",
            Self::RetEquipmentSelectNumOverLimit => "RET_EQUIPMENT_SELECT_NUM_OVER_LIMIT",
            Self::RetEquipmentRankUpMustConsumeSameTid => {
                "RET_EQUIPMENT_RANK_UP_MUST_CONSUME_SAME_TID"
            }
            Self::RetEquipmentPromotionReachMax => "RET_EQUIPMENT_PROMOTION_REACH_MAX",
            Self::RetEquipmentRankUpReachMax => "RET_EQUIPMENT_RANK_UP_REACH_MAX",
            Self::RetEquipmentLevelReachMax => "RET_EQUIPMENT_LEVEL_REACH_MAX",
            Self::RetEquipmentExceedLimit => "RET_EQUIPMENT_EXCEED_LIMIT",
            Self::RetRelicNotExist => "RET_RELIC_NOT_EXIST",
            Self::RetRelicReachLevelLimit => "RET_RELIC_REACH_LEVEL_LIMIT",
            Self::RetRelicConsumeSelf => "RET_RELIC_CONSUME_SELF",
            Self::RetRelicAlreadyDressed => "RET_RELIC_ALREADY_DRESSED",
            Self::RetRelicLocked => "RET_RELIC_LOCKED",
            Self::RetRelicAlreadyLocked => "RET_RELIC_ALREADY_LOCKED",
            Self::RetRelicAlreadyUnlocked => "RET_RELIC_ALREADY_UNLOCKED",
            Self::RetRelicLevelIsNotZero => "RET_RELIC_LEVEL_IS_NOT_ZERO",
            Self::RetUniqueIdRepeated => "RET_UNIQUE_ID_REPEATED",
            Self::RetEquipmentLevelNotMeet => "RET_EQUIPMENT_LEVEL_NOT_MEET",
            Self::RetEquipmentItemNotInCostList => "RET_EQUIPMENT_ITEM_NOT_IN_COST_LIST",
            Self::RetEquipmentLevelGreaterThanOne => {
                "RET_EQUIPMENT_LEVEL_GREATER_THAN_ONE"
            }
            Self::RetEquipmentAlreadyRanked => "RET_EQUIPMENT_ALREADY_RANKED",
            Self::RetRelicExceedLimit => "RET_RELIC_EXCEED_LIMIT",
            Self::RetRelicAlreadyDiscarded => "RET_RELIC_ALREADY_DISCARDED",
            Self::RetRelicAlreadyUndiscarded => "RET_RELIC_ALREADY_UNDISCARDED",
            Self::RetEquipmentBatchLockTooFast => "RET_EQUIPMENT_BATCH_LOCK_TOO_FAST",
            Self::RetRelicFilterPlanSlotEmpty => "RET_RELIC_FILTER_PLAN_SLOT_EMPTY",
            Self::RetRelicFilterPlanNumExceedLimit => {
                "RET_RELIC_FILTER_PLAN_NUM_EXCEED_LIMIT"
            }
            Self::RetRelicFilterPlanNameUtf8Error => {
                "RET_RELIC_FILTER_PLAN_NAME_UTF8_ERROR"
            }
            Self::RetRelicFilterPlanNameFormatError => {
                "RET_RELIC_FILTER_PLAN_NAME_FORMAT_ERROR"
            }
            Self::RetRelicFilterPlanNoChange => "RET_RELIC_FILTER_PLAN_NO_CHANGE",
            Self::RetRelicReforgeNotConfirmed => "RET_RELIC_REFORGE_NOT_CONFIRMED",
            Self::RetLineupInvalidIndex => "RET_LINEUP_INVALID_INDEX",
            Self::RetLineupInvalidMemberPos => "RET_LINEUP_INVALID_MEMBER_POS",
            Self::RetLineupSwapNotExist => "RET_LINEUP_SWAP_NOT_EXIST",
            Self::RetLineupAvatarAlreadyIn => "RET_LINEUP_AVATAR_ALREADY_IN",
            Self::RetLineupCreateAvatarError => "RET_LINEUP_CREATE_AVATAR_ERROR",
            Self::RetLineupAvatarInitError => "RET_LINEUP_AVATAR_INIT_ERROR",
            Self::RetLineupNotExist => "RET_LINEUP_NOT_EXIST",
            Self::RetLineupOnlyOneMember => "RET_LINEUP_ONLY_ONE_MEMBER",
            Self::RetLineupSameLeaderSlot => "RET_LINEUP_SAME_LEADER_SLOT",
            Self::RetLineupNoLeaderSelect => "RET_LINEUP_NO_LEADER_SELECT",
            Self::RetLineupSwapSameSlot => "RET_LINEUP_SWAP_SAME_SLOT",
            Self::RetLineupAvatarNotExist => "RET_LINEUP_AVATAR_NOT_EXIST",
            Self::RetLineupTrialAvatarCanNotQuit => {
                "RET_LINEUP_TRIAL_AVATAR_CAN_NOT_QUIT"
            }
            Self::RetLineupVirtualLineupPlaneNotMatch => {
                "RET_LINEUP_VIRTUAL_LINEUP_PLANE_NOT_MATCH"
            }
            Self::RetLineupNotValidLeader => "RET_LINEUP_NOT_VALID_LEADER",
            Self::RetLineupSameIndex => "RET_LINEUP_SAME_INDEX",
            Self::RetLineupIsEmpty => "RET_LINEUP_IS_EMPTY",
            Self::RetLineupNameFormatError => "RET_LINEUP_NAME_FORMAT_ERROR",
            Self::RetLineupTypeNotMatch => "RET_LINEUP_TYPE_NOT_MATCH",
            Self::RetLineupReplaceAllFailed => "RET_LINEUP_REPLACE_ALL_FAILED",
            Self::RetLineupNotAllowEdit => "RET_LINEUP_NOT_ALLOW_EDIT",
            Self::RetLineupAvatarIsAlive => "RET_LINEUP_AVATAR_IS_ALIVE",
            Self::RetLineupAssistHasOnlyMember => "RET_LINEUP_ASSIST_HAS_ONLY_MEMBER",
            Self::RetLineupAssistCannotSwitch => "RET_LINEUP_ASSIST_CANNOT_SWITCH",
            Self::RetLineupAvatarTypeInvalid => "RET_LINEUP_AVATAR_TYPE_INVALID",
            Self::RetLineupNameUtf8Error => "RET_LINEUP_NAME_UTF8_ERROR",
            Self::RetLineupLeaderLock => "RET_LINEUP_LEADER_LOCK",
            Self::RetLineupStoryLineNotMatch => "RET_LINEUP_STORY_LINE_NOT_MATCH",
            Self::RetLineupAvatarLock => "RET_LINEUP_AVATAR_LOCK",
            Self::RetLineupAvatarInvalid => "RET_LINEUP_AVATAR_INVALID",
            Self::RetLineupAvatarAlreadyInit => "RET_LINEUP_AVATAR_ALREADY_INIT",
            Self::RetLineupLimited => "RET_LINEUP_LIMITED",
            Self::RetMailNotExist => "RET_MAIL_NOT_EXIST",
            Self::RetMailRangeInvalid => "RET_MAIL_RANGE_INVALID",
            Self::RetMailMailIdInvalid => "RET_MAIL_MAIL_ID_INVALID",
            Self::RetMailNoMailTakeAttachment => "RET_MAIL_NO_MAIL_TAKE_ATTACHMENT",
            Self::RetMailNoMailToDel => "RET_MAIL_NO_MAIL_TO_DEL",
            Self::RetMailTypeInvalid => "RET_MAIL_TYPE_INVALID",
            Self::RetMailParaInvalid => "RET_MAIL_PARA_INVALID",
            Self::RetMailAttachementInvalid => "RET_MAIL_ATTACHEMENT_INVALID",
            Self::RetMailTicketInvalid => "RET_MAIL_TICKET_INVALID",
            Self::RetMailTicketRepeated => "RET_MAIL_TICKET_REPEATED",
            Self::RetStageSettleError => "RET_STAGE_SETTLE_ERROR",
            Self::RetStageConfigNotExist => "RET_STAGE_CONFIG_NOT_EXIST",
            Self::RetStageNotFound => "RET_STAGE_NOT_FOUND",
            Self::RetStageCocoonPropNotValid => "RET_STAGE_COCOON_PROP_NOT_VALID",
            Self::RetStageCocoonWaveNotValid => "RET_STAGE_COCOON_WAVE_NOT_VALID",
            Self::RetStagePropIdNotEqual => "RET_STAGE_PROP_ID_NOT_EQUAL",
            Self::RetStageCocoonWaveOver => "RET_STAGE_COCOON_WAVE_OVER",
            Self::RetStageWeekCocoonOverCnt => "RET_STAGE_WEEK_COCOON_OVER_CNT",
            Self::RetStageCocoonNotOpen => "RET_STAGE_COCOON_NOT_OPEN",
            Self::RetStageTrialNotOpen => "RET_STAGE_TRIAL_NOT_OPEN",
            Self::RetStageFarmNotOpen => "RET_STAGE_FARM_NOT_OPEN",
            Self::RetStageFarmTypeError => "RET_STAGE_FARM_TYPE_ERROR",
            Self::RetChapterLock => "RET_CHAPTER_LOCK",
            Self::RetChapterChallengeNumNotEnough => {
                "RET_CHAPTER_CHALLENGE_NUM_NOT_ENOUGH"
            }
            Self::RetChapterRewardIdNotExist => "RET_CHAPTER_REWARD_ID_NOT_EXIST",
            Self::RetChapterRewardAlreadyTaken => "RET_CHAPTER_REWARD_ALREADY_TAKEN",
            Self::RetBattleStageNotMatch => "RET_BATTLE_STAGE_NOT_MATCH",
            Self::RetInBattleNow => "RET_IN_BATTLE_NOW",
            Self::RetBattleCheat => "RET_BATTLE_CHEAT",
            Self::RetBattleFail => "RET_BATTLE_FAIL",
            Self::RetBattleNoLineup => "RET_BATTLE_NO_LINEUP",
            Self::RetBattleLineupEmpty => "RET_BATTLE_LINEUP_EMPTY",
            Self::RetBattleVersionNotMatch => "RET_BATTLE_VERSION_NOT_MATCH",
            Self::RetBattleQuitByServer => "RET_BATTLE_QUIT_BY_SERVER",
            Self::RetInBattleCheck => "RET_IN_BATTLE_CHECK",
            Self::RetBattleCheckNeedRetry => "RET_BATTLE_CHECK_NEED_RETRY",
            Self::RetBattleCostTimeCheckFail => "RET_BATTLE_COST_TIME_CHECK_FAIL",
            Self::RetLackExchangeStaminaTimes => "RET_LACK_EXCHANGE_STAMINA_TIMES",
            Self::RetLackStamina => "RET_LACK_STAMINA",
            Self::RetStaminaFull => "RET_STAMINA_FULL",
            Self::RetAuthkeySignTypeError => "RET_AUTHKEY_SIGN_TYPE_ERROR",
            Self::RetAuthkeySignVerError => "RET_AUTHKEY_SIGN_VER_ERROR",
            Self::RetNicknameFormatError => "RET_NICKNAME_FORMAT_ERROR",
            Self::RetSensitiveWords => "RET_SENSITIVE_WORDS",
            Self::RetLevelRewardHasTaken => "RET_LEVEL_REWARD_HAS_TAKEN",
            Self::RetLevelRewardLevelError => "RET_LEVEL_REWARD_LEVEL_ERROR",
            Self::RetLanguageInvalid => "RET_LANGUAGE_INVALID",
            Self::RetNicknameInCd => "RET_NICKNAME_IN_CD",
            Self::RetGameplayBirthdayInvalid => "RET_GAMEPLAY_BIRTHDAY_INVALID",
            Self::RetGameplayBirthdayAlreadySet => "RET_GAMEPLAY_BIRTHDAY_ALREADY_SET",
            Self::RetNicknameUtf8Error => "RET_NICKNAME_UTF8_ERROR",
            Self::RetNicknameDigitLimitError => "RET_NICKNAME_DIGIT_LIMIT_ERROR",
            Self::RetSensitiveWordsPlatformError => "RET_SENSITIVE_WORDS_PLATFORM_ERROR",
            Self::RetPlayerSettingTypeInvalid => "RET_PLAYER_SETTING_TYPE_INVALID",
            Self::RetMazeLackTicket => "RET_MAZE_LACK_TICKET",
            Self::RetMazeNotUnlock => "RET_MAZE_NOT_UNLOCK",
            Self::RetMazeNoAbility => "RET_MAZE_NO_ABILITY",
            Self::RetMazeNoPlane => "RET_MAZE_NO_PLANE",
            Self::RetMazeMapNotExist => "RET_MAZE_MAP_NOT_EXIST",
            Self::RetMazeMpNotEnough => "RET_MAZE_MP_NOT_ENOUGH",
            Self::RetSpringNotEnable => "RET_SPRING_NOT_ENABLE",
            Self::RetSpringTooFar => "RET_SPRING_TOO_FAR",
            Self::RetNotInMaze => "RET_NOT_IN_MAZE",
            Self::RetMazeTimeOfDayTypeError => "RET_MAZE_TIME_OF_DAY_TYPE_ERROR",
            Self::RetSceneTransferLockedByTask => "RET_SCENE_TRANSFER_LOCKED_BY_TASK",
            Self::RetPlotNotUnlock => "RET_PLOT_NOT_UNLOCK",
            Self::RetMissionNotExist => "RET_MISSION_NOT_EXIST",
            Self::RetMissionAlreadyDone => "RET_MISSION_ALREADY_DONE",
            Self::RetDailyTaskNotFinish => "RET_DAILY_TASK_NOT_FINISH",
            Self::RetDailyTaskRewardHasTaken => "RET_DAILY_TASK_REWARD_HAS_TAKEN",
            Self::RetMissionNotFinish => "RET_MISSION_NOT_FINISH",
            Self::RetMissionNotDoing => "RET_MISSION_NOT_DOING",
            Self::RetMissionFinishWayNotMatch => "RET_MISSION_FINISH_WAY_NOT_MATCH",
            Self::RetMissionSceneNotMatch => "RET_MISSION_SCENE_NOT_MATCH",
            Self::RetMissionCustomValueNotValid => "RET_MISSION_CUSTOM_VALUE_NOT_VALID",
            Self::RetMissionSubMissionNotMatch => "RET_MISSION_SUB_MISSION_NOT_MATCH",
            Self::RetAdventureMapNotExist => "RET_ADVENTURE_MAP_NOT_EXIST",
            Self::RetSceneEntityNotExist => "RET_SCENE_ENTITY_NOT_EXIST",
            Self::RetNotInScene => "RET_NOT_IN_SCENE",
            Self::RetSceneMonsterNotExist => "RET_SCENE_MONSTER_NOT_EXIST",
            Self::RetInteractConfigNotExist => "RET_INTERACT_CONFIG_NOT_EXIST",
            Self::RetUnsupportedPropState => "RET_UNSUPPORTED_PROP_STATE",
            Self::RetSceneEntryIdNotMatch => "RET_SCENE_ENTRY_ID_NOT_MATCH",
            Self::RetSceneEntityMoveCheckFailed => "RET_SCENE_ENTITY_MOVE_CHECK_FAILED",
            Self::RetAssistMonsterCountLimit => "RET_ASSIST_MONSTER_COUNT_LIMIT",
            Self::RetSceneUseSkillFail => "RET_SCENE_USE_SKILL_FAIL",
            Self::RetPropIsHidden => "RET_PROP_IS_HIDDEN",
            Self::RetLoadingSuccAlready => "RET_LOADING_SUCC_ALREADY",
            Self::RetSceneEntityTypeInvalid => "RET_SCENE_ENTITY_TYPE_INVALID",
            Self::RetInteractTypeInvalid => "RET_INTERACT_TYPE_INVALID",
            Self::RetInteractNotInRegion => "RET_INTERACT_NOT_IN_REGION",
            Self::RetInteractSubTypeInvalid => "RET_INTERACT_SUB_TYPE_INVALID",
            Self::RetNotLeaderEntity => "RET_NOT_LEADER_ENTITY",
            Self::RetMonsterIsNotFarmElement => "RET_MONSTER_IS_NOT_FARM_ELEMENT",
            Self::RetMonsterConfigNotExist => "RET_MONSTER_CONFIG_NOT_EXIST",
            Self::RetAvatarHpAlreadyFull => "RET_AVATAR_HP_ALREADY_FULL",
            Self::RetCurInteractEntityNotMatch => "RET_CUR_INTERACT_ENTITY_NOT_MATCH",
            Self::RetPlaneTypeNotAllow => "RET_PLANE_TYPE_NOT_ALLOW",
            Self::RetGroupNotExist => "RET_GROUP_NOT_EXIST",
            Self::RetGroupSaveDataInCd => "RET_GROUP_SAVE_DATA_IN_CD",
            Self::RetGroupSaveLenghReachMax => "RET_GROUP_SAVE_LENGH_REACH_MAX",
            Self::RetRecentElementNotExist => "RET_RECENT_ELEMENT_NOT_EXIST",
            Self::RetRecentElementStageNotMatch => "RET_RECENT_ELEMENT_STAGE_NOT_MATCH",
            Self::RetScenePositionVersionNotMatch => {
                "RET_SCENE_POSITION_VERSION_NOT_MATCH"
            }
            Self::RetGameplayCounterNotExist => "RET_GAMEPLAY_COUNTER_NOT_EXIST",
            Self::RetGameplayCounterNotEnough => "RET_GAMEPLAY_COUNTER_NOT_ENOUGH",
            Self::RetGroupStateNotMatch => "RET_GROUP_STATE_NOT_MATCH",
            Self::RetSceneEntityPosNotMatch => "RET_SCENE_ENTITY_POS_NOT_MATCH",
            Self::RetGroupStateCustomSaveDataOff => {
                "RET_GROUP_STATE_CUSTOM_SAVE_DATA_OFF"
            }
            Self::RetSceneNotMatch => "RET_SCENE_NOT_MATCH",
            Self::RetPropTypeInvalid => "RET_PROP_TYPE_INVALID",
            Self::RetBuyTimesLimit => "RET_BUY_TIMES_LIMIT",
            Self::RetBuyLimitType => "RET_BUY_LIMIT_TYPE",
            Self::RetShopNotOpen => "RET_SHOP_NOT_OPEN",
            Self::RetGoodsNotOpen => "RET_GOODS_NOT_OPEN",
            Self::RetCityLevelRewardTaken => "RET_CITY_LEVEL_REWARD_TAKEN",
            Self::RetCityLevelNotMeet => "RET_CITY_LEVEL_NOT_MEET",
            Self::RetSingleBuyLimit => "RET_SINGLE_BUY_LIMIT",
            Self::RetTutorialNotUnlock => "RET_TUTORIAL_NOT_UNLOCK",
            Self::RetTutorialUnlockAlready => "RET_TUTORIAL_UNLOCK_ALREADY",
            Self::RetTutorialFinishAlready => "RET_TUTORIAL_FINISH_ALREADY",
            Self::RetTutorialPreNotUnlock => "RET_TUTORIAL_PRE_NOT_UNLOCK",
            Self::RetTutorialPlayerLevelNotMatch => "RET_TUTORIAL_PLAYER_LEVEL_NOT_MATCH",
            Self::RetTutorialTutorialNotFound => "RET_TUTORIAL_TUTORIAL_NOT_FOUND",
            Self::RetChallengeNotExist => "RET_CHALLENGE_NOT_EXIST",
            Self::RetChallengeNotUnlock => "RET_CHALLENGE_NOT_UNLOCK",
            Self::RetChallengeAlready => "RET_CHALLENGE_ALREADY",
            Self::RetChallengeLineupEditForbidden => {
                "RET_CHALLENGE_LINEUP_EDIT_FORBIDDEN"
            }
            Self::RetChallengeLineupEmpty => "RET_CHALLENGE_LINEUP_EMPTY",
            Self::RetChallengeNotDoing => "RET_CHALLENGE_NOT_DOING",
            Self::RetChallengeNotFinish => "RET_CHALLENGE_NOT_FINISH",
            Self::RetChallengeTargetNotFinish => "RET_CHALLENGE_TARGET_NOT_FINISH",
            Self::RetChallengeTargetRewardTaken => "RET_CHALLENGE_TARGET_REWARD_TAKEN",
            Self::RetChallengeTimeNotValid => "RET_CHALLENGE_TIME_NOT_VALID",
            Self::RetChallengeStarsCountNotMeet => "RET_CHALLENGE_STARS_COUNT_NOT_MEET",
            Self::RetChallengeStarsRewardTaken => "RET_CHALLENGE_STARS_REWARD_TAKEN",
            Self::RetChallengeStarsNotExist => "RET_CHALLENGE_STARS_NOT_EXIST",
            Self::RetChallengeCurSceneNotEntryFloor => {
                "RET_CHALLENGE_CUR_SCENE_NOT_ENTRY_FLOOR"
            }
            Self::RetChallengeNoTeamArchive => "RET_CHALLENGE_NO_TEAM_ARCHIVE",
            Self::RetChallengeLineupAvatarTypeInvalid => {
                "RET_CHALLENGE_LINEUP_AVATAR_TYPE_INVALID"
            }
            Self::RetChallengeLineupRecommendInCd => {
                "RET_CHALLENGE_LINEUP_RECOMMEND_IN_CD"
            }
            Self::RetBasicTypeAlready => "RET_BASIC_TYPE_ALREADY",
            Self::RetNoBasicType => "RET_NO_BASIC_TYPE",
            Self::RetNotChooseBasicType => "RET_NOT_CHOOSE_BASIC_TYPE",
            Self::RetNotFuncClose => "RET_NOT_FUNC_CLOSE",
            Self::RetNotChooseGender => "RET_NOT_CHOOSE_GENDER",
            Self::RetNotReqUnlockBasicType => "RET_NOT_REQ_UNLOCK_BASIC_TYPE",
            Self::RetAvatarPathLocked => "RET_AVATAR_PATH_LOCKED",
            Self::RetRogueStatusNotMatch => "RET_ROGUE_STATUS_NOT_MATCH",
            Self::RetRogueSelectBuffNotExist => "RET_ROGUE_SELECT_BUFF_NOT_EXIST",
            Self::RetRogueCoinNotEnough => "RET_ROGUE_COIN_NOT_ENOUGH",
            Self::RetRogueStaminaNotEnough => "RET_ROGUE_STAMINA_NOT_ENOUGH",
            Self::RetRogueAppraisalCountNotEnough => {
                "RET_ROGUE_APPRAISAL_COUNT_NOT_ENOUGH"
            }
            Self::RetRoguePropAlreadyUsed => "RET_ROGUE_PROP_ALREADY_USED",
            Self::RetRogueRecordAlreadySaved => "RET_ROGUE_RECORD_ALREADY_SAVED",
            Self::RetRogueRollBuffMaxCount => "RET_ROGUE_ROLL_BUFF_MAX_COUNT",
            Self::RetRoguePickAvatarInvalid => "RET_ROGUE_PICK_AVATAR_INVALID",
            Self::RetRogueQuestExpire => "RET_ROGUE_QUEST_EXPIRE",
            Self::RetRogueQuestRewardAlready => "RET_ROGUE_QUEST_REWARD_ALREADY",
            Self::RetRogueReviveCountNotEnough => "RET_ROGUE_REVIVE_COUNT_NOT_ENOUGH",
            Self::RetRogueAreaInvalid => "RET_ROGUE_AREA_INVALID",
            Self::RetRogueScoreRewardPoolInvalid => "RET_ROGUE_SCORE_REWARD_POOL_INVALID",
            Self::RetRogueScoreRewardRowInvalid => "RET_ROGUE_SCORE_REWARD_ROW_INVALID",
            Self::RetRogueAeonLevelNotMeet => "RET_ROGUE_AEON_LEVEL_NOT_MEET",
            Self::RetRogueAeonLevelRewardAlreadyTaken => {
                "RET_ROGUE_AEON_LEVEL_REWARD_ALREADY_TAKEN"
            }
            Self::RetRogueAeonConfigNotExist => "RET_ROGUE_AEON_CONFIG_NOT_EXIST",
            Self::RetRogueTrialAvatarInvalid => "RET_ROGUE_TRIAL_AVATAR_INVALID",
            Self::RetRogueHandbookRewardAlreadyTaken => {
                "RET_ROGUE_HANDBOOK_REWARD_ALREADY_TAKEN"
            }
            Self::RetRogueRoomTypeNotMatch => "RET_ROGUE_ROOM_TYPE_NOT_MATCH",
            Self::RetRogueShopGoodNotFound => "RET_ROGUE_SHOP_GOOD_NOT_FOUND",
            Self::RetRogueShopGoodAlreadyBought => "RET_ROGUE_SHOP_GOOD_ALREADY_BOUGHT",
            Self::RetRogueShopGoodAlreadyOwn => "RET_ROGUE_SHOP_GOOD_ALREADY_OWN",
            Self::RetRogueShopMiracleNotExist => "RET_ROGUE_SHOP_MIRACLE_NOT_EXIST",
            Self::RetRogueShopNotExist => "RET_ROGUE_SHOP_NOT_EXIST",
            Self::RetRogueShopCannotRefresh => "RET_ROGUE_SHOP_CANNOT_REFRESH",
            Self::RetRogueSelectBuffCertainMismatch => {
                "RET_ROGUE_SELECT_BUFF_CERTAIN_MISMATCH"
            }
            Self::RetRogueActionQueueNotEmptyBattle => {
                "RET_ROGUE_ACTION_QUEUE_NOT_EMPTY_BATTLE"
            }
            Self::RetRogueActionQueueNotEmptyOthers => {
                "RET_ROGUE_ACTION_QUEUE_NOT_EMPTY_OTHERS"
            }
            Self::RetMissionEventConfigNotExist => "RET_MISSION_EVENT_CONFIG_NOT_EXIST",
            Self::RetMissionEventNotClient => "RET_MISSION_EVENT_NOT_CLIENT",
            Self::RetMissionEventFinished => "RET_MISSION_EVENT_FINISHED",
            Self::RetMissionEventDoing => "RET_MISSION_EVENT_DOING",
            Self::RetHasChallengeMissionEvent => "RET_HAS_CHALLENGE_MISSION_EVENT",
            Self::RetNotChallengeMissionEvent => "RET_NOT_CHALLENGE_MISSION_EVENT",
            Self::RetGachaIdNotExist => "RET_GACHA_ID_NOT_EXIST",
            Self::RetGachaNumInvalid => "RET_GACHA_NUM_INVALID",
            Self::RetGachaFirstGachaMustOne => "RET_GACHA_FIRST_GACHA_MUST_ONE",
            Self::RetGachaReqDuplicated => "RET_GACHA_REQ_DUPLICATED",
            Self::RetGachaNotInSchedule => "RET_GACHA_NOT_IN_SCHEDULE",
            Self::RetGachaNewbieClose => "RET_GACHA_NEWBIE_CLOSE",
            Self::RetGachaTodayLimited => "RET_GACHA_TODAY_LIMITED",
            Self::RetGachaNotSupport => "RET_GACHA_NOT_SUPPORT",
            Self::RetGachaCeilingNotEnough => "RET_GACHA_CEILING_NOT_ENOUGH",
            Self::RetGachaCeilingClose => "RET_GACHA_CEILING_CLOSE",
            Self::RetNotInRaid => "RET_NOT_IN_RAID",
            Self::RetRaidDoing => "RET_RAID_DOING",
            Self::RetNotProp => "RET_NOT_PROP",
            Self::RetRaidIdNotMatch => "RET_RAID_ID_NOT_MATCH",
            Self::RetRaidRestartNotMatch => "RET_RAID_RESTART_NOT_MATCH",
            Self::RetRaidLimit => "RET_RAID_LIMIT",
            Self::RetRaidAvatarListEmpty => "RET_RAID_AVATAR_LIST_EMPTY",
            Self::RetRaidAvatarNotExist => "RET_RAID_AVATAR_NOT_EXIST",
            Self::RetChallengeRaidRewardAlready => "RET_CHALLENGE_RAID_REWARD_ALREADY",
            Self::RetChallengeRaidScoreNotReach => "RET_CHALLENGE_RAID_SCORE_NOT_REACH",
            Self::RetChallengeRaidNotOpen => "RET_CHALLENGE_RAID_NOT_OPEN",
            Self::RetRaidFinished => "RET_RAID_FINISHED",
            Self::RetRaidWorldLevelNotLock => "RET_RAID_WORLD_LEVEL_NOT_LOCK",
            Self::RetRaidCannotUseAssist => "RET_RAID_CANNOT_USE_ASSIST",
            Self::RetRaidAvatarNotMatch => "RET_RAID_AVATAR_NOT_MATCH",
            Self::RetRaidCanNotSave => "RET_RAID_CAN_NOT_SAVE",
            Self::RetRaidNoSave => "RET_RAID_NO_SAVE",
            Self::RetActivityRaidNotOpen => "RET_ACTIVITY_RAID_NOT_OPEN",
            Self::RetRaidAvatarCaptainNotExist => "RET_RAID_AVATAR_CAPTAIN_NOT_EXIST",
            Self::RetRaidStoryLineNotMatch => "RET_RAID_STORY_LINE_NOT_MATCH",
            Self::RetTalkEventAlreadyTaken => "RET_TALK_EVENT_ALREADY_TAKEN",
            Self::RetNpcAlreadyMeet => "RET_NPC_ALREADY_MEET",
            Self::RetNpcNotInConfig => "RET_NPC_NOT_IN_CONFIG",
            Self::RetDialogueGroupDismatch => "RET_DIALOGUE_GROUP_DISMATCH",
            Self::RetDialogueEventInvalid => "RET_DIALOGUE_EVENT_INVALID",
            Self::RetTalkEventTakeProtoNotMatch => "RET_TALK_EVENT_TAKE_PROTO_NOT_MATCH",
            Self::RetTalkEventNotValid => "RET_TALK_EVENT_NOT_VALID",
            Self::RetExpeditionConfigNotExist => "RET_EXPEDITION_CONFIG_NOT_EXIST",
            Self::RetExpeditionRewardConfigNotExist => {
                "RET_EXPEDITION_REWARD_CONFIG_NOT_EXIST"
            }
            Self::RetExpeditionNotUnlocked => "RET_EXPEDITION_NOT_UNLOCKED",
            Self::RetExpeditionAlreadyAccepted => "RET_EXPEDITION_ALREADY_ACCEPTED",
            Self::RetExpeditionRepeatedAvatar => "RET_EXPEDITION_REPEATED_AVATAR",
            Self::RetAvatarAlreadyDispatched => "RET_AVATAR_ALREADY_DISPATCHED",
            Self::RetExpeditionNotAccepted => "RET_EXPEDITION_NOT_ACCEPTED",
            Self::RetExpeditionNotFinish => "RET_EXPEDITION_NOT_FINISH",
            Self::RetExpeditionAlreadyFinish => "RET_EXPEDITION_ALREADY_FINISH",
            Self::RetExpeditionTeamCountLimit => "RET_EXPEDITION_TEAM_COUNT_LIMIT",
            Self::RetExpeditionAvatarNumNotMatch => "RET_EXPEDITION_AVATAR_NUM_NOT_MATCH",
            Self::RetExpeditionNotOpen => "RET_EXPEDITION_NOT_OPEN",
            Self::RetExpeditionFriendAvatarNotValid => {
                "RET_EXPEDITION_FRIEND_AVATAR_NOT_VALID"
            }
            Self::RetExpeditionNotPublished => "RET_EXPEDITION_NOT_PUBLISHED",
            Self::RetLoginActivityHasTaken => "RET_LOGIN_ACTIVITY_HAS_TAKEN",
            Self::RetLoginActivityDaysLack => "RET_LOGIN_ACTIVITY_DAYS_LACK",
            Self::RetTrialActivityRewardAlreadyTake => {
                "RET_TRIAL_ACTIVITY_REWARD_ALREADY_TAKE"
            }
            Self::RetTrialActivityStageNotFinish => "RET_TRIAL_ACTIVITY_STAGE_NOT_FINISH",
            Self::RetMaterialSubmitActivityHasTaken => {
                "RET_MATERIAL_SUBMIT_ACTIVITY_HAS_TAKEN"
            }
            Self::RetMaterialSubmitActivityMaterialNotSubmitted => {
                "RET_MATERIAL_SUBMIT_ACTIVITY_MATERIAL_NOT_SUBMITTED"
            }
            Self::RetMaterialSubmitActivityMaterialAlreadySubmitted => {
                "RET_MATERIAL_SUBMIT_ACTIVITY_MATERIAL_ALREADY_SUBMITTED"
            }
            Self::RetFantasticStoryActivityStoryError => {
                "RET_FANTASTIC_STORY_ACTIVITY_STORY_ERROR"
            }
            Self::RetFantasticStoryActivityStoryNotOpen => {
                "RET_FANTASTIC_STORY_ACTIVITY_STORY_NOT_OPEN"
            }
            Self::RetFantasticStoryActivityBattleError => {
                "RET_FANTASTIC_STORY_ACTIVITY_BATTLE_ERROR"
            }
            Self::RetFantasticStoryActivityBattleNotOpen => {
                "RET_FANTASTIC_STORY_ACTIVITY_BATTLE_NOT_OPEN"
            }
            Self::RetFantasticStoryActivityBattleAvatarError => {
                "RET_FANTASTIC_STORY_ACTIVITY_BATTLE_AVATAR_ERROR"
            }
            Self::RetFantasticStoryActivityBattleBuffError => {
                "RET_FANTASTIC_STORY_ACTIVITY_BATTLE_BUFF_ERROR"
            }
            Self::RetFantasticStoryActivityPreBattleScoreNotEnough => {
                "RET_FANTASTIC_STORY_ACTIVITY_PRE_BATTLE_SCORE_NOT_ENOUGH"
            }
            Self::RetTrialActivityAlreadyInTrialActivity => {
                "RET_TRIAL_ACTIVITY_ALREADY_IN_TRIAL_ACTIVITY"
            }
            Self::RetCommonActivityNotOpen => "RET_COMMON_ACTIVITY_NOT_OPEN",
            Self::RetBenefitNotReady => "RET_BENEFIT_NOT_READY",
            Self::RetCommonActivityBusy => "RET_COMMON_ACTIVITY_BUSY",
            Self::RetMessageConfigNotExist => "RET_MESSAGE_CONFIG_NOT_EXIST",
            Self::RetMessageSectionNotTake => "RET_MESSAGE_SECTION_NOT_TAKE",
            Self::RetMessageGroupNotTake => "RET_MESSAGE_GROUP_NOT_TAKE",
            Self::RetMessageSectionIdNotMatch => "RET_MESSAGE_SECTION_ID_NOT_MATCH",
            Self::RetMessageSectionCanNotFinish => "RET_MESSAGE_SECTION_CAN_NOT_FINISH",
            Self::RetMessageItemCanNotFinish => "RET_MESSAGE_ITEM_CAN_NOT_FINISH",
            Self::RetMessageItemRaidCanNotFinish => {
                "RET_MESSAGE_ITEM_RAID_CAN_NOT_FINISH"
            }
            Self::RetFriendAlreadyIsFriend => "RET_FRIEND_ALREADY_IS_FRIEND",
            Self::RetFriendIsNotFriend => "RET_FRIEND_IS_NOT_FRIEND",
            Self::RetFriendApplyExpire => "RET_FRIEND_APPLY_EXPIRE",
            Self::RetFriendInBlacklist => "RET_FRIEND_IN_BLACKLIST",
            Self::RetFriendNotInBlacklist => "RET_FRIEND_NOT_IN_BLACKLIST",
            Self::RetFriendNumberLimit => "RET_FRIEND_NUMBER_LIMIT",
            Self::RetFriendBlacklistNumberLimit => "RET_FRIEND_BLACKLIST_NUMBER_LIMIT",
            Self::RetFriendDailyApplyLimit => "RET_FRIEND_DAILY_APPLY_LIMIT",
            Self::RetFriendInHandleLimit => "RET_FRIEND_IN_HANDLE_LIMIT",
            Self::RetFriendApplyInCd => "RET_FRIEND_APPLY_IN_CD",
            Self::RetFriendRemarkNameFormatError => "RET_FRIEND_REMARK_NAME_FORMAT_ERROR",
            Self::RetFriendPlayerNotFound => "RET_FRIEND_PLAYER_NOT_FOUND",
            Self::RetFriendInTargetBlacklist => "RET_FRIEND_IN_TARGET_BLACKLIST",
            Self::RetFriendTargetNumberLimit => "RET_FRIEND_TARGET_NUMBER_LIMIT",
            Self::RetAssistQueryTooFast => "RET_ASSIST_QUERY_TOO_FAST",
            Self::RetAssistNotExist => "RET_ASSIST_NOT_EXIST",
            Self::RetAssistUsedAlready => "RET_ASSIST_USED_ALREADY",
            Self::RetFriendReportReasonFormatError => {
                "RET_FRIEND_REPORT_REASON_FORMAT_ERROR"
            }
            Self::RetFriendReportSensitiveWords => "RET_FRIEND_REPORT_SENSITIVE_WORDS",
            Self::RetAssistUsedTimesOver => "RET_ASSIST_USED_TIMES_OVER",
            Self::RetAssistQuitAlready => "RET_ASSIST_QUIT_ALREADY",
            Self::RetAssistAvatarInLineup => "RET_ASSIST_AVATAR_IN_LINEUP",
            Self::RetAssistNoReward => "RET_ASSIST_NO_REWARD",
            Self::RetFriendSearchNumLimit => "RET_FRIEND_SEARCH_NUM_LIMIT",
            Self::RetFriendSearchInCd => "RET_FRIEND_SEARCH_IN_CD",
            Self::RetFriendRemarkNameUtf8Error => "RET_FRIEND_REMARK_NAME_UTF8_ERROR",
            Self::RetFriendReportReasonUtf8Error => "RET_FRIEND_REPORT_REASON_UTF8_ERROR",
            Self::RetAssistSetAlready => "RET_ASSIST_SET_ALREADY",
            Self::RetFriendTargetForbidOtherApply => {
                "RET_FRIEND_TARGET_FORBID_OTHER_APPLY"
            }
            Self::RetFriendMarkedCntMax => "RET_FRIEND_MARKED_CNT_MAX",
            Self::RetFriendMarkedAlready => "RET_FRIEND_MARKED_ALREADY",
            Self::RetFriendNotMarked => "RET_FRIEND_NOT_MARKED",
            Self::RetFriendChallengeLineupRecommendInCd => {
                "RET_FRIEND_CHALLENGE_LINEUP_RECOMMEND_IN_CD"
            }
            Self::RetViewPlayerCardInCd => "RET_VIEW_PLAYER_CARD_IN_CD",
            Self::RetViewPlayerBattleRecordInCd => "RET_VIEW_PLAYER_BATTLE_RECORD_IN_CD",
            Self::RetPlayerBoardHeadIconNotExist => {
                "RET_PLAYER_BOARD_HEAD_ICON_NOT_EXIST"
            }
            Self::RetPlayerBoardHeadIconLocked => "RET_PLAYER_BOARD_HEAD_ICON_LOCKED",
            Self::RetPlayerBoardHeadIconAlreadyUnlocked => {
                "RET_PLAYER_BOARD_HEAD_ICON_ALREADY_UNLOCKED"
            }
            Self::RetPlayerBoardDisplayAvatarNotExist => {
                "RET_PLAYER_BOARD_DISPLAY_AVATAR_NOT_EXIST"
            }
            Self::RetPlayerBoardDisplayAvatarExceedLimit => {
                "RET_PLAYER_BOARD_DISPLAY_AVATAR_EXCEED_LIMIT"
            }
            Self::RetPlayerBoardDisplayRepeatedAvatar => {
                "RET_PLAYER_BOARD_DISPLAY_REPEATED_AVATAR"
            }
            Self::RetPlayerBoardDisplayAvatarSamePos => {
                "RET_PLAYER_BOARD_DISPLAY_AVATAR_SAME_POS"
            }
            Self::RetPlayerBoardDisplayAvatarLocked => {
                "RET_PLAYER_BOARD_DISPLAY_AVATAR_LOCKED"
            }
            Self::RetSignatureLengthExceedLimit => "RET_SIGNATURE_LENGTH_EXCEED_LIMIT",
            Self::RetSignatureSensitiveWords => "RET_SIGNATURE_SENSITIVE_WORDS",
            Self::RetPlayerBoardAssistAvatarNotExist => {
                "RET_PLAYER_BOARD_ASSIST_AVATAR_NOT_EXIST"
            }
            Self::RetPlayerBoardAssistAvatarLocked => {
                "RET_PLAYER_BOARD_ASSIST_AVATAR_LOCKED"
            }
            Self::RetSignatureUtf8Error => "RET_SIGNATURE_UTF8_ERROR",
            Self::RetPlayerBoardAssistAvatarCntError => {
                "RET_PLAYER_BOARD_ASSIST_AVATAR_CNT_ERROR"
            }
            Self::RetBattlePassTierNotValid => "RET_BATTLE_PASS_TIER_NOT_VALID",
            Self::RetBattlePassLevelNotMeet => "RET_BATTLE_PASS_LEVEL_NOT_MEET",
            Self::RetBattlePassRewardTakeAlready => "RET_BATTLE_PASS_REWARD_TAKE_ALREADY",
            Self::RetBattlePassNotPremium => "RET_BATTLE_PASS_NOT_PREMIUM",
            Self::RetBattlePassNotDoing => "RET_BATTLE_PASS_NOT_DOING",
            Self::RetBattlePassLevelInvalid => "RET_BATTLE_PASS_LEVEL_INVALID",
            Self::RetBattlePassNotUnlock => "RET_BATTLE_PASS_NOT_UNLOCK",
            Self::RetBattlePassNoReward => "RET_BATTLE_PASS_NO_REWARD",
            Self::RetBattlePassQuestNotValid => "RET_BATTLE_PASS_QUEST_NOT_VALID",
            Self::RetBattlePassNotChooseOptional => "RET_BATTLE_PASS_NOT_CHOOSE_OPTIONAL",
            Self::RetBattlePassNotTakeReward => "RET_BATTLE_PASS_NOT_TAKE_REWARD",
            Self::RetBattlePassOptionalNotValid => "RET_BATTLE_PASS_OPTIONAL_NOT_VALID",
            Self::RetBattlePassBuyAlready => "RET_BATTLE_PASS_BUY_ALREADY",
            Self::RetBattlePassNearEnd => "RET_BATTLE_PASS_NEAR_END",
            Self::RetMusicLocked => "RET_MUSIC_LOCKED",
            Self::RetMusicNotExist => "RET_MUSIC_NOT_EXIST",
            Self::RetMusicUnlockFailed => "RET_MUSIC_UNLOCK_FAILED",
            Self::RetPunkLordLackSummonTimes => "RET_PUNK_LORD_LACK_SUMMON_TIMES",
            Self::RetPunkLordAttackingMonsterLimit => {
                "RET_PUNK_LORD_ATTACKING_MONSTER_LIMIT"
            }
            Self::RetPunkLordMonsterNotExist => "RET_PUNK_LORD_MONSTER_NOT_EXIST",
            Self::RetPunkLordMonsterAlreadyShared => {
                "RET_PUNK_LORD_MONSTER_ALREADY_SHARED"
            }
            Self::RetPunkLordMonsterExpired => "RET_PUNK_LORD_MONSTER_EXPIRED",
            Self::RetPunkLordSelfMonsterAttackLimit => {
                "RET_PUNK_LORD_SELF_MONSTER_ATTACK_LIMIT"
            }
            Self::RetPunkLordLackSupportTimes => "RET_PUNK_LORD_LACK_SUPPORT_TIMES",
            Self::RetPunkLordMonsterAlreadyKilled => {
                "RET_PUNK_LORD_MONSTER_ALREADY_KILLED"
            }
            Self::RetPunkLordMonsterAttackerLimit => {
                "RET_PUNK_LORD_MONSTER_ATTACKER_LIMIT"
            }
            Self::RetPunkLordWorldLevleNotValid => "RET_PUNK_LORD_WORLD_LEVLE_NOT_VALID",
            Self::RetPunkLordRewardLevleNotExist => {
                "RET_PUNK_LORD_REWARD_LEVLE_NOT_EXIST"
            }
            Self::RetPunkLordPointNotMeet => "RET_PUNK_LORD_POINT_NOT_MEET",
            Self::RetPunkLordInAttacking => "RET_PUNK_LORD_IN_ATTACKING",
            Self::RetPunkLordOperationInCd => "RET_PUNK_LORD_OPERATION_IN_CD",
            Self::RetPunkLordRewardAlreadyTaken => "RET_PUNK_LORD_REWARD_ALREADY_TAKEN",
            Self::RetPunkLordOverBonusRewardLimit => {
                "RET_PUNK_LORD_OVER_BONUS_REWARD_LIMIT"
            }
            Self::RetPunkLordNotInSchedule => "RET_PUNK_LORD_NOT_IN_SCHEDULE",
            Self::RetPunkLordMonsterNotAttacked => "RET_PUNK_LORD_MONSTER_NOT_ATTACKED",
            Self::RetPunkLordMonsterNotKilled => "RET_PUNK_LORD_MONSTER_NOT_KILLED",
            Self::RetPunkLordMonsterKilledScoreAlreadyTake => {
                "RET_PUNK_LORD_MONSTER_KILLED_SCORE_ALREADY_TAKE"
            }
            Self::RetPunkLordRewardLevleAlreadyTake => {
                "RET_PUNK_LORD_REWARD_LEVLE_ALREADY_TAKE"
            }
            Self::RetDailyActiveLevelInvalid => "RET_DAILY_ACTIVE_LEVEL_INVALID",
            Self::RetDailyActiveLevelRewardAlreadyTaken => {
                "RET_DAILY_ACTIVE_LEVEL_REWARD_ALREADY_TAKEN"
            }
            Self::RetDailyActiveLevelApNotEnough => {
                "RET_DAILY_ACTIVE_LEVEL_AP_NOT_ENOUGH"
            }
            Self::RetDailyMeetPam => "RET_DAILY_MEET_PAM",
            Self::RetReplayIdNotMatch => "RET_REPLAY_ID_NOT_MATCH",
            Self::RetReplayReqNotValid => "RET_REPLAY_REQ_NOT_VALID",
            Self::RetFightActivityDifficultyLevelNotPassed => {
                "RET_FIGHT_ACTIVITY_DIFFICULTY_LEVEL_NOT_PASSED"
            }
            Self::RetFightActivityDifficultyLevelRewardAlreadyTake => {
                "RET_FIGHT_ACTIVITY_DIFFICULTY_LEVEL_REWARD_ALREADY_TAKE"
            }
            Self::RetFightActivityStageNotOpen => "RET_FIGHT_ACTIVITY_STAGE_NOT_OPEN",
            Self::RetFightActivityLevelNotUnlock => "RET_FIGHT_ACTIVITY_LEVEL_NOT_UNLOCK",
            Self::RetTrainVisitorVisitorNotExist => "RET_TRAIN_VISITOR_VISITOR_NOT_EXIST",
            Self::RetTrainVisitorBehaviorNotExist => {
                "RET_TRAIN_VISITOR_BEHAVIOR_NOT_EXIST"
            }
            Self::RetTrainVisitorBehaviorFinished => {
                "RET_TRAIN_VISITOR_BEHAVIOR_FINISHED"
            }
            Self::RetTrainVisitorAllBehaviorRewardTaken => {
                "RET_TRAIN_VISITOR_ALL_BEHAVIOR_REWARD_TAKEN"
            }
            Self::RetTrainVisitorGetOnMissionNotFinish => {
                "RET_TRAIN_VISITOR_GET_ON_MISSION_NOT_FINISH"
            }
            Self::RetTrainVisitorNotGetOffOrBeTrainMember => {
                "RET_TRAIN_VISITOR_NOT_GET_OFF_OR_BE_TRAIN_MEMBER"
            }
            Self::RetTextJoinUnknowIsOverride => "RET_TEXT_JOIN_UNKNOW_IS_OVERRIDE",
            Self::RetTextJoinIdNotExist => "RET_TEXT_JOIN_ID_NOT_EXIST",
            Self::RetTextJoinCanNotOverride => "RET_TEXT_JOIN_CAN_NOT_OVERRIDE",
            Self::RetTextJoinItemIdError => "RET_TEXT_JOIN_ITEM_ID_ERROR",
            Self::RetTextJoinSensitiveCheckError => "RET_TEXT_JOIN_SENSITIVE_CHECK_ERROR",
            Self::RetTextJoinMustOverride => "RET_TEXT_JOIN_MUST_OVERRIDE",
            Self::RetTextJoinTextEmpty => "RET_TEXT_JOIN_TEXT_EMPTY",
            Self::RetTextJoinTextFormatError => "RET_TEXT_JOIN_TEXT_FORMAT_ERROR",
            Self::RetTextJoinTextUtf8Error => "RET_TEXT_JOIN_TEXT_UTF8_ERROR",
            Self::RetTextJoinBatchReqIdRepeat => "RET_TEXT_JOIN_BATCH_REQ_ID_REPEAT",
            Self::RetTextJoinTypeNotSupportBatchReq => {
                "RET_TEXT_JOIN_TYPE_NOT_SUPPORT_BATCH_REQ"
            }
            Self::RetTextJoinAvatarIdNotExist => "RET_TEXT_JOIN_AVATAR_ID_NOT_EXIST",
            Self::RetTextJoinUnknowType => "RET_TEXT_JOIN_UNKNOW_TYPE",
            Self::RetPamMissionMissionIdError => "RET_PAM_MISSION_MISSION_ID_ERROR",
            Self::RetPamMissionMissionExpire => "RET_PAM_MISSION_MISSION_EXPIRE",
            Self::RetChatTypeNotExist => "RET_CHAT_TYPE_NOT_EXIST",
            Self::RetMsgTypeNotExist => "RET_MSG_TYPE_NOT_EXIST",
            Self::RetChatNoTargetUid => "RET_CHAT_NO_TARGET_UID",
            Self::RetChatMsgEmpty => "RET_CHAT_MSG_EMPTY",
            Self::RetChatMsgExceedLimit => "RET_CHAT_MSG_EXCEED_LIMIT",
            Self::RetChatMsgSensitiveCheckError => "RET_CHAT_MSG_SENSITIVE_CHECK_ERROR",
            Self::RetChatMsgUtf8Error => "RET_CHAT_MSG_UTF8_ERROR",
            Self::RetChatForbidSwitchOpen => "RET_CHAT_FORBID_SWITCH_OPEN",
            Self::RetChatForbid => "RET_CHAT_FORBID",
            Self::RetChatMsgIncludeSpecialStr => "RET_CHAT_MSG_INCLUDE_SPECIAL_STR",
            Self::RetChatMsgEmojiNotExist => "RET_CHAT_MSG_EMOJI_NOT_EXIST",
            Self::RetChatMsgEmojiGenderNotMatch => "RET_CHAT_MSG_EMOJI_GENDER_NOT_MATCH",
            Self::RetChatMsgEmojiNotMarked => "RET_CHAT_MSG_EMOJI_NOT_MARKED",
            Self::RetChatMsgEmojiAlreadyMarked => "RET_CHAT_MSG_EMOJI_ALREADY_MARKED",
            Self::RetChatMsgEmojiMarkedMaxLimit => "RET_CHAT_MSG_EMOJI_MARKED_MAX_LIMIT",
            Self::RetBoxingClubChallengeNotOpen => "RET_BOXING_CLUB_CHALLENGE_NOT_OPEN",
            Self::RetMuseumNotOpen => "RET_MUSEUM_NOT_OPEN",
            Self::RetMuseumTurnCntNotMatch => "RET_MUSEUM_TURN_CNT_NOT_MATCH",
            Self::RetMuseumPhaseNotReach => "RET_MUSEUM_PHASE_NOT_REACH",
            Self::RetMuseumUnknowStuff => "RET_MUSEUM_UNKNOW_STUFF",
            Self::RetMuseumUnknowArea => "RET_MUSEUM_UNKNOW_AREA",
            Self::RetMuseumUnknowPos => "RET_MUSEUM_UNKNOW_POS",
            Self::RetMuseumStuffAlreadyInArea => "RET_MUSEUM_STUFF_ALREADY_IN_AREA",
            Self::RetMuseumStuffNotInArea => "RET_MUSEUM_STUFF_NOT_IN_AREA",
            Self::RetMuseumGetNpcRepeat => "RET_MUSEUM_GET_NPC_REPEAT",
            Self::RetMuseumGetNpcUnlock => "RET_MUSEUM_GET_NPC_UNLOCK",
            Self::RetMuseumGetNpcNotEnough => "RET_MUSEUM_GET_NPC_NOT_ENOUGH",
            Self::RetMuseumChangeStuffAreaError => "RET_MUSEUM_CHANGE_STUFF_AREA_ERROR",
            Self::RetMuseumNotInit => "RET_MUSEUM_NOT_INIT",
            Self::RetMuseumEventError => "RET_MUSEUM_EVENT_ERROR",
            Self::RetMuseumUnknowChooseEventId => "RET_MUSEUM_UNKNOW_CHOOSE_EVENT_ID",
            Self::RetMuseumEventOrderNotMatch => "RET_MUSEUM_EVENT_ORDER_NOT_MATCH",
            Self::RetMuseumEventPhaseNotUnlock => "RET_MUSEUM_EVENT_PHASE_NOT_UNLOCK",
            Self::RetMuseumEventMissionNotFound => "RET_MUSEUM_EVENT_MISSION_NOT_FOUND",
            Self::RetMuseumAreaLevelUpAlready => "RET_MUSEUM_AREA_LEVEL_UP_ALREADY",
            Self::RetMuseumStuffAlreadyUsed => "RET_MUSEUM_STUFF_ALREADY_USED",
            Self::RetMuseumEventRoundNotUnlock => "RET_MUSEUM_EVENT_ROUND_NOT_UNLOCK",
            Self::RetMuseumStuffInArea => "RET_MUSEUM_STUFF_IN_AREA",
            Self::RetMuseumStuffDispatch => "RET_MUSEUM_STUFF_DISPATCH",
            Self::RetMuseumIsEnd => "RET_MUSEUM_IS_END",
            Self::RetMuseumStuffLeaving => "RET_MUSEUM_STUFF_LEAVING",
            Self::RetMuseumEventMissionNotFinish => "RET_MUSEUM_EVENT_MISSION_NOT_FINISH",
            Self::RetMuseumCollectRewardNotExist => "RET_MUSEUM_COLLECT_REWARD_NOT_EXIST",
            Self::RetMuseumCollectRewardAlreadyTaken => {
                "RET_MUSEUM_COLLECT_REWARD_ALREADY_TAKEN"
            }
            Self::RetMuseumAcceptMissionMaxLimit => "RET_MUSEUM_ACCEPT_MISSION_MAX_LIMIT",
            Self::RetRogueChallengeNotOpen => "RET_ROGUE_CHALLENGE_NOT_OPEN",
            Self::RetRogueChallengeAssisRefreshLimit => {
                "RET_ROGUE_CHALLENGE_ASSIS_REFRESH_LIMIT"
            }
            Self::RetAlleyNotInit => "RET_ALLEY_NOT_INIT",
            Self::RetAlleyNotOpen => "RET_ALLEY_NOT_OPEN",
            Self::RetAlleyMapNotExist => "RET_ALLEY_MAP_NOT_EXIST",
            Self::RetAlleyEmptyPosList => "RET_ALLEY_EMPTY_POS_LIST",
            Self::RetAlleyLinePosInvalid => "RET_ALLEY_LINE_POS_INVALID",
            Self::RetAlleyShopNotUnlock => "RET_ALLEY_SHOP_NOT_UNLOCK",
            Self::RetAlleyDepotFull => "RET_ALLEY_DEPOT_FULL",
            Self::RetAlleyShopNotInclude => "RET_ALLEY_SHOP_NOT_INCLUDE",
            Self::RetAlleyEventNotUnlock => "RET_ALLEY_EVENT_NOT_UNLOCK",
            Self::RetAlleyEventNotRefresh => "RET_ALLEY_EVENT_NOT_REFRESH",
            Self::RetAlleyEventStateDoing => "RET_ALLEY_EVENT_STATE_DOING",
            Self::RetAlleyEventStateFinish => "RET_ALLEY_EVENT_STATE_FINISH",
            Self::RetAlleyEventError => "RET_ALLEY_EVENT_ERROR",
            Self::RetAlleyRewardLevelError => "RET_ALLEY_REWARD_LEVEL_ERROR",
            Self::RetAlleyRewardPrestigeNotEnough => {
                "RET_ALLEY_REWARD_PRESTIGE_NOT_ENOUGH"
            }
            Self::RetAlleyShipEmpty => "RET_ALLEY_SHIP_EMPTY",
            Self::RetAlleyShipIdDismatch => "RET_ALLEY_SHIP_ID_DISMATCH",
            Self::RetAlleyShipNotExist => "RET_ALLEY_SHIP_NOT_EXIST",
            Self::RetAlleyShipNotUnlock => "RET_ALLEY_SHIP_NOT_UNLOCK",
            Self::RetAlleyGoodsNotExist => "RET_ALLEY_GOODS_NOT_EXIST",
            Self::RetAlleyGoodsNotUnlock => "RET_ALLEY_GOODS_NOT_UNLOCK",
            Self::RetAlleyProfitNotPositive => "RET_ALLEY_PROFIT_NOT_POSITIVE",
            Self::RetAlleySpecialOrderDismatch => "RET_ALLEY_SPECIAL_ORDER_DISMATCH",
            Self::RetAlleyOrderGoodsOverLimit => "RET_ALLEY_ORDER_GOODS_OVER_LIMIT",
            Self::RetAlleySpecialOrderConditionNotMeet => {
                "RET_ALLEY_SPECIAL_ORDER_CONDITION_NOT_MEET"
            }
            Self::RetAlleyDepotSizeOverLimit => "RET_ALLEY_DEPOT_SIZE_OVER_LIMIT",
            Self::RetAlleyGoodsNotEnough => "RET_ALLEY_GOODS_NOT_ENOUGH",
            Self::RetAlleyOrderIndexInvalid => "RET_ALLEY_ORDER_INDEX_INVALID",
            Self::RetAlleyRewardAlreadyTake => "RET_ALLEY_REWARD_ALREADY_TAKE",
            Self::RetAlleyRewardNotExist => "RET_ALLEY_REWARD_NOT_EXIST",
            Self::RetAlleyMainMissionNotDoing => "RET_ALLEY_MAIN_MISSION_NOT_DOING",
            Self::RetAlleyCriticalEventNotFinish => "RET_ALLEY_CRITICAL_EVENT_NOT_FINISH",
            Self::RetAlleyShopGoodsNotValid => "RET_ALLEY_SHOP_GOODS_NOT_VALID",
            Self::RetAlleySlashNotOpen => "RET_ALLEY_SLASH_NOT_OPEN",
            Self::RetAlleyPlacingAnchorInvalid => "RET_ALLEY_PLACING_ANCHOR_INVALID",
            Self::RetAlleyPlacingGoodsIndexInvalid => {
                "RET_ALLEY_PLACING_GOODS_INDEX_INVALID"
            }
            Self::RetAlleySaveMapTooQuick => "RET_ALLEY_SAVE_MAP_TOO_QUICK",
            Self::RetAlleyMapNotLink => "RET_ALLEY_MAP_NOT_LINK",
            Self::RetAlleyFundsNotLowerBase => "RET_ALLEY_FUNDS_NOT_LOWER_BASE",
            Self::RetAlleyEventNotFinish => "RET_ALLEY_EVENT_NOT_FINISH",
            Self::RetAlleyNormalOrderNotMeet => "RET_ALLEY_NORMAL_ORDER_NOT_MEET",
            Self::RetPlayerReturnNotOpen => "RET_PLAYER_RETURN_NOT_OPEN",
            Self::RetPlayerReturnIsSigned => "RET_PLAYER_RETURN_IS_SIGNED",
            Self::RetPlayerReturnPointNotEnough => "RET_PLAYER_RETURN_POINT_NOT_ENOUGH",
            Self::RetPlayerReturnConditionInvalid => {
                "RET_PLAYER_RETURN_CONDITION_INVALID"
            }
            Self::RetPlayerReturnHasSigned => "RET_PLAYER_RETURN_HAS_SIGNED",
            Self::RetPlayerReturnRewardTaken => "RET_PLAYER_RETURN_REWARD_TAKEN",
            Self::RetAetherDivideNoLineup => "RET_AETHER_DIVIDE_NO_LINEUP",
            Self::RetAetherDivideLineupInvalid => "RET_AETHER_DIVIDE_LINEUP_INVALID",
            Self::RetChatBubbleIdError => "RET_CHAT_BUBBLE_ID_ERROR",
            Self::RetChatBubbleIdNotUnlock => "RET_CHAT_BUBBLE_ID_NOT_UNLOCK",
            Self::RetPhoneThemeIdError => "RET_PHONE_THEME_ID_ERROR",
            Self::RetPhoneThemeIdNotUnlock => "RET_PHONE_THEME_ID_NOT_UNLOCK",
            Self::RetChatBubbleSelectIsCurrent => "RET_CHAT_BUBBLE_SELECT_IS_CURRENT",
            Self::RetPhoneThemeSelectIsCurrent => "RET_PHONE_THEME_SELECT_IS_CURRENT",
            Self::RetChessRogueConfigNotFound => "RET_CHESS_ROGUE_CONFIG_NOT_FOUND",
            Self::RetChessRogueConfigInvalid => "RET_CHESS_ROGUE_CONFIG_INVALID",
            Self::RetChessRogueNoValidRoom => "RET_CHESS_ROGUE_NO_VALID_ROOM",
            Self::RetChessRogueNoCellInfo => "RET_CHESS_ROGUE_NO_CELL_INFO",
            Self::RetChessRogueCellNotFinish => "RET_CHESS_ROGUE_CELL_NOT_FINISH",
            Self::RetChessRogueCellIsLocked => "RET_CHESS_ROGUE_CELL_IS_LOCKED",
            Self::RetChessRogueScheduleNotMatch => "RET_CHESS_ROGUE_SCHEDULE_NOT_MATCH",
            Self::RetChessRogueStatusFail => "RET_CHESS_ROGUE_STATUS_FAIL",
            Self::RetChessRogueAreaNotExist => "RET_CHESS_ROGUE_AREA_NOT_EXIST",
            Self::RetChessRogueLineupFail => "RET_CHESS_ROGUE_LINEUP_FAIL",
            Self::RetChessRogueAeonFail => "RET_CHESS_ROGUE_AEON_FAIL",
            Self::RetChessRogueEnterCellFail => "RET_CHESS_ROGUE_ENTER_CELL_FAIL",
            Self::RetChessRogueRollDiceFail => "RET_CHESS_ROGUE_ROLL_DICE_FAIL",
            Self::RetChessRogueDiceStatusFail => "RET_CHESS_ROGUE_DICE_STATUS_FAIL",
            Self::RetChessRogueDiceCntNotFull => "RET_CHESS_ROGUE_DICE_CNT_NOT_FULL",
            Self::RetChessRogueUnlock => "RET_CHESS_ROGUE_UNLOCK",
            Self::RetChessRoguePickAvatarFail => "RET_CHESS_ROGUE_PICK_AVATAR_FAIL",
            Self::RetChessRogueAvatarInvalid => "RET_CHESS_ROGUE_AVATAR_INVALID",
            Self::RetChessRogueCellCanNotSelect => "RET_CHESS_ROGUE_CELL_CAN_NOT_SELECT",
            Self::RetChessRogueDiceConfirmed => "RET_CHESS_ROGUE_DICE_CONFIRMED",
            Self::RetChessRogueNousDiceNotMatch => "RET_CHESS_ROGUE_NOUS_DICE_NOT_MATCH",
            Self::RetChessRogueNousDiceRarityFail => {
                "RET_CHESS_ROGUE_NOUS_DICE_RARITY_FAIL"
            }
            Self::RetChessRogueNousDiceSurfaceDuplicate => {
                "RET_CHESS_ROGUE_NOUS_DICE_SURFACE_DUPLICATE"
            }
            Self::RetChessRogueNotInRogue => "RET_CHESS_ROGUE_NOT_IN_ROGUE",
            Self::RetChessRogueNousDiceBranchLimit => {
                "RET_CHESS_ROGUE_NOUS_DICE_BRANCH_LIMIT"
            }
            Self::RetHeliobusNotOpen => "RET_HELIOBUS_NOT_OPEN",
            Self::RetHeliobusSnsPostNotUnlock => "RET_HELIOBUS_SNS_POST_NOT_UNLOCK",
            Self::RetHeliobusSnsAlreadyRead => "RET_HELIOBUS_SNS_ALREADY_READ",
            Self::RetHeliobusSnsAlreadyLiked => "RET_HELIOBUS_SNS_ALREADY_LIKED",
            Self::RetHeliobusSnsAlreadyCommented => "RET_HELIOBUS_SNS_ALREADY_COMMENTED",
            Self::RetHeliobusSnsInMission => "RET_HELIOBUS_SNS_IN_MISSION",
            Self::RetHeliobusSnsAlreadyPosted => "RET_HELIOBUS_SNS_ALREADY_POSTED",
            Self::RetHeliobusSnsNotDoingMission => "RET_HELIOBUS_SNS_NOT_DOING_MISSION",
            Self::RetHeliobusRewardLevelMax => "RET_HELIOBUS_REWARD_LEVEL_MAX",
            Self::RetHeliobusIncomeNotEnough => "RET_HELIOBUS_INCOME_NOT_ENOUGH",
            Self::RetHeliobusSnsCommentNotUnlock => "RET_HELIOBUS_SNS_COMMENT_NOT_UNLOCK",
            Self::RetHeliobusChallengeNotUnlock => "RET_HELIOBUS_CHALLENGE_NOT_UNLOCK",
            Self::RetHeliobusChallengeIdError => "RET_HELIOBUS_CHALLENGE_ID_ERROR",
            Self::RetHeliobusSkillNotUnlock => "RET_HELIOBUS_SKILL_NOT_UNLOCK",
            Self::RetHeliobusAcceptPostMissionFail => {
                "RET_HELIOBUS_ACCEPT_POST_MISSION_FAIL"
            }
            Self::RetHeliobusSkillNotSelected => "RET_HELIOBUS_SKILL_NOT_SELECTED",
            Self::RetHeliobusPlaneTypeInvalid => "RET_HELIOBUS_PLANE_TYPE_INVALID",
            Self::RetReddotParamInvalid => "RET_REDDOT_PARAM_INVALID",
            Self::RetReddotActivityNotOpen => "RET_REDDOT_ACTIVITY_NOT_OPEN",
            Self::RetRogueEndlessActivityConfigError => {
                "RET_ROGUE_ENDLESS_ACTIVITY_CONFIG_ERROR"
            }
            Self::RetRogueEndlessActivityNotOpen => "RET_ROGUE_ENDLESS_ACTIVITY_NOT_OPEN",
            Self::RetRogueEndlessActivityOverBonusRewardLimit => {
                "RET_ROGUE_ENDLESS_ACTIVITY_OVER_BONUS_REWARD_LIMIT"
            }
            Self::RetRogueEndlessActivityScoreNotMeet => {
                "RET_ROGUE_ENDLESS_ACTIVITY_SCORE_NOT_MEET"
            }
            Self::RetRogueEndlessActivityRewardLevleAlreadyTake => {
                "RET_ROGUE_ENDLESS_ACTIVITY_REWARD_LEVLE_ALREADY_TAKE"
            }
            Self::RetHeartDialScriptNotFound => "RET_HEART_DIAL_SCRIPT_NOT_FOUND",
            Self::RetHeartDialScriptEmotionTheSame => {
                "RET_HEART_DIAL_SCRIPT_EMOTION_THE_SAME"
            }
            Self::RetHeartDialScriptStepNotNormal => {
                "RET_HEART_DIAL_SCRIPT_STEP_NOT_NORMAL"
            }
            Self::RetHeartDialScriptConditionNotMatch => {
                "RET_HEART_DIAL_SCRIPT_CONDITION_NOT_MATCH"
            }
            Self::RetHeartDialScriptSubmitItemNumNotMatch => {
                "RET_HEART_DIAL_SCRIPT_SUBMIT_ITEM_NUM_NOT_MATCH"
            }
            Self::RetHeartDialScriptSubmitItemIdNotMatch => {
                "RET_HEART_DIAL_SCRIPT_SUBMIT_ITEM_ID_NOT_MATCH"
            }
            Self::RetHeartDialDialogueNotFound => "RET_HEART_DIAL_DIALOGUE_NOT_FOUND",
            Self::RetHeartDialDialogueAlreadyPerformed => {
                "RET_HEART_DIAL_DIALOGUE_ALREADY_PERFORMED"
            }
            Self::RetHeartDialNpcNotFound => "RET_HEART_DIAL_NPC_NOT_FOUND",
            Self::RetHeartDialTraceConfigNotFound => {
                "RET_HEART_DIAL_TRACE_CONFIG_NOT_FOUND"
            }
            Self::RetHeartDialFloorTraceExist => "RET_HEART_DIAL_FLOOR_TRACE_EXIST",
            Self::RetHeartDialTraceFloorNotMatch => {
                "RET_HEART_DIAL_TRACE_FLOOR_NOT_MATCH"
            }
            Self::RetTravelBrochureConfigError => "RET_TRAVEL_BROCHURE_CONFIG_ERROR",
            Self::RetTravelBrochureParamInvalid => "RET_TRAVEL_BROCHURE_PARAM_INVALID",
            Self::RetTravelBrochureLocked => "RET_TRAVEL_BROCHURE_LOCKED",
            Self::RetTravelBrochureCannotOperate => "RET_TRAVEL_BROCHURE_CANNOT_OPERATE",
            Self::RetTravelBrochureWorldIdNotMatch => {
                "RET_TRAVEL_BROCHURE_WORLD_ID_NOT_MATCH"
            }
            Self::RetTravelBrochureHasNoWorldBook => {
                "RET_TRAVEL_BROCHURE_HAS_NO_WORLD_BOOK"
            }
            Self::RetTravelBrochurePageFull => "RET_TRAVEL_BROCHURE_PAGE_FULL",
            Self::RetMapRotationNotInRegion => "RET_MAP_ROTATION_NOT_IN_REGION",
            Self::RetMapRotationRotaterAlreadyDeployed => {
                "RET_MAP_ROTATION_ROTATER_ALREADY_DEPLOYED"
            }
            Self::RetMapRotationEnergyNotEnough => "RET_MAP_ROTATION_ENERGY_NOT_ENOUGH",
            Self::RetMapRotationEntityNotOnCurPose => {
                "RET_MAP_ROTATION_ENTITY_NOT_ON_CUR_POSE"
            }
            Self::RetMapRotationRotaterNotDeployed => {
                "RET_MAP_ROTATION_ROTATER_NOT_DEPLOYED"
            }
            Self::RetMapRotationPoseRotaterMismatch => {
                "RET_MAP_ROTATION_POSE_ROTATER_MISMATCH"
            }
            Self::RetMapRotationRotaterNotRemovable => {
                "RET_MAP_ROTATION_ROTATER_NOT_REMOVABLE"
            }
            Self::RetMapRotationRotaterDisposable => {
                "RET_MAP_ROTATION_ROTATER_DISPOSABLE"
            }
            Self::RetSpaceZooActivityCatNotFound => {
                "RET_SPACE_ZOO_ACTIVITY_CAT_NOT_FOUND"
            }
            Self::RetSpaceZooActivityCatParamInvalid => {
                "RET_SPACE_ZOO_ACTIVITY_CAT_PARAM_INVALID"
            }
            Self::RetSpaceZooActivityCatItemNotEnough => {
                "RET_SPACE_ZOO_ACTIVITY_CAT_ITEM_NOT_ENOUGH"
            }
            Self::RetSpaceZooActivityCatBagFull => "RET_SPACE_ZOO_ACTIVITY_CAT_BAG_FULL",
            Self::RetSpaceZooActivityCatNotToMutate => {
                "RET_SPACE_ZOO_ACTIVITY_CAT_NOT_TO_MUTATE"
            }
            Self::RetSpaceZooActivityCatStateError => {
                "RET_SPACE_ZOO_ACTIVITY_CAT_STATE_ERROR"
            }
            Self::RetSpaceZooActivityCatCatteryLocked => {
                "RET_SPACE_ZOO_ACTIVITY_CAT_CATTERY_LOCKED"
            }
            Self::RetSpaceZooActivityCatOutNow => "RET_SPACE_ZOO_ACTIVITY_CAT_OUT_NOW",
            Self::RetSpaceZooActivityCatConfigNotFound => {
                "RET_SPACE_ZOO_ACTIVITY_CAT_CONFIG_NOT_FOUND"
            }
            Self::RetSpaceZooActivityCatFeatureNotFound => {
                "RET_SPACE_ZOO_ACTIVITY_CAT_FEATURE_NOT_FOUND"
            }
            Self::RetSpaceZooActivityCatAddCatError => {
                "RET_SPACE_ZOO_ACTIVITY_CAT_ADD_CAT_ERROR"
            }
            Self::RetSpaceZooActivityCatMoneyNotEnough => {
                "RET_SPACE_ZOO_ACTIVITY_CAT_MONEY_NOT_ENOUGH"
            }
            Self::RetSpaceZooActivityCatCondNotMatch => {
                "RET_SPACE_ZOO_ACTIVITY_CAT_COND_NOT_MATCH"
            }
            Self::RetStrongChallengeActivityStageCfgMiss => {
                "RET_STRONG_CHALLENGE_ACTIVITY_STAGE_CFG_MISS"
            }
            Self::RetStrongChallengeActivityStageNotOpen => {
                "RET_STRONG_CHALLENGE_ACTIVITY_STAGE_NOT_OPEN"
            }
            Self::RetStrongChallengeActivityBuffError => {
                "RET_STRONG_CHALLENGE_ACTIVITY_BUFF_ERROR"
            }
            Self::RetRollShopNotFound => "RET_ROLL_SHOP_NOT_FOUND",
            Self::RetRollShopGroupEmpty => "RET_ROLL_SHOP_GROUP_EMPTY",
            Self::RetRollShopEmpty => "RET_ROLL_SHOP_EMPTY",
            Self::RetRollShopGachaReqDuplicated => "RET_ROLL_SHOP_GACHA_REQ_DUPLICATED",
            Self::RetRollShopRandomError => "RET_ROLL_SHOP_RANDOM_ERROR",
            Self::RetRollShopGroupTypeNotFound => "RET_ROLL_SHOP_GROUP_TYPE_NOT_FOUND",
            Self::RetRollShopHasStoredRewardAlready => {
                "RET_ROLL_SHOP_HAS_STORED_REWARD_ALREADY"
            }
            Self::RetRollShopNoStoredReward => "RET_ROLL_SHOP_NO_STORED_REWARD",
            Self::RetRollShopNotInValidScene => "RET_ROLL_SHOP_NOT_IN_VALID_SCENE",
            Self::RetRollShopInvalidRollShopType => {
                "RET_ROLL_SHOP_INVALID_ROLL_SHOP_TYPE"
            }
            Self::RetActivityRaidCollectionPrevNotFinish => {
                "RET_ACTIVITY_RAID_COLLECTION_PREV_NOT_FINISH"
            }
            Self::RetActivityRaidCollectionGroupEnterNextUnavailable => {
                "RET_ACTIVITY_RAID_COLLECTION_GROUP_ENTER_NEXT_UNAVAILABLE"
            }
            Self::RetActivityRaidCollectionIsLast => {
                "RET_ACTIVITY_RAID_COLLECTION_IS_LAST"
            }
            Self::RetActivityRaidCollectionIsNotNext => {
                "RET_ACTIVITY_RAID_COLLECTION_IS_NOT_NEXT"
            }
            Self::RetOfferingNotUnlock => "RET_OFFERING_NOT_UNLOCK",
            Self::RetOfferingLevelNotUnlock => "RET_OFFERING_LEVEL_NOT_UNLOCK",
            Self::RetOfferingReachMaxLevel => "RET_OFFERING_REACH_MAX_LEVEL",
            Self::RetOfferingItemNotEnough => "RET_OFFERING_ITEM_NOT_ENOUGH",
            Self::RetOfferingLongtailNotOpen => "RET_OFFERING_LONGTAIL_NOT_OPEN",
            Self::RetOfferingRewardCondition => "RET_OFFERING_REWARD_CONDITION",
            Self::RetDrinkMakerChatInvalid => "RET_DRINK_MAKER_CHAT_INVALID",
            Self::RetDrinkMakerParamInvalid => "RET_DRINK_MAKER_PARAM_INVALID",
            Self::RetDrinkMakerParamNotUnlock => "RET_DRINK_MAKER_PARAM_NOT_UNLOCK",
            Self::RetDrinkMakerConfigNotFound => "RET_DRINK_MAKER_CONFIG_NOT_FOUND",
            Self::RetDrinkMakerNotLastChat => "RET_DRINK_MAKER_NOT_LAST_CHAT",
            Self::RetDrinkMakerDayAndFreePhaseNotOpen => {
                "RET_DRINK_MAKER_DAY_AND_FREE_PHASE_NOT_OPEN"
            }
            Self::RetMonopolyNotOpen => "RET_MONOPOLY_NOT_OPEN",
            Self::RetMonopolyConfigError => "RET_MONOPOLY_CONFIG_ERROR",
            Self::RetMonopolyDiceNotEnough => "RET_MONOPOLY_DICE_NOT_ENOUGH",
            Self::RetMonopolyCurCellNotFinish => "RET_MONOPOLY_CUR_CELL_NOT_FINISH",
            Self::RetMonopolyCoinNotEnough => "RET_MONOPOLY_COIN_NOT_ENOUGH",
            Self::RetMonopolyCellWaitPending => "RET_MONOPOLY_CELL_WAIT_PENDING",
            Self::RetMonopolyCellStateError => "RET_MONOPOLY_CELL_STATE_ERROR",
            Self::RetMonopolyCellContentError => "RET_MONOPOLY_CELL_CONTENT_ERROR",
            Self::RetMonopolyItemNotEnough => "RET_MONOPOLY_ITEM_NOT_ENOUGH",
            Self::RetMonopolyCellContentCannotGiveup => {
                "RET_MONOPOLY_CELL_CONTENT_CANNOT_GIVEUP"
            }
            Self::RetMonopolyAssetLevelInvalid => "RET_MONOPOLY_ASSET_LEVEL_INVALID",
            Self::RetMonopolyTurnNotFinish => "RET_MONOPOLY_TURN_NOT_FINISH",
            Self::RetMonopolyGuideNotFinish => "RET_MONOPOLY_GUIDE_NOT_FINISH",
            Self::RetMonopolyRaffleRewardReissued => {
                "RET_MONOPOLY_RAFFLE_REWARD_REISSUED"
            }
            Self::RetMonopolyNoGameActive => "RET_MONOPOLY_NO_GAME_ACTIVE",
            Self::RetMonopolyGameRatioNotIncreasable => {
                "RET_MONOPOLY_GAME_RATIO_NOT_INCREASABLE"
            }
            Self::RetMonopolyGameRatioMax => "RET_MONOPOLY_GAME_RATIO_MAX",
            Self::RetMonopolyGameTargetRatioInvalid => {
                "RET_MONOPOLY_GAME_TARGET_RATIO_INVALID"
            }
            Self::RetMonopolyGameBingoFlipPosInvalid => {
                "RET_MONOPOLY_GAME_BINGO_FLIP_POS_INVALID"
            }
            Self::RetMonopolyGameGuessAlreadyChoose => {
                "RET_MONOPOLY_GAME_GUESS_ALREADY_CHOOSE"
            }
            Self::RetMonopolyGameGuessChooseInvalid => {
                "RET_MONOPOLY_GAME_GUESS_CHOOSE_INVALID"
            }
            Self::RetMonopolyGameGuessInformationAlreadyBought => {
                "RET_MONOPOLY_GAME_GUESS_INFORMATION_ALREADY_BOUGHT"
            }
            Self::RetMonopolyGameRaiseRatioNotUnlock => {
                "RET_MONOPOLY_GAME_RAISE_RATIO_NOT_UNLOCK"
            }
            Self::RetMonopolyFriendNotSynced => "RET_MONOPOLY_FRIEND_NOT_SYNCED",
            Self::RetMonopolyGetFriendRankingListInCd => {
                "RET_MONOPOLY_GET_FRIEND_RANKING_LIST_IN_CD"
            }
            Self::RetMonopolyLikeTargetNotFriend => "RET_MONOPOLY_LIKE_TARGET_NOT_FRIEND",
            Self::RetMonopolyDailyAlreadyLiked => "RET_MONOPOLY_DAILY_ALREADY_LIKED",
            Self::RetMonopolySocialEventStatusNotMatch => {
                "RET_MONOPOLY_SOCIAL_EVENT_STATUS_NOT_MATCH"
            }
            Self::RetMonopolySocialEventServerCacheNotExist => {
                "RET_MONOPOLY_SOCIAL_EVENT_SERVER_CACHE_NOT_EXIST"
            }
            Self::RetMonopolyActivityIdNotMatch => "RET_MONOPOLY_ACTIVITY_ID_NOT_MATCH",
            Self::RetMonopolyRafflePoolNotExist => "RET_MONOPOLY_RAFFLE_POOL_NOT_EXIST",
            Self::RetMonopolyRafflePoolTimeNotMatch => {
                "RET_MONOPOLY_RAFFLE_POOL_TIME_NOT_MATCH"
            }
            Self::RetMonopolyRafflePoolPhaseNotMeet => {
                "RET_MONOPOLY_RAFFLE_POOL_PHASE_NOT_MEET"
            }
            Self::RetMonopolyRafflePoolShowTimeNotMeet => {
                "RET_MONOPOLY_RAFFLE_POOL_SHOW_TIME_NOT_MEET"
            }
            Self::RetMonopolyRaffleTicketNotFound => {
                "RET_MONOPOLY_RAFFLE_TICKET_NOT_FOUND"
            }
            Self::RetMonopolyRaffleTicketTimeNotMeet => {
                "RET_MONOPOLY_RAFFLE_TICKET_TIME_NOT_MEET"
            }
            Self::RetMonopolyRaffleTicketRewardAlreadyTaken => {
                "RET_MONOPOLY_RAFFLE_TICKET_REWARD_ALREADY_TAKEN"
            }
            Self::RetMonopolyRafflePoolNotInRaffleTime => {
                "RET_MONOPOLY_RAFFLE_POOL_NOT_IN_RAFFLE_TIME"
            }
            Self::RetMonopolyMbtiReportRewardAlreadyTaken => {
                "RET_MONOPOLY_MBTI_REPORT_REWARD_ALREADY_TAKEN"
            }
            Self::RetEvolveBuildLevelGaming => "RET_EVOLVE_BUILD_LEVEL_GAMING",
            Self::RetEveolveBuildLevelBanRandom => "RET_EVEOLVE_BUILD_LEVEL_BAN_RANDOM",
            Self::RetEvolveBuildFirstRewardAlreadyTaken => {
                "RET_EVOLVE_BUILD_FIRST_REWARD_ALREADY_TAKEN"
            }
            Self::RetEvolveBuildLevelUnfinish => "RET_EVOLVE_BUILD_LEVEL_UNFINISH",
            Self::RetEvolveBuildShopAbilityMaxLevel => {
                "RET_EVOLVE_BUILD_SHOP_ABILITY_MAX_LEVEL"
            }
            Self::RetEvolveBuildShopAbilityMinLevel => {
                "RET_EVOLVE_BUILD_SHOP_ABILITY_MIN_LEVEL"
            }
            Self::RetEvolveBuildShopAbilityNotGet => {
                "RET_EVOLVE_BUILD_SHOP_ABILITY_NOT_GET"
            }
            Self::RetEvolveBuildLevelLock => "RET_EVOLVE_BUILD_LEVEL_LOCK",
            Self::RetEvolveBuildExpNotEnough => "RET_EVOLVE_BUILD_EXP_NOT_ENOUGH",
            Self::RetEvolveBuildShopAbilityLevelError => {
                "RET_EVOLVE_BUILD_SHOP_ABILITY_LEVEL_ERROR"
            }
            Self::RetEvolveBuildActivityNotOpen => "RET_EVOLVE_BUILD_ACTIVITY_NOT_OPEN",
            Self::RetEvolveBuildShopAbilityEmpty => "RET_EVOLVE_BUILD_SHOP_ABILITY_EMPTY",
            Self::RetEvolveBuildLevelNotStart => "RET_EVOLVE_BUILD_LEVEL_NOT_START",
            Self::RetEvolveBuildShopLock => "RET_EVOLVE_BUILD_SHOP_LOCK",
            Self::RetEvolveBuildRewardLock => "RET_EVOLVE_BUILD_REWARD_LOCK",
            Self::RetEvolveBuildRewardLevelMax => "RET_EVOLVE_BUILD_REWARD_LEVEL_MAX",
            Self::RetEvolveBuildRewardAlreadyAllTaken => {
                "RET_EVOLVE_BUILD_REWARD_ALREADY_ALL_TAKEN"
            }
            Self::RetClockParkConfigError => "RET_CLOCK_PARK_CONFIG_ERROR",
            Self::RetClockParkEffectError => "RET_CLOCK_PARK_EFFECT_ERROR",
            Self::RetClockParkScriptAlreadyUnlock => {
                "RET_CLOCK_PARK_SCRIPT_ALREADY_UNLOCK"
            }
            Self::RetClockParkScriptUnlockConditionNotMeet => {
                "RET_CLOCK_PARK_SCRIPT_UNLOCK_CONDITION_NOT_MEET"
            }
            Self::RetClockParkTalentAlreadyUnlock => {
                "RET_CLOCK_PARK_TALENT_ALREADY_UNLOCK"
            }
            Self::RetClockParkScriptLocked => "RET_CLOCK_PARK_SCRIPT_LOCKED",
            Self::RetClockParkHasOngoingScript => "RET_CLOCK_PARK_HAS_ONGOING_SCRIPT",
            Self::RetClockParkNoOngoingScript => "RET_CLOCK_PARK_NO_ONGOING_SCRIPT",
            Self::RetClockParkDicePlacementError => "RET_CLOCK_PARK_DICE_PLACEMENT_ERROR",
            Self::RetClockParkMismatchStatus => "RET_CLOCK_PARK_MISMATCH_STATUS",
            Self::RetClockParkNoBuff => "RET_CLOCK_PARK_NO_BUFF",
            Self::RetClockParkSlotMachineGachaReqDuplicated => {
                "RET_CLOCK_PARK_SLOT_MACHINE_GACHA_REQ_DUPLICATED"
            }
            Self::RetClockParkSlotMachineCostNotEnough => {
                "RET_CLOCK_PARK_SLOT_MACHINE_COST_NOT_ENOUGH"
            }
            Self::RetClockParkSlotMachineGachaCntExceedLimit => {
                "RET_CLOCK_PARK_SLOT_MACHINE_GACHA_CNT_EXCEED_LIMIT"
            }
            Self::RetClockParkNotOpen => "RET_CLOCK_PARK_NOT_OPEN",
            Self::RetTournRogueStatusMismatch => "RET_TOURN_ROGUE_STATUS_MISMATCH",
            Self::RetMagicRogueStatusMismatch => "RET_MAGIC_ROGUE_STATUS_MISMATCH",
            Self::RetAutoMountMagicUnitNoMatchedMagicScepter => {
                "RET_AUTO_MOUNT_MAGIC_UNIT_NO_MATCHED_MAGIC_SCEPTER"
            }
            Self::RetMagicUnitWorkbenchReforgeGenFail => {
                "RET_MAGIC_UNIT_WORKBENCH_REFORGE_GEN_FAIL"
            }
            Self::RetMatchAlreadyInMatch => "RET_MATCH_ALREADY_IN_MATCH",
            Self::RetMatchNotInMatch => "RET_MATCH_NOT_IN_MATCH",
            Self::RetMatchPlayNotOpen => "RET_MATCH_PLAY_NOT_OPEN",
            Self::RetCrossStateError => "RET_CROSS_STATE_ERROR",
            Self::RetMatchVersionNotEqual => "RET_MATCH_VERSION_NOT_EQUAL",
            Self::RetMatchPlayerNotInLobbyRoom => "RET_MATCH_PLAYER_NOT_IN_LOBBY_ROOM",
            Self::RetLobbyStateNotMatch => "RET_LOBBY_STATE_NOT_MATCH",
            Self::RetLobbyRoomNotExist => "RET_LOBBY_ROOM_NOT_EXIST",
            Self::RetLobbyRoomPalyerFull => "RET_LOBBY_ROOM_PALYER_FULL",
            Self::RetLobbyRoomPalyerNotReady => "RET_LOBBY_ROOM_PALYER_NOT_READY",
            Self::RetLobbyRoomPalyerFighting => "RET_LOBBY_ROOM_PALYER_FIGHTING",
            Self::RetFightRoomNotExist => "RET_FIGHT_ROOM_NOT_EXIST",
            Self::RetFightMatch3PlayerStateErr => "RET_FIGHT_MATCH3_PLAYER_STATE_ERR",
            Self::RetFightMatch3RoomStateErr => "RET_FIGHT_MATCH3_ROOM_STATE_ERR",
            Self::RetCrossStateTimeOut => "RET_CROSS_STATE_TIME_OUT",
            Self::RetSwordTrainingNoActiveGame => "RET_SWORD_TRAINING_NO_ACTIVE_GAME",
            Self::RetSwordTrainingNoPendingActionMatch => {
                "RET_SWORD_TRAINING_NO_PENDING_ACTION_MATCH"
            }
            Self::RetSwordTrainingPartnerAbilityInvalid => {
                "RET_SWORD_TRAINING_PARTNER_ABILITY_INVALID"
            }
            Self::RetSwordTrainingSkillAlreadyLearned => {
                "RET_SWORD_TRAINING_SKILL_ALREADY_LEARNED"
            }
            Self::RetSwordTrainingConditionNotMeet => {
                "RET_SWORD_TRAINING_CONDITION_NOT_MEET"
            }
            Self::RetSwordTrainingParentSkillNotLearned => {
                "RET_SWORD_TRAINING_PARENT_SKILL_NOT_LEARNED"
            }
            Self::RetSwordTrainingSkillTypeNotUnlock => {
                "RET_SWORD_TRAINING_SKILL_TYPE_NOT_UNLOCK"
            }
            Self::RetSwordTrainingGameAlreadyExist => {
                "RET_SWORD_TRAINING_GAME_ALREADY_EXIST"
            }
            Self::RetSwordTrainingEndingHintNotMatch => {
                "RET_SWORD_TRAINING_ENDING_HINT_NOT_MATCH"
            }
            Self::RetSwordTrainingStorylineConfigNotFound => {
                "RET_SWORD_TRAINING_STORYLINE_CONFIG_NOT_FOUND"
            }
            Self::RetSwordTrainingStoryConfigNotFound => {
                "RET_SWORD_TRAINING_STORY_CONFIG_NOT_FOUND"
            }
            Self::RetSwordTrainingUnlockNotFinish => {
                "RET_SWORD_TRAINING_UNLOCK_NOT_FINISH"
            }
            Self::RetSwordTrainingOptionMismatch => "RET_SWORD_TRAINING_OPTION_MISMATCH",
            Self::RetSwordTrainingRestoreWithoutExamFailed => {
                "RET_SWORD_TRAINING_RESTORE_WITHOUT_EXAM_FAILED"
            }
            Self::RetSwordTrainingNoRestoreGameAvailable => {
                "RET_SWORD_TRAINING_NO_RESTORE_GAME_AVAILABLE"
            }
            Self::RetSwordTrainingEndingStoryNotMatch => {
                "RET_SWORD_TRAINING_ENDING_STORY_NOT_MATCH"
            }
            Self::RetSwordTrainingEndingNotFinish => {
                "RET_SWORD_TRAINING_ENDING_NOT_FINISH"
            }
            Self::RetSwordTrainingEndingRewardTaken => {
                "RET_SWORD_TRAINING_ENDING_REWARD_TAKEN"
            }
            Self::RetSwordTrainingCombatRankNotChange => {
                "RET_SWORD_TRAINING_COMBAT_RANK_NOT_CHANGE"
            }
            Self::RetSwordTrainingDirectBattleDisable => {
                "RET_SWORD_TRAINING_DIRECT_BATTLE_DISABLE"
            }
            Self::RetFightFestPhaseNotMatch => "RET_FIGHT_FEST_PHASE_NOT_MATCH",
            Self::RetFightFestScoreRaceAlreadyFinish => {
                "RET_FIGHT_FEST_SCORE_RACE_ALREADY_FINISH"
            }
            Self::RetFightFestChallengeLocked => "RET_FIGHT_FEST_CHALLENGE_LOCKED",
            Self::RetFightFestCoachSkillLocked => "RET_FIGHT_FEST_COACH_SKILL_LOCKED",
            Self::RetFightFestCoachSkillEquipTypeExisted => {
                "RET_FIGHT_FEST_COACH_SKILL_EQUIP_TYPE_EXISTED"
            }
            Self::RetFightFestScoreRaceMissionDoind => {
                "RET_FIGHT_FEST_SCORE_RACE_MISSION_DOIND"
            }
            Self::RetFightFestCoachSkillNoEquip => "RET_FIGHT_FEST_COACH_SKILL_NO_EQUIP",
            Self::RetPetNotExist => "RET_PET_NOT_EXIST",
            Self::RetPetAlreadySummoned => "RET_PET_ALREADY_SUMMONED",
            Self::RetPetNotSummoned => "RET_PET_NOT_SUMMONED",
            Self::RetMusicRhythmLevelTimeTooShort => {
                "RET_MUSIC_RHYTHM_LEVEL_TIME_TOO_SHORT"
            }
            Self::RetMusicRhythmNotInLevel => "RET_MUSIC_RHYTHM_NOT_IN_LEVEL",
            Self::RetMusicRhythmPreDifficultyNotPass => {
                "RET_MUSIC_RHYTHM_PRE_DIFFICULTY_NOT_PASS"
            }
            Self::RetMusicRhythmSongLimited => "RET_MUSIC_RHYTHM_SONG_LIMITED",
            Self::RetMusicRhythmSongLocked => "RET_MUSIC_RHYTHM_SONG_LOCKED",
            Self::RetMusicRhythmTrackLocked => "RET_MUSIC_RHYTHM_TRACK_LOCKED",
            Self::RetMusicRhythmLevelNotUnlock => "RET_MUSIC_RHYTHM_LEVEL_NOT_UNLOCK",
            Self::RetMusicRhythmSongSfxLocked => "RET_MUSIC_RHYTHM_SONG_SFX_LOCKED",
            Self::RetTrainPartyCoinNotEnough => "RET_TRAIN_PARTY_COIN_NOT_ENOUGH",
            Self::RetTrainPartyDiyTagNotMatch => "RET_TRAIN_PARTY_DIY_TAG_NOT_MATCH",
            Self::RetTrainPartyUseCardMobilityNotEnough => {
                "RET_TRAIN_PARTY_USE_CARD_MOBILITY_NOT_ENOUGH"
            }
            Self::RetTrainPartyAreaUnlockCoinNotEnough => {
                "RET_TRAIN_PARTY_AREA_UNLOCK_COIN_NOT_ENOUGH"
            }
            Self::RetTarotBookEnergyNotEnough => "RET_TAROT_BOOK_ENERGY_NOT_ENOUGH",
            Self::RetTarotBookPackNotAvailable => "RET_TAROT_BOOK_PACK_NOT_AVAILABLE",
            Self::RetTarotBookStoryAlreadyUnlock => "RET_TAROT_BOOK_STORY_ALREADY_UNLOCK",
            Self::RetTarotBookCardNotEnough => "RET_TAROT_BOOK_CARD_NOT_ENOUGH",
            Self::RetTarotBookClueNotEnough => "RET_TAROT_BOOK_CLUE_NOT_ENOUGH",
            Self::RetTarotBookUnlockStoryCardNotSame => {
                "RET_TAROT_BOOK_UNLOCK_STORY_CARD_NOT_SAME"
            }
            Self::RetTarotBookStoryNotUnlock => "RET_TAROT_BOOK_STORY_NOT_UNLOCK",
            Self::RetTarotBookStoryAlreadyFinish => "RET_TAROT_BOOK_STORY_ALREADY_FINISH",
            Self::RetTarotBookInteractionAlreadyFinish => {
                "RET_TAROT_BOOK_INTERACTION_ALREADY_FINISH"
            }
            Self::RetChimeraChimeraNotUnlock => "RET_CHIMERA_CHIMERA_NOT_UNLOCK",
            Self::RetChimeraChimeraDuplicated => "RET_CHIMERA_CHIMERA_DUPLICATED",
            Self::RetChimeraChimeraTypeError => "RET_CHIMERA_CHIMERA_TYPE_ERROR",
            Self::RetChimeraWorkMismatchRound => "RET_CHIMERA_WORK_MISMATCH_ROUND",
            Self::RetChimeraWorkRoundOptionNotMeet => {
                "RET_CHIMERA_WORK_ROUND_OPTION_NOT_MEET"
            }
            Self::RetChimeraEndlessNotUnlock => "RET_CHIMERA_ENDLESS_NOT_UNLOCK",
            Self::RetChimeraInEndless => "RET_CHIMERA_IN_ENDLESS",
            Self::RetChimeraNotInEndless => "RET_CHIMERA_NOT_IN_ENDLESS",
            Self::RetChimeraChimeraFallInEndless => "RET_CHIMERA_CHIMERA_FALL_IN_ENDLESS",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "RET_SUCC" => Some(Self::RetSucc),
            "RET_FAIL" => Some(Self::RetFail),
            "RET_SERVER_INTERNAL_ERROR" => Some(Self::RetServerInternalError),
            "RET_TIMEOUT" => Some(Self::RetTimeout),
            "RET_REPEATED_REQ" => Some(Self::RetRepeatedReq),
            "RET_REQ_PARA_INVALID" => Some(Self::RetReqParaInvalid),
            "RET_PLAYER_DATA_ERROR" => Some(Self::RetPlayerDataError),
            "RET_PLAYER_CLIENT_PAUSED" => Some(Self::RetPlayerClientPaused),
            "RET_FUNC_CHECK_FAILED" => Some(Self::RetFuncCheckFailed),
            "RET_FEATURE_SWITCH_CLOSED" => Some(Self::RetFeatureSwitchClosed),
            "RET_FREQ_OVER_LIMIT" => Some(Self::RetFreqOverLimit),
            "RET_SYSTEM_BUSY" => Some(Self::RetSystemBusy),
            "RET_PLAYER_NOT_ONLINE" => Some(Self::RetPlayerNotOnline),
            "RET_OPERATION_IN_CD" => Some(Self::RetOperationInCd),
            "RET_REPEATE_LOGIN" => Some(Self::RetRepeateLogin),
            "RET_RETRY_LOGIN" => Some(Self::RetRetryLogin),
            "RET_WAIT_LOGIN" => Some(Self::RetWaitLogin),
            "RET_NOT_IN_WHITE_LIST" => Some(Self::RetNotInWhiteList),
            "RET_IN_BLACK_LIST" => Some(Self::RetInBlackList),
            "RET_ACCOUNT_VERIFY_ERROR" => Some(Self::RetAccountVerifyError),
            "RET_ACCOUNT_PARA_ERROR" => Some(Self::RetAccountParaError),
            "RET_ANTI_ADDICT_LOGIN" => Some(Self::RetAntiAddictLogin),
            "RET_CHECK_SUM_ERROR" => Some(Self::RetCheckSumError),
            "RET_REACH_MAX_PLAYER_NUM" => Some(Self::RetReachMaxPlayerNum),
            "RET_ALREADY_REGISTERED" => Some(Self::RetAlreadyRegistered),
            "RET_GENDER_ERROR" => Some(Self::RetGenderError),
            "SET_NICKNAME_RET_CALLBACK_PROCESSING" => {
                Some(Self::SetNicknameRetCallbackProcessing)
            }
            "RET_IN_GM_BIND_ACCESS" => Some(Self::RetInGmBindAccess),
            "RET_QUEST_REWARD_ALREADY_TAKEN" => Some(Self::RetQuestRewardAlreadyTaken),
            "RET_QUEST_NOT_ACCEPT" => Some(Self::RetQuestNotAccept),
            "RET_QUEST_NOT_FINISH" => Some(Self::RetQuestNotFinish),
            "RET_QUEST_STATUS_ERROR" => Some(Self::RetQuestStatusError),
            "RET_ACHIEVEMENT_LEVEL_NOT_REACH" => Some(Self::RetAchievementLevelNotReach),
            "RET_ACHIEVEMENT_LEVEL_ALREADY_TAKEN" => {
                Some(Self::RetAchievementLevelAlreadyTaken)
            }
            "RET_AVATAR_NOT_EXIST" => Some(Self::RetAvatarNotExist),
            "RET_AVATAR_RES_EXP_NOT_ENOUGH" => Some(Self::RetAvatarResExpNotEnough),
            "RET_AVATAR_EXP_REACH_PROMOTION_LIMIT" => {
                Some(Self::RetAvatarExpReachPromotionLimit)
            }
            "RET_AVATAR_REACH_MAX_PROMOTION" => Some(Self::RetAvatarReachMaxPromotion),
            "RET_SKILLTREE_CONFIG_NOT_EXIST" => Some(Self::RetSkilltreeConfigNotExist),
            "RET_SKILLTREE_ALREADY_UNLOCK" => Some(Self::RetSkilltreeAlreadyUnlock),
            "RET_SKILLTREE_PRE_LOCKED" => Some(Self::RetSkilltreePreLocked),
            "RET_SKILLTREE_LEVEL_NOT_MEET" => Some(Self::RetSkilltreeLevelNotMeet),
            "RET_SKILLTREE_RANK_NOT_MEET" => Some(Self::RetSkilltreeRankNotMeet),
            "RET_AVATAR_DRESS_NO_EQUIPMENT" => Some(Self::RetAvatarDressNoEquipment),
            "RET_AVATAR_EXP_ITEM_NOT_EXIST" => Some(Self::RetAvatarExpItemNotExist),
            "RET_SKILLTREE_POINT_LOCKED" => Some(Self::RetSkilltreePointLocked),
            "RET_SKILLTREE_POINT_LEVEL_UPGRADE_NOT_MATCH" => {
                Some(Self::RetSkilltreePointLevelUpgradeNotMatch)
            }
            "RET_SKILLTREE_POINT_LEVEL_REACH_MAX" => {
                Some(Self::RetSkilltreePointLevelReachMax)
            }
            "RET_WORLD_LEVEL_NOT_MEET" => Some(Self::RetWorldLevelNotMeet),
            "RET_PLAYER_LEVEL_NOT_MEET" => Some(Self::RetPlayerLevelNotMeet),
            "RET_AVATAR_RANK_NOT_MATCH" => Some(Self::RetAvatarRankNotMatch),
            "RET_AVATAR_RANK_REACH_MAX" => Some(Self::RetAvatarRankReachMax),
            "RET_HERO_BASIC_TYPE_NOT_MATCH" => Some(Self::RetHeroBasicTypeNotMatch),
            "RET_AVATAR_PROMOTION_NOT_MEET" => Some(Self::RetAvatarPromotionNotMeet),
            "RET_PROMOTION_REWARD_CONFIG_NOT_EXIST" => {
                Some(Self::RetPromotionRewardConfigNotExist)
            }
            "RET_PROMOTION_REWARD_ALREADY_TAKEN" => {
                Some(Self::RetPromotionRewardAlreadyTaken)
            }
            "RET_AVATAR_SKIN_ITEM_NOT_EXIST" => Some(Self::RetAvatarSkinItemNotExist),
            "RET_AVATAR_SKIN_ALREADY_DRESSED" => Some(Self::RetAvatarSkinAlreadyDressed),
            "RET_AVATAR_NOT_DRESS_SKIN" => Some(Self::RetAvatarNotDressSkin),
            "RET_AVATAR_SKIN_NOT_MATCH_AVATAR" => Some(Self::RetAvatarSkinNotMatchAvatar),
            "RET_AVATAR_PATH_NOT_MATCH" => Some(Self::RetAvatarPathNotMatch),
            "RET_ITEM_NOT_EXIST" => Some(Self::RetItemNotExist),
            "RET_ITEM_COST_NOT_ENOUGH" => Some(Self::RetItemCostNotEnough),
            "RET_ITEM_COST_TOO_MUCH" => Some(Self::RetItemCostTooMuch),
            "RET_ITEM_NO_COST" => Some(Self::RetItemNoCost),
            "RET_ITEM_NOT_ENOUGH" => Some(Self::RetItemNotEnough),
            "RET_ITEM_INVALID" => Some(Self::RetItemInvalid),
            "RET_ITEM_CONFIG_NOT_EXIST" => Some(Self::RetItemConfigNotExist),
            "RET_SCOIN_NOT_ENOUGH" => Some(Self::RetScoinNotEnough),
            "RET_ITEM_REWARD_EXCEED_LIMIT" => Some(Self::RetItemRewardExceedLimit),
            "RET_ITEM_INVALID_USE" => Some(Self::RetItemInvalidUse),
            "RET_ITEM_USE_CONFIG_NOT_EXIST" => Some(Self::RetItemUseConfigNotExist),
            "RET_REWARD_CONFIG_NOT_EXIST" => Some(Self::RetRewardConfigNotExist),
            "RET_ITEM_EXCEED_LIMIT" => Some(Self::RetItemExceedLimit),
            "RET_ITEM_COUNT_INVALID" => Some(Self::RetItemCountInvalid),
            "RET_ITEM_USE_TARGET_TYPE_INVALID" => Some(Self::RetItemUseTargetTypeInvalid),
            "RET_ITEM_USE_SATIETY_FULL" => Some(Self::RetItemUseSatietyFull),
            "RET_ITEM_COMPOSE_NOT_EXIST" => Some(Self::RetItemComposeNotExist),
            "RET_RELIC_COMPOSE_NOT_EXIST" => Some(Self::RetRelicComposeNotExist),
            "RET_ITEM_CAN_NOT_SELL" => Some(Self::RetItemCanNotSell),
            "RET_ITEM_SELL_EXCEDD_LIMIT" => Some(Self::RetItemSellExceddLimit),
            "RET_ITEM_NOT_IN_COST_LIST" => Some(Self::RetItemNotInCostList),
            "RET_ITEM_SPECIAL_COST_NOT_ENOUGH" => Some(Self::RetItemSpecialCostNotEnough),
            "RET_ITEM_SPECIAL_COST_TOO_MUCH" => Some(Self::RetItemSpecialCostTooMuch),
            "RET_ITEM_FORMULA_NOT_EXIST" => Some(Self::RetItemFormulaNotExist),
            "RET_ITEM_AUTO_GIFT_OPTIONAL_NOT_EXIST" => {
                Some(Self::RetItemAutoGiftOptionalNotExist)
            }
            "RET_RELIC_COMPOSE_RELIC_INVALID" => Some(Self::RetRelicComposeRelicInvalid),
            "RET_RELIC_COMPOSE_MAIN_AFFIX_ID_INVALID" => {
                Some(Self::RetRelicComposeMainAffixIdInvalid)
            }
            "RET_RELIC_COMPOSE_WRONG_FORMULA_TYPE" => {
                Some(Self::RetRelicComposeWrongFormulaType)
            }
            "RET_RELIC_COMPOSE_RELIC_NOT_EXIST" => {
                Some(Self::RetRelicComposeRelicNotExist)
            }
            "RET_RELIC_COMPOSE_BLACK_GOLD_COUNT_INVALID" => {
                Some(Self::RetRelicComposeBlackGoldCountInvalid)
            }
            "RET_RELIC_COMPOSE_BLACK_GOLD_NOT_NEED" => {
                Some(Self::RetRelicComposeBlackGoldNotNeed)
            }
            "RET_MONTH_CARD_CANNOT_USE" => Some(Self::RetMonthCardCannotUse),
            "RET_ITEM_REWARD_EXCEED_DISAPPEAR" => {
                Some(Self::RetItemRewardExceedDisappear)
            }
            "RET_ITEM_NEED_RECYCLE" => Some(Self::RetItemNeedRecycle),
            "RET_ITEM_COMPOSE_EXCEED_LIMIT" => Some(Self::RetItemComposeExceedLimit),
            "RET_ITEM_CAN_NOT_DESTROY" => Some(Self::RetItemCanNotDestroy),
            "RET_ITEM_ALREADY_MARK" => Some(Self::RetItemAlreadyMark),
            "RET_ITEM_MARK_EXCEED_LIMIT" => Some(Self::RetItemMarkExceedLimit),
            "RET_ITEM_NOT_MARK" => Some(Self::RetItemNotMark),
            "RET_ITEN_TURN_FOOD_NOT_SET" => Some(Self::RetItenTurnFoodNotSet),
            "RET_ITEM_TURN_FOOD_ALREADY_SET" => Some(Self::RetItemTurnFoodAlreadySet),
            "RET_ITEM_TURN_FOOD_CONSUME_TYPE_ERROR" => {
                Some(Self::RetItemTurnFoodConsumeTypeError)
            }
            "RET_ITEM_TURN_FOOD_SWITCH_ALREADY_OPEN" => {
                Some(Self::RetItemTurnFoodSwitchAlreadyOpen)
            }
            "RET_ITEM_TURN_FOOD_SWITCH_ALREADY_CLOSE" => {
                Some(Self::RetItemTurnFoodSwitchAlreadyClose)
            }
            "RET_HCOIN_EXCHANGE_TOO_MUCH" => Some(Self::RetHcoinExchangeTooMuch),
            "RET_ITEM_TURN_FOOD_SCENE_TYPE_ERROR" => {
                Some(Self::RetItemTurnFoodSceneTypeError)
            }
            "RET_EQUIPMENT_ALREADY_DRESSED" => Some(Self::RetEquipmentAlreadyDressed),
            "RET_EQUIPMENT_NOT_EXIST" => Some(Self::RetEquipmentNotExist),
            "RET_EQUIPMENT_REACH_LEVEL_LIMIT" => Some(Self::RetEquipmentReachLevelLimit),
            "RET_EQUIPMENT_CONSUME_SELF" => Some(Self::RetEquipmentConsumeSelf),
            "RET_EQUIPMENT_ALREADY_LOCKED" => Some(Self::RetEquipmentAlreadyLocked),
            "RET_EQUIPMENT_ALREADY_UNLOCKED" => Some(Self::RetEquipmentAlreadyUnlocked),
            "RET_EQUIPMENT_LOCKED" => Some(Self::RetEquipmentLocked),
            "RET_EQUIPMENT_SELECT_NUM_OVER_LIMIT" => {
                Some(Self::RetEquipmentSelectNumOverLimit)
            }
            "RET_EQUIPMENT_RANK_UP_MUST_CONSUME_SAME_TID" => {
                Some(Self::RetEquipmentRankUpMustConsumeSameTid)
            }
            "RET_EQUIPMENT_PROMOTION_REACH_MAX" => {
                Some(Self::RetEquipmentPromotionReachMax)
            }
            "RET_EQUIPMENT_RANK_UP_REACH_MAX" => Some(Self::RetEquipmentRankUpReachMax),
            "RET_EQUIPMENT_LEVEL_REACH_MAX" => Some(Self::RetEquipmentLevelReachMax),
            "RET_EQUIPMENT_EXCEED_LIMIT" => Some(Self::RetEquipmentExceedLimit),
            "RET_RELIC_NOT_EXIST" => Some(Self::RetRelicNotExist),
            "RET_RELIC_REACH_LEVEL_LIMIT" => Some(Self::RetRelicReachLevelLimit),
            "RET_RELIC_CONSUME_SELF" => Some(Self::RetRelicConsumeSelf),
            "RET_RELIC_ALREADY_DRESSED" => Some(Self::RetRelicAlreadyDressed),
            "RET_RELIC_LOCKED" => Some(Self::RetRelicLocked),
            "RET_RELIC_ALREADY_LOCKED" => Some(Self::RetRelicAlreadyLocked),
            "RET_RELIC_ALREADY_UNLOCKED" => Some(Self::RetRelicAlreadyUnlocked),
            "RET_RELIC_LEVEL_IS_NOT_ZERO" => Some(Self::RetRelicLevelIsNotZero),
            "RET_UNIQUE_ID_REPEATED" => Some(Self::RetUniqueIdRepeated),
            "RET_EQUIPMENT_LEVEL_NOT_MEET" => Some(Self::RetEquipmentLevelNotMeet),
            "RET_EQUIPMENT_ITEM_NOT_IN_COST_LIST" => {
                Some(Self::RetEquipmentItemNotInCostList)
            }
            "RET_EQUIPMENT_LEVEL_GREATER_THAN_ONE" => {
                Some(Self::RetEquipmentLevelGreaterThanOne)
            }
            "RET_EQUIPMENT_ALREADY_RANKED" => Some(Self::RetEquipmentAlreadyRanked),
            "RET_RELIC_EXCEED_LIMIT" => Some(Self::RetRelicExceedLimit),
            "RET_RELIC_ALREADY_DISCARDED" => Some(Self::RetRelicAlreadyDiscarded),
            "RET_RELIC_ALREADY_UNDISCARDED" => Some(Self::RetRelicAlreadyUndiscarded),
            "RET_EQUIPMENT_BATCH_LOCK_TOO_FAST" => {
                Some(Self::RetEquipmentBatchLockTooFast)
            }
            "RET_RELIC_FILTER_PLAN_SLOT_EMPTY" => Some(Self::RetRelicFilterPlanSlotEmpty),
            "RET_RELIC_FILTER_PLAN_NUM_EXCEED_LIMIT" => {
                Some(Self::RetRelicFilterPlanNumExceedLimit)
            }
            "RET_RELIC_FILTER_PLAN_NAME_UTF8_ERROR" => {
                Some(Self::RetRelicFilterPlanNameUtf8Error)
            }
            "RET_RELIC_FILTER_PLAN_NAME_FORMAT_ERROR" => {
                Some(Self::RetRelicFilterPlanNameFormatError)
            }
            "RET_RELIC_FILTER_PLAN_NO_CHANGE" => Some(Self::RetRelicFilterPlanNoChange),
            "RET_RELIC_REFORGE_NOT_CONFIRMED" => Some(Self::RetRelicReforgeNotConfirmed),
            "RET_LINEUP_INVALID_INDEX" => Some(Self::RetLineupInvalidIndex),
            "RET_LINEUP_INVALID_MEMBER_POS" => Some(Self::RetLineupInvalidMemberPos),
            "RET_LINEUP_SWAP_NOT_EXIST" => Some(Self::RetLineupSwapNotExist),
            "RET_LINEUP_AVATAR_ALREADY_IN" => Some(Self::RetLineupAvatarAlreadyIn),
            "RET_LINEUP_CREATE_AVATAR_ERROR" => Some(Self::RetLineupCreateAvatarError),
            "RET_LINEUP_AVATAR_INIT_ERROR" => Some(Self::RetLineupAvatarInitError),
            "RET_LINEUP_NOT_EXIST" => Some(Self::RetLineupNotExist),
            "RET_LINEUP_ONLY_ONE_MEMBER" => Some(Self::RetLineupOnlyOneMember),
            "RET_LINEUP_SAME_LEADER_SLOT" => Some(Self::RetLineupSameLeaderSlot),
            "RET_LINEUP_NO_LEADER_SELECT" => Some(Self::RetLineupNoLeaderSelect),
            "RET_LINEUP_SWAP_SAME_SLOT" => Some(Self::RetLineupSwapSameSlot),
            "RET_LINEUP_AVATAR_NOT_EXIST" => Some(Self::RetLineupAvatarNotExist),
            "RET_LINEUP_TRIAL_AVATAR_CAN_NOT_QUIT" => {
                Some(Self::RetLineupTrialAvatarCanNotQuit)
            }
            "RET_LINEUP_VIRTUAL_LINEUP_PLANE_NOT_MATCH" => {
                Some(Self::RetLineupVirtualLineupPlaneNotMatch)
            }
            "RET_LINEUP_NOT_VALID_LEADER" => Some(Self::RetLineupNotValidLeader),
            "RET_LINEUP_SAME_INDEX" => Some(Self::RetLineupSameIndex),
            "RET_LINEUP_IS_EMPTY" => Some(Self::RetLineupIsEmpty),
            "RET_LINEUP_NAME_FORMAT_ERROR" => Some(Self::RetLineupNameFormatError),
            "RET_LINEUP_TYPE_NOT_MATCH" => Some(Self::RetLineupTypeNotMatch),
            "RET_LINEUP_REPLACE_ALL_FAILED" => Some(Self::RetLineupReplaceAllFailed),
            "RET_LINEUP_NOT_ALLOW_EDIT" => Some(Self::RetLineupNotAllowEdit),
            "RET_LINEUP_AVATAR_IS_ALIVE" => Some(Self::RetLineupAvatarIsAlive),
            "RET_LINEUP_ASSIST_HAS_ONLY_MEMBER" => {
                Some(Self::RetLineupAssistHasOnlyMember)
            }
            "RET_LINEUP_ASSIST_CANNOT_SWITCH" => Some(Self::RetLineupAssistCannotSwitch),
            "RET_LINEUP_AVATAR_TYPE_INVALID" => Some(Self::RetLineupAvatarTypeInvalid),
            "RET_LINEUP_NAME_UTF8_ERROR" => Some(Self::RetLineupNameUtf8Error),
            "RET_LINEUP_LEADER_LOCK" => Some(Self::RetLineupLeaderLock),
            "RET_LINEUP_STORY_LINE_NOT_MATCH" => Some(Self::RetLineupStoryLineNotMatch),
            "RET_LINEUP_AVATAR_LOCK" => Some(Self::RetLineupAvatarLock),
            "RET_LINEUP_AVATAR_INVALID" => Some(Self::RetLineupAvatarInvalid),
            "RET_LINEUP_AVATAR_ALREADY_INIT" => Some(Self::RetLineupAvatarAlreadyInit),
            "RET_LINEUP_LIMITED" => Some(Self::RetLineupLimited),
            "RET_MAIL_NOT_EXIST" => Some(Self::RetMailNotExist),
            "RET_MAIL_RANGE_INVALID" => Some(Self::RetMailRangeInvalid),
            "RET_MAIL_MAIL_ID_INVALID" => Some(Self::RetMailMailIdInvalid),
            "RET_MAIL_NO_MAIL_TAKE_ATTACHMENT" => Some(Self::RetMailNoMailTakeAttachment),
            "RET_MAIL_NO_MAIL_TO_DEL" => Some(Self::RetMailNoMailToDel),
            "RET_MAIL_TYPE_INVALID" => Some(Self::RetMailTypeInvalid),
            "RET_MAIL_PARA_INVALID" => Some(Self::RetMailParaInvalid),
            "RET_MAIL_ATTACHEMENT_INVALID" => Some(Self::RetMailAttachementInvalid),
            "RET_MAIL_TICKET_INVALID" => Some(Self::RetMailTicketInvalid),
            "RET_MAIL_TICKET_REPEATED" => Some(Self::RetMailTicketRepeated),
            "RET_STAGE_SETTLE_ERROR" => Some(Self::RetStageSettleError),
            "RET_STAGE_CONFIG_NOT_EXIST" => Some(Self::RetStageConfigNotExist),
            "RET_STAGE_NOT_FOUND" => Some(Self::RetStageNotFound),
            "RET_STAGE_COCOON_PROP_NOT_VALID" => Some(Self::RetStageCocoonPropNotValid),
            "RET_STAGE_COCOON_WAVE_NOT_VALID" => Some(Self::RetStageCocoonWaveNotValid),
            "RET_STAGE_PROP_ID_NOT_EQUAL" => Some(Self::RetStagePropIdNotEqual),
            "RET_STAGE_COCOON_WAVE_OVER" => Some(Self::RetStageCocoonWaveOver),
            "RET_STAGE_WEEK_COCOON_OVER_CNT" => Some(Self::RetStageWeekCocoonOverCnt),
            "RET_STAGE_COCOON_NOT_OPEN" => Some(Self::RetStageCocoonNotOpen),
            "RET_STAGE_TRIAL_NOT_OPEN" => Some(Self::RetStageTrialNotOpen),
            "RET_STAGE_FARM_NOT_OPEN" => Some(Self::RetStageFarmNotOpen),
            "RET_STAGE_FARM_TYPE_ERROR" => Some(Self::RetStageFarmTypeError),
            "RET_CHAPTER_LOCK" => Some(Self::RetChapterLock),
            "RET_CHAPTER_CHALLENGE_NUM_NOT_ENOUGH" => {
                Some(Self::RetChapterChallengeNumNotEnough)
            }
            "RET_CHAPTER_REWARD_ID_NOT_EXIST" => Some(Self::RetChapterRewardIdNotExist),
            "RET_CHAPTER_REWARD_ALREADY_TAKEN" => {
                Some(Self::RetChapterRewardAlreadyTaken)
            }
            "RET_BATTLE_STAGE_NOT_MATCH" => Some(Self::RetBattleStageNotMatch),
            "RET_IN_BATTLE_NOW" => Some(Self::RetInBattleNow),
            "RET_BATTLE_CHEAT" => Some(Self::RetBattleCheat),
            "RET_BATTLE_FAIL" => Some(Self::RetBattleFail),
            "RET_BATTLE_NO_LINEUP" => Some(Self::RetBattleNoLineup),
            "RET_BATTLE_LINEUP_EMPTY" => Some(Self::RetBattleLineupEmpty),
            "RET_BATTLE_VERSION_NOT_MATCH" => Some(Self::RetBattleVersionNotMatch),
            "RET_BATTLE_QUIT_BY_SERVER" => Some(Self::RetBattleQuitByServer),
            "RET_IN_BATTLE_CHECK" => Some(Self::RetInBattleCheck),
            "RET_BATTLE_CHECK_NEED_RETRY" => Some(Self::RetBattleCheckNeedRetry),
            "RET_BATTLE_COST_TIME_CHECK_FAIL" => Some(Self::RetBattleCostTimeCheckFail),
            "RET_LACK_EXCHANGE_STAMINA_TIMES" => Some(Self::RetLackExchangeStaminaTimes),
            "RET_LACK_STAMINA" => Some(Self::RetLackStamina),
            "RET_STAMINA_FULL" => Some(Self::RetStaminaFull),
            "RET_AUTHKEY_SIGN_TYPE_ERROR" => Some(Self::RetAuthkeySignTypeError),
            "RET_AUTHKEY_SIGN_VER_ERROR" => Some(Self::RetAuthkeySignVerError),
            "RET_NICKNAME_FORMAT_ERROR" => Some(Self::RetNicknameFormatError),
            "RET_SENSITIVE_WORDS" => Some(Self::RetSensitiveWords),
            "RET_LEVEL_REWARD_HAS_TAKEN" => Some(Self::RetLevelRewardHasTaken),
            "RET_LEVEL_REWARD_LEVEL_ERROR" => Some(Self::RetLevelRewardLevelError),
            "RET_LANGUAGE_INVALID" => Some(Self::RetLanguageInvalid),
            "RET_NICKNAME_IN_CD" => Some(Self::RetNicknameInCd),
            "RET_GAMEPLAY_BIRTHDAY_INVALID" => Some(Self::RetGameplayBirthdayInvalid),
            "RET_GAMEPLAY_BIRTHDAY_ALREADY_SET" => {
                Some(Self::RetGameplayBirthdayAlreadySet)
            }
            "RET_NICKNAME_UTF8_ERROR" => Some(Self::RetNicknameUtf8Error),
            "RET_NICKNAME_DIGIT_LIMIT_ERROR" => Some(Self::RetNicknameDigitLimitError),
            "RET_SENSITIVE_WORDS_PLATFORM_ERROR" => {
                Some(Self::RetSensitiveWordsPlatformError)
            }
            "RET_PLAYER_SETTING_TYPE_INVALID" => Some(Self::RetPlayerSettingTypeInvalid),
            "RET_MAZE_LACK_TICKET" => Some(Self::RetMazeLackTicket),
            "RET_MAZE_NOT_UNLOCK" => Some(Self::RetMazeNotUnlock),
            "RET_MAZE_NO_ABILITY" => Some(Self::RetMazeNoAbility),
            "RET_MAZE_NO_PLANE" => Some(Self::RetMazeNoPlane),
            "RET_MAZE_MAP_NOT_EXIST" => Some(Self::RetMazeMapNotExist),
            "RET_MAZE_MP_NOT_ENOUGH" => Some(Self::RetMazeMpNotEnough),
            "RET_SPRING_NOT_ENABLE" => Some(Self::RetSpringNotEnable),
            "RET_SPRING_TOO_FAR" => Some(Self::RetSpringTooFar),
            "RET_NOT_IN_MAZE" => Some(Self::RetNotInMaze),
            "RET_MAZE_TIME_OF_DAY_TYPE_ERROR" => Some(Self::RetMazeTimeOfDayTypeError),
            "RET_SCENE_TRANSFER_LOCKED_BY_TASK" => {
                Some(Self::RetSceneTransferLockedByTask)
            }
            "RET_PLOT_NOT_UNLOCK" => Some(Self::RetPlotNotUnlock),
            "RET_MISSION_NOT_EXIST" => Some(Self::RetMissionNotExist),
            "RET_MISSION_ALREADY_DONE" => Some(Self::RetMissionAlreadyDone),
            "RET_DAILY_TASK_NOT_FINISH" => Some(Self::RetDailyTaskNotFinish),
            "RET_DAILY_TASK_REWARD_HAS_TAKEN" => Some(Self::RetDailyTaskRewardHasTaken),
            "RET_MISSION_NOT_FINISH" => Some(Self::RetMissionNotFinish),
            "RET_MISSION_NOT_DOING" => Some(Self::RetMissionNotDoing),
            "RET_MISSION_FINISH_WAY_NOT_MATCH" => Some(Self::RetMissionFinishWayNotMatch),
            "RET_MISSION_SCENE_NOT_MATCH" => Some(Self::RetMissionSceneNotMatch),
            "RET_MISSION_CUSTOM_VALUE_NOT_VALID" => {
                Some(Self::RetMissionCustomValueNotValid)
            }
            "RET_MISSION_SUB_MISSION_NOT_MATCH" => {
                Some(Self::RetMissionSubMissionNotMatch)
            }
            "RET_ADVENTURE_MAP_NOT_EXIST" => Some(Self::RetAdventureMapNotExist),
            "RET_SCENE_ENTITY_NOT_EXIST" => Some(Self::RetSceneEntityNotExist),
            "RET_NOT_IN_SCENE" => Some(Self::RetNotInScene),
            "RET_SCENE_MONSTER_NOT_EXIST" => Some(Self::RetSceneMonsterNotExist),
            "RET_INTERACT_CONFIG_NOT_EXIST" => Some(Self::RetInteractConfigNotExist),
            "RET_UNSUPPORTED_PROP_STATE" => Some(Self::RetUnsupportedPropState),
            "RET_SCENE_ENTRY_ID_NOT_MATCH" => Some(Self::RetSceneEntryIdNotMatch),
            "RET_SCENE_ENTITY_MOVE_CHECK_FAILED" => {
                Some(Self::RetSceneEntityMoveCheckFailed)
            }
            "RET_ASSIST_MONSTER_COUNT_LIMIT" => Some(Self::RetAssistMonsterCountLimit),
            "RET_SCENE_USE_SKILL_FAIL" => Some(Self::RetSceneUseSkillFail),
            "RET_PROP_IS_HIDDEN" => Some(Self::RetPropIsHidden),
            "RET_LOADING_SUCC_ALREADY" => Some(Self::RetLoadingSuccAlready),
            "RET_SCENE_ENTITY_TYPE_INVALID" => Some(Self::RetSceneEntityTypeInvalid),
            "RET_INTERACT_TYPE_INVALID" => Some(Self::RetInteractTypeInvalid),
            "RET_INTERACT_NOT_IN_REGION" => Some(Self::RetInteractNotInRegion),
            "RET_INTERACT_SUB_TYPE_INVALID" => Some(Self::RetInteractSubTypeInvalid),
            "RET_NOT_LEADER_ENTITY" => Some(Self::RetNotLeaderEntity),
            "RET_MONSTER_IS_NOT_FARM_ELEMENT" => Some(Self::RetMonsterIsNotFarmElement),
            "RET_MONSTER_CONFIG_NOT_EXIST" => Some(Self::RetMonsterConfigNotExist),
            "RET_AVATAR_HP_ALREADY_FULL" => Some(Self::RetAvatarHpAlreadyFull),
            "RET_CUR_INTERACT_ENTITY_NOT_MATCH" => {
                Some(Self::RetCurInteractEntityNotMatch)
            }
            "RET_PLANE_TYPE_NOT_ALLOW" => Some(Self::RetPlaneTypeNotAllow),
            "RET_GROUP_NOT_EXIST" => Some(Self::RetGroupNotExist),
            "RET_GROUP_SAVE_DATA_IN_CD" => Some(Self::RetGroupSaveDataInCd),
            "RET_GROUP_SAVE_LENGH_REACH_MAX" => Some(Self::RetGroupSaveLenghReachMax),
            "RET_RECENT_ELEMENT_NOT_EXIST" => Some(Self::RetRecentElementNotExist),
            "RET_RECENT_ELEMENT_STAGE_NOT_MATCH" => {
                Some(Self::RetRecentElementStageNotMatch)
            }
            "RET_SCENE_POSITION_VERSION_NOT_MATCH" => {
                Some(Self::RetScenePositionVersionNotMatch)
            }
            "RET_GAMEPLAY_COUNTER_NOT_EXIST" => Some(Self::RetGameplayCounterNotExist),
            "RET_GAMEPLAY_COUNTER_NOT_ENOUGH" => Some(Self::RetGameplayCounterNotEnough),
            "RET_GROUP_STATE_NOT_MATCH" => Some(Self::RetGroupStateNotMatch),
            "RET_SCENE_ENTITY_POS_NOT_MATCH" => Some(Self::RetSceneEntityPosNotMatch),
            "RET_GROUP_STATE_CUSTOM_SAVE_DATA_OFF" => {
                Some(Self::RetGroupStateCustomSaveDataOff)
            }
            "RET_SCENE_NOT_MATCH" => Some(Self::RetSceneNotMatch),
            "RET_PROP_TYPE_INVALID" => Some(Self::RetPropTypeInvalid),
            "RET_BUY_TIMES_LIMIT" => Some(Self::RetBuyTimesLimit),
            "RET_BUY_LIMIT_TYPE" => Some(Self::RetBuyLimitType),
            "RET_SHOP_NOT_OPEN" => Some(Self::RetShopNotOpen),
            "RET_GOODS_NOT_OPEN" => Some(Self::RetGoodsNotOpen),
            "RET_CITY_LEVEL_REWARD_TAKEN" => Some(Self::RetCityLevelRewardTaken),
            "RET_CITY_LEVEL_NOT_MEET" => Some(Self::RetCityLevelNotMeet),
            "RET_SINGLE_BUY_LIMIT" => Some(Self::RetSingleBuyLimit),
            "RET_TUTORIAL_NOT_UNLOCK" => Some(Self::RetTutorialNotUnlock),
            "RET_TUTORIAL_UNLOCK_ALREADY" => Some(Self::RetTutorialUnlockAlready),
            "RET_TUTORIAL_FINISH_ALREADY" => Some(Self::RetTutorialFinishAlready),
            "RET_TUTORIAL_PRE_NOT_UNLOCK" => Some(Self::RetTutorialPreNotUnlock),
            "RET_TUTORIAL_PLAYER_LEVEL_NOT_MATCH" => {
                Some(Self::RetTutorialPlayerLevelNotMatch)
            }
            "RET_TUTORIAL_TUTORIAL_NOT_FOUND" => Some(Self::RetTutorialTutorialNotFound),
            "RET_CHALLENGE_NOT_EXIST" => Some(Self::RetChallengeNotExist),
            "RET_CHALLENGE_NOT_UNLOCK" => Some(Self::RetChallengeNotUnlock),
            "RET_CHALLENGE_ALREADY" => Some(Self::RetChallengeAlready),
            "RET_CHALLENGE_LINEUP_EDIT_FORBIDDEN" => {
                Some(Self::RetChallengeLineupEditForbidden)
            }
            "RET_CHALLENGE_LINEUP_EMPTY" => Some(Self::RetChallengeLineupEmpty),
            "RET_CHALLENGE_NOT_DOING" => Some(Self::RetChallengeNotDoing),
            "RET_CHALLENGE_NOT_FINISH" => Some(Self::RetChallengeNotFinish),
            "RET_CHALLENGE_TARGET_NOT_FINISH" => Some(Self::RetChallengeTargetNotFinish),
            "RET_CHALLENGE_TARGET_REWARD_TAKEN" => {
                Some(Self::RetChallengeTargetRewardTaken)
            }
            "RET_CHALLENGE_TIME_NOT_VALID" => Some(Self::RetChallengeTimeNotValid),
            "RET_CHALLENGE_STARS_COUNT_NOT_MEET" => {
                Some(Self::RetChallengeStarsCountNotMeet)
            }
            "RET_CHALLENGE_STARS_REWARD_TAKEN" => {
                Some(Self::RetChallengeStarsRewardTaken)
            }
            "RET_CHALLENGE_STARS_NOT_EXIST" => Some(Self::RetChallengeStarsNotExist),
            "RET_CHALLENGE_CUR_SCENE_NOT_ENTRY_FLOOR" => {
                Some(Self::RetChallengeCurSceneNotEntryFloor)
            }
            "RET_CHALLENGE_NO_TEAM_ARCHIVE" => Some(Self::RetChallengeNoTeamArchive),
            "RET_CHALLENGE_LINEUP_AVATAR_TYPE_INVALID" => {
                Some(Self::RetChallengeLineupAvatarTypeInvalid)
            }
            "RET_CHALLENGE_LINEUP_RECOMMEND_IN_CD" => {
                Some(Self::RetChallengeLineupRecommendInCd)
            }
            "RET_BASIC_TYPE_ALREADY" => Some(Self::RetBasicTypeAlready),
            "RET_NO_BASIC_TYPE" => Some(Self::RetNoBasicType),
            "RET_NOT_CHOOSE_BASIC_TYPE" => Some(Self::RetNotChooseBasicType),
            "RET_NOT_FUNC_CLOSE" => Some(Self::RetNotFuncClose),
            "RET_NOT_CHOOSE_GENDER" => Some(Self::RetNotChooseGender),
            "RET_NOT_REQ_UNLOCK_BASIC_TYPE" => Some(Self::RetNotReqUnlockBasicType),
            "RET_AVATAR_PATH_LOCKED" => Some(Self::RetAvatarPathLocked),
            "RET_ROGUE_STATUS_NOT_MATCH" => Some(Self::RetRogueStatusNotMatch),
            "RET_ROGUE_SELECT_BUFF_NOT_EXIST" => Some(Self::RetRogueSelectBuffNotExist),
            "RET_ROGUE_COIN_NOT_ENOUGH" => Some(Self::RetRogueCoinNotEnough),
            "RET_ROGUE_STAMINA_NOT_ENOUGH" => Some(Self::RetRogueStaminaNotEnough),
            "RET_ROGUE_APPRAISAL_COUNT_NOT_ENOUGH" => {
                Some(Self::RetRogueAppraisalCountNotEnough)
            }
            "RET_ROGUE_PROP_ALREADY_USED" => Some(Self::RetRoguePropAlreadyUsed),
            "RET_ROGUE_RECORD_ALREADY_SAVED" => Some(Self::RetRogueRecordAlreadySaved),
            "RET_ROGUE_ROLL_BUFF_MAX_COUNT" => Some(Self::RetRogueRollBuffMaxCount),
            "RET_ROGUE_PICK_AVATAR_INVALID" => Some(Self::RetRoguePickAvatarInvalid),
            "RET_ROGUE_QUEST_EXPIRE" => Some(Self::RetRogueQuestExpire),
            "RET_ROGUE_QUEST_REWARD_ALREADY" => Some(Self::RetRogueQuestRewardAlready),
            "RET_ROGUE_REVIVE_COUNT_NOT_ENOUGH" => {
                Some(Self::RetRogueReviveCountNotEnough)
            }
            "RET_ROGUE_AREA_INVALID" => Some(Self::RetRogueAreaInvalid),
            "RET_ROGUE_SCORE_REWARD_POOL_INVALID" => {
                Some(Self::RetRogueScoreRewardPoolInvalid)
            }
            "RET_ROGUE_SCORE_REWARD_ROW_INVALID" => {
                Some(Self::RetRogueScoreRewardRowInvalid)
            }
            "RET_ROGUE_AEON_LEVEL_NOT_MEET" => Some(Self::RetRogueAeonLevelNotMeet),
            "RET_ROGUE_AEON_LEVEL_REWARD_ALREADY_TAKEN" => {
                Some(Self::RetRogueAeonLevelRewardAlreadyTaken)
            }
            "RET_ROGUE_AEON_CONFIG_NOT_EXIST" => Some(Self::RetRogueAeonConfigNotExist),
            "RET_ROGUE_TRIAL_AVATAR_INVALID" => Some(Self::RetRogueTrialAvatarInvalid),
            "RET_ROGUE_HANDBOOK_REWARD_ALREADY_TAKEN" => {
                Some(Self::RetRogueHandbookRewardAlreadyTaken)
            }
            "RET_ROGUE_ROOM_TYPE_NOT_MATCH" => Some(Self::RetRogueRoomTypeNotMatch),
            "RET_ROGUE_SHOP_GOOD_NOT_FOUND" => Some(Self::RetRogueShopGoodNotFound),
            "RET_ROGUE_SHOP_GOOD_ALREADY_BOUGHT" => {
                Some(Self::RetRogueShopGoodAlreadyBought)
            }
            "RET_ROGUE_SHOP_GOOD_ALREADY_OWN" => Some(Self::RetRogueShopGoodAlreadyOwn),
            "RET_ROGUE_SHOP_MIRACLE_NOT_EXIST" => Some(Self::RetRogueShopMiracleNotExist),
            "RET_ROGUE_SHOP_NOT_EXIST" => Some(Self::RetRogueShopNotExist),
            "RET_ROGUE_SHOP_CANNOT_REFRESH" => Some(Self::RetRogueShopCannotRefresh),
            "RET_ROGUE_SELECT_BUFF_CERTAIN_MISMATCH" => {
                Some(Self::RetRogueSelectBuffCertainMismatch)
            }
            "RET_ROGUE_ACTION_QUEUE_NOT_EMPTY_BATTLE" => {
                Some(Self::RetRogueActionQueueNotEmptyBattle)
            }
            "RET_ROGUE_ACTION_QUEUE_NOT_EMPTY_OTHERS" => {
                Some(Self::RetRogueActionQueueNotEmptyOthers)
            }
            "RET_MISSION_EVENT_CONFIG_NOT_EXIST" => {
                Some(Self::RetMissionEventConfigNotExist)
            }
            "RET_MISSION_EVENT_NOT_CLIENT" => Some(Self::RetMissionEventNotClient),
            "RET_MISSION_EVENT_FINISHED" => Some(Self::RetMissionEventFinished),
            "RET_MISSION_EVENT_DOING" => Some(Self::RetMissionEventDoing),
            "RET_HAS_CHALLENGE_MISSION_EVENT" => Some(Self::RetHasChallengeMissionEvent),
            "RET_NOT_CHALLENGE_MISSION_EVENT" => Some(Self::RetNotChallengeMissionEvent),
            "RET_GACHA_ID_NOT_EXIST" => Some(Self::RetGachaIdNotExist),
            "RET_GACHA_NUM_INVALID" => Some(Self::RetGachaNumInvalid),
            "RET_GACHA_FIRST_GACHA_MUST_ONE" => Some(Self::RetGachaFirstGachaMustOne),
            "RET_GACHA_REQ_DUPLICATED" => Some(Self::RetGachaReqDuplicated),
            "RET_GACHA_NOT_IN_SCHEDULE" => Some(Self::RetGachaNotInSchedule),
            "RET_GACHA_NEWBIE_CLOSE" => Some(Self::RetGachaNewbieClose),
            "RET_GACHA_TODAY_LIMITED" => Some(Self::RetGachaTodayLimited),
            "RET_GACHA_NOT_SUPPORT" => Some(Self::RetGachaNotSupport),
            "RET_GACHA_CEILING_NOT_ENOUGH" => Some(Self::RetGachaCeilingNotEnough),
            "RET_GACHA_CEILING_CLOSE" => Some(Self::RetGachaCeilingClose),
            "RET_NOT_IN_RAID" => Some(Self::RetNotInRaid),
            "RET_RAID_DOING" => Some(Self::RetRaidDoing),
            "RET_NOT_PROP" => Some(Self::RetNotProp),
            "RET_RAID_ID_NOT_MATCH" => Some(Self::RetRaidIdNotMatch),
            "RET_RAID_RESTART_NOT_MATCH" => Some(Self::RetRaidRestartNotMatch),
            "RET_RAID_LIMIT" => Some(Self::RetRaidLimit),
            "RET_RAID_AVATAR_LIST_EMPTY" => Some(Self::RetRaidAvatarListEmpty),
            "RET_RAID_AVATAR_NOT_EXIST" => Some(Self::RetRaidAvatarNotExist),
            "RET_CHALLENGE_RAID_REWARD_ALREADY" => {
                Some(Self::RetChallengeRaidRewardAlready)
            }
            "RET_CHALLENGE_RAID_SCORE_NOT_REACH" => {
                Some(Self::RetChallengeRaidScoreNotReach)
            }
            "RET_CHALLENGE_RAID_NOT_OPEN" => Some(Self::RetChallengeRaidNotOpen),
            "RET_RAID_FINISHED" => Some(Self::RetRaidFinished),
            "RET_RAID_WORLD_LEVEL_NOT_LOCK" => Some(Self::RetRaidWorldLevelNotLock),
            "RET_RAID_CANNOT_USE_ASSIST" => Some(Self::RetRaidCannotUseAssist),
            "RET_RAID_AVATAR_NOT_MATCH" => Some(Self::RetRaidAvatarNotMatch),
            "RET_RAID_CAN_NOT_SAVE" => Some(Self::RetRaidCanNotSave),
            "RET_RAID_NO_SAVE" => Some(Self::RetRaidNoSave),
            "RET_ACTIVITY_RAID_NOT_OPEN" => Some(Self::RetActivityRaidNotOpen),
            "RET_RAID_AVATAR_CAPTAIN_NOT_EXIST" => {
                Some(Self::RetRaidAvatarCaptainNotExist)
            }
            "RET_RAID_STORY_LINE_NOT_MATCH" => Some(Self::RetRaidStoryLineNotMatch),
            "RET_TALK_EVENT_ALREADY_TAKEN" => Some(Self::RetTalkEventAlreadyTaken),
            "RET_NPC_ALREADY_MEET" => Some(Self::RetNpcAlreadyMeet),
            "RET_NPC_NOT_IN_CONFIG" => Some(Self::RetNpcNotInConfig),
            "RET_DIALOGUE_GROUP_DISMATCH" => Some(Self::RetDialogueGroupDismatch),
            "RET_DIALOGUE_EVENT_INVALID" => Some(Self::RetDialogueEventInvalid),
            "RET_TALK_EVENT_TAKE_PROTO_NOT_MATCH" => {
                Some(Self::RetTalkEventTakeProtoNotMatch)
            }
            "RET_TALK_EVENT_NOT_VALID" => Some(Self::RetTalkEventNotValid),
            "RET_EXPEDITION_CONFIG_NOT_EXIST" => Some(Self::RetExpeditionConfigNotExist),
            "RET_EXPEDITION_REWARD_CONFIG_NOT_EXIST" => {
                Some(Self::RetExpeditionRewardConfigNotExist)
            }
            "RET_EXPEDITION_NOT_UNLOCKED" => Some(Self::RetExpeditionNotUnlocked),
            "RET_EXPEDITION_ALREADY_ACCEPTED" => Some(Self::RetExpeditionAlreadyAccepted),
            "RET_EXPEDITION_REPEATED_AVATAR" => Some(Self::RetExpeditionRepeatedAvatar),
            "RET_AVATAR_ALREADY_DISPATCHED" => Some(Self::RetAvatarAlreadyDispatched),
            "RET_EXPEDITION_NOT_ACCEPTED" => Some(Self::RetExpeditionNotAccepted),
            "RET_EXPEDITION_NOT_FINISH" => Some(Self::RetExpeditionNotFinish),
            "RET_EXPEDITION_ALREADY_FINISH" => Some(Self::RetExpeditionAlreadyFinish),
            "RET_EXPEDITION_TEAM_COUNT_LIMIT" => Some(Self::RetExpeditionTeamCountLimit),
            "RET_EXPEDITION_AVATAR_NUM_NOT_MATCH" => {
                Some(Self::RetExpeditionAvatarNumNotMatch)
            }
            "RET_EXPEDITION_NOT_OPEN" => Some(Self::RetExpeditionNotOpen),
            "RET_EXPEDITION_FRIEND_AVATAR_NOT_VALID" => {
                Some(Self::RetExpeditionFriendAvatarNotValid)
            }
            "RET_EXPEDITION_NOT_PUBLISHED" => Some(Self::RetExpeditionNotPublished),
            "RET_LOGIN_ACTIVITY_HAS_TAKEN" => Some(Self::RetLoginActivityHasTaken),
            "RET_LOGIN_ACTIVITY_DAYS_LACK" => Some(Self::RetLoginActivityDaysLack),
            "RET_TRIAL_ACTIVITY_REWARD_ALREADY_TAKE" => {
                Some(Self::RetTrialActivityRewardAlreadyTake)
            }
            "RET_TRIAL_ACTIVITY_STAGE_NOT_FINISH" => {
                Some(Self::RetTrialActivityStageNotFinish)
            }
            "RET_MATERIAL_SUBMIT_ACTIVITY_HAS_TAKEN" => {
                Some(Self::RetMaterialSubmitActivityHasTaken)
            }
            "RET_MATERIAL_SUBMIT_ACTIVITY_MATERIAL_NOT_SUBMITTED" => {
                Some(Self::RetMaterialSubmitActivityMaterialNotSubmitted)
            }
            "RET_MATERIAL_SUBMIT_ACTIVITY_MATERIAL_ALREADY_SUBMITTED" => {
                Some(Self::RetMaterialSubmitActivityMaterialAlreadySubmitted)
            }
            "RET_FANTASTIC_STORY_ACTIVITY_STORY_ERROR" => {
                Some(Self::RetFantasticStoryActivityStoryError)
            }
            "RET_FANTASTIC_STORY_ACTIVITY_STORY_NOT_OPEN" => {
                Some(Self::RetFantasticStoryActivityStoryNotOpen)
            }
            "RET_FANTASTIC_STORY_ACTIVITY_BATTLE_ERROR" => {
                Some(Self::RetFantasticStoryActivityBattleError)
            }
            "RET_FANTASTIC_STORY_ACTIVITY_BATTLE_NOT_OPEN" => {
                Some(Self::RetFantasticStoryActivityBattleNotOpen)
            }
            "RET_FANTASTIC_STORY_ACTIVITY_BATTLE_AVATAR_ERROR" => {
                Some(Self::RetFantasticStoryActivityBattleAvatarError)
            }
            "RET_FANTASTIC_STORY_ACTIVITY_BATTLE_BUFF_ERROR" => {
                Some(Self::RetFantasticStoryActivityBattleBuffError)
            }
            "RET_FANTASTIC_STORY_ACTIVITY_PRE_BATTLE_SCORE_NOT_ENOUGH" => {
                Some(Self::RetFantasticStoryActivityPreBattleScoreNotEnough)
            }
            "RET_TRIAL_ACTIVITY_ALREADY_IN_TRIAL_ACTIVITY" => {
                Some(Self::RetTrialActivityAlreadyInTrialActivity)
            }
            "RET_COMMON_ACTIVITY_NOT_OPEN" => Some(Self::RetCommonActivityNotOpen),
            "RET_BENEFIT_NOT_READY" => Some(Self::RetBenefitNotReady),
            "RET_COMMON_ACTIVITY_BUSY" => Some(Self::RetCommonActivityBusy),
            "RET_MESSAGE_CONFIG_NOT_EXIST" => Some(Self::RetMessageConfigNotExist),
            "RET_MESSAGE_SECTION_NOT_TAKE" => Some(Self::RetMessageSectionNotTake),
            "RET_MESSAGE_GROUP_NOT_TAKE" => Some(Self::RetMessageGroupNotTake),
            "RET_MESSAGE_SECTION_ID_NOT_MATCH" => Some(Self::RetMessageSectionIdNotMatch),
            "RET_MESSAGE_SECTION_CAN_NOT_FINISH" => {
                Some(Self::RetMessageSectionCanNotFinish)
            }
            "RET_MESSAGE_ITEM_CAN_NOT_FINISH" => Some(Self::RetMessageItemCanNotFinish),
            "RET_MESSAGE_ITEM_RAID_CAN_NOT_FINISH" => {
                Some(Self::RetMessageItemRaidCanNotFinish)
            }
            "RET_FRIEND_ALREADY_IS_FRIEND" => Some(Self::RetFriendAlreadyIsFriend),
            "RET_FRIEND_IS_NOT_FRIEND" => Some(Self::RetFriendIsNotFriend),
            "RET_FRIEND_APPLY_EXPIRE" => Some(Self::RetFriendApplyExpire),
            "RET_FRIEND_IN_BLACKLIST" => Some(Self::RetFriendInBlacklist),
            "RET_FRIEND_NOT_IN_BLACKLIST" => Some(Self::RetFriendNotInBlacklist),
            "RET_FRIEND_NUMBER_LIMIT" => Some(Self::RetFriendNumberLimit),
            "RET_FRIEND_BLACKLIST_NUMBER_LIMIT" => {
                Some(Self::RetFriendBlacklistNumberLimit)
            }
            "RET_FRIEND_DAILY_APPLY_LIMIT" => Some(Self::RetFriendDailyApplyLimit),
            "RET_FRIEND_IN_HANDLE_LIMIT" => Some(Self::RetFriendInHandleLimit),
            "RET_FRIEND_APPLY_IN_CD" => Some(Self::RetFriendApplyInCd),
            "RET_FRIEND_REMARK_NAME_FORMAT_ERROR" => {
                Some(Self::RetFriendRemarkNameFormatError)
            }
            "RET_FRIEND_PLAYER_NOT_FOUND" => Some(Self::RetFriendPlayerNotFound),
            "RET_FRIEND_IN_TARGET_BLACKLIST" => Some(Self::RetFriendInTargetBlacklist),
            "RET_FRIEND_TARGET_NUMBER_LIMIT" => Some(Self::RetFriendTargetNumberLimit),
            "RET_ASSIST_QUERY_TOO_FAST" => Some(Self::RetAssistQueryTooFast),
            "RET_ASSIST_NOT_EXIST" => Some(Self::RetAssistNotExist),
            "RET_ASSIST_USED_ALREADY" => Some(Self::RetAssistUsedAlready),
            "RET_FRIEND_REPORT_REASON_FORMAT_ERROR" => {
                Some(Self::RetFriendReportReasonFormatError)
            }
            "RET_FRIEND_REPORT_SENSITIVE_WORDS" => {
                Some(Self::RetFriendReportSensitiveWords)
            }
            "RET_ASSIST_USED_TIMES_OVER" => Some(Self::RetAssistUsedTimesOver),
            "RET_ASSIST_QUIT_ALREADY" => Some(Self::RetAssistQuitAlready),
            "RET_ASSIST_AVATAR_IN_LINEUP" => Some(Self::RetAssistAvatarInLineup),
            "RET_ASSIST_NO_REWARD" => Some(Self::RetAssistNoReward),
            "RET_FRIEND_SEARCH_NUM_LIMIT" => Some(Self::RetFriendSearchNumLimit),
            "RET_FRIEND_SEARCH_IN_CD" => Some(Self::RetFriendSearchInCd),
            "RET_FRIEND_REMARK_NAME_UTF8_ERROR" => {
                Some(Self::RetFriendRemarkNameUtf8Error)
            }
            "RET_FRIEND_REPORT_REASON_UTF8_ERROR" => {
                Some(Self::RetFriendReportReasonUtf8Error)
            }
            "RET_ASSIST_SET_ALREADY" => Some(Self::RetAssistSetAlready),
            "RET_FRIEND_TARGET_FORBID_OTHER_APPLY" => {
                Some(Self::RetFriendTargetForbidOtherApply)
            }
            "RET_FRIEND_MARKED_CNT_MAX" => Some(Self::RetFriendMarkedCntMax),
            "RET_FRIEND_MARKED_ALREADY" => Some(Self::RetFriendMarkedAlready),
            "RET_FRIEND_NOT_MARKED" => Some(Self::RetFriendNotMarked),
            "RET_FRIEND_CHALLENGE_LINEUP_RECOMMEND_IN_CD" => {
                Some(Self::RetFriendChallengeLineupRecommendInCd)
            }
            "RET_VIEW_PLAYER_CARD_IN_CD" => Some(Self::RetViewPlayerCardInCd),
            "RET_VIEW_PLAYER_BATTLE_RECORD_IN_CD" => {
                Some(Self::RetViewPlayerBattleRecordInCd)
            }
            "RET_PLAYER_BOARD_HEAD_ICON_NOT_EXIST" => {
                Some(Self::RetPlayerBoardHeadIconNotExist)
            }
            "RET_PLAYER_BOARD_HEAD_ICON_LOCKED" => {
                Some(Self::RetPlayerBoardHeadIconLocked)
            }
            "RET_PLAYER_BOARD_HEAD_ICON_ALREADY_UNLOCKED" => {
                Some(Self::RetPlayerBoardHeadIconAlreadyUnlocked)
            }
            "RET_PLAYER_BOARD_DISPLAY_AVATAR_NOT_EXIST" => {
                Some(Self::RetPlayerBoardDisplayAvatarNotExist)
            }
            "RET_PLAYER_BOARD_DISPLAY_AVATAR_EXCEED_LIMIT" => {
                Some(Self::RetPlayerBoardDisplayAvatarExceedLimit)
            }
            "RET_PLAYER_BOARD_DISPLAY_REPEATED_AVATAR" => {
                Some(Self::RetPlayerBoardDisplayRepeatedAvatar)
            }
            "RET_PLAYER_BOARD_DISPLAY_AVATAR_SAME_POS" => {
                Some(Self::RetPlayerBoardDisplayAvatarSamePos)
            }
            "RET_PLAYER_BOARD_DISPLAY_AVATAR_LOCKED" => {
                Some(Self::RetPlayerBoardDisplayAvatarLocked)
            }
            "RET_SIGNATURE_LENGTH_EXCEED_LIMIT" => {
                Some(Self::RetSignatureLengthExceedLimit)
            }
            "RET_SIGNATURE_SENSITIVE_WORDS" => Some(Self::RetSignatureSensitiveWords),
            "RET_PLAYER_BOARD_ASSIST_AVATAR_NOT_EXIST" => {
                Some(Self::RetPlayerBoardAssistAvatarNotExist)
            }
            "RET_PLAYER_BOARD_ASSIST_AVATAR_LOCKED" => {
                Some(Self::RetPlayerBoardAssistAvatarLocked)
            }
            "RET_SIGNATURE_UTF8_ERROR" => Some(Self::RetSignatureUtf8Error),
            "RET_PLAYER_BOARD_ASSIST_AVATAR_CNT_ERROR" => {
                Some(Self::RetPlayerBoardAssistAvatarCntError)
            }
            "RET_BATTLE_PASS_TIER_NOT_VALID" => Some(Self::RetBattlePassTierNotValid),
            "RET_BATTLE_PASS_LEVEL_NOT_MEET" => Some(Self::RetBattlePassLevelNotMeet),
            "RET_BATTLE_PASS_REWARD_TAKE_ALREADY" => {
                Some(Self::RetBattlePassRewardTakeAlready)
            }
            "RET_BATTLE_PASS_NOT_PREMIUM" => Some(Self::RetBattlePassNotPremium),
            "RET_BATTLE_PASS_NOT_DOING" => Some(Self::RetBattlePassNotDoing),
            "RET_BATTLE_PASS_LEVEL_INVALID" => Some(Self::RetBattlePassLevelInvalid),
            "RET_BATTLE_PASS_NOT_UNLOCK" => Some(Self::RetBattlePassNotUnlock),
            "RET_BATTLE_PASS_NO_REWARD" => Some(Self::RetBattlePassNoReward),
            "RET_BATTLE_PASS_QUEST_NOT_VALID" => Some(Self::RetBattlePassQuestNotValid),
            "RET_BATTLE_PASS_NOT_CHOOSE_OPTIONAL" => {
                Some(Self::RetBattlePassNotChooseOptional)
            }
            "RET_BATTLE_PASS_NOT_TAKE_REWARD" => Some(Self::RetBattlePassNotTakeReward),
            "RET_BATTLE_PASS_OPTIONAL_NOT_VALID" => {
                Some(Self::RetBattlePassOptionalNotValid)
            }
            "RET_BATTLE_PASS_BUY_ALREADY" => Some(Self::RetBattlePassBuyAlready),
            "RET_BATTLE_PASS_NEAR_END" => Some(Self::RetBattlePassNearEnd),
            "RET_MUSIC_LOCKED" => Some(Self::RetMusicLocked),
            "RET_MUSIC_NOT_EXIST" => Some(Self::RetMusicNotExist),
            "RET_MUSIC_UNLOCK_FAILED" => Some(Self::RetMusicUnlockFailed),
            "RET_PUNK_LORD_LACK_SUMMON_TIMES" => Some(Self::RetPunkLordLackSummonTimes),
            "RET_PUNK_LORD_ATTACKING_MONSTER_LIMIT" => {
                Some(Self::RetPunkLordAttackingMonsterLimit)
            }
            "RET_PUNK_LORD_MONSTER_NOT_EXIST" => Some(Self::RetPunkLordMonsterNotExist),
            "RET_PUNK_LORD_MONSTER_ALREADY_SHARED" => {
                Some(Self::RetPunkLordMonsterAlreadyShared)
            }
            "RET_PUNK_LORD_MONSTER_EXPIRED" => Some(Self::RetPunkLordMonsterExpired),
            "RET_PUNK_LORD_SELF_MONSTER_ATTACK_LIMIT" => {
                Some(Self::RetPunkLordSelfMonsterAttackLimit)
            }
            "RET_PUNK_LORD_LACK_SUPPORT_TIMES" => Some(Self::RetPunkLordLackSupportTimes),
            "RET_PUNK_LORD_MONSTER_ALREADY_KILLED" => {
                Some(Self::RetPunkLordMonsterAlreadyKilled)
            }
            "RET_PUNK_LORD_MONSTER_ATTACKER_LIMIT" => {
                Some(Self::RetPunkLordMonsterAttackerLimit)
            }
            "RET_PUNK_LORD_WORLD_LEVLE_NOT_VALID" => {
                Some(Self::RetPunkLordWorldLevleNotValid)
            }
            "RET_PUNK_LORD_REWARD_LEVLE_NOT_EXIST" => {
                Some(Self::RetPunkLordRewardLevleNotExist)
            }
            "RET_PUNK_LORD_POINT_NOT_MEET" => Some(Self::RetPunkLordPointNotMeet),
            "RET_PUNK_LORD_IN_ATTACKING" => Some(Self::RetPunkLordInAttacking),
            "RET_PUNK_LORD_OPERATION_IN_CD" => Some(Self::RetPunkLordOperationInCd),
            "RET_PUNK_LORD_REWARD_ALREADY_TAKEN" => {
                Some(Self::RetPunkLordRewardAlreadyTaken)
            }
            "RET_PUNK_LORD_OVER_BONUS_REWARD_LIMIT" => {
                Some(Self::RetPunkLordOverBonusRewardLimit)
            }
            "RET_PUNK_LORD_NOT_IN_SCHEDULE" => Some(Self::RetPunkLordNotInSchedule),
            "RET_PUNK_LORD_MONSTER_NOT_ATTACKED" => {
                Some(Self::RetPunkLordMonsterNotAttacked)
            }
            "RET_PUNK_LORD_MONSTER_NOT_KILLED" => Some(Self::RetPunkLordMonsterNotKilled),
            "RET_PUNK_LORD_MONSTER_KILLED_SCORE_ALREADY_TAKE" => {
                Some(Self::RetPunkLordMonsterKilledScoreAlreadyTake)
            }
            "RET_PUNK_LORD_REWARD_LEVLE_ALREADY_TAKE" => {
                Some(Self::RetPunkLordRewardLevleAlreadyTake)
            }
            "RET_DAILY_ACTIVE_LEVEL_INVALID" => Some(Self::RetDailyActiveLevelInvalid),
            "RET_DAILY_ACTIVE_LEVEL_REWARD_ALREADY_TAKEN" => {
                Some(Self::RetDailyActiveLevelRewardAlreadyTaken)
            }
            "RET_DAILY_ACTIVE_LEVEL_AP_NOT_ENOUGH" => {
                Some(Self::RetDailyActiveLevelApNotEnough)
            }
            "RET_DAILY_MEET_PAM" => Some(Self::RetDailyMeetPam),
            "RET_REPLAY_ID_NOT_MATCH" => Some(Self::RetReplayIdNotMatch),
            "RET_REPLAY_REQ_NOT_VALID" => Some(Self::RetReplayReqNotValid),
            "RET_FIGHT_ACTIVITY_DIFFICULTY_LEVEL_NOT_PASSED" => {
                Some(Self::RetFightActivityDifficultyLevelNotPassed)
            }
            "RET_FIGHT_ACTIVITY_DIFFICULTY_LEVEL_REWARD_ALREADY_TAKE" => {
                Some(Self::RetFightActivityDifficultyLevelRewardAlreadyTake)
            }
            "RET_FIGHT_ACTIVITY_STAGE_NOT_OPEN" => {
                Some(Self::RetFightActivityStageNotOpen)
            }
            "RET_FIGHT_ACTIVITY_LEVEL_NOT_UNLOCK" => {
                Some(Self::RetFightActivityLevelNotUnlock)
            }
            "RET_TRAIN_VISITOR_VISITOR_NOT_EXIST" => {
                Some(Self::RetTrainVisitorVisitorNotExist)
            }
            "RET_TRAIN_VISITOR_BEHAVIOR_NOT_EXIST" => {
                Some(Self::RetTrainVisitorBehaviorNotExist)
            }
            "RET_TRAIN_VISITOR_BEHAVIOR_FINISHED" => {
                Some(Self::RetTrainVisitorBehaviorFinished)
            }
            "RET_TRAIN_VISITOR_ALL_BEHAVIOR_REWARD_TAKEN" => {
                Some(Self::RetTrainVisitorAllBehaviorRewardTaken)
            }
            "RET_TRAIN_VISITOR_GET_ON_MISSION_NOT_FINISH" => {
                Some(Self::RetTrainVisitorGetOnMissionNotFinish)
            }
            "RET_TRAIN_VISITOR_NOT_GET_OFF_OR_BE_TRAIN_MEMBER" => {
                Some(Self::RetTrainVisitorNotGetOffOrBeTrainMember)
            }
            "RET_TEXT_JOIN_UNKNOW_IS_OVERRIDE" => Some(Self::RetTextJoinUnknowIsOverride),
            "RET_TEXT_JOIN_ID_NOT_EXIST" => Some(Self::RetTextJoinIdNotExist),
            "RET_TEXT_JOIN_CAN_NOT_OVERRIDE" => Some(Self::RetTextJoinCanNotOverride),
            "RET_TEXT_JOIN_ITEM_ID_ERROR" => Some(Self::RetTextJoinItemIdError),
            "RET_TEXT_JOIN_SENSITIVE_CHECK_ERROR" => {
                Some(Self::RetTextJoinSensitiveCheckError)
            }
            "RET_TEXT_JOIN_MUST_OVERRIDE" => Some(Self::RetTextJoinMustOverride),
            "RET_TEXT_JOIN_TEXT_EMPTY" => Some(Self::RetTextJoinTextEmpty),
            "RET_TEXT_JOIN_TEXT_FORMAT_ERROR" => Some(Self::RetTextJoinTextFormatError),
            "RET_TEXT_JOIN_TEXT_UTF8_ERROR" => Some(Self::RetTextJoinTextUtf8Error),
            "RET_TEXT_JOIN_BATCH_REQ_ID_REPEAT" => {
                Some(Self::RetTextJoinBatchReqIdRepeat)
            }
            "RET_TEXT_JOIN_TYPE_NOT_SUPPORT_BATCH_REQ" => {
                Some(Self::RetTextJoinTypeNotSupportBatchReq)
            }
            "RET_TEXT_JOIN_AVATAR_ID_NOT_EXIST" => {
                Some(Self::RetTextJoinAvatarIdNotExist)
            }
            "RET_TEXT_JOIN_UNKNOW_TYPE" => Some(Self::RetTextJoinUnknowType),
            "RET_PAM_MISSION_MISSION_ID_ERROR" => Some(Self::RetPamMissionMissionIdError),
            "RET_PAM_MISSION_MISSION_EXPIRE" => Some(Self::RetPamMissionMissionExpire),
            "RET_CHAT_TYPE_NOT_EXIST" => Some(Self::RetChatTypeNotExist),
            "RET_MSG_TYPE_NOT_EXIST" => Some(Self::RetMsgTypeNotExist),
            "RET_CHAT_NO_TARGET_UID" => Some(Self::RetChatNoTargetUid),
            "RET_CHAT_MSG_EMPTY" => Some(Self::RetChatMsgEmpty),
            "RET_CHAT_MSG_EXCEED_LIMIT" => Some(Self::RetChatMsgExceedLimit),
            "RET_CHAT_MSG_SENSITIVE_CHECK_ERROR" => {
                Some(Self::RetChatMsgSensitiveCheckError)
            }
            "RET_CHAT_MSG_UTF8_ERROR" => Some(Self::RetChatMsgUtf8Error),
            "RET_CHAT_FORBID_SWITCH_OPEN" => Some(Self::RetChatForbidSwitchOpen),
            "RET_CHAT_FORBID" => Some(Self::RetChatForbid),
            "RET_CHAT_MSG_INCLUDE_SPECIAL_STR" => Some(Self::RetChatMsgIncludeSpecialStr),
            "RET_CHAT_MSG_EMOJI_NOT_EXIST" => Some(Self::RetChatMsgEmojiNotExist),
            "RET_CHAT_MSG_EMOJI_GENDER_NOT_MATCH" => {
                Some(Self::RetChatMsgEmojiGenderNotMatch)
            }
            "RET_CHAT_MSG_EMOJI_NOT_MARKED" => Some(Self::RetChatMsgEmojiNotMarked),
            "RET_CHAT_MSG_EMOJI_ALREADY_MARKED" => {
                Some(Self::RetChatMsgEmojiAlreadyMarked)
            }
            "RET_CHAT_MSG_EMOJI_MARKED_MAX_LIMIT" => {
                Some(Self::RetChatMsgEmojiMarkedMaxLimit)
            }
            "RET_BOXING_CLUB_CHALLENGE_NOT_OPEN" => {
                Some(Self::RetBoxingClubChallengeNotOpen)
            }
            "RET_MUSEUM_NOT_OPEN" => Some(Self::RetMuseumNotOpen),
            "RET_MUSEUM_TURN_CNT_NOT_MATCH" => Some(Self::RetMuseumTurnCntNotMatch),
            "RET_MUSEUM_PHASE_NOT_REACH" => Some(Self::RetMuseumPhaseNotReach),
            "RET_MUSEUM_UNKNOW_STUFF" => Some(Self::RetMuseumUnknowStuff),
            "RET_MUSEUM_UNKNOW_AREA" => Some(Self::RetMuseumUnknowArea),
            "RET_MUSEUM_UNKNOW_POS" => Some(Self::RetMuseumUnknowPos),
            "RET_MUSEUM_STUFF_ALREADY_IN_AREA" => Some(Self::RetMuseumStuffAlreadyInArea),
            "RET_MUSEUM_STUFF_NOT_IN_AREA" => Some(Self::RetMuseumStuffNotInArea),
            "RET_MUSEUM_GET_NPC_REPEAT" => Some(Self::RetMuseumGetNpcRepeat),
            "RET_MUSEUM_GET_NPC_UNLOCK" => Some(Self::RetMuseumGetNpcUnlock),
            "RET_MUSEUM_GET_NPC_NOT_ENOUGH" => Some(Self::RetMuseumGetNpcNotEnough),
            "RET_MUSEUM_CHANGE_STUFF_AREA_ERROR" => {
                Some(Self::RetMuseumChangeStuffAreaError)
            }
            "RET_MUSEUM_NOT_INIT" => Some(Self::RetMuseumNotInit),
            "RET_MUSEUM_EVENT_ERROR" => Some(Self::RetMuseumEventError),
            "RET_MUSEUM_UNKNOW_CHOOSE_EVENT_ID" => {
                Some(Self::RetMuseumUnknowChooseEventId)
            }
            "RET_MUSEUM_EVENT_ORDER_NOT_MATCH" => Some(Self::RetMuseumEventOrderNotMatch),
            "RET_MUSEUM_EVENT_PHASE_NOT_UNLOCK" => {
                Some(Self::RetMuseumEventPhaseNotUnlock)
            }
            "RET_MUSEUM_EVENT_MISSION_NOT_FOUND" => {
                Some(Self::RetMuseumEventMissionNotFound)
            }
            "RET_MUSEUM_AREA_LEVEL_UP_ALREADY" => Some(Self::RetMuseumAreaLevelUpAlready),
            "RET_MUSEUM_STUFF_ALREADY_USED" => Some(Self::RetMuseumStuffAlreadyUsed),
            "RET_MUSEUM_EVENT_ROUND_NOT_UNLOCK" => {
                Some(Self::RetMuseumEventRoundNotUnlock)
            }
            "RET_MUSEUM_STUFF_IN_AREA" => Some(Self::RetMuseumStuffInArea),
            "RET_MUSEUM_STUFF_DISPATCH" => Some(Self::RetMuseumStuffDispatch),
            "RET_MUSEUM_IS_END" => Some(Self::RetMuseumIsEnd),
            "RET_MUSEUM_STUFF_LEAVING" => Some(Self::RetMuseumStuffLeaving),
            "RET_MUSEUM_EVENT_MISSION_NOT_FINISH" => {
                Some(Self::RetMuseumEventMissionNotFinish)
            }
            "RET_MUSEUM_COLLECT_REWARD_NOT_EXIST" => {
                Some(Self::RetMuseumCollectRewardNotExist)
            }
            "RET_MUSEUM_COLLECT_REWARD_ALREADY_TAKEN" => {
                Some(Self::RetMuseumCollectRewardAlreadyTaken)
            }
            "RET_MUSEUM_ACCEPT_MISSION_MAX_LIMIT" => {
                Some(Self::RetMuseumAcceptMissionMaxLimit)
            }
            "RET_ROGUE_CHALLENGE_NOT_OPEN" => Some(Self::RetRogueChallengeNotOpen),
            "RET_ROGUE_CHALLENGE_ASSIS_REFRESH_LIMIT" => {
                Some(Self::RetRogueChallengeAssisRefreshLimit)
            }
            "RET_ALLEY_NOT_INIT" => Some(Self::RetAlleyNotInit),
            "RET_ALLEY_NOT_OPEN" => Some(Self::RetAlleyNotOpen),
            "RET_ALLEY_MAP_NOT_EXIST" => Some(Self::RetAlleyMapNotExist),
            "RET_ALLEY_EMPTY_POS_LIST" => Some(Self::RetAlleyEmptyPosList),
            "RET_ALLEY_LINE_POS_INVALID" => Some(Self::RetAlleyLinePosInvalid),
            "RET_ALLEY_SHOP_NOT_UNLOCK" => Some(Self::RetAlleyShopNotUnlock),
            "RET_ALLEY_DEPOT_FULL" => Some(Self::RetAlleyDepotFull),
            "RET_ALLEY_SHOP_NOT_INCLUDE" => Some(Self::RetAlleyShopNotInclude),
            "RET_ALLEY_EVENT_NOT_UNLOCK" => Some(Self::RetAlleyEventNotUnlock),
            "RET_ALLEY_EVENT_NOT_REFRESH" => Some(Self::RetAlleyEventNotRefresh),
            "RET_ALLEY_EVENT_STATE_DOING" => Some(Self::RetAlleyEventStateDoing),
            "RET_ALLEY_EVENT_STATE_FINISH" => Some(Self::RetAlleyEventStateFinish),
            "RET_ALLEY_EVENT_ERROR" => Some(Self::RetAlleyEventError),
            "RET_ALLEY_REWARD_LEVEL_ERROR" => Some(Self::RetAlleyRewardLevelError),
            "RET_ALLEY_REWARD_PRESTIGE_NOT_ENOUGH" => {
                Some(Self::RetAlleyRewardPrestigeNotEnough)
            }
            "RET_ALLEY_SHIP_EMPTY" => Some(Self::RetAlleyShipEmpty),
            "RET_ALLEY_SHIP_ID_DISMATCH" => Some(Self::RetAlleyShipIdDismatch),
            "RET_ALLEY_SHIP_NOT_EXIST" => Some(Self::RetAlleyShipNotExist),
            "RET_ALLEY_SHIP_NOT_UNLOCK" => Some(Self::RetAlleyShipNotUnlock),
            "RET_ALLEY_GOODS_NOT_EXIST" => Some(Self::RetAlleyGoodsNotExist),
            "RET_ALLEY_GOODS_NOT_UNLOCK" => Some(Self::RetAlleyGoodsNotUnlock),
            "RET_ALLEY_PROFIT_NOT_POSITIVE" => Some(Self::RetAlleyProfitNotPositive),
            "RET_ALLEY_SPECIAL_ORDER_DISMATCH" => {
                Some(Self::RetAlleySpecialOrderDismatch)
            }
            "RET_ALLEY_ORDER_GOODS_OVER_LIMIT" => Some(Self::RetAlleyOrderGoodsOverLimit),
            "RET_ALLEY_SPECIAL_ORDER_CONDITION_NOT_MEET" => {
                Some(Self::RetAlleySpecialOrderConditionNotMeet)
            }
            "RET_ALLEY_DEPOT_SIZE_OVER_LIMIT" => Some(Self::RetAlleyDepotSizeOverLimit),
            "RET_ALLEY_GOODS_NOT_ENOUGH" => Some(Self::RetAlleyGoodsNotEnough),
            "RET_ALLEY_ORDER_INDEX_INVALID" => Some(Self::RetAlleyOrderIndexInvalid),
            "RET_ALLEY_REWARD_ALREADY_TAKE" => Some(Self::RetAlleyRewardAlreadyTake),
            "RET_ALLEY_REWARD_NOT_EXIST" => Some(Self::RetAlleyRewardNotExist),
            "RET_ALLEY_MAIN_MISSION_NOT_DOING" => Some(Self::RetAlleyMainMissionNotDoing),
            "RET_ALLEY_CRITICAL_EVENT_NOT_FINISH" => {
                Some(Self::RetAlleyCriticalEventNotFinish)
            }
            "RET_ALLEY_SHOP_GOODS_NOT_VALID" => Some(Self::RetAlleyShopGoodsNotValid),
            "RET_ALLEY_SLASH_NOT_OPEN" => Some(Self::RetAlleySlashNotOpen),
            "RET_ALLEY_PLACING_ANCHOR_INVALID" => {
                Some(Self::RetAlleyPlacingAnchorInvalid)
            }
            "RET_ALLEY_PLACING_GOODS_INDEX_INVALID" => {
                Some(Self::RetAlleyPlacingGoodsIndexInvalid)
            }
            "RET_ALLEY_SAVE_MAP_TOO_QUICK" => Some(Self::RetAlleySaveMapTooQuick),
            "RET_ALLEY_MAP_NOT_LINK" => Some(Self::RetAlleyMapNotLink),
            "RET_ALLEY_FUNDS_NOT_LOWER_BASE" => Some(Self::RetAlleyFundsNotLowerBase),
            "RET_ALLEY_EVENT_NOT_FINISH" => Some(Self::RetAlleyEventNotFinish),
            "RET_ALLEY_NORMAL_ORDER_NOT_MEET" => Some(Self::RetAlleyNormalOrderNotMeet),
            "RET_PLAYER_RETURN_NOT_OPEN" => Some(Self::RetPlayerReturnNotOpen),
            "RET_PLAYER_RETURN_IS_SIGNED" => Some(Self::RetPlayerReturnIsSigned),
            "RET_PLAYER_RETURN_POINT_NOT_ENOUGH" => {
                Some(Self::RetPlayerReturnPointNotEnough)
            }
            "RET_PLAYER_RETURN_CONDITION_INVALID" => {
                Some(Self::RetPlayerReturnConditionInvalid)
            }
            "RET_PLAYER_RETURN_HAS_SIGNED" => Some(Self::RetPlayerReturnHasSigned),
            "RET_PLAYER_RETURN_REWARD_TAKEN" => Some(Self::RetPlayerReturnRewardTaken),
            "RET_AETHER_DIVIDE_NO_LINEUP" => Some(Self::RetAetherDivideNoLineup),
            "RET_AETHER_DIVIDE_LINEUP_INVALID" => {
                Some(Self::RetAetherDivideLineupInvalid)
            }
            "RET_CHAT_BUBBLE_ID_ERROR" => Some(Self::RetChatBubbleIdError),
            "RET_CHAT_BUBBLE_ID_NOT_UNLOCK" => Some(Self::RetChatBubbleIdNotUnlock),
            "RET_PHONE_THEME_ID_ERROR" => Some(Self::RetPhoneThemeIdError),
            "RET_PHONE_THEME_ID_NOT_UNLOCK" => Some(Self::RetPhoneThemeIdNotUnlock),
            "RET_CHAT_BUBBLE_SELECT_IS_CURRENT" => {
                Some(Self::RetChatBubbleSelectIsCurrent)
            }
            "RET_PHONE_THEME_SELECT_IS_CURRENT" => {
                Some(Self::RetPhoneThemeSelectIsCurrent)
            }
            "RET_CHESS_ROGUE_CONFIG_NOT_FOUND" => Some(Self::RetChessRogueConfigNotFound),
            "RET_CHESS_ROGUE_CONFIG_INVALID" => Some(Self::RetChessRogueConfigInvalid),
            "RET_CHESS_ROGUE_NO_VALID_ROOM" => Some(Self::RetChessRogueNoValidRoom),
            "RET_CHESS_ROGUE_NO_CELL_INFO" => Some(Self::RetChessRogueNoCellInfo),
            "RET_CHESS_ROGUE_CELL_NOT_FINISH" => Some(Self::RetChessRogueCellNotFinish),
            "RET_CHESS_ROGUE_CELL_IS_LOCKED" => Some(Self::RetChessRogueCellIsLocked),
            "RET_CHESS_ROGUE_SCHEDULE_NOT_MATCH" => {
                Some(Self::RetChessRogueScheduleNotMatch)
            }
            "RET_CHESS_ROGUE_STATUS_FAIL" => Some(Self::RetChessRogueStatusFail),
            "RET_CHESS_ROGUE_AREA_NOT_EXIST" => Some(Self::RetChessRogueAreaNotExist),
            "RET_CHESS_ROGUE_LINEUP_FAIL" => Some(Self::RetChessRogueLineupFail),
            "RET_CHESS_ROGUE_AEON_FAIL" => Some(Self::RetChessRogueAeonFail),
            "RET_CHESS_ROGUE_ENTER_CELL_FAIL" => Some(Self::RetChessRogueEnterCellFail),
            "RET_CHESS_ROGUE_ROLL_DICE_FAIL" => Some(Self::RetChessRogueRollDiceFail),
            "RET_CHESS_ROGUE_DICE_STATUS_FAIL" => Some(Self::RetChessRogueDiceStatusFail),
            "RET_CHESS_ROGUE_DICE_CNT_NOT_FULL" => {
                Some(Self::RetChessRogueDiceCntNotFull)
            }
            "RET_CHESS_ROGUE_UNLOCK" => Some(Self::RetChessRogueUnlock),
            "RET_CHESS_ROGUE_PICK_AVATAR_FAIL" => Some(Self::RetChessRoguePickAvatarFail),
            "RET_CHESS_ROGUE_AVATAR_INVALID" => Some(Self::RetChessRogueAvatarInvalid),
            "RET_CHESS_ROGUE_CELL_CAN_NOT_SELECT" => {
                Some(Self::RetChessRogueCellCanNotSelect)
            }
            "RET_CHESS_ROGUE_DICE_CONFIRMED" => Some(Self::RetChessRogueDiceConfirmed),
            "RET_CHESS_ROGUE_NOUS_DICE_NOT_MATCH" => {
                Some(Self::RetChessRogueNousDiceNotMatch)
            }
            "RET_CHESS_ROGUE_NOUS_DICE_RARITY_FAIL" => {
                Some(Self::RetChessRogueNousDiceRarityFail)
            }
            "RET_CHESS_ROGUE_NOUS_DICE_SURFACE_DUPLICATE" => {
                Some(Self::RetChessRogueNousDiceSurfaceDuplicate)
            }
            "RET_CHESS_ROGUE_NOT_IN_ROGUE" => Some(Self::RetChessRogueNotInRogue),
            "RET_CHESS_ROGUE_NOUS_DICE_BRANCH_LIMIT" => {
                Some(Self::RetChessRogueNousDiceBranchLimit)
            }
            "RET_HELIOBUS_NOT_OPEN" => Some(Self::RetHeliobusNotOpen),
            "RET_HELIOBUS_SNS_POST_NOT_UNLOCK" => Some(Self::RetHeliobusSnsPostNotUnlock),
            "RET_HELIOBUS_SNS_ALREADY_READ" => Some(Self::RetHeliobusSnsAlreadyRead),
            "RET_HELIOBUS_SNS_ALREADY_LIKED" => Some(Self::RetHeliobusSnsAlreadyLiked),
            "RET_HELIOBUS_SNS_ALREADY_COMMENTED" => {
                Some(Self::RetHeliobusSnsAlreadyCommented)
            }
            "RET_HELIOBUS_SNS_IN_MISSION" => Some(Self::RetHeliobusSnsInMission),
            "RET_HELIOBUS_SNS_ALREADY_POSTED" => Some(Self::RetHeliobusSnsAlreadyPosted),
            "RET_HELIOBUS_SNS_NOT_DOING_MISSION" => {
                Some(Self::RetHeliobusSnsNotDoingMission)
            }
            "RET_HELIOBUS_REWARD_LEVEL_MAX" => Some(Self::RetHeliobusRewardLevelMax),
            "RET_HELIOBUS_INCOME_NOT_ENOUGH" => Some(Self::RetHeliobusIncomeNotEnough),
            "RET_HELIOBUS_SNS_COMMENT_NOT_UNLOCK" => {
                Some(Self::RetHeliobusSnsCommentNotUnlock)
            }
            "RET_HELIOBUS_CHALLENGE_NOT_UNLOCK" => {
                Some(Self::RetHeliobusChallengeNotUnlock)
            }
            "RET_HELIOBUS_CHALLENGE_ID_ERROR" => Some(Self::RetHeliobusChallengeIdError),
            "RET_HELIOBUS_SKILL_NOT_UNLOCK" => Some(Self::RetHeliobusSkillNotUnlock),
            "RET_HELIOBUS_ACCEPT_POST_MISSION_FAIL" => {
                Some(Self::RetHeliobusAcceptPostMissionFail)
            }
            "RET_HELIOBUS_SKILL_NOT_SELECTED" => Some(Self::RetHeliobusSkillNotSelected),
            "RET_HELIOBUS_PLANE_TYPE_INVALID" => Some(Self::RetHeliobusPlaneTypeInvalid),
            "RET_REDDOT_PARAM_INVALID" => Some(Self::RetReddotParamInvalid),
            "RET_REDDOT_ACTIVITY_NOT_OPEN" => Some(Self::RetReddotActivityNotOpen),
            "RET_ROGUE_ENDLESS_ACTIVITY_CONFIG_ERROR" => {
                Some(Self::RetRogueEndlessActivityConfigError)
            }
            "RET_ROGUE_ENDLESS_ACTIVITY_NOT_OPEN" => {
                Some(Self::RetRogueEndlessActivityNotOpen)
            }
            "RET_ROGUE_ENDLESS_ACTIVITY_OVER_BONUS_REWARD_LIMIT" => {
                Some(Self::RetRogueEndlessActivityOverBonusRewardLimit)
            }
            "RET_ROGUE_ENDLESS_ACTIVITY_SCORE_NOT_MEET" => {
                Some(Self::RetRogueEndlessActivityScoreNotMeet)
            }
            "RET_ROGUE_ENDLESS_ACTIVITY_REWARD_LEVLE_ALREADY_TAKE" => {
                Some(Self::RetRogueEndlessActivityRewardLevleAlreadyTake)
            }
            "RET_HEART_DIAL_SCRIPT_NOT_FOUND" => Some(Self::RetHeartDialScriptNotFound),
            "RET_HEART_DIAL_SCRIPT_EMOTION_THE_SAME" => {
                Some(Self::RetHeartDialScriptEmotionTheSame)
            }
            "RET_HEART_DIAL_SCRIPT_STEP_NOT_NORMAL" => {
                Some(Self::RetHeartDialScriptStepNotNormal)
            }
            "RET_HEART_DIAL_SCRIPT_CONDITION_NOT_MATCH" => {
                Some(Self::RetHeartDialScriptConditionNotMatch)
            }
            "RET_HEART_DIAL_SCRIPT_SUBMIT_ITEM_NUM_NOT_MATCH" => {
                Some(Self::RetHeartDialScriptSubmitItemNumNotMatch)
            }
            "RET_HEART_DIAL_SCRIPT_SUBMIT_ITEM_ID_NOT_MATCH" => {
                Some(Self::RetHeartDialScriptSubmitItemIdNotMatch)
            }
            "RET_HEART_DIAL_DIALOGUE_NOT_FOUND" => {
                Some(Self::RetHeartDialDialogueNotFound)
            }
            "RET_HEART_DIAL_DIALOGUE_ALREADY_PERFORMED" => {
                Some(Self::RetHeartDialDialogueAlreadyPerformed)
            }
            "RET_HEART_DIAL_NPC_NOT_FOUND" => Some(Self::RetHeartDialNpcNotFound),
            "RET_HEART_DIAL_TRACE_CONFIG_NOT_FOUND" => {
                Some(Self::RetHeartDialTraceConfigNotFound)
            }
            "RET_HEART_DIAL_FLOOR_TRACE_EXIST" => Some(Self::RetHeartDialFloorTraceExist),
            "RET_HEART_DIAL_TRACE_FLOOR_NOT_MATCH" => {
                Some(Self::RetHeartDialTraceFloorNotMatch)
            }
            "RET_TRAVEL_BROCHURE_CONFIG_ERROR" => {
                Some(Self::RetTravelBrochureConfigError)
            }
            "RET_TRAVEL_BROCHURE_PARAM_INVALID" => {
                Some(Self::RetTravelBrochureParamInvalid)
            }
            "RET_TRAVEL_BROCHURE_LOCKED" => Some(Self::RetTravelBrochureLocked),
            "RET_TRAVEL_BROCHURE_CANNOT_OPERATE" => {
                Some(Self::RetTravelBrochureCannotOperate)
            }
            "RET_TRAVEL_BROCHURE_WORLD_ID_NOT_MATCH" => {
                Some(Self::RetTravelBrochureWorldIdNotMatch)
            }
            "RET_TRAVEL_BROCHURE_HAS_NO_WORLD_BOOK" => {
                Some(Self::RetTravelBrochureHasNoWorldBook)
            }
            "RET_TRAVEL_BROCHURE_PAGE_FULL" => Some(Self::RetTravelBrochurePageFull),
            "RET_MAP_ROTATION_NOT_IN_REGION" => Some(Self::RetMapRotationNotInRegion),
            "RET_MAP_ROTATION_ROTATER_ALREADY_DEPLOYED" => {
                Some(Self::RetMapRotationRotaterAlreadyDeployed)
            }
            "RET_MAP_ROTATION_ENERGY_NOT_ENOUGH" => {
                Some(Self::RetMapRotationEnergyNotEnough)
            }
            "RET_MAP_ROTATION_ENTITY_NOT_ON_CUR_POSE" => {
                Some(Self::RetMapRotationEntityNotOnCurPose)
            }
            "RET_MAP_ROTATION_ROTATER_NOT_DEPLOYED" => {
                Some(Self::RetMapRotationRotaterNotDeployed)
            }
            "RET_MAP_ROTATION_POSE_ROTATER_MISMATCH" => {
                Some(Self::RetMapRotationPoseRotaterMismatch)
            }
            "RET_MAP_ROTATION_ROTATER_NOT_REMOVABLE" => {
                Some(Self::RetMapRotationRotaterNotRemovable)
            }
            "RET_MAP_ROTATION_ROTATER_DISPOSABLE" => {
                Some(Self::RetMapRotationRotaterDisposable)
            }
            "RET_SPACE_ZOO_ACTIVITY_CAT_NOT_FOUND" => {
                Some(Self::RetSpaceZooActivityCatNotFound)
            }
            "RET_SPACE_ZOO_ACTIVITY_CAT_PARAM_INVALID" => {
                Some(Self::RetSpaceZooActivityCatParamInvalid)
            }
            "RET_SPACE_ZOO_ACTIVITY_CAT_ITEM_NOT_ENOUGH" => {
                Some(Self::RetSpaceZooActivityCatItemNotEnough)
            }
            "RET_SPACE_ZOO_ACTIVITY_CAT_BAG_FULL" => {
                Some(Self::RetSpaceZooActivityCatBagFull)
            }
            "RET_SPACE_ZOO_ACTIVITY_CAT_NOT_TO_MUTATE" => {
                Some(Self::RetSpaceZooActivityCatNotToMutate)
            }
            "RET_SPACE_ZOO_ACTIVITY_CAT_STATE_ERROR" => {
                Some(Self::RetSpaceZooActivityCatStateError)
            }
            "RET_SPACE_ZOO_ACTIVITY_CAT_CATTERY_LOCKED" => {
                Some(Self::RetSpaceZooActivityCatCatteryLocked)
            }
            "RET_SPACE_ZOO_ACTIVITY_CAT_OUT_NOW" => {
                Some(Self::RetSpaceZooActivityCatOutNow)
            }
            "RET_SPACE_ZOO_ACTIVITY_CAT_CONFIG_NOT_FOUND" => {
                Some(Self::RetSpaceZooActivityCatConfigNotFound)
            }
            "RET_SPACE_ZOO_ACTIVITY_CAT_FEATURE_NOT_FOUND" => {
                Some(Self::RetSpaceZooActivityCatFeatureNotFound)
            }
            "RET_SPACE_ZOO_ACTIVITY_CAT_ADD_CAT_ERROR" => {
                Some(Self::RetSpaceZooActivityCatAddCatError)
            }
            "RET_SPACE_ZOO_ACTIVITY_CAT_MONEY_NOT_ENOUGH" => {
                Some(Self::RetSpaceZooActivityCatMoneyNotEnough)
            }
            "RET_SPACE_ZOO_ACTIVITY_CAT_COND_NOT_MATCH" => {
                Some(Self::RetSpaceZooActivityCatCondNotMatch)
            }
            "RET_STRONG_CHALLENGE_ACTIVITY_STAGE_CFG_MISS" => {
                Some(Self::RetStrongChallengeActivityStageCfgMiss)
            }
            "RET_STRONG_CHALLENGE_ACTIVITY_STAGE_NOT_OPEN" => {
                Some(Self::RetStrongChallengeActivityStageNotOpen)
            }
            "RET_STRONG_CHALLENGE_ACTIVITY_BUFF_ERROR" => {
                Some(Self::RetStrongChallengeActivityBuffError)
            }
            "RET_ROLL_SHOP_NOT_FOUND" => Some(Self::RetRollShopNotFound),
            "RET_ROLL_SHOP_GROUP_EMPTY" => Some(Self::RetRollShopGroupEmpty),
            "RET_ROLL_SHOP_EMPTY" => Some(Self::RetRollShopEmpty),
            "RET_ROLL_SHOP_GACHA_REQ_DUPLICATED" => {
                Some(Self::RetRollShopGachaReqDuplicated)
            }
            "RET_ROLL_SHOP_RANDOM_ERROR" => Some(Self::RetRollShopRandomError),
            "RET_ROLL_SHOP_GROUP_TYPE_NOT_FOUND" => {
                Some(Self::RetRollShopGroupTypeNotFound)
            }
            "RET_ROLL_SHOP_HAS_STORED_REWARD_ALREADY" => {
                Some(Self::RetRollShopHasStoredRewardAlready)
            }
            "RET_ROLL_SHOP_NO_STORED_REWARD" => Some(Self::RetRollShopNoStoredReward),
            "RET_ROLL_SHOP_NOT_IN_VALID_SCENE" => Some(Self::RetRollShopNotInValidScene),
            "RET_ROLL_SHOP_INVALID_ROLL_SHOP_TYPE" => {
                Some(Self::RetRollShopInvalidRollShopType)
            }
            "RET_ACTIVITY_RAID_COLLECTION_PREV_NOT_FINISH" => {
                Some(Self::RetActivityRaidCollectionPrevNotFinish)
            }
            "RET_ACTIVITY_RAID_COLLECTION_GROUP_ENTER_NEXT_UNAVAILABLE" => {
                Some(Self::RetActivityRaidCollectionGroupEnterNextUnavailable)
            }
            "RET_ACTIVITY_RAID_COLLECTION_IS_LAST" => {
                Some(Self::RetActivityRaidCollectionIsLast)
            }
            "RET_ACTIVITY_RAID_COLLECTION_IS_NOT_NEXT" => {
                Some(Self::RetActivityRaidCollectionIsNotNext)
            }
            "RET_OFFERING_NOT_UNLOCK" => Some(Self::RetOfferingNotUnlock),
            "RET_OFFERING_LEVEL_NOT_UNLOCK" => Some(Self::RetOfferingLevelNotUnlock),
            "RET_OFFERING_REACH_MAX_LEVEL" => Some(Self::RetOfferingReachMaxLevel),
            "RET_OFFERING_ITEM_NOT_ENOUGH" => Some(Self::RetOfferingItemNotEnough),
            "RET_OFFERING_LONGTAIL_NOT_OPEN" => Some(Self::RetOfferingLongtailNotOpen),
            "RET_OFFERING_REWARD_CONDITION" => Some(Self::RetOfferingRewardCondition),
            "RET_DRINK_MAKER_CHAT_INVALID" => Some(Self::RetDrinkMakerChatInvalid),
            "RET_DRINK_MAKER_PARAM_INVALID" => Some(Self::RetDrinkMakerParamInvalid),
            "RET_DRINK_MAKER_PARAM_NOT_UNLOCK" => Some(Self::RetDrinkMakerParamNotUnlock),
            "RET_DRINK_MAKER_CONFIG_NOT_FOUND" => Some(Self::RetDrinkMakerConfigNotFound),
            "RET_DRINK_MAKER_NOT_LAST_CHAT" => Some(Self::RetDrinkMakerNotLastChat),
            "RET_DRINK_MAKER_DAY_AND_FREE_PHASE_NOT_OPEN" => {
                Some(Self::RetDrinkMakerDayAndFreePhaseNotOpen)
            }
            "RET_MONOPOLY_NOT_OPEN" => Some(Self::RetMonopolyNotOpen),
            "RET_MONOPOLY_CONFIG_ERROR" => Some(Self::RetMonopolyConfigError),
            "RET_MONOPOLY_DICE_NOT_ENOUGH" => Some(Self::RetMonopolyDiceNotEnough),
            "RET_MONOPOLY_CUR_CELL_NOT_FINISH" => Some(Self::RetMonopolyCurCellNotFinish),
            "RET_MONOPOLY_COIN_NOT_ENOUGH" => Some(Self::RetMonopolyCoinNotEnough),
            "RET_MONOPOLY_CELL_WAIT_PENDING" => Some(Self::RetMonopolyCellWaitPending),
            "RET_MONOPOLY_CELL_STATE_ERROR" => Some(Self::RetMonopolyCellStateError),
            "RET_MONOPOLY_CELL_CONTENT_ERROR" => Some(Self::RetMonopolyCellContentError),
            "RET_MONOPOLY_ITEM_NOT_ENOUGH" => Some(Self::RetMonopolyItemNotEnough),
            "RET_MONOPOLY_CELL_CONTENT_CANNOT_GIVEUP" => {
                Some(Self::RetMonopolyCellContentCannotGiveup)
            }
            "RET_MONOPOLY_ASSET_LEVEL_INVALID" => {
                Some(Self::RetMonopolyAssetLevelInvalid)
            }
            "RET_MONOPOLY_TURN_NOT_FINISH" => Some(Self::RetMonopolyTurnNotFinish),
            "RET_MONOPOLY_GUIDE_NOT_FINISH" => Some(Self::RetMonopolyGuideNotFinish),
            "RET_MONOPOLY_RAFFLE_REWARD_REISSUED" => {
                Some(Self::RetMonopolyRaffleRewardReissued)
            }
            "RET_MONOPOLY_NO_GAME_ACTIVE" => Some(Self::RetMonopolyNoGameActive),
            "RET_MONOPOLY_GAME_RATIO_NOT_INCREASABLE" => {
                Some(Self::RetMonopolyGameRatioNotIncreasable)
            }
            "RET_MONOPOLY_GAME_RATIO_MAX" => Some(Self::RetMonopolyGameRatioMax),
            "RET_MONOPOLY_GAME_TARGET_RATIO_INVALID" => {
                Some(Self::RetMonopolyGameTargetRatioInvalid)
            }
            "RET_MONOPOLY_GAME_BINGO_FLIP_POS_INVALID" => {
                Some(Self::RetMonopolyGameBingoFlipPosInvalid)
            }
            "RET_MONOPOLY_GAME_GUESS_ALREADY_CHOOSE" => {
                Some(Self::RetMonopolyGameGuessAlreadyChoose)
            }
            "RET_MONOPOLY_GAME_GUESS_CHOOSE_INVALID" => {
                Some(Self::RetMonopolyGameGuessChooseInvalid)
            }
            "RET_MONOPOLY_GAME_GUESS_INFORMATION_ALREADY_BOUGHT" => {
                Some(Self::RetMonopolyGameGuessInformationAlreadyBought)
            }
            "RET_MONOPOLY_GAME_RAISE_RATIO_NOT_UNLOCK" => {
                Some(Self::RetMonopolyGameRaiseRatioNotUnlock)
            }
            "RET_MONOPOLY_FRIEND_NOT_SYNCED" => Some(Self::RetMonopolyFriendNotSynced),
            "RET_MONOPOLY_GET_FRIEND_RANKING_LIST_IN_CD" => {
                Some(Self::RetMonopolyGetFriendRankingListInCd)
            }
            "RET_MONOPOLY_LIKE_TARGET_NOT_FRIEND" => {
                Some(Self::RetMonopolyLikeTargetNotFriend)
            }
            "RET_MONOPOLY_DAILY_ALREADY_LIKED" => {
                Some(Self::RetMonopolyDailyAlreadyLiked)
            }
            "RET_MONOPOLY_SOCIAL_EVENT_STATUS_NOT_MATCH" => {
                Some(Self::RetMonopolySocialEventStatusNotMatch)
            }
            "RET_MONOPOLY_SOCIAL_EVENT_SERVER_CACHE_NOT_EXIST" => {
                Some(Self::RetMonopolySocialEventServerCacheNotExist)
            }
            "RET_MONOPOLY_ACTIVITY_ID_NOT_MATCH" => {
                Some(Self::RetMonopolyActivityIdNotMatch)
            }
            "RET_MONOPOLY_RAFFLE_POOL_NOT_EXIST" => {
                Some(Self::RetMonopolyRafflePoolNotExist)
            }
            "RET_MONOPOLY_RAFFLE_POOL_TIME_NOT_MATCH" => {
                Some(Self::RetMonopolyRafflePoolTimeNotMatch)
            }
            "RET_MONOPOLY_RAFFLE_POOL_PHASE_NOT_MEET" => {
                Some(Self::RetMonopolyRafflePoolPhaseNotMeet)
            }
            "RET_MONOPOLY_RAFFLE_POOL_SHOW_TIME_NOT_MEET" => {
                Some(Self::RetMonopolyRafflePoolShowTimeNotMeet)
            }
            "RET_MONOPOLY_RAFFLE_TICKET_NOT_FOUND" => {
                Some(Self::RetMonopolyRaffleTicketNotFound)
            }
            "RET_MONOPOLY_RAFFLE_TICKET_TIME_NOT_MEET" => {
                Some(Self::RetMonopolyRaffleTicketTimeNotMeet)
            }
            "RET_MONOPOLY_RAFFLE_TICKET_REWARD_ALREADY_TAKEN" => {
                Some(Self::RetMonopolyRaffleTicketRewardAlreadyTaken)
            }
            "RET_MONOPOLY_RAFFLE_POOL_NOT_IN_RAFFLE_TIME" => {
                Some(Self::RetMonopolyRafflePoolNotInRaffleTime)
            }
            "RET_MONOPOLY_MBTI_REPORT_REWARD_ALREADY_TAKEN" => {
                Some(Self::RetMonopolyMbtiReportRewardAlreadyTaken)
            }
            "RET_EVOLVE_BUILD_LEVEL_GAMING" => Some(Self::RetEvolveBuildLevelGaming),
            "RET_EVEOLVE_BUILD_LEVEL_BAN_RANDOM" => {
                Some(Self::RetEveolveBuildLevelBanRandom)
            }
            "RET_EVOLVE_BUILD_FIRST_REWARD_ALREADY_TAKEN" => {
                Some(Self::RetEvolveBuildFirstRewardAlreadyTaken)
            }
            "RET_EVOLVE_BUILD_LEVEL_UNFINISH" => Some(Self::RetEvolveBuildLevelUnfinish),
            "RET_EVOLVE_BUILD_SHOP_ABILITY_MAX_LEVEL" => {
                Some(Self::RetEvolveBuildShopAbilityMaxLevel)
            }
            "RET_EVOLVE_BUILD_SHOP_ABILITY_MIN_LEVEL" => {
                Some(Self::RetEvolveBuildShopAbilityMinLevel)
            }
            "RET_EVOLVE_BUILD_SHOP_ABILITY_NOT_GET" => {
                Some(Self::RetEvolveBuildShopAbilityNotGet)
            }
            "RET_EVOLVE_BUILD_LEVEL_LOCK" => Some(Self::RetEvolveBuildLevelLock),
            "RET_EVOLVE_BUILD_EXP_NOT_ENOUGH" => Some(Self::RetEvolveBuildExpNotEnough),
            "RET_EVOLVE_BUILD_SHOP_ABILITY_LEVEL_ERROR" => {
                Some(Self::RetEvolveBuildShopAbilityLevelError)
            }
            "RET_EVOLVE_BUILD_ACTIVITY_NOT_OPEN" => {
                Some(Self::RetEvolveBuildActivityNotOpen)
            }
            "RET_EVOLVE_BUILD_SHOP_ABILITY_EMPTY" => {
                Some(Self::RetEvolveBuildShopAbilityEmpty)
            }
            "RET_EVOLVE_BUILD_LEVEL_NOT_START" => Some(Self::RetEvolveBuildLevelNotStart),
            "RET_EVOLVE_BUILD_SHOP_LOCK" => Some(Self::RetEvolveBuildShopLock),
            "RET_EVOLVE_BUILD_REWARD_LOCK" => Some(Self::RetEvolveBuildRewardLock),
            "RET_EVOLVE_BUILD_REWARD_LEVEL_MAX" => {
                Some(Self::RetEvolveBuildRewardLevelMax)
            }
            "RET_EVOLVE_BUILD_REWARD_ALREADY_ALL_TAKEN" => {
                Some(Self::RetEvolveBuildRewardAlreadyAllTaken)
            }
            "RET_CLOCK_PARK_CONFIG_ERROR" => Some(Self::RetClockParkConfigError),
            "RET_CLOCK_PARK_EFFECT_ERROR" => Some(Self::RetClockParkEffectError),
            "RET_CLOCK_PARK_SCRIPT_ALREADY_UNLOCK" => {
                Some(Self::RetClockParkScriptAlreadyUnlock)
            }
            "RET_CLOCK_PARK_SCRIPT_UNLOCK_CONDITION_NOT_MEET" => {
                Some(Self::RetClockParkScriptUnlockConditionNotMeet)
            }
            "RET_CLOCK_PARK_TALENT_ALREADY_UNLOCK" => {
                Some(Self::RetClockParkTalentAlreadyUnlock)
            }
            "RET_CLOCK_PARK_SCRIPT_LOCKED" => Some(Self::RetClockParkScriptLocked),
            "RET_CLOCK_PARK_HAS_ONGOING_SCRIPT" => {
                Some(Self::RetClockParkHasOngoingScript)
            }
            "RET_CLOCK_PARK_NO_ONGOING_SCRIPT" => Some(Self::RetClockParkNoOngoingScript),
            "RET_CLOCK_PARK_DICE_PLACEMENT_ERROR" => {
                Some(Self::RetClockParkDicePlacementError)
            }
            "RET_CLOCK_PARK_MISMATCH_STATUS" => Some(Self::RetClockParkMismatchStatus),
            "RET_CLOCK_PARK_NO_BUFF" => Some(Self::RetClockParkNoBuff),
            "RET_CLOCK_PARK_SLOT_MACHINE_GACHA_REQ_DUPLICATED" => {
                Some(Self::RetClockParkSlotMachineGachaReqDuplicated)
            }
            "RET_CLOCK_PARK_SLOT_MACHINE_COST_NOT_ENOUGH" => {
                Some(Self::RetClockParkSlotMachineCostNotEnough)
            }
            "RET_CLOCK_PARK_SLOT_MACHINE_GACHA_CNT_EXCEED_LIMIT" => {
                Some(Self::RetClockParkSlotMachineGachaCntExceedLimit)
            }
            "RET_CLOCK_PARK_NOT_OPEN" => Some(Self::RetClockParkNotOpen),
            "RET_TOURN_ROGUE_STATUS_MISMATCH" => Some(Self::RetTournRogueStatusMismatch),
            "RET_MAGIC_ROGUE_STATUS_MISMATCH" => Some(Self::RetMagicRogueStatusMismatch),
            "RET_AUTO_MOUNT_MAGIC_UNIT_NO_MATCHED_MAGIC_SCEPTER" => {
                Some(Self::RetAutoMountMagicUnitNoMatchedMagicScepter)
            }
            "RET_MAGIC_UNIT_WORKBENCH_REFORGE_GEN_FAIL" => {
                Some(Self::RetMagicUnitWorkbenchReforgeGenFail)
            }
            "RET_MATCH_ALREADY_IN_MATCH" => Some(Self::RetMatchAlreadyInMatch),
            "RET_MATCH_NOT_IN_MATCH" => Some(Self::RetMatchNotInMatch),
            "RET_MATCH_PLAY_NOT_OPEN" => Some(Self::RetMatchPlayNotOpen),
            "RET_CROSS_STATE_ERROR" => Some(Self::RetCrossStateError),
            "RET_MATCH_VERSION_NOT_EQUAL" => Some(Self::RetMatchVersionNotEqual),
            "RET_MATCH_PLAYER_NOT_IN_LOBBY_ROOM" => {
                Some(Self::RetMatchPlayerNotInLobbyRoom)
            }
            "RET_LOBBY_STATE_NOT_MATCH" => Some(Self::RetLobbyStateNotMatch),
            "RET_LOBBY_ROOM_NOT_EXIST" => Some(Self::RetLobbyRoomNotExist),
            "RET_LOBBY_ROOM_PALYER_FULL" => Some(Self::RetLobbyRoomPalyerFull),
            "RET_LOBBY_ROOM_PALYER_NOT_READY" => Some(Self::RetLobbyRoomPalyerNotReady),
            "RET_LOBBY_ROOM_PALYER_FIGHTING" => Some(Self::RetLobbyRoomPalyerFighting),
            "RET_FIGHT_ROOM_NOT_EXIST" => Some(Self::RetFightRoomNotExist),
            "RET_FIGHT_MATCH3_PLAYER_STATE_ERR" => {
                Some(Self::RetFightMatch3PlayerStateErr)
            }
            "RET_FIGHT_MATCH3_ROOM_STATE_ERR" => Some(Self::RetFightMatch3RoomStateErr),
            "RET_CROSS_STATE_TIME_OUT" => Some(Self::RetCrossStateTimeOut),
            "RET_SWORD_TRAINING_NO_ACTIVE_GAME" => {
                Some(Self::RetSwordTrainingNoActiveGame)
            }
            "RET_SWORD_TRAINING_NO_PENDING_ACTION_MATCH" => {
                Some(Self::RetSwordTrainingNoPendingActionMatch)
            }
            "RET_SWORD_TRAINING_PARTNER_ABILITY_INVALID" => {
                Some(Self::RetSwordTrainingPartnerAbilityInvalid)
            }
            "RET_SWORD_TRAINING_SKILL_ALREADY_LEARNED" => {
                Some(Self::RetSwordTrainingSkillAlreadyLearned)
            }
            "RET_SWORD_TRAINING_CONDITION_NOT_MEET" => {
                Some(Self::RetSwordTrainingConditionNotMeet)
            }
            "RET_SWORD_TRAINING_PARENT_SKILL_NOT_LEARNED" => {
                Some(Self::RetSwordTrainingParentSkillNotLearned)
            }
            "RET_SWORD_TRAINING_SKILL_TYPE_NOT_UNLOCK" => {
                Some(Self::RetSwordTrainingSkillTypeNotUnlock)
            }
            "RET_SWORD_TRAINING_GAME_ALREADY_EXIST" => {
                Some(Self::RetSwordTrainingGameAlreadyExist)
            }
            "RET_SWORD_TRAINING_ENDING_HINT_NOT_MATCH" => {
                Some(Self::RetSwordTrainingEndingHintNotMatch)
            }
            "RET_SWORD_TRAINING_STORYLINE_CONFIG_NOT_FOUND" => {
                Some(Self::RetSwordTrainingStorylineConfigNotFound)
            }
            "RET_SWORD_TRAINING_STORY_CONFIG_NOT_FOUND" => {
                Some(Self::RetSwordTrainingStoryConfigNotFound)
            }
            "RET_SWORD_TRAINING_UNLOCK_NOT_FINISH" => {
                Some(Self::RetSwordTrainingUnlockNotFinish)
            }
            "RET_SWORD_TRAINING_OPTION_MISMATCH" => {
                Some(Self::RetSwordTrainingOptionMismatch)
            }
            "RET_SWORD_TRAINING_RESTORE_WITHOUT_EXAM_FAILED" => {
                Some(Self::RetSwordTrainingRestoreWithoutExamFailed)
            }
            "RET_SWORD_TRAINING_NO_RESTORE_GAME_AVAILABLE" => {
                Some(Self::RetSwordTrainingNoRestoreGameAvailable)
            }
            "RET_SWORD_TRAINING_ENDING_STORY_NOT_MATCH" => {
                Some(Self::RetSwordTrainingEndingStoryNotMatch)
            }
            "RET_SWORD_TRAINING_ENDING_NOT_FINISH" => {
                Some(Self::RetSwordTrainingEndingNotFinish)
            }
            "RET_SWORD_TRAINING_ENDING_REWARD_TAKEN" => {
                Some(Self::RetSwordTrainingEndingRewardTaken)
            }
            "RET_SWORD_TRAINING_COMBAT_RANK_NOT_CHANGE" => {
                Some(Self::RetSwordTrainingCombatRankNotChange)
            }
            "RET_SWORD_TRAINING_DIRECT_BATTLE_DISABLE" => {
                Some(Self::RetSwordTrainingDirectBattleDisable)
            }
            "RET_FIGHT_FEST_PHASE_NOT_MATCH" => Some(Self::RetFightFestPhaseNotMatch),
            "RET_FIGHT_FEST_SCORE_RACE_ALREADY_FINISH" => {
                Some(Self::RetFightFestScoreRaceAlreadyFinish)
            }
            "RET_FIGHT_FEST_CHALLENGE_LOCKED" => Some(Self::RetFightFestChallengeLocked),
            "RET_FIGHT_FEST_COACH_SKILL_LOCKED" => {
                Some(Self::RetFightFestCoachSkillLocked)
            }
            "RET_FIGHT_FEST_COACH_SKILL_EQUIP_TYPE_EXISTED" => {
                Some(Self::RetFightFestCoachSkillEquipTypeExisted)
            }
            "RET_FIGHT_FEST_SCORE_RACE_MISSION_DOIND" => {
                Some(Self::RetFightFestScoreRaceMissionDoind)
            }
            "RET_FIGHT_FEST_COACH_SKILL_NO_EQUIP" => {
                Some(Self::RetFightFestCoachSkillNoEquip)
            }
            "RET_PET_NOT_EXIST" => Some(Self::RetPetNotExist),
            "RET_PET_ALREADY_SUMMONED" => Some(Self::RetPetAlreadySummoned),
            "RET_PET_NOT_SUMMONED" => Some(Self::RetPetNotSummoned),
            "RET_MUSIC_RHYTHM_LEVEL_TIME_TOO_SHORT" => {
                Some(Self::RetMusicRhythmLevelTimeTooShort)
            }
            "RET_MUSIC_RHYTHM_NOT_IN_LEVEL" => Some(Self::RetMusicRhythmNotInLevel),
            "RET_MUSIC_RHYTHM_PRE_DIFFICULTY_NOT_PASS" => {
                Some(Self::RetMusicRhythmPreDifficultyNotPass)
            }
            "RET_MUSIC_RHYTHM_SONG_LIMITED" => Some(Self::RetMusicRhythmSongLimited),
            "RET_MUSIC_RHYTHM_SONG_LOCKED" => Some(Self::RetMusicRhythmSongLocked),
            "RET_MUSIC_RHYTHM_TRACK_LOCKED" => Some(Self::RetMusicRhythmTrackLocked),
            "RET_MUSIC_RHYTHM_LEVEL_NOT_UNLOCK" => {
                Some(Self::RetMusicRhythmLevelNotUnlock)
            }
            "RET_MUSIC_RHYTHM_SONG_SFX_LOCKED" => Some(Self::RetMusicRhythmSongSfxLocked),
            "RET_TRAIN_PARTY_COIN_NOT_ENOUGH" => Some(Self::RetTrainPartyCoinNotEnough),
            "RET_TRAIN_PARTY_DIY_TAG_NOT_MATCH" => {
                Some(Self::RetTrainPartyDiyTagNotMatch)
            }
            "RET_TRAIN_PARTY_USE_CARD_MOBILITY_NOT_ENOUGH" => {
                Some(Self::RetTrainPartyUseCardMobilityNotEnough)
            }
            "RET_TRAIN_PARTY_AREA_UNLOCK_COIN_NOT_ENOUGH" => {
                Some(Self::RetTrainPartyAreaUnlockCoinNotEnough)
            }
            "RET_TAROT_BOOK_ENERGY_NOT_ENOUGH" => Some(Self::RetTarotBookEnergyNotEnough),
            "RET_TAROT_BOOK_PACK_NOT_AVAILABLE" => {
                Some(Self::RetTarotBookPackNotAvailable)
            }
            "RET_TAROT_BOOK_STORY_ALREADY_UNLOCK" => {
                Some(Self::RetTarotBookStoryAlreadyUnlock)
            }
            "RET_TAROT_BOOK_CARD_NOT_ENOUGH" => Some(Self::RetTarotBookCardNotEnough),
            "RET_TAROT_BOOK_CLUE_NOT_ENOUGH" => Some(Self::RetTarotBookClueNotEnough),
            "RET_TAROT_BOOK_UNLOCK_STORY_CARD_NOT_SAME" => {
                Some(Self::RetTarotBookUnlockStoryCardNotSame)
            }
            "RET_TAROT_BOOK_STORY_NOT_UNLOCK" => Some(Self::RetTarotBookStoryNotUnlock),
            "RET_TAROT_BOOK_STORY_ALREADY_FINISH" => {
                Some(Self::RetTarotBookStoryAlreadyFinish)
            }
            "RET_TAROT_BOOK_INTERACTION_ALREADY_FINISH" => {
                Some(Self::RetTarotBookInteractionAlreadyFinish)
            }
            "RET_CHIMERA_CHIMERA_NOT_UNLOCK" => Some(Self::RetChimeraChimeraNotUnlock),
            "RET_CHIMERA_CHIMERA_DUPLICATED" => Some(Self::RetChimeraChimeraDuplicated),
            "RET_CHIMERA_CHIMERA_TYPE_ERROR" => Some(Self::RetChimeraChimeraTypeError),
            "RET_CHIMERA_WORK_MISMATCH_ROUND" => Some(Self::RetChimeraWorkMismatchRound),
            "RET_CHIMERA_WORK_ROUND_OPTION_NOT_MEET" => {
                Some(Self::RetChimeraWorkRoundOptionNotMeet)
            }
            "RET_CHIMERA_ENDLESS_NOT_UNLOCK" => Some(Self::RetChimeraEndlessNotUnlock),
            "RET_CHIMERA_IN_ENDLESS" => Some(Self::RetChimeraInEndless),
            "RET_CHIMERA_NOT_IN_ENDLESS" => Some(Self::RetChimeraNotInEndless),
            "RET_CHIMERA_CHIMERA_FALL_IN_ENDLESS" => {
                Some(Self::RetChimeraChimeraFallInEndless)
            }
            _ => None,
        }
    }
}
/// IADDHHOPMOD
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdActivityType {
    None = 0,
    CmdStartTrialActivityScRsp = 2607,
    CmdGetActivityScheduleConfigCsReq = 2630,
    CmdSubmitMaterialSubmitActivityMaterialScRsp = 2612,
    CmdCurTrialActivityScNotify = 2665,
    CmdEnterTrialActivityStageCsReq = 2655,
    CmdTakeTrialActivityRewardScRsp = 2626,
    CmdGetTrialActivityDataScRsp = 2661,
    CmdTakeLoginActivityRewardScRsp = 2624,
    CmdGetTrialActivityDataCsReq = 2654,
    CmdGetMaterialSubmitActivityDataScRsp = 2696,
    CmdSubmitMaterialSubmitActivityMaterialCsReq = 2623,
    CmdLeaveTrialActivityScRsp = 2689,
    CmdLeaveTrialActivityCsReq = 2688,
    CmdGetMaterialSubmitActivityDataCsReq = 2639,
    CmdGetLoginActivityCsReq = 2601,
    CmdTakeMaterialSubmitActivityRewardScRsp = 2691,
    CmdTrialActivityDataChangeScNotify = 2690,
    CmdTakeTrialActivityRewardCsReq = 2660,
    CmdStartTrialActivityCsReq = 2663,
    CmdEnterTrialActivityStageScRsp = 2685,
    CmdTakeMaterialSubmitActivityRewardCsReq = 2617,
    CmdGetActivityScheduleConfigScRsp = 2656,
    CmdGetLoginActivityScRsp = 2668,
    CmdTakeLoginActivityRewardCsReq = 2658,
}
impl CmdActivityType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdActivityTypeNone",
            Self::CmdStartTrialActivityScRsp => "CmdStartTrialActivityScRsp",
            Self::CmdGetActivityScheduleConfigCsReq => {
                "CmdGetActivityScheduleConfigCsReq"
            }
            Self::CmdSubmitMaterialSubmitActivityMaterialScRsp => {
                "CmdSubmitMaterialSubmitActivityMaterialScRsp"
            }
            Self::CmdCurTrialActivityScNotify => "CmdCurTrialActivityScNotify",
            Self::CmdEnterTrialActivityStageCsReq => "CmdEnterTrialActivityStageCsReq",
            Self::CmdTakeTrialActivityRewardScRsp => "CmdTakeTrialActivityRewardScRsp",
            Self::CmdGetTrialActivityDataScRsp => "CmdGetTrialActivityDataScRsp",
            Self::CmdTakeLoginActivityRewardScRsp => "CmdTakeLoginActivityRewardScRsp",
            Self::CmdGetTrialActivityDataCsReq => "CmdGetTrialActivityDataCsReq",
            Self::CmdGetMaterialSubmitActivityDataScRsp => {
                "CmdGetMaterialSubmitActivityDataScRsp"
            }
            Self::CmdSubmitMaterialSubmitActivityMaterialCsReq => {
                "CmdSubmitMaterialSubmitActivityMaterialCsReq"
            }
            Self::CmdLeaveTrialActivityScRsp => "CmdLeaveTrialActivityScRsp",
            Self::CmdLeaveTrialActivityCsReq => "CmdLeaveTrialActivityCsReq",
            Self::CmdGetMaterialSubmitActivityDataCsReq => {
                "CmdGetMaterialSubmitActivityDataCsReq"
            }
            Self::CmdGetLoginActivityCsReq => "CmdGetLoginActivityCsReq",
            Self::CmdTakeMaterialSubmitActivityRewardScRsp => {
                "CmdTakeMaterialSubmitActivityRewardScRsp"
            }
            Self::CmdTrialActivityDataChangeScNotify => {
                "CmdTrialActivityDataChangeScNotify"
            }
            Self::CmdTakeTrialActivityRewardCsReq => "CmdTakeTrialActivityRewardCsReq",
            Self::CmdStartTrialActivityCsReq => "CmdStartTrialActivityCsReq",
            Self::CmdEnterTrialActivityStageScRsp => "CmdEnterTrialActivityStageScRsp",
            Self::CmdTakeMaterialSubmitActivityRewardCsReq => {
                "CmdTakeMaterialSubmitActivityRewardCsReq"
            }
            Self::CmdGetActivityScheduleConfigScRsp => {
                "CmdGetActivityScheduleConfigScRsp"
            }
            Self::CmdGetLoginActivityScRsp => "CmdGetLoginActivityScRsp",
            Self::CmdTakeLoginActivityRewardCsReq => "CmdTakeLoginActivityRewardCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdActivityTypeNone" => Some(Self::None),
            "CmdStartTrialActivityScRsp" => Some(Self::CmdStartTrialActivityScRsp),
            "CmdGetActivityScheduleConfigCsReq" => {
                Some(Self::CmdGetActivityScheduleConfigCsReq)
            }
            "CmdSubmitMaterialSubmitActivityMaterialScRsp" => {
                Some(Self::CmdSubmitMaterialSubmitActivityMaterialScRsp)
            }
            "CmdCurTrialActivityScNotify" => Some(Self::CmdCurTrialActivityScNotify),
            "CmdEnterTrialActivityStageCsReq" => {
                Some(Self::CmdEnterTrialActivityStageCsReq)
            }
            "CmdTakeTrialActivityRewardScRsp" => {
                Some(Self::CmdTakeTrialActivityRewardScRsp)
            }
            "CmdGetTrialActivityDataScRsp" => Some(Self::CmdGetTrialActivityDataScRsp),
            "CmdTakeLoginActivityRewardScRsp" => {
                Some(Self::CmdTakeLoginActivityRewardScRsp)
            }
            "CmdGetTrialActivityDataCsReq" => Some(Self::CmdGetTrialActivityDataCsReq),
            "CmdGetMaterialSubmitActivityDataScRsp" => {
                Some(Self::CmdGetMaterialSubmitActivityDataScRsp)
            }
            "CmdSubmitMaterialSubmitActivityMaterialCsReq" => {
                Some(Self::CmdSubmitMaterialSubmitActivityMaterialCsReq)
            }
            "CmdLeaveTrialActivityScRsp" => Some(Self::CmdLeaveTrialActivityScRsp),
            "CmdLeaveTrialActivityCsReq" => Some(Self::CmdLeaveTrialActivityCsReq),
            "CmdGetMaterialSubmitActivityDataCsReq" => {
                Some(Self::CmdGetMaterialSubmitActivityDataCsReq)
            }
            "CmdGetLoginActivityCsReq" => Some(Self::CmdGetLoginActivityCsReq),
            "CmdTakeMaterialSubmitActivityRewardScRsp" => {
                Some(Self::CmdTakeMaterialSubmitActivityRewardScRsp)
            }
            "CmdTrialActivityDataChangeScNotify" => {
                Some(Self::CmdTrialActivityDataChangeScNotify)
            }
            "CmdTakeTrialActivityRewardCsReq" => {
                Some(Self::CmdTakeTrialActivityRewardCsReq)
            }
            "CmdStartTrialActivityCsReq" => Some(Self::CmdStartTrialActivityCsReq),
            "CmdEnterTrialActivityStageScRsp" => {
                Some(Self::CmdEnterTrialActivityStageScRsp)
            }
            "CmdTakeMaterialSubmitActivityRewardCsReq" => {
                Some(Self::CmdTakeMaterialSubmitActivityRewardCsReq)
            }
            "CmdGetActivityScheduleConfigScRsp" => {
                Some(Self::CmdGetActivityScheduleConfigScRsp)
            }
            "CmdGetLoginActivityScRsp" => Some(Self::CmdGetLoginActivityScRsp),
            "CmdTakeLoginActivityRewardCsReq" => {
                Some(Self::CmdTakeLoginActivityRewardCsReq)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum TrialActivityStatus {
    None = 0,
    Finish = 1,
}
impl TrialActivityStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "TRIAL_ACTIVITY_STATUS_NONE",
            Self::Finish => "TRIAL_ACTIVITY_STATUS_FINISH",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "TRIAL_ACTIVITY_STATUS_NONE" => Some(Self::None),
            "TRIAL_ACTIVITY_STATUS_FINISH" => Some(Self::Finish),
            _ => None,
        }
    }
}
/// GKCEOHNMEFN
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdAdventureType {
    None = 0,
    CmdQuickStartCocoonStageScRsp = 1356,
    CmdQuickStartFarmElementCsReq = 1397,
    CmdQuickStartFarmElementScRsp = 1376,
    CmdGetFarmStageGachaInfoScRsp = 1324,
    CmdGetFarmStageGachaInfoCsReq = 1358,
    CmdEnterAdventureScRsp = 1368,
    CmdEnterAdventureCsReq = 1301,
    CmdQuickStartCocoonStageCsReq = 1330,
}
impl CmdAdventureType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdAdventureTypeNone",
            Self::CmdQuickStartCocoonStageScRsp => "CmdQuickStartCocoonStageScRsp",
            Self::CmdQuickStartFarmElementCsReq => "CmdQuickStartFarmElementCsReq",
            Self::CmdQuickStartFarmElementScRsp => "CmdQuickStartFarmElementScRsp",
            Self::CmdGetFarmStageGachaInfoScRsp => "CmdGetFarmStageGachaInfoScRsp",
            Self::CmdGetFarmStageGachaInfoCsReq => "CmdGetFarmStageGachaInfoCsReq",
            Self::CmdEnterAdventureScRsp => "CmdEnterAdventureScRsp",
            Self::CmdEnterAdventureCsReq => "CmdEnterAdventureCsReq",
            Self::CmdQuickStartCocoonStageCsReq => "CmdQuickStartCocoonStageCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdAdventureTypeNone" => Some(Self::None),
            "CmdQuickStartCocoonStageScRsp" => Some(Self::CmdQuickStartCocoonStageScRsp),
            "CmdQuickStartFarmElementCsReq" => Some(Self::CmdQuickStartFarmElementCsReq),
            "CmdQuickStartFarmElementScRsp" => Some(Self::CmdQuickStartFarmElementScRsp),
            "CmdGetFarmStageGachaInfoScRsp" => Some(Self::CmdGetFarmStageGachaInfoScRsp),
            "CmdGetFarmStageGachaInfoCsReq" => Some(Self::CmdGetFarmStageGachaInfoCsReq),
            "CmdEnterAdventureScRsp" => Some(Self::CmdEnterAdventureScRsp),
            "CmdEnterAdventureCsReq" => Some(Self::CmdEnterAdventureCsReq),
            "CmdQuickStartCocoonStageCsReq" => Some(Self::CmdQuickStartCocoonStageCsReq),
            _ => None,
        }
    }
}
/// NOECJNGPMFK
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdAetherDivideType {
    None = 0,
    CmdEnterAetherDivideSceneScRsp = 4837,
    CmdAetherDivideLineupScNotify = 4831,
    CmdEquipAetherDividePassiveSkillScRsp = 4814,
    CmdAetherDivideRefreshEndlessScRsp = 4816,
    CmdEquipAetherDividePassiveSkillCsReq = 4832,
    CmdClearAetherDividePassiveSkillScRsp = 4810,
    CmdSwitchAetherDivideLineUpSlotCsReq = 4835,
    CmdAetherDivideTainerInfoScNotify = 4812,
    CmdEnterAetherDivideSceneCsReq = 4826,
    CmdSetAetherDivideLineUpCsReq = 4848,
    CmdGetAetherDivideInfoScRsp = 4802,
    CmdClearAetherDividePassiveSkillCsReq = 4840,
    CmdSwitchAetherDivideLineUpSlotScRsp = 4809,
    CmdGetAetherDivideChallengeInfoScRsp = 4803,
    CmdGetAetherDivideChallengeInfoCsReq = 4845,
    CmdAetherDivideTakeChallengeRewardScRsp = 4827,
    CmdLeaveAetherDivideSceneCsReq = 4841,
    CmdStartAetherDivideStageBattleScRsp = 4801,
    CmdAetherDivideTakeChallengeRewardCsReq = 4849,
    CmdAetherDivideSpiritExpUpScRsp = 4820,
    CmdStartAetherDivideChallengeBattleScRsp = 4829,
    CmdAetherDivideSpiritInfoScNotify = 4839,
    CmdStartAetherDivideStageBattleCsReq = 4824,
    CmdAetherDivideRefreshEndlessCsReq = 4834,
    CmdStartAetherDivideChallengeBattleCsReq = 4807,
    CmdSetAetherDivideLineUpScRsp = 4804,
    CmdGetAetherDivideInfoCsReq = 4830,
    CmdStartAetherDivideSceneBattleCsReq = 4806,
    CmdAetherDivideSkillItemScNotify = 4817,
    CmdLeaveAetherDivideSceneScRsp = 4843,
    CmdAetherDivideRefreshEndlessScNotify = 4846,
    CmdAetherDivideFinishChallengeScNotify = 4828,
    CmdAetherDivideSpiritExpUpCsReq = 4821,
    CmdStartAetherDivideSceneBattleScRsp = 4833,
}
impl CmdAetherDivideType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdAetherDivideTypeNone",
            Self::CmdEnterAetherDivideSceneScRsp => "CmdEnterAetherDivideSceneScRsp",
            Self::CmdAetherDivideLineupScNotify => "CmdAetherDivideLineupScNotify",
            Self::CmdEquipAetherDividePassiveSkillScRsp => {
                "CmdEquipAetherDividePassiveSkillScRsp"
            }
            Self::CmdAetherDivideRefreshEndlessScRsp => {
                "CmdAetherDivideRefreshEndlessScRsp"
            }
            Self::CmdEquipAetherDividePassiveSkillCsReq => {
                "CmdEquipAetherDividePassiveSkillCsReq"
            }
            Self::CmdClearAetherDividePassiveSkillScRsp => {
                "CmdClearAetherDividePassiveSkillScRsp"
            }
            Self::CmdSwitchAetherDivideLineUpSlotCsReq => {
                "CmdSwitchAetherDivideLineUpSlotCsReq"
            }
            Self::CmdAetherDivideTainerInfoScNotify => {
                "CmdAetherDivideTainerInfoScNotify"
            }
            Self::CmdEnterAetherDivideSceneCsReq => "CmdEnterAetherDivideSceneCsReq",
            Self::CmdSetAetherDivideLineUpCsReq => "CmdSetAetherDivideLineUpCsReq",
            Self::CmdGetAetherDivideInfoScRsp => "CmdGetAetherDivideInfoScRsp",
            Self::CmdClearAetherDividePassiveSkillCsReq => {
                "CmdClearAetherDividePassiveSkillCsReq"
            }
            Self::CmdSwitchAetherDivideLineUpSlotScRsp => {
                "CmdSwitchAetherDivideLineUpSlotScRsp"
            }
            Self::CmdGetAetherDivideChallengeInfoScRsp => {
                "CmdGetAetherDivideChallengeInfoScRsp"
            }
            Self::CmdGetAetherDivideChallengeInfoCsReq => {
                "CmdGetAetherDivideChallengeInfoCsReq"
            }
            Self::CmdAetherDivideTakeChallengeRewardScRsp => {
                "CmdAetherDivideTakeChallengeRewardScRsp"
            }
            Self::CmdLeaveAetherDivideSceneCsReq => "CmdLeaveAetherDivideSceneCsReq",
            Self::CmdStartAetherDivideStageBattleScRsp => {
                "CmdStartAetherDivideStageBattleScRsp"
            }
            Self::CmdAetherDivideTakeChallengeRewardCsReq => {
                "CmdAetherDivideTakeChallengeRewardCsReq"
            }
            Self::CmdAetherDivideSpiritExpUpScRsp => "CmdAetherDivideSpiritExpUpScRsp",
            Self::CmdStartAetherDivideChallengeBattleScRsp => {
                "CmdStartAetherDivideChallengeBattleScRsp"
            }
            Self::CmdAetherDivideSpiritInfoScNotify => {
                "CmdAetherDivideSpiritInfoScNotify"
            }
            Self::CmdStartAetherDivideStageBattleCsReq => {
                "CmdStartAetherDivideStageBattleCsReq"
            }
            Self::CmdAetherDivideRefreshEndlessCsReq => {
                "CmdAetherDivideRefreshEndlessCsReq"
            }
            Self::CmdStartAetherDivideChallengeBattleCsReq => {
                "CmdStartAetherDivideChallengeBattleCsReq"
            }
            Self::CmdSetAetherDivideLineUpScRsp => "CmdSetAetherDivideLineUpScRsp",
            Self::CmdGetAetherDivideInfoCsReq => "CmdGetAetherDivideInfoCsReq",
            Self::CmdStartAetherDivideSceneBattleCsReq => {
                "CmdStartAetherDivideSceneBattleCsReq"
            }
            Self::CmdAetherDivideSkillItemScNotify => "CmdAetherDivideSkillItemScNotify",
            Self::CmdLeaveAetherDivideSceneScRsp => "CmdLeaveAetherDivideSceneScRsp",
            Self::CmdAetherDivideRefreshEndlessScNotify => {
                "CmdAetherDivideRefreshEndlessScNotify"
            }
            Self::CmdAetherDivideFinishChallengeScNotify => {
                "CmdAetherDivideFinishChallengeScNotify"
            }
            Self::CmdAetherDivideSpiritExpUpCsReq => "CmdAetherDivideSpiritExpUpCsReq",
            Self::CmdStartAetherDivideSceneBattleScRsp => {
                "CmdStartAetherDivideSceneBattleScRsp"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdAetherDivideTypeNone" => Some(Self::None),
            "CmdEnterAetherDivideSceneScRsp" => {
                Some(Self::CmdEnterAetherDivideSceneScRsp)
            }
            "CmdAetherDivideLineupScNotify" => Some(Self::CmdAetherDivideLineupScNotify),
            "CmdEquipAetherDividePassiveSkillScRsp" => {
                Some(Self::CmdEquipAetherDividePassiveSkillScRsp)
            }
            "CmdAetherDivideRefreshEndlessScRsp" => {
                Some(Self::CmdAetherDivideRefreshEndlessScRsp)
            }
            "CmdEquipAetherDividePassiveSkillCsReq" => {
                Some(Self::CmdEquipAetherDividePassiveSkillCsReq)
            }
            "CmdClearAetherDividePassiveSkillScRsp" => {
                Some(Self::CmdClearAetherDividePassiveSkillScRsp)
            }
            "CmdSwitchAetherDivideLineUpSlotCsReq" => {
                Some(Self::CmdSwitchAetherDivideLineUpSlotCsReq)
            }
            "CmdAetherDivideTainerInfoScNotify" => {
                Some(Self::CmdAetherDivideTainerInfoScNotify)
            }
            "CmdEnterAetherDivideSceneCsReq" => {
                Some(Self::CmdEnterAetherDivideSceneCsReq)
            }
            "CmdSetAetherDivideLineUpCsReq" => Some(Self::CmdSetAetherDivideLineUpCsReq),
            "CmdGetAetherDivideInfoScRsp" => Some(Self::CmdGetAetherDivideInfoScRsp),
            "CmdClearAetherDividePassiveSkillCsReq" => {
                Some(Self::CmdClearAetherDividePassiveSkillCsReq)
            }
            "CmdSwitchAetherDivideLineUpSlotScRsp" => {
                Some(Self::CmdSwitchAetherDivideLineUpSlotScRsp)
            }
            "CmdGetAetherDivideChallengeInfoScRsp" => {
                Some(Self::CmdGetAetherDivideChallengeInfoScRsp)
            }
            "CmdGetAetherDivideChallengeInfoCsReq" => {
                Some(Self::CmdGetAetherDivideChallengeInfoCsReq)
            }
            "CmdAetherDivideTakeChallengeRewardScRsp" => {
                Some(Self::CmdAetherDivideTakeChallengeRewardScRsp)
            }
            "CmdLeaveAetherDivideSceneCsReq" => {
                Some(Self::CmdLeaveAetherDivideSceneCsReq)
            }
            "CmdStartAetherDivideStageBattleScRsp" => {
                Some(Self::CmdStartAetherDivideStageBattleScRsp)
            }
            "CmdAetherDivideTakeChallengeRewardCsReq" => {
                Some(Self::CmdAetherDivideTakeChallengeRewardCsReq)
            }
            "CmdAetherDivideSpiritExpUpScRsp" => {
                Some(Self::CmdAetherDivideSpiritExpUpScRsp)
            }
            "CmdStartAetherDivideChallengeBattleScRsp" => {
                Some(Self::CmdStartAetherDivideChallengeBattleScRsp)
            }
            "CmdAetherDivideSpiritInfoScNotify" => {
                Some(Self::CmdAetherDivideSpiritInfoScNotify)
            }
            "CmdStartAetherDivideStageBattleCsReq" => {
                Some(Self::CmdStartAetherDivideStageBattleCsReq)
            }
            "CmdAetherDivideRefreshEndlessCsReq" => {
                Some(Self::CmdAetherDivideRefreshEndlessCsReq)
            }
            "CmdStartAetherDivideChallengeBattleCsReq" => {
                Some(Self::CmdStartAetherDivideChallengeBattleCsReq)
            }
            "CmdSetAetherDivideLineUpScRsp" => Some(Self::CmdSetAetherDivideLineUpScRsp),
            "CmdGetAetherDivideInfoCsReq" => Some(Self::CmdGetAetherDivideInfoCsReq),
            "CmdStartAetherDivideSceneBattleCsReq" => {
                Some(Self::CmdStartAetherDivideSceneBattleCsReq)
            }
            "CmdAetherDivideSkillItemScNotify" => {
                Some(Self::CmdAetherDivideSkillItemScNotify)
            }
            "CmdLeaveAetherDivideSceneScRsp" => {
                Some(Self::CmdLeaveAetherDivideSceneScRsp)
            }
            "CmdAetherDivideRefreshEndlessScNotify" => {
                Some(Self::CmdAetherDivideRefreshEndlessScNotify)
            }
            "CmdAetherDivideFinishChallengeScNotify" => {
                Some(Self::CmdAetherDivideFinishChallengeScNotify)
            }
            "CmdAetherDivideSpiritExpUpCsReq" => {
                Some(Self::CmdAetherDivideSpiritExpUpCsReq)
            }
            "CmdStartAetherDivideSceneBattleScRsp" => {
                Some(Self::CmdStartAetherDivideSceneBattleScRsp)
            }
            _ => None,
        }
    }
}
/// ACBFCPEHPLO
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdAlleyType {
    None = 0,
    CmdAlleyEventEffectNotify = 4711,
    CmdGetSaveLogisticsMapScRsp = 4781,
    CmdAlleyShipUnlockScNotify = 4750,
    CmdTakePrestigeRewardScRsp = 4714,
    CmdAlleyShopLevelScNotify = 4795,
    CmdActivityRaidPlacingGameCsReq = 4757,
    CmdLogisticsGameScRsp = 4724,
    CmdLogisticsGameCsReq = 4758,
    CmdLogisticsScoreRewardSyncInfoScNotify = 4703,
    CmdRefreshAlleyOrderScRsp = 4796,
    CmdLogisticsInfoScNotify = 4720,
    CmdAlleyShipUsedCountScNotify = 4738,
    CmdAlleyShipmentEventEffectsScNotify = 4792,
    CmdPrestigeLevelUpCsReq = 4717,
    CmdAlleyGuaranteedFundsCsReq = 4719,
    CmdActivityRaidPlacingGameScRsp = 4713,
    CmdAlleyFundsScNotify = 4718,
    CmdTakePrestigeRewardCsReq = 4705,
    CmdLogisticsDetonateStarSkiffScRsp = 4740,
    CmdLogisticsDetonateStarSkiffCsReq = 4773,
    CmdAlleyPlacingGameScRsp = 4722,
    CmdStartAlleyEventCsReq = 4797,
    CmdGetAlleyInfoCsReq = 4701,
    CmdStartAlleyEventScRsp = 4776,
    CmdAlleyEventChangeNotify = 4728,
    CmdAlleyPlacingGameCsReq = 4749,
    CmdAlleyOrderChangedScNotify = 4723,
    CmdGetSaveLogisticsMapCsReq = 4770,
    CmdAlleyTakeEventRewardScRsp = 4741,
    CmdRefreshAlleyOrderCsReq = 4739,
    CmdAlleyTakeEventRewardCsReq = 4759,
    CmdAlleyGuaranteedFundsScRsp = 4782,
    CmdGetAlleyInfoScRsp = 4768,
    CmdSaveLogisticsCsReq = 4748,
    CmdSaveLogisticsScRsp = 4769,
    CmdPrestigeLevelUpScRsp = 4791,
}
impl CmdAlleyType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdAlleyTypeNone",
            Self::CmdAlleyEventEffectNotify => "CmdAlleyEventEffectNotify",
            Self::CmdGetSaveLogisticsMapScRsp => "CmdGetSaveLogisticsMapScRsp",
            Self::CmdAlleyShipUnlockScNotify => "CmdAlleyShipUnlockScNotify",
            Self::CmdTakePrestigeRewardScRsp => "CmdTakePrestigeRewardScRsp",
            Self::CmdAlleyShopLevelScNotify => "CmdAlleyShopLevelScNotify",
            Self::CmdActivityRaidPlacingGameCsReq => "CmdActivityRaidPlacingGameCsReq",
            Self::CmdLogisticsGameScRsp => "CmdLogisticsGameScRsp",
            Self::CmdLogisticsGameCsReq => "CmdLogisticsGameCsReq",
            Self::CmdLogisticsScoreRewardSyncInfoScNotify => {
                "CmdLogisticsScoreRewardSyncInfoScNotify"
            }
            Self::CmdRefreshAlleyOrderScRsp => "CmdRefreshAlleyOrderScRsp",
            Self::CmdLogisticsInfoScNotify => "CmdLogisticsInfoScNotify",
            Self::CmdAlleyShipUsedCountScNotify => "CmdAlleyShipUsedCountScNotify",
            Self::CmdAlleyShipmentEventEffectsScNotify => {
                "CmdAlleyShipmentEventEffectsScNotify"
            }
            Self::CmdPrestigeLevelUpCsReq => "CmdPrestigeLevelUpCsReq",
            Self::CmdAlleyGuaranteedFundsCsReq => "CmdAlleyGuaranteedFundsCsReq",
            Self::CmdActivityRaidPlacingGameScRsp => "CmdActivityRaidPlacingGameScRsp",
            Self::CmdAlleyFundsScNotify => "CmdAlleyFundsScNotify",
            Self::CmdTakePrestigeRewardCsReq => "CmdTakePrestigeRewardCsReq",
            Self::CmdLogisticsDetonateStarSkiffScRsp => {
                "CmdLogisticsDetonateStarSkiffScRsp"
            }
            Self::CmdLogisticsDetonateStarSkiffCsReq => {
                "CmdLogisticsDetonateStarSkiffCsReq"
            }
            Self::CmdAlleyPlacingGameScRsp => "CmdAlleyPlacingGameScRsp",
            Self::CmdStartAlleyEventCsReq => "CmdStartAlleyEventCsReq",
            Self::CmdGetAlleyInfoCsReq => "CmdGetAlleyInfoCsReq",
            Self::CmdStartAlleyEventScRsp => "CmdStartAlleyEventScRsp",
            Self::CmdAlleyEventChangeNotify => "CmdAlleyEventChangeNotify",
            Self::CmdAlleyPlacingGameCsReq => "CmdAlleyPlacingGameCsReq",
            Self::CmdAlleyOrderChangedScNotify => "CmdAlleyOrderChangedScNotify",
            Self::CmdGetSaveLogisticsMapCsReq => "CmdGetSaveLogisticsMapCsReq",
            Self::CmdAlleyTakeEventRewardScRsp => "CmdAlleyTakeEventRewardScRsp",
            Self::CmdRefreshAlleyOrderCsReq => "CmdRefreshAlleyOrderCsReq",
            Self::CmdAlleyTakeEventRewardCsReq => "CmdAlleyTakeEventRewardCsReq",
            Self::CmdAlleyGuaranteedFundsScRsp => "CmdAlleyGuaranteedFundsScRsp",
            Self::CmdGetAlleyInfoScRsp => "CmdGetAlleyInfoScRsp",
            Self::CmdSaveLogisticsCsReq => "CmdSaveLogisticsCsReq",
            Self::CmdSaveLogisticsScRsp => "CmdSaveLogisticsScRsp",
            Self::CmdPrestigeLevelUpScRsp => "CmdPrestigeLevelUpScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdAlleyTypeNone" => Some(Self::None),
            "CmdAlleyEventEffectNotify" => Some(Self::CmdAlleyEventEffectNotify),
            "CmdGetSaveLogisticsMapScRsp" => Some(Self::CmdGetSaveLogisticsMapScRsp),
            "CmdAlleyShipUnlockScNotify" => Some(Self::CmdAlleyShipUnlockScNotify),
            "CmdTakePrestigeRewardScRsp" => Some(Self::CmdTakePrestigeRewardScRsp),
            "CmdAlleyShopLevelScNotify" => Some(Self::CmdAlleyShopLevelScNotify),
            "CmdActivityRaidPlacingGameCsReq" => {
                Some(Self::CmdActivityRaidPlacingGameCsReq)
            }
            "CmdLogisticsGameScRsp" => Some(Self::CmdLogisticsGameScRsp),
            "CmdLogisticsGameCsReq" => Some(Self::CmdLogisticsGameCsReq),
            "CmdLogisticsScoreRewardSyncInfoScNotify" => {
                Some(Self::CmdLogisticsScoreRewardSyncInfoScNotify)
            }
            "CmdRefreshAlleyOrderScRsp" => Some(Self::CmdRefreshAlleyOrderScRsp),
            "CmdLogisticsInfoScNotify" => Some(Self::CmdLogisticsInfoScNotify),
            "CmdAlleyShipUsedCountScNotify" => Some(Self::CmdAlleyShipUsedCountScNotify),
            "CmdAlleyShipmentEventEffectsScNotify" => {
                Some(Self::CmdAlleyShipmentEventEffectsScNotify)
            }
            "CmdPrestigeLevelUpCsReq" => Some(Self::CmdPrestigeLevelUpCsReq),
            "CmdAlleyGuaranteedFundsCsReq" => Some(Self::CmdAlleyGuaranteedFundsCsReq),
            "CmdActivityRaidPlacingGameScRsp" => {
                Some(Self::CmdActivityRaidPlacingGameScRsp)
            }
            "CmdAlleyFundsScNotify" => Some(Self::CmdAlleyFundsScNotify),
            "CmdTakePrestigeRewardCsReq" => Some(Self::CmdTakePrestigeRewardCsReq),
            "CmdLogisticsDetonateStarSkiffScRsp" => {
                Some(Self::CmdLogisticsDetonateStarSkiffScRsp)
            }
            "CmdLogisticsDetonateStarSkiffCsReq" => {
                Some(Self::CmdLogisticsDetonateStarSkiffCsReq)
            }
            "CmdAlleyPlacingGameScRsp" => Some(Self::CmdAlleyPlacingGameScRsp),
            "CmdStartAlleyEventCsReq" => Some(Self::CmdStartAlleyEventCsReq),
            "CmdGetAlleyInfoCsReq" => Some(Self::CmdGetAlleyInfoCsReq),
            "CmdStartAlleyEventScRsp" => Some(Self::CmdStartAlleyEventScRsp),
            "CmdAlleyEventChangeNotify" => Some(Self::CmdAlleyEventChangeNotify),
            "CmdAlleyPlacingGameCsReq" => Some(Self::CmdAlleyPlacingGameCsReq),
            "CmdAlleyOrderChangedScNotify" => Some(Self::CmdAlleyOrderChangedScNotify),
            "CmdGetSaveLogisticsMapCsReq" => Some(Self::CmdGetSaveLogisticsMapCsReq),
            "CmdAlleyTakeEventRewardScRsp" => Some(Self::CmdAlleyTakeEventRewardScRsp),
            "CmdRefreshAlleyOrderCsReq" => Some(Self::CmdRefreshAlleyOrderCsReq),
            "CmdAlleyTakeEventRewardCsReq" => Some(Self::CmdAlleyTakeEventRewardCsReq),
            "CmdAlleyGuaranteedFundsScRsp" => Some(Self::CmdAlleyGuaranteedFundsScRsp),
            "CmdGetAlleyInfoScRsp" => Some(Self::CmdGetAlleyInfoScRsp),
            "CmdSaveLogisticsCsReq" => Some(Self::CmdSaveLogisticsCsReq),
            "CmdSaveLogisticsScRsp" => Some(Self::CmdSaveLogisticsScRsp),
            "CmdPrestigeLevelUpScRsp" => Some(Self::CmdPrestigeLevelUpScRsp),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Gbphkkmolmf {
    Left = 0,
    Right = 1,
    Up = 2,
    Down = 3,
    LeftUp = 4,
    LeftDown = 5,
    RightUp = 6,
    RightDown = 7,
}
impl Gbphkkmolmf {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Left => "LEFT",
            Self::Right => "RIGHT",
            Self::Up => "UP",
            Self::Down => "DOWN",
            Self::LeftUp => "LEFT_UP",
            Self::LeftDown => "LEFT_DOWN",
            Self::RightUp => "RIGHT_UP",
            Self::RightDown => "RIGHT_DOWN",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "LEFT" => Some(Self::Left),
            "RIGHT" => Some(Self::Right),
            "UP" => Some(Self::Up),
            "DOWN" => Some(Self::Down),
            "LEFT_UP" => Some(Self::LeftUp),
            "LEFT_DOWN" => Some(Self::LeftDown),
            "RIGHT_UP" => Some(Self::RightUp),
            "RIGHT_DOWN" => Some(Self::RightDown),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum AlleyEventType {
    None = 0,
    AlleyMainEvent = 1,
    AlleyCriticalEvent = 2,
    AlleyDailyEvent = 3,
}
impl AlleyEventType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "ALLEY_EVENT_TYPE_NONE",
            Self::AlleyMainEvent => "ALLEY_MAIN_EVENT",
            Self::AlleyCriticalEvent => "ALLEY_CRITICAL_EVENT",
            Self::AlleyDailyEvent => "ALLEY_DAILY_EVENT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ALLEY_EVENT_TYPE_NONE" => Some(Self::None),
            "ALLEY_MAIN_EVENT" => Some(Self::AlleyMainEvent),
            "ALLEY_CRITICAL_EVENT" => Some(Self::AlleyCriticalEvent),
            "ALLEY_DAILY_EVENT" => Some(Self::AlleyDailyEvent),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum AlleyEventState {
    AlleyStateNone = 0,
    AlleyEventDoing = 1,
    AlleyEventFinish = 2,
    AlleyEventRewarded = 3,
}
impl AlleyEventState {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::AlleyStateNone => "ALLEY_STATE_NONE",
            Self::AlleyEventDoing => "ALLEY_EVENT_DOING",
            Self::AlleyEventFinish => "ALLEY_EVENT_FINISH",
            Self::AlleyEventRewarded => "ALLEY_EVENT_REWARDED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ALLEY_STATE_NONE" => Some(Self::AlleyStateNone),
            "ALLEY_EVENT_DOING" => Some(Self::AlleyEventDoing),
            "ALLEY_EVENT_FINISH" => Some(Self::AlleyEventFinish),
            "ALLEY_EVENT_REWARDED" => Some(Self::AlleyEventRewarded),
            _ => None,
        }
    }
}
/// ADIFBKPHBAP
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdArchiveType {
    None = 0,
    CmdGetArchiveDataScRsp = 2368,
    CmdGetUpdatedArchiveDataScRsp = 2324,
    CmdGetUpdatedArchiveDataCsReq = 2358,
    CmdGetArchiveDataCsReq = 2301,
}
impl CmdArchiveType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdArchiveTypeNone",
            Self::CmdGetArchiveDataScRsp => "CmdGetArchiveDataScRsp",
            Self::CmdGetUpdatedArchiveDataScRsp => "CmdGetUpdatedArchiveDataScRsp",
            Self::CmdGetUpdatedArchiveDataCsReq => "CmdGetUpdatedArchiveDataCsReq",
            Self::CmdGetArchiveDataCsReq => "CmdGetArchiveDataCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdArchiveTypeNone" => Some(Self::None),
            "CmdGetArchiveDataScRsp" => Some(Self::CmdGetArchiveDataScRsp),
            "CmdGetUpdatedArchiveDataScRsp" => Some(Self::CmdGetUpdatedArchiveDataScRsp),
            "CmdGetUpdatedArchiveDataCsReq" => Some(Self::CmdGetUpdatedArchiveDataCsReq),
            "CmdGetArchiveDataCsReq" => Some(Self::CmdGetArchiveDataCsReq),
            _ => None,
        }
    }
}
/// FLJCHOOCKEK
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdAvatarType {
    None = 0,
    CmdGetAvatarDataScRsp = 368,
    CmdRankUpAvatarScRsp = 347,
    CmdTakeOffAvatarSkinCsReq = 395,
    CmdTakeOffEquipmentScRsp = 314,
    CmdAvatarExpUpCsReq = 358,
    CmdSetGrowthTargetAvatarScRsp = 381,
    CmdTakeOffAvatarSkinScRsp = 350,
    CmdDressAvatarCsReq = 328,
    CmdTakeOffEquipmentCsReq = 305,
    CmdTakeOffRelicScRsp = 323,
    CmdPromoteAvatarScRsp = 376,
    CmdUnlockAvatarSkinScNotify = 348,
    CmdDressRelicAvatarScRsp = 339,
    CmdUnlockSkilltreeCsReq = 330,
    CmdTakePromotionRewardCsReq = 312,
    CmdAddAvatarScNotify = 349,
    CmdPromoteAvatarCsReq = 397,
    CmdMarkAvatarScRsp = 320,
    CmdAddMultiPathAvatarScNotify = 392,
    CmdDressAvatarSkinCsReq = 391,
    CmdDressAvatarSkinScRsp = 318,
    CmdTakeOffRelicCsReq = 396,
    CmdSetGrowthTargetAvatarCsReq = 370,
    CmdDressAvatarScRsp = 311,
    CmdUnlockSkilltreeScRsp = 356,
    CmdAvatarExpUpScRsp = 324,
    CmdGrowthTargetAvatarChangedScNotify = 338,
    CmdRankUpAvatarCsReq = 322,
    CmdGetAvatarDataCsReq = 301,
    CmdTakePromotionRewardScRsp = 317,
    CmdMarkAvatarCsReq = 369,
    CmdDressRelicAvatarCsReq = 380,
}
impl CmdAvatarType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdAvatarTypeNone",
            Self::CmdGetAvatarDataScRsp => "CmdGetAvatarDataScRsp",
            Self::CmdRankUpAvatarScRsp => "CmdRankUpAvatarScRsp",
            Self::CmdTakeOffAvatarSkinCsReq => "CmdTakeOffAvatarSkinCsReq",
            Self::CmdTakeOffEquipmentScRsp => "CmdTakeOffEquipmentScRsp",
            Self::CmdAvatarExpUpCsReq => "CmdAvatarExpUpCsReq",
            Self::CmdSetGrowthTargetAvatarScRsp => "CmdSetGrowthTargetAvatarScRsp",
            Self::CmdTakeOffAvatarSkinScRsp => "CmdTakeOffAvatarSkinScRsp",
            Self::CmdDressAvatarCsReq => "CmdDressAvatarCsReq",
            Self::CmdTakeOffEquipmentCsReq => "CmdTakeOffEquipmentCsReq",
            Self::CmdTakeOffRelicScRsp => "CmdTakeOffRelicScRsp",
            Self::CmdPromoteAvatarScRsp => "CmdPromoteAvatarScRsp",
            Self::CmdUnlockAvatarSkinScNotify => "CmdUnlockAvatarSkinScNotify",
            Self::CmdDressRelicAvatarScRsp => "CmdDressRelicAvatarScRsp",
            Self::CmdUnlockSkilltreeCsReq => "CmdUnlockSkilltreeCsReq",
            Self::CmdTakePromotionRewardCsReq => "CmdTakePromotionRewardCsReq",
            Self::CmdAddAvatarScNotify => "CmdAddAvatarScNotify",
            Self::CmdPromoteAvatarCsReq => "CmdPromoteAvatarCsReq",
            Self::CmdMarkAvatarScRsp => "CmdMarkAvatarScRsp",
            Self::CmdAddMultiPathAvatarScNotify => "CmdAddMultiPathAvatarScNotify",
            Self::CmdDressAvatarSkinCsReq => "CmdDressAvatarSkinCsReq",
            Self::CmdDressAvatarSkinScRsp => "CmdDressAvatarSkinScRsp",
            Self::CmdTakeOffRelicCsReq => "CmdTakeOffRelicCsReq",
            Self::CmdSetGrowthTargetAvatarCsReq => "CmdSetGrowthTargetAvatarCsReq",
            Self::CmdDressAvatarScRsp => "CmdDressAvatarScRsp",
            Self::CmdUnlockSkilltreeScRsp => "CmdUnlockSkilltreeScRsp",
            Self::CmdAvatarExpUpScRsp => "CmdAvatarExpUpScRsp",
            Self::CmdGrowthTargetAvatarChangedScNotify => {
                "CmdGrowthTargetAvatarChangedScNotify"
            }
            Self::CmdRankUpAvatarCsReq => "CmdRankUpAvatarCsReq",
            Self::CmdGetAvatarDataCsReq => "CmdGetAvatarDataCsReq",
            Self::CmdTakePromotionRewardScRsp => "CmdTakePromotionRewardScRsp",
            Self::CmdMarkAvatarCsReq => "CmdMarkAvatarCsReq",
            Self::CmdDressRelicAvatarCsReq => "CmdDressRelicAvatarCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdAvatarTypeNone" => Some(Self::None),
            "CmdGetAvatarDataScRsp" => Some(Self::CmdGetAvatarDataScRsp),
            "CmdRankUpAvatarScRsp" => Some(Self::CmdRankUpAvatarScRsp),
            "CmdTakeOffAvatarSkinCsReq" => Some(Self::CmdTakeOffAvatarSkinCsReq),
            "CmdTakeOffEquipmentScRsp" => Some(Self::CmdTakeOffEquipmentScRsp),
            "CmdAvatarExpUpCsReq" => Some(Self::CmdAvatarExpUpCsReq),
            "CmdSetGrowthTargetAvatarScRsp" => Some(Self::CmdSetGrowthTargetAvatarScRsp),
            "CmdTakeOffAvatarSkinScRsp" => Some(Self::CmdTakeOffAvatarSkinScRsp),
            "CmdDressAvatarCsReq" => Some(Self::CmdDressAvatarCsReq),
            "CmdTakeOffEquipmentCsReq" => Some(Self::CmdTakeOffEquipmentCsReq),
            "CmdTakeOffRelicScRsp" => Some(Self::CmdTakeOffRelicScRsp),
            "CmdPromoteAvatarScRsp" => Some(Self::CmdPromoteAvatarScRsp),
            "CmdUnlockAvatarSkinScNotify" => Some(Self::CmdUnlockAvatarSkinScNotify),
            "CmdDressRelicAvatarScRsp" => Some(Self::CmdDressRelicAvatarScRsp),
            "CmdUnlockSkilltreeCsReq" => Some(Self::CmdUnlockSkilltreeCsReq),
            "CmdTakePromotionRewardCsReq" => Some(Self::CmdTakePromotionRewardCsReq),
            "CmdAddAvatarScNotify" => Some(Self::CmdAddAvatarScNotify),
            "CmdPromoteAvatarCsReq" => Some(Self::CmdPromoteAvatarCsReq),
            "CmdMarkAvatarScRsp" => Some(Self::CmdMarkAvatarScRsp),
            "CmdAddMultiPathAvatarScNotify" => Some(Self::CmdAddMultiPathAvatarScNotify),
            "CmdDressAvatarSkinCsReq" => Some(Self::CmdDressAvatarSkinCsReq),
            "CmdDressAvatarSkinScRsp" => Some(Self::CmdDressAvatarSkinScRsp),
            "CmdTakeOffRelicCsReq" => Some(Self::CmdTakeOffRelicCsReq),
            "CmdSetGrowthTargetAvatarCsReq" => Some(Self::CmdSetGrowthTargetAvatarCsReq),
            "CmdDressAvatarScRsp" => Some(Self::CmdDressAvatarScRsp),
            "CmdUnlockSkilltreeScRsp" => Some(Self::CmdUnlockSkilltreeScRsp),
            "CmdAvatarExpUpScRsp" => Some(Self::CmdAvatarExpUpScRsp),
            "CmdGrowthTargetAvatarChangedScNotify" => {
                Some(Self::CmdGrowthTargetAvatarChangedScNotify)
            }
            "CmdRankUpAvatarCsReq" => Some(Self::CmdRankUpAvatarCsReq),
            "CmdGetAvatarDataCsReq" => Some(Self::CmdGetAvatarDataCsReq),
            "CmdTakePromotionRewardScRsp" => Some(Self::CmdTakePromotionRewardScRsp),
            "CmdMarkAvatarCsReq" => Some(Self::CmdMarkAvatarCsReq),
            "CmdDressRelicAvatarCsReq" => Some(Self::CmdDressRelicAvatarCsReq),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Bcmljcfoefm {
    GrowthTargetFunctionTypeIncludeAllSkilltree = 0,
}
impl Bcmljcfoefm {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::GrowthTargetFunctionTypeIncludeAllSkilltree => {
                "GROWTH_TARGET_FUNCTION_TYPE_INCLUDE_ALL_SKILLTREE"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "GROWTH_TARGET_FUNCTION_TYPE_INCLUDE_ALL_SKILLTREE" => {
                Some(Self::GrowthTargetFunctionTypeIncludeAllSkilltree)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum AddAvatarSrcState {
    AddAvatarSrcNone = 0,
    AddAvatarSrcGacha = 1,
    AddAvatarSrcRogue = 2,
}
impl AddAvatarSrcState {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::AddAvatarSrcNone => "ADD_AVATAR_SRC_NONE",
            Self::AddAvatarSrcGacha => "ADD_AVATAR_SRC_GACHA",
            Self::AddAvatarSrcRogue => "ADD_AVATAR_SRC_ROGUE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ADD_AVATAR_SRC_NONE" => Some(Self::AddAvatarSrcNone),
            "ADD_AVATAR_SRC_GACHA" => Some(Self::AddAvatarSrcGacha),
            "ADD_AVATAR_SRC_ROGUE" => Some(Self::AddAvatarSrcRogue),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Gifjdobiiik {
    GrowthTargetAvatarNone = 0,
    GrowthTargetAvatarPre = 1,
    GrowthTargetAvatarUp = 2,
    GrowthTargetAvatarLock = 3,
    GrowthTargetAvatarUnlock = 4,
    GrowthTargetAvatarLockAndUp = 5,
}
impl Gifjdobiiik {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::GrowthTargetAvatarNone => "GROWTH_TARGET_AVATAR_NONE",
            Self::GrowthTargetAvatarPre => "GROWTH_TARGET_AVATAR_PRE",
            Self::GrowthTargetAvatarUp => "GROWTH_TARGET_AVATAR_UP",
            Self::GrowthTargetAvatarLock => "GROWTH_TARGET_AVATAR_LOCK",
            Self::GrowthTargetAvatarUnlock => "GROWTH_TARGET_AVATAR_UNLOCK",
            Self::GrowthTargetAvatarLockAndUp => "GROWTH_TARGET_AVATAR_LOCK_AND_UP",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "GROWTH_TARGET_AVATAR_NONE" => Some(Self::GrowthTargetAvatarNone),
            "GROWTH_TARGET_AVATAR_PRE" => Some(Self::GrowthTargetAvatarPre),
            "GROWTH_TARGET_AVATAR_UP" => Some(Self::GrowthTargetAvatarUp),
            "GROWTH_TARGET_AVATAR_LOCK" => Some(Self::GrowthTargetAvatarLock),
            "GROWTH_TARGET_AVATAR_UNLOCK" => Some(Self::GrowthTargetAvatarUnlock),
            "GROWTH_TARGET_AVATAR_LOCK_AND_UP" => Some(Self::GrowthTargetAvatarLockAndUp),
            _ => None,
        }
    }
}
/// IFHMDMPJKCA
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdBattleType {
    None = 0,
    CmdPveBattleResultCsReq = 101,
    CmdBattleLogReportScRsp = 105,
    CmdPveBattleResultScRsp = 168,
    CmdGetCurBattleInfoCsReq = 130,
    CmdQuitBattleScRsp = 124,
    CmdSyncClientResVersionCsReq = 197,
    CmdBattleLogReportCsReq = 111,
    CmdServerSimulateBattleFinishScNotify = 114,
    CmdQuitBattleScNotify = 128,
    CmdSyncClientResVersionScRsp = 176,
    CmdGetCurBattleInfoScRsp = 156,
    CmdRebattleByClientCsNotify = 122,
    CmdReBattleAfterBattleLoseCsNotify = 149,
    CmdQuitBattleCsReq = 158,
}
impl CmdBattleType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdBattleTypeNone",
            Self::CmdPveBattleResultCsReq => "CmdPVEBattleResultCsReq",
            Self::CmdBattleLogReportScRsp => "CmdBattleLogReportScRsp",
            Self::CmdPveBattleResultScRsp => "CmdPVEBattleResultScRsp",
            Self::CmdGetCurBattleInfoCsReq => "CmdGetCurBattleInfoCsReq",
            Self::CmdQuitBattleScRsp => "CmdQuitBattleScRsp",
            Self::CmdSyncClientResVersionCsReq => "CmdSyncClientResVersionCsReq",
            Self::CmdBattleLogReportCsReq => "CmdBattleLogReportCsReq",
            Self::CmdServerSimulateBattleFinishScNotify => {
                "CmdServerSimulateBattleFinishScNotify"
            }
            Self::CmdQuitBattleScNotify => "CmdQuitBattleScNotify",
            Self::CmdSyncClientResVersionScRsp => "CmdSyncClientResVersionScRsp",
            Self::CmdGetCurBattleInfoScRsp => "CmdGetCurBattleInfoScRsp",
            Self::CmdRebattleByClientCsNotify => "CmdRebattleByClientCsNotify",
            Self::CmdReBattleAfterBattleLoseCsNotify => {
                "CmdReBattleAfterBattleLoseCsNotify"
            }
            Self::CmdQuitBattleCsReq => "CmdQuitBattleCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdBattleTypeNone" => Some(Self::None),
            "CmdPVEBattleResultCsReq" => Some(Self::CmdPveBattleResultCsReq),
            "CmdBattleLogReportScRsp" => Some(Self::CmdBattleLogReportScRsp),
            "CmdPVEBattleResultScRsp" => Some(Self::CmdPveBattleResultScRsp),
            "CmdGetCurBattleInfoCsReq" => Some(Self::CmdGetCurBattleInfoCsReq),
            "CmdQuitBattleScRsp" => Some(Self::CmdQuitBattleScRsp),
            "CmdSyncClientResVersionCsReq" => Some(Self::CmdSyncClientResVersionCsReq),
            "CmdBattleLogReportCsReq" => Some(Self::CmdBattleLogReportCsReq),
            "CmdServerSimulateBattleFinishScNotify" => {
                Some(Self::CmdServerSimulateBattleFinishScNotify)
            }
            "CmdQuitBattleScNotify" => Some(Self::CmdQuitBattleScNotify),
            "CmdSyncClientResVersionScRsp" => Some(Self::CmdSyncClientResVersionScRsp),
            "CmdGetCurBattleInfoScRsp" => Some(Self::CmdGetCurBattleInfoScRsp),
            "CmdRebattleByClientCsNotify" => Some(Self::CmdRebattleByClientCsNotify),
            "CmdReBattleAfterBattleLoseCsNotify" => {
                Some(Self::CmdReBattleAfterBattleLoseCsNotify)
            }
            "CmdQuitBattleCsReq" => Some(Self::CmdQuitBattleCsReq),
            _ => None,
        }
    }
}
/// LEMLEAEGGJH
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdBattleCollegeType {
    None = 0,
    CmdGetBattleCollegeDataScRsp = 5768,
    CmdStartBattleCollegeScRsp = 5730,
    CmdBattleCollegeDataChangeScNotify = 5758,
    CmdGetBattleCollegeDataCsReq = 5701,
    CmdStartBattleCollegeCsReq = 5724,
}
impl CmdBattleCollegeType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdBattleCollegeTypeNone",
            Self::CmdGetBattleCollegeDataScRsp => "CmdGetBattleCollegeDataScRsp",
            Self::CmdStartBattleCollegeScRsp => "CmdStartBattleCollegeScRsp",
            Self::CmdBattleCollegeDataChangeScNotify => {
                "CmdBattleCollegeDataChangeScNotify"
            }
            Self::CmdGetBattleCollegeDataCsReq => "CmdGetBattleCollegeDataCsReq",
            Self::CmdStartBattleCollegeCsReq => "CmdStartBattleCollegeCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdBattleCollegeTypeNone" => Some(Self::None),
            "CmdGetBattleCollegeDataScRsp" => Some(Self::CmdGetBattleCollegeDataScRsp),
            "CmdStartBattleCollegeScRsp" => Some(Self::CmdStartBattleCollegeScRsp),
            "CmdBattleCollegeDataChangeScNotify" => {
                Some(Self::CmdBattleCollegeDataChangeScNotify)
            }
            "CmdGetBattleCollegeDataCsReq" => Some(Self::CmdGetBattleCollegeDataCsReq),
            "CmdStartBattleCollegeCsReq" => Some(Self::CmdStartBattleCollegeCsReq),
            _ => None,
        }
    }
}
/// NLEECJNKPHJ
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdBattlePassType {
    None = 0,
    CmdTakeBpRewardCsReq = 3024,
    CmdTakeAllRewardScRsp = 3028,
    CmdBattlePassInfoNotify = 3001,
    CmdBuyBpLevelScRsp = 3097,
    CmdBuyBpLevelCsReq = 3056,
    CmdTakeAllRewardCsReq = 3076,
    CmdTakeBpRewardScRsp = 3030,
}
impl CmdBattlePassType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdBattlePassTypeNone",
            Self::CmdTakeBpRewardCsReq => "CmdTakeBpRewardCsReq",
            Self::CmdTakeAllRewardScRsp => "CmdTakeAllRewardScRsp",
            Self::CmdBattlePassInfoNotify => "CmdBattlePassInfoNotify",
            Self::CmdBuyBpLevelScRsp => "CmdBuyBpLevelScRsp",
            Self::CmdBuyBpLevelCsReq => "CmdBuyBpLevelCsReq",
            Self::CmdTakeAllRewardCsReq => "CmdTakeAllRewardCsReq",
            Self::CmdTakeBpRewardScRsp => "CmdTakeBpRewardScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdBattlePassTypeNone" => Some(Self::None),
            "CmdTakeBpRewardCsReq" => Some(Self::CmdTakeBpRewardCsReq),
            "CmdTakeAllRewardScRsp" => Some(Self::CmdTakeAllRewardScRsp),
            "CmdBattlePassInfoNotify" => Some(Self::CmdBattlePassInfoNotify),
            "CmdBuyBpLevelScRsp" => Some(Self::CmdBuyBpLevelScRsp),
            "CmdBuyBpLevelCsReq" => Some(Self::CmdBuyBpLevelCsReq),
            "CmdTakeAllRewardCsReq" => Some(Self::CmdTakeAllRewardCsReq),
            "CmdTakeBpRewardScRsp" => Some(Self::CmdTakeBpRewardScRsp),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum BpTierType {
    None = 0,
    Free = 1,
    Premium1 = 2,
    Premium2 = 3,
}
impl BpTierType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "BP_TIER_TYPE_NONE",
            Self::Free => "BP_TIER_TYPE_FREE",
            Self::Premium1 => "BP_TIER_TYPE_PREMIUM_1",
            Self::Premium2 => "BP_TIER_TYPE_PREMIUM_2",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "BP_TIER_TYPE_NONE" => Some(Self::None),
            "BP_TIER_TYPE_FREE" => Some(Self::Free),
            "BP_TIER_TYPE_PREMIUM_1" => Some(Self::Premium1),
            "BP_TIER_TYPE_PREMIUM_2" => Some(Self::Premium2),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum BpRewardType {
    BpRewaradTypeNone = 0,
    BpRewaradTypeFree = 1,
    BpRewaradTypePremium1 = 2,
    BpRewaradTypePremium2 = 3,
    BpRewaradTypePremiumOptional = 4,
}
impl BpRewardType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::BpRewaradTypeNone => "BP_REWARAD_TYPE_NONE",
            Self::BpRewaradTypeFree => "BP_REWARAD_TYPE_FREE",
            Self::BpRewaradTypePremium1 => "BP_REWARAD_TYPE_PREMIUM_1",
            Self::BpRewaradTypePremium2 => "BP_REWARAD_TYPE_PREMIUM_2",
            Self::BpRewaradTypePremiumOptional => "BP_REWARAD_TYPE_PREMIUM_OPTIONAL",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "BP_REWARAD_TYPE_NONE" => Some(Self::BpRewaradTypeNone),
            "BP_REWARAD_TYPE_FREE" => Some(Self::BpRewaradTypeFree),
            "BP_REWARAD_TYPE_PREMIUM_1" => Some(Self::BpRewaradTypePremium1),
            "BP_REWARAD_TYPE_PREMIUM_2" => Some(Self::BpRewaradTypePremium2),
            "BP_REWARAD_TYPE_PREMIUM_OPTIONAL" => {
                Some(Self::BpRewaradTypePremiumOptional)
            }
            _ => None,
        }
    }
}
/// EJINLEIJIFO
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdBenefitActivityType {
    None = 0,
    CmdGetBenefitActivityInfoCsReq = 4876,
    CmdJoinBenefitActivityCsReq = 4856,
    CmdTakeBenefitActivityRewardScRsp = 4893,
    CmdJoinBenefitActivityScRsp = 4883,
    CmdGetBenefitActivityInfoScRsp = 4887,
    CmdTakeBenefitActivityRewardCsReq = 4891,
}
impl CmdBenefitActivityType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdBenefitActivityTypeNone",
            Self::CmdGetBenefitActivityInfoCsReq => "CmdGetBenefitActivityInfoCsReq",
            Self::CmdJoinBenefitActivityCsReq => "CmdJoinBenefitActivityCsReq",
            Self::CmdTakeBenefitActivityRewardScRsp => {
                "CmdTakeBenefitActivityRewardScRsp"
            }
            Self::CmdJoinBenefitActivityScRsp => "CmdJoinBenefitActivityScRsp",
            Self::CmdGetBenefitActivityInfoScRsp => "CmdGetBenefitActivityInfoScRsp",
            Self::CmdTakeBenefitActivityRewardCsReq => {
                "CmdTakeBenefitActivityRewardCsReq"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdBenefitActivityTypeNone" => Some(Self::None),
            "CmdGetBenefitActivityInfoCsReq" => {
                Some(Self::CmdGetBenefitActivityInfoCsReq)
            }
            "CmdJoinBenefitActivityCsReq" => Some(Self::CmdJoinBenefitActivityCsReq),
            "CmdTakeBenefitActivityRewardScRsp" => {
                Some(Self::CmdTakeBenefitActivityRewardScRsp)
            }
            "CmdJoinBenefitActivityScRsp" => Some(Self::CmdJoinBenefitActivityScRsp),
            "CmdGetBenefitActivityInfoScRsp" => {
                Some(Self::CmdGetBenefitActivityInfoScRsp)
            }
            "CmdTakeBenefitActivityRewardCsReq" => {
                Some(Self::CmdTakeBenefitActivityRewardCsReq)
            }
            _ => None,
        }
    }
}
/// PHMBPPHJMIL
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdBoxingClubType {
    None = 0,
    CmdSetBoxingClubResonanceLineupCsReq = 4249,
    CmdMatchBoxingClubOpponentScRsp = 4224,
    CmdChooseBoxingClubResonanceCsReq = 4205,
    CmdBoxingClubRewardScNotify = 4228,
    CmdGiveUpBoxingClubChallengeScRsp = 4276,
    CmdGetBoxingClubInfoScRsp = 4268,
    CmdChooseBoxingClubStageOptionalBuffCsReq = 4247,
    CmdGetBoxingClubInfoCsReq = 4201,
    CmdStartBoxingClubBattleCsReq = 4230,
    CmdBoxingClubChallengeUpdateScNotify = 4211,
    CmdMatchBoxingClubOpponentCsReq = 4258,
    CmdGiveUpBoxingClubChallengeCsReq = 4297,
    CmdStartBoxingClubBattleScRsp = 4256,
    CmdChooseBoxingClubResonanceScRsp = 4214,
    CmdSetBoxingClubResonanceLineupScRsp = 4222,
    CmdChooseBoxingClubStageOptionalBuffScRsp = 4280,
}
impl CmdBoxingClubType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdBoxingClubTypeNone",
            Self::CmdSetBoxingClubResonanceLineupCsReq => {
                "CmdSetBoxingClubResonanceLineupCsReq"
            }
            Self::CmdMatchBoxingClubOpponentScRsp => "CmdMatchBoxingClubOpponentScRsp",
            Self::CmdChooseBoxingClubResonanceCsReq => {
                "CmdChooseBoxingClubResonanceCsReq"
            }
            Self::CmdBoxingClubRewardScNotify => "CmdBoxingClubRewardScNotify",
            Self::CmdGiveUpBoxingClubChallengeScRsp => {
                "CmdGiveUpBoxingClubChallengeScRsp"
            }
            Self::CmdGetBoxingClubInfoScRsp => "CmdGetBoxingClubInfoScRsp",
            Self::CmdChooseBoxingClubStageOptionalBuffCsReq => {
                "CmdChooseBoxingClubStageOptionalBuffCsReq"
            }
            Self::CmdGetBoxingClubInfoCsReq => "CmdGetBoxingClubInfoCsReq",
            Self::CmdStartBoxingClubBattleCsReq => "CmdStartBoxingClubBattleCsReq",
            Self::CmdBoxingClubChallengeUpdateScNotify => {
                "CmdBoxingClubChallengeUpdateScNotify"
            }
            Self::CmdMatchBoxingClubOpponentCsReq => "CmdMatchBoxingClubOpponentCsReq",
            Self::CmdGiveUpBoxingClubChallengeCsReq => {
                "CmdGiveUpBoxingClubChallengeCsReq"
            }
            Self::CmdStartBoxingClubBattleScRsp => "CmdStartBoxingClubBattleScRsp",
            Self::CmdChooseBoxingClubResonanceScRsp => {
                "CmdChooseBoxingClubResonanceScRsp"
            }
            Self::CmdSetBoxingClubResonanceLineupScRsp => {
                "CmdSetBoxingClubResonanceLineupScRsp"
            }
            Self::CmdChooseBoxingClubStageOptionalBuffScRsp => {
                "CmdChooseBoxingClubStageOptionalBuffScRsp"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdBoxingClubTypeNone" => Some(Self::None),
            "CmdSetBoxingClubResonanceLineupCsReq" => {
                Some(Self::CmdSetBoxingClubResonanceLineupCsReq)
            }
            "CmdMatchBoxingClubOpponentScRsp" => {
                Some(Self::CmdMatchBoxingClubOpponentScRsp)
            }
            "CmdChooseBoxingClubResonanceCsReq" => {
                Some(Self::CmdChooseBoxingClubResonanceCsReq)
            }
            "CmdBoxingClubRewardScNotify" => Some(Self::CmdBoxingClubRewardScNotify),
            "CmdGiveUpBoxingClubChallengeScRsp" => {
                Some(Self::CmdGiveUpBoxingClubChallengeScRsp)
            }
            "CmdGetBoxingClubInfoScRsp" => Some(Self::CmdGetBoxingClubInfoScRsp),
            "CmdChooseBoxingClubStageOptionalBuffCsReq" => {
                Some(Self::CmdChooseBoxingClubStageOptionalBuffCsReq)
            }
            "CmdGetBoxingClubInfoCsReq" => Some(Self::CmdGetBoxingClubInfoCsReq),
            "CmdStartBoxingClubBattleCsReq" => Some(Self::CmdStartBoxingClubBattleCsReq),
            "CmdBoxingClubChallengeUpdateScNotify" => {
                Some(Self::CmdBoxingClubChallengeUpdateScNotify)
            }
            "CmdMatchBoxingClubOpponentCsReq" => {
                Some(Self::CmdMatchBoxingClubOpponentCsReq)
            }
            "CmdGiveUpBoxingClubChallengeCsReq" => {
                Some(Self::CmdGiveUpBoxingClubChallengeCsReq)
            }
            "CmdStartBoxingClubBattleScRsp" => Some(Self::CmdStartBoxingClubBattleScRsp),
            "CmdChooseBoxingClubResonanceScRsp" => {
                Some(Self::CmdChooseBoxingClubResonanceScRsp)
            }
            "CmdSetBoxingClubResonanceLineupScRsp" => {
                Some(Self::CmdSetBoxingClubResonanceLineupScRsp)
            }
            "CmdChooseBoxingClubStageOptionalBuffScRsp" => {
                Some(Self::CmdChooseBoxingClubStageOptionalBuffScRsp)
            }
            _ => None,
        }
    }
}
/// KGHIFCBKJME
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdChallengeType {
    None = 0,
    CmdStartChallengeCsReq = 1758,
    CmdChallengeBossPhaseSettleNotify = 1748,
    CmdLeaveChallengeScRsp = 1756,
    CmdStartPartialChallengeScRsp = 1712,
    CmdStartChallengeScRsp = 1724,
    CmdGetChallengeGroupStatisticsCsReq = 1739,
    CmdRestartChallengePhaseCsReq = 1791,
    CmdRestartChallengePhaseScRsp = 1718,
    CmdTakeChallengeRewardScRsp = 1780,
    CmdGetCurChallengeCsReq = 1711,
    CmdGetCurChallengeScRsp = 1705,
    CmdChallengeLineupNotify = 1714,
    CmdLeaveChallengeCsReq = 1730,
    CmdGetChallengeCsReq = 1701,
    CmdGetChallengeGroupStatisticsScRsp = 1796,
    CmdChallengeSettleNotify = 1797,
    CmdTakeChallengeRewardCsReq = 1747,
    CmdStartPartialChallengeCsReq = 1723,
    CmdGetChallengeScRsp = 1768,
    CmdEnterChallengeNextPhaseScRsp = 1750,
    CmdEnterChallengeNextPhaseCsReq = 1795,
}
impl CmdChallengeType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdChallengeTypeNone",
            Self::CmdStartChallengeCsReq => "CmdStartChallengeCsReq",
            Self::CmdChallengeBossPhaseSettleNotify => {
                "CmdChallengeBossPhaseSettleNotify"
            }
            Self::CmdLeaveChallengeScRsp => "CmdLeaveChallengeScRsp",
            Self::CmdStartPartialChallengeScRsp => "CmdStartPartialChallengeScRsp",
            Self::CmdStartChallengeScRsp => "CmdStartChallengeScRsp",
            Self::CmdGetChallengeGroupStatisticsCsReq => {
                "CmdGetChallengeGroupStatisticsCsReq"
            }
            Self::CmdRestartChallengePhaseCsReq => "CmdRestartChallengePhaseCsReq",
            Self::CmdRestartChallengePhaseScRsp => "CmdRestartChallengePhaseScRsp",
            Self::CmdTakeChallengeRewardScRsp => "CmdTakeChallengeRewardScRsp",
            Self::CmdGetCurChallengeCsReq => "CmdGetCurChallengeCsReq",
            Self::CmdGetCurChallengeScRsp => "CmdGetCurChallengeScRsp",
            Self::CmdChallengeLineupNotify => "CmdChallengeLineupNotify",
            Self::CmdLeaveChallengeCsReq => "CmdLeaveChallengeCsReq",
            Self::CmdGetChallengeCsReq => "CmdGetChallengeCsReq",
            Self::CmdGetChallengeGroupStatisticsScRsp => {
                "CmdGetChallengeGroupStatisticsScRsp"
            }
            Self::CmdChallengeSettleNotify => "CmdChallengeSettleNotify",
            Self::CmdTakeChallengeRewardCsReq => "CmdTakeChallengeRewardCsReq",
            Self::CmdStartPartialChallengeCsReq => "CmdStartPartialChallengeCsReq",
            Self::CmdGetChallengeScRsp => "CmdGetChallengeScRsp",
            Self::CmdEnterChallengeNextPhaseScRsp => "CmdEnterChallengeNextPhaseScRsp",
            Self::CmdEnterChallengeNextPhaseCsReq => "CmdEnterChallengeNextPhaseCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdChallengeTypeNone" => Some(Self::None),
            "CmdStartChallengeCsReq" => Some(Self::CmdStartChallengeCsReq),
            "CmdChallengeBossPhaseSettleNotify" => {
                Some(Self::CmdChallengeBossPhaseSettleNotify)
            }
            "CmdLeaveChallengeScRsp" => Some(Self::CmdLeaveChallengeScRsp),
            "CmdStartPartialChallengeScRsp" => Some(Self::CmdStartPartialChallengeScRsp),
            "CmdStartChallengeScRsp" => Some(Self::CmdStartChallengeScRsp),
            "CmdGetChallengeGroupStatisticsCsReq" => {
                Some(Self::CmdGetChallengeGroupStatisticsCsReq)
            }
            "CmdRestartChallengePhaseCsReq" => Some(Self::CmdRestartChallengePhaseCsReq),
            "CmdRestartChallengePhaseScRsp" => Some(Self::CmdRestartChallengePhaseScRsp),
            "CmdTakeChallengeRewardScRsp" => Some(Self::CmdTakeChallengeRewardScRsp),
            "CmdGetCurChallengeCsReq" => Some(Self::CmdGetCurChallengeCsReq),
            "CmdGetCurChallengeScRsp" => Some(Self::CmdGetCurChallengeScRsp),
            "CmdChallengeLineupNotify" => Some(Self::CmdChallengeLineupNotify),
            "CmdLeaveChallengeCsReq" => Some(Self::CmdLeaveChallengeCsReq),
            "CmdGetChallengeCsReq" => Some(Self::CmdGetChallengeCsReq),
            "CmdGetChallengeGroupStatisticsScRsp" => {
                Some(Self::CmdGetChallengeGroupStatisticsScRsp)
            }
            "CmdChallengeSettleNotify" => Some(Self::CmdChallengeSettleNotify),
            "CmdTakeChallengeRewardCsReq" => Some(Self::CmdTakeChallengeRewardCsReq),
            "CmdStartPartialChallengeCsReq" => Some(Self::CmdStartPartialChallengeCsReq),
            "CmdGetChallengeScRsp" => Some(Self::CmdGetChallengeScRsp),
            "CmdEnterChallengeNextPhaseScRsp" => {
                Some(Self::CmdEnterChallengeNextPhaseScRsp)
            }
            "CmdEnterChallengeNextPhaseCsReq" => {
                Some(Self::CmdEnterChallengeNextPhaseCsReq)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ChallengeStatus {
    ChallengeUnknown = 0,
    ChallengeDoing = 1,
    ChallengeFinish = 2,
    ChallengeFailed = 3,
}
impl ChallengeStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::ChallengeUnknown => "CHALLENGE_UNKNOWN",
            Self::ChallengeDoing => "CHALLENGE_DOING",
            Self::ChallengeFinish => "CHALLENGE_FINISH",
            Self::ChallengeFailed => "CHALLENGE_FAILED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CHALLENGE_UNKNOWN" => Some(Self::ChallengeUnknown),
            "CHALLENGE_DOING" => Some(Self::ChallengeDoing),
            "CHALLENGE_FINISH" => Some(Self::ChallengeFinish),
            "CHALLENGE_FAILED" => Some(Self::ChallengeFailed),
            _ => None,
        }
    }
}
/// COGBHHBJHPE
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdChatType {
    None = 0,
    CmdRevcMsgScNotify = 3958,
    CmdBatchMarkChatEmojiScRsp = 3922,
    CmdGetLoginChatInfoScRsp = 3980,
    CmdGetLoginChatInfoCsReq = 3947,
    CmdGetPrivateChatHistoryScRsp = 3956,
    CmdPrivateMsgOfflineUsersScNotify = 3924,
    CmdGetChatEmojiListScRsp = 3911,
    CmdSendMsgCsReq = 3901,
    CmdGetPrivateChatHistoryCsReq = 3930,
    CmdBatchMarkChatEmojiCsReq = 3949,
    CmdSendMsgScRsp = 3968,
    CmdMarkChatEmojiCsReq = 3905,
    CmdGetChatFriendHistoryCsReq = 3997,
    CmdMarkChatEmojiScRsp = 3914,
    CmdGetChatEmojiListCsReq = 3928,
    CmdGetChatFriendHistoryScRsp = 3976,
}
impl CmdChatType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdChatTypeNone",
            Self::CmdRevcMsgScNotify => "CmdRevcMsgScNotify",
            Self::CmdBatchMarkChatEmojiScRsp => "CmdBatchMarkChatEmojiScRsp",
            Self::CmdGetLoginChatInfoScRsp => "CmdGetLoginChatInfoScRsp",
            Self::CmdGetLoginChatInfoCsReq => "CmdGetLoginChatInfoCsReq",
            Self::CmdGetPrivateChatHistoryScRsp => "CmdGetPrivateChatHistoryScRsp",
            Self::CmdPrivateMsgOfflineUsersScNotify => {
                "CmdPrivateMsgOfflineUsersScNotify"
            }
            Self::CmdGetChatEmojiListScRsp => "CmdGetChatEmojiListScRsp",
            Self::CmdSendMsgCsReq => "CmdSendMsgCsReq",
            Self::CmdGetPrivateChatHistoryCsReq => "CmdGetPrivateChatHistoryCsReq",
            Self::CmdBatchMarkChatEmojiCsReq => "CmdBatchMarkChatEmojiCsReq",
            Self::CmdSendMsgScRsp => "CmdSendMsgScRsp",
            Self::CmdMarkChatEmojiCsReq => "CmdMarkChatEmojiCsReq",
            Self::CmdGetChatFriendHistoryCsReq => "CmdGetChatFriendHistoryCsReq",
            Self::CmdMarkChatEmojiScRsp => "CmdMarkChatEmojiScRsp",
            Self::CmdGetChatEmojiListCsReq => "CmdGetChatEmojiListCsReq",
            Self::CmdGetChatFriendHistoryScRsp => "CmdGetChatFriendHistoryScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdChatTypeNone" => Some(Self::None),
            "CmdRevcMsgScNotify" => Some(Self::CmdRevcMsgScNotify),
            "CmdBatchMarkChatEmojiScRsp" => Some(Self::CmdBatchMarkChatEmojiScRsp),
            "CmdGetLoginChatInfoScRsp" => Some(Self::CmdGetLoginChatInfoScRsp),
            "CmdGetLoginChatInfoCsReq" => Some(Self::CmdGetLoginChatInfoCsReq),
            "CmdGetPrivateChatHistoryScRsp" => Some(Self::CmdGetPrivateChatHistoryScRsp),
            "CmdPrivateMsgOfflineUsersScNotify" => {
                Some(Self::CmdPrivateMsgOfflineUsersScNotify)
            }
            "CmdGetChatEmojiListScRsp" => Some(Self::CmdGetChatEmojiListScRsp),
            "CmdSendMsgCsReq" => Some(Self::CmdSendMsgCsReq),
            "CmdGetPrivateChatHistoryCsReq" => Some(Self::CmdGetPrivateChatHistoryCsReq),
            "CmdBatchMarkChatEmojiCsReq" => Some(Self::CmdBatchMarkChatEmojiCsReq),
            "CmdSendMsgScRsp" => Some(Self::CmdSendMsgScRsp),
            "CmdMarkChatEmojiCsReq" => Some(Self::CmdMarkChatEmojiCsReq),
            "CmdGetChatFriendHistoryCsReq" => Some(Self::CmdGetChatFriendHistoryCsReq),
            "CmdMarkChatEmojiScRsp" => Some(Self::CmdMarkChatEmojiScRsp),
            "CmdGetChatEmojiListCsReq" => Some(Self::CmdGetChatEmojiListCsReq),
            "CmdGetChatFriendHistoryScRsp" => Some(Self::CmdGetChatFriendHistoryScRsp),
            _ => None,
        }
    }
}
/// PEICFIGPMAK
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdChessRogueType {
    None = 0,
    CmdChessRogueQuitScRsp = 5546,
    CmdChessRogueNousDiceSurfaceUnlockNotify = 5457,
    CmdChessRogueConfirmRollScRsp = 5577,
    CmdChessRogueStartScRsp = 5578,
    CmdGetChessRogueStoryAeonTalkInfoCsReq = 5452,
    CmdChessRogueUpdateDicePassiveAccumulateValueScNotify = 5596,
    CmdChessRogueNousGetRogueTalentInfoCsReq = 5408,
    CmdChessRogueSkipTeachingLevelCsReq = 5404,
    CmdChessRogueSkipTeachingLevelScRsp = 5564,
    CmdChessRogueQuitCsReq = 5535,
    CmdChessRogueCheatRollScRsp = 5563,
    CmdChessRogueEnterCellScRsp = 5529,
    CmdEnhanceChessRogueBuffScRsp = 5533,
    CmdChessRogueUpdateActionPointScNotify = 5455,
    CmdGetChessRogueNousStoryInfoCsReq = 5422,
    CmdChessRogueGiveUpRollCsReq = 5456,
    CmdSelectChessRogueNousSubStoryCsReq = 5557,
    CmdChessRogueNousEnableRogueTalentScRsp = 5420,
    CmdChessRogueQueryBpCsReq = 5503,
    CmdChessRogueQueryBpScRsp = 5562,
    CmdChessRogueQueryAeonDimensionsCsReq = 5560,
    CmdChessRogueRollDiceScRsp = 5518,
    CmdChessRogueNousEnableRogueTalentCsReq = 5583,
    CmdChessRogueCellUpdateNotify = 5534,
    CmdEnterChessRogueAeonRoomCsReq = 5514,
    CmdSyncChessRogueNousMainStoryScNotify = 5532,
    CmdChessRogueNousDiceUpdateNotify = 5414,
    CmdFinishChessRogueSubStoryCsReq = 5468,
    CmdChessRogueUpdateMoneyInfoScNotify = 5553,
    CmdEnhanceChessRogueBuffCsReq = 5421,
    CmdChessRogueQuestFinishNotify = 5576,
    CmdSyncChessRogueNousValueScNotify = 5435,
    CmdChessRogueUpdateUnlockLevelScNotify = 5462,
    CmdChessRogueUpdateBoardScNotify = 5411,
    CmdGetChessRogueBuffEnhanceInfoCsReq = 5592,
    CmdChessRogueFinishCurRoomNotify = 5410,
    CmdSyncChessRogueMainStoryFinishScNotify = 5548,
    CmdChessRogueEnterNextLayerScRsp = 5512,
    CmdChessRogueEnterScRsp = 5551,
    CmdChessRogueConfirmRollCsReq = 5443,
    CmdChessRogueGiveUpCsReq = 5521,
    CmdSelectChessRogueSubStoryCsReq = 5580,
    CmdChessRogueGoAheadCsReq = 5581,
    CmdChessRogueLeaveCsReq = 5536,
    CmdChessRogueQueryCsReq = 5594,
    CmdChessRogueReviveAvatarCsReq = 5519,
    CmdChessRogueQueryAeonDimensionsScRsp = 5458,
    CmdChessRogueCheatRollCsReq = 5544,
    CmdChessRogueLayerAccountInfoNotify = 5451,
    CmdGetChessRogueStoryInfoCsReq = 5491,
    CmdChessRogueEnterCsReq = 5431,
    CmdChessRogueRollDiceCsReq = 5438,
    CmdChessRogueNousEditDiceScRsp = 5516,
    CmdChessRogueUpdateReviveInfoScNotify = 5566,
    CmdChessRogueMoveCellNotify = 5487,
    CmdChessRogueGiveUpScRsp = 5401,
    CmdFinishChessRogueNousSubStoryCsReq = 5501,
    CmdSyncChessRogueNousSubStoryScNotify = 5467,
    CmdChessRogueChangeyAeonDimensionNotify = 5486,
    CmdChessRogueGoAheadScRsp = 5539,
    CmdChessRogueUpdateLevelBaseInfoScNotify = 5465,
    CmdChessRogueUpdateAeonModifierValueScNotify = 5579,
    CmdFinishChessRogueSubStoryScRsp = 5425,
    CmdGetChessRogueStoryAeonTalkInfoScRsp = 5430,
    CmdEnterChessRogueAeonRoomScRsp = 5475,
    CmdChessRogueReRollDiceCsReq = 5402,
    CmdFinishChessRogueNousSubStoryScRsp = 5427,
    CmdChessRogueStartCsReq = 5407,
    CmdChessRogueEnterNextLayerCsReq = 5528,
    CmdChessRogueNousGetRogueTalentInfoScRsp = 5470,
    CmdGetChessRogueStoryInfoScRsp = 5530,
    CmdChessRogueNousEditDiceCsReq = 5439,
    CmdChessRogueQueryScRsp = 5406,
    CmdChessRogueSelectCellCsReq = 5493,
    CmdSelectChessRogueSubStoryScRsp = 5538,
    CmdGetChessRogueNousStoryInfoScRsp = 5554,
    CmdChessRogueReRollDiceScRsp = 5561,
    CmdChessRogueSelectCellScRsp = 5429,
    CmdSelectChessRogueNousSubStoryScRsp = 5499,
    CmdChessRoguePickAvatarScRsp = 5494,
    CmdChessRogueSelectBpCsReq = 5565,
    CmdChessRoguePickAvatarCsReq = 5510,
    CmdChessRogueSelectBpScRsp = 5428,
    CmdChessRogueGiveUpRollScRsp = 5508,
    CmdChessRogueUpdateAllowedSelectCellScNotify = 5595,
    CmdChessRogueEnterCellCsReq = 5569,
    CmdChessRogueReviveAvatarScRsp = 5496,
    CmdGetChessRogueBuffEnhanceInfoScRsp = 5506,
    CmdChessRogueLeaveScRsp = 5558,
    CmdChessRogueUpdateDiceInfoScNotify = 5509,
}
impl CmdChessRogueType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdChessRogueTypeNone",
            Self::CmdChessRogueQuitScRsp => "CmdChessRogueQuitScRsp",
            Self::CmdChessRogueNousDiceSurfaceUnlockNotify => {
                "CmdChessRogueNousDiceSurfaceUnlockNotify"
            }
            Self::CmdChessRogueConfirmRollScRsp => "CmdChessRogueConfirmRollScRsp",
            Self::CmdChessRogueStartScRsp => "CmdChessRogueStartScRsp",
            Self::CmdGetChessRogueStoryAeonTalkInfoCsReq => {
                "CmdGetChessRogueStoryAeonTalkInfoCsReq"
            }
            Self::CmdChessRogueUpdateDicePassiveAccumulateValueScNotify => {
                "CmdChessRogueUpdateDicePassiveAccumulateValueScNotify"
            }
            Self::CmdChessRogueNousGetRogueTalentInfoCsReq => {
                "CmdChessRogueNousGetRogueTalentInfoCsReq"
            }
            Self::CmdChessRogueSkipTeachingLevelCsReq => {
                "CmdChessRogueSkipTeachingLevelCsReq"
            }
            Self::CmdChessRogueSkipTeachingLevelScRsp => {
                "CmdChessRogueSkipTeachingLevelScRsp"
            }
            Self::CmdChessRogueQuitCsReq => "CmdChessRogueQuitCsReq",
            Self::CmdChessRogueCheatRollScRsp => "CmdChessRogueCheatRollScRsp",
            Self::CmdChessRogueEnterCellScRsp => "CmdChessRogueEnterCellScRsp",
            Self::CmdEnhanceChessRogueBuffScRsp => "CmdEnhanceChessRogueBuffScRsp",
            Self::CmdChessRogueUpdateActionPointScNotify => {
                "CmdChessRogueUpdateActionPointScNotify"
            }
            Self::CmdGetChessRogueNousStoryInfoCsReq => {
                "CmdGetChessRogueNousStoryInfoCsReq"
            }
            Self::CmdChessRogueGiveUpRollCsReq => "CmdChessRogueGiveUpRollCsReq",
            Self::CmdSelectChessRogueNousSubStoryCsReq => {
                "CmdSelectChessRogueNousSubStoryCsReq"
            }
            Self::CmdChessRogueNousEnableRogueTalentScRsp => {
                "CmdChessRogueNousEnableRogueTalentScRsp"
            }
            Self::CmdChessRogueQueryBpCsReq => "CmdChessRogueQueryBpCsReq",
            Self::CmdChessRogueQueryBpScRsp => "CmdChessRogueQueryBpScRsp",
            Self::CmdChessRogueQueryAeonDimensionsCsReq => {
                "CmdChessRogueQueryAeonDimensionsCsReq"
            }
            Self::CmdChessRogueRollDiceScRsp => "CmdChessRogueRollDiceScRsp",
            Self::CmdChessRogueNousEnableRogueTalentCsReq => {
                "CmdChessRogueNousEnableRogueTalentCsReq"
            }
            Self::CmdChessRogueCellUpdateNotify => "CmdChessRogueCellUpdateNotify",
            Self::CmdEnterChessRogueAeonRoomCsReq => "CmdEnterChessRogueAeonRoomCsReq",
            Self::CmdSyncChessRogueNousMainStoryScNotify => {
                "CmdSyncChessRogueNousMainStoryScNotify"
            }
            Self::CmdChessRogueNousDiceUpdateNotify => {
                "CmdChessRogueNousDiceUpdateNotify"
            }
            Self::CmdFinishChessRogueSubStoryCsReq => "CmdFinishChessRogueSubStoryCsReq",
            Self::CmdChessRogueUpdateMoneyInfoScNotify => {
                "CmdChessRogueUpdateMoneyInfoScNotify"
            }
            Self::CmdEnhanceChessRogueBuffCsReq => "CmdEnhanceChessRogueBuffCsReq",
            Self::CmdChessRogueQuestFinishNotify => "CmdChessRogueQuestFinishNotify",
            Self::CmdSyncChessRogueNousValueScNotify => {
                "CmdSyncChessRogueNousValueScNotify"
            }
            Self::CmdChessRogueUpdateUnlockLevelScNotify => {
                "CmdChessRogueUpdateUnlockLevelScNotify"
            }
            Self::CmdChessRogueUpdateBoardScNotify => "CmdChessRogueUpdateBoardScNotify",
            Self::CmdGetChessRogueBuffEnhanceInfoCsReq => {
                "CmdGetChessRogueBuffEnhanceInfoCsReq"
            }
            Self::CmdChessRogueFinishCurRoomNotify => "CmdChessRogueFinishCurRoomNotify",
            Self::CmdSyncChessRogueMainStoryFinishScNotify => {
                "CmdSyncChessRogueMainStoryFinishScNotify"
            }
            Self::CmdChessRogueEnterNextLayerScRsp => "CmdChessRogueEnterNextLayerScRsp",
            Self::CmdChessRogueEnterScRsp => "CmdChessRogueEnterScRsp",
            Self::CmdChessRogueConfirmRollCsReq => "CmdChessRogueConfirmRollCsReq",
            Self::CmdChessRogueGiveUpCsReq => "CmdChessRogueGiveUpCsReq",
            Self::CmdSelectChessRogueSubStoryCsReq => "CmdSelectChessRogueSubStoryCsReq",
            Self::CmdChessRogueGoAheadCsReq => "CmdChessRogueGoAheadCsReq",
            Self::CmdChessRogueLeaveCsReq => "CmdChessRogueLeaveCsReq",
            Self::CmdChessRogueQueryCsReq => "CmdChessRogueQueryCsReq",
            Self::CmdChessRogueReviveAvatarCsReq => "CmdChessRogueReviveAvatarCsReq",
            Self::CmdChessRogueQueryAeonDimensionsScRsp => {
                "CmdChessRogueQueryAeonDimensionsScRsp"
            }
            Self::CmdChessRogueCheatRollCsReq => "CmdChessRogueCheatRollCsReq",
            Self::CmdChessRogueLayerAccountInfoNotify => {
                "CmdChessRogueLayerAccountInfoNotify"
            }
            Self::CmdGetChessRogueStoryInfoCsReq => "CmdGetChessRogueStoryInfoCsReq",
            Self::CmdChessRogueEnterCsReq => "CmdChessRogueEnterCsReq",
            Self::CmdChessRogueRollDiceCsReq => "CmdChessRogueRollDiceCsReq",
            Self::CmdChessRogueNousEditDiceScRsp => "CmdChessRogueNousEditDiceScRsp",
            Self::CmdChessRogueUpdateReviveInfoScNotify => {
                "CmdChessRogueUpdateReviveInfoScNotify"
            }
            Self::CmdChessRogueMoveCellNotify => "CmdChessRogueMoveCellNotify",
            Self::CmdChessRogueGiveUpScRsp => "CmdChessRogueGiveUpScRsp",
            Self::CmdFinishChessRogueNousSubStoryCsReq => {
                "CmdFinishChessRogueNousSubStoryCsReq"
            }
            Self::CmdSyncChessRogueNousSubStoryScNotify => {
                "CmdSyncChessRogueNousSubStoryScNotify"
            }
            Self::CmdChessRogueChangeyAeonDimensionNotify => {
                "CmdChessRogueChangeyAeonDimensionNotify"
            }
            Self::CmdChessRogueGoAheadScRsp => "CmdChessRogueGoAheadScRsp",
            Self::CmdChessRogueUpdateLevelBaseInfoScNotify => {
                "CmdChessRogueUpdateLevelBaseInfoScNotify"
            }
            Self::CmdChessRogueUpdateAeonModifierValueScNotify => {
                "CmdChessRogueUpdateAeonModifierValueScNotify"
            }
            Self::CmdFinishChessRogueSubStoryScRsp => "CmdFinishChessRogueSubStoryScRsp",
            Self::CmdGetChessRogueStoryAeonTalkInfoScRsp => {
                "CmdGetChessRogueStoryAeonTalkInfoScRsp"
            }
            Self::CmdEnterChessRogueAeonRoomScRsp => "CmdEnterChessRogueAeonRoomScRsp",
            Self::CmdChessRogueReRollDiceCsReq => "CmdChessRogueReRollDiceCsReq",
            Self::CmdFinishChessRogueNousSubStoryScRsp => {
                "CmdFinishChessRogueNousSubStoryScRsp"
            }
            Self::CmdChessRogueStartCsReq => "CmdChessRogueStartCsReq",
            Self::CmdChessRogueEnterNextLayerCsReq => "CmdChessRogueEnterNextLayerCsReq",
            Self::CmdChessRogueNousGetRogueTalentInfoScRsp => {
                "CmdChessRogueNousGetRogueTalentInfoScRsp"
            }
            Self::CmdGetChessRogueStoryInfoScRsp => "CmdGetChessRogueStoryInfoScRsp",
            Self::CmdChessRogueNousEditDiceCsReq => "CmdChessRogueNousEditDiceCsReq",
            Self::CmdChessRogueQueryScRsp => "CmdChessRogueQueryScRsp",
            Self::CmdChessRogueSelectCellCsReq => "CmdChessRogueSelectCellCsReq",
            Self::CmdSelectChessRogueSubStoryScRsp => "CmdSelectChessRogueSubStoryScRsp",
            Self::CmdGetChessRogueNousStoryInfoScRsp => {
                "CmdGetChessRogueNousStoryInfoScRsp"
            }
            Self::CmdChessRogueReRollDiceScRsp => "CmdChessRogueReRollDiceScRsp",
            Self::CmdChessRogueSelectCellScRsp => "CmdChessRogueSelectCellScRsp",
            Self::CmdSelectChessRogueNousSubStoryScRsp => {
                "CmdSelectChessRogueNousSubStoryScRsp"
            }
            Self::CmdChessRoguePickAvatarScRsp => "CmdChessRoguePickAvatarScRsp",
            Self::CmdChessRogueSelectBpCsReq => "CmdChessRogueSelectBpCsReq",
            Self::CmdChessRoguePickAvatarCsReq => "CmdChessRoguePickAvatarCsReq",
            Self::CmdChessRogueSelectBpScRsp => "CmdChessRogueSelectBpScRsp",
            Self::CmdChessRogueGiveUpRollScRsp => "CmdChessRogueGiveUpRollScRsp",
            Self::CmdChessRogueUpdateAllowedSelectCellScNotify => {
                "CmdChessRogueUpdateAllowedSelectCellScNotify"
            }
            Self::CmdChessRogueEnterCellCsReq => "CmdChessRogueEnterCellCsReq",
            Self::CmdChessRogueReviveAvatarScRsp => "CmdChessRogueReviveAvatarScRsp",
            Self::CmdGetChessRogueBuffEnhanceInfoScRsp => {
                "CmdGetChessRogueBuffEnhanceInfoScRsp"
            }
            Self::CmdChessRogueLeaveScRsp => "CmdChessRogueLeaveScRsp",
            Self::CmdChessRogueUpdateDiceInfoScNotify => {
                "CmdChessRogueUpdateDiceInfoScNotify"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdChessRogueTypeNone" => Some(Self::None),
            "CmdChessRogueQuitScRsp" => Some(Self::CmdChessRogueQuitScRsp),
            "CmdChessRogueNousDiceSurfaceUnlockNotify" => {
                Some(Self::CmdChessRogueNousDiceSurfaceUnlockNotify)
            }
            "CmdChessRogueConfirmRollScRsp" => Some(Self::CmdChessRogueConfirmRollScRsp),
            "CmdChessRogueStartScRsp" => Some(Self::CmdChessRogueStartScRsp),
            "CmdGetChessRogueStoryAeonTalkInfoCsReq" => {
                Some(Self::CmdGetChessRogueStoryAeonTalkInfoCsReq)
            }
            "CmdChessRogueUpdateDicePassiveAccumulateValueScNotify" => {
                Some(Self::CmdChessRogueUpdateDicePassiveAccumulateValueScNotify)
            }
            "CmdChessRogueNousGetRogueTalentInfoCsReq" => {
                Some(Self::CmdChessRogueNousGetRogueTalentInfoCsReq)
            }
            "CmdChessRogueSkipTeachingLevelCsReq" => {
                Some(Self::CmdChessRogueSkipTeachingLevelCsReq)
            }
            "CmdChessRogueSkipTeachingLevelScRsp" => {
                Some(Self::CmdChessRogueSkipTeachingLevelScRsp)
            }
            "CmdChessRogueQuitCsReq" => Some(Self::CmdChessRogueQuitCsReq),
            "CmdChessRogueCheatRollScRsp" => Some(Self::CmdChessRogueCheatRollScRsp),
            "CmdChessRogueEnterCellScRsp" => Some(Self::CmdChessRogueEnterCellScRsp),
            "CmdEnhanceChessRogueBuffScRsp" => Some(Self::CmdEnhanceChessRogueBuffScRsp),
            "CmdChessRogueUpdateActionPointScNotify" => {
                Some(Self::CmdChessRogueUpdateActionPointScNotify)
            }
            "CmdGetChessRogueNousStoryInfoCsReq" => {
                Some(Self::CmdGetChessRogueNousStoryInfoCsReq)
            }
            "CmdChessRogueGiveUpRollCsReq" => Some(Self::CmdChessRogueGiveUpRollCsReq),
            "CmdSelectChessRogueNousSubStoryCsReq" => {
                Some(Self::CmdSelectChessRogueNousSubStoryCsReq)
            }
            "CmdChessRogueNousEnableRogueTalentScRsp" => {
                Some(Self::CmdChessRogueNousEnableRogueTalentScRsp)
            }
            "CmdChessRogueQueryBpCsReq" => Some(Self::CmdChessRogueQueryBpCsReq),
            "CmdChessRogueQueryBpScRsp" => Some(Self::CmdChessRogueQueryBpScRsp),
            "CmdChessRogueQueryAeonDimensionsCsReq" => {
                Some(Self::CmdChessRogueQueryAeonDimensionsCsReq)
            }
            "CmdChessRogueRollDiceScRsp" => Some(Self::CmdChessRogueRollDiceScRsp),
            "CmdChessRogueNousEnableRogueTalentCsReq" => {
                Some(Self::CmdChessRogueNousEnableRogueTalentCsReq)
            }
            "CmdChessRogueCellUpdateNotify" => Some(Self::CmdChessRogueCellUpdateNotify),
            "CmdEnterChessRogueAeonRoomCsReq" => {
                Some(Self::CmdEnterChessRogueAeonRoomCsReq)
            }
            "CmdSyncChessRogueNousMainStoryScNotify" => {
                Some(Self::CmdSyncChessRogueNousMainStoryScNotify)
            }
            "CmdChessRogueNousDiceUpdateNotify" => {
                Some(Self::CmdChessRogueNousDiceUpdateNotify)
            }
            "CmdFinishChessRogueSubStoryCsReq" => {
                Some(Self::CmdFinishChessRogueSubStoryCsReq)
            }
            "CmdChessRogueUpdateMoneyInfoScNotify" => {
                Some(Self::CmdChessRogueUpdateMoneyInfoScNotify)
            }
            "CmdEnhanceChessRogueBuffCsReq" => Some(Self::CmdEnhanceChessRogueBuffCsReq),
            "CmdChessRogueQuestFinishNotify" => {
                Some(Self::CmdChessRogueQuestFinishNotify)
            }
            "CmdSyncChessRogueNousValueScNotify" => {
                Some(Self::CmdSyncChessRogueNousValueScNotify)
            }
            "CmdChessRogueUpdateUnlockLevelScNotify" => {
                Some(Self::CmdChessRogueUpdateUnlockLevelScNotify)
            }
            "CmdChessRogueUpdateBoardScNotify" => {
                Some(Self::CmdChessRogueUpdateBoardScNotify)
            }
            "CmdGetChessRogueBuffEnhanceInfoCsReq" => {
                Some(Self::CmdGetChessRogueBuffEnhanceInfoCsReq)
            }
            "CmdChessRogueFinishCurRoomNotify" => {
                Some(Self::CmdChessRogueFinishCurRoomNotify)
            }
            "CmdSyncChessRogueMainStoryFinishScNotify" => {
                Some(Self::CmdSyncChessRogueMainStoryFinishScNotify)
            }
            "CmdChessRogueEnterNextLayerScRsp" => {
                Some(Self::CmdChessRogueEnterNextLayerScRsp)
            }
            "CmdChessRogueEnterScRsp" => Some(Self::CmdChessRogueEnterScRsp),
            "CmdChessRogueConfirmRollCsReq" => Some(Self::CmdChessRogueConfirmRollCsReq),
            "CmdChessRogueGiveUpCsReq" => Some(Self::CmdChessRogueGiveUpCsReq),
            "CmdSelectChessRogueSubStoryCsReq" => {
                Some(Self::CmdSelectChessRogueSubStoryCsReq)
            }
            "CmdChessRogueGoAheadCsReq" => Some(Self::CmdChessRogueGoAheadCsReq),
            "CmdChessRogueLeaveCsReq" => Some(Self::CmdChessRogueLeaveCsReq),
            "CmdChessRogueQueryCsReq" => Some(Self::CmdChessRogueQueryCsReq),
            "CmdChessRogueReviveAvatarCsReq" => {
                Some(Self::CmdChessRogueReviveAvatarCsReq)
            }
            "CmdChessRogueQueryAeonDimensionsScRsp" => {
                Some(Self::CmdChessRogueQueryAeonDimensionsScRsp)
            }
            "CmdChessRogueCheatRollCsReq" => Some(Self::CmdChessRogueCheatRollCsReq),
            "CmdChessRogueLayerAccountInfoNotify" => {
                Some(Self::CmdChessRogueLayerAccountInfoNotify)
            }
            "CmdGetChessRogueStoryInfoCsReq" => {
                Some(Self::CmdGetChessRogueStoryInfoCsReq)
            }
            "CmdChessRogueEnterCsReq" => Some(Self::CmdChessRogueEnterCsReq),
            "CmdChessRogueRollDiceCsReq" => Some(Self::CmdChessRogueRollDiceCsReq),
            "CmdChessRogueNousEditDiceScRsp" => {
                Some(Self::CmdChessRogueNousEditDiceScRsp)
            }
            "CmdChessRogueUpdateReviveInfoScNotify" => {
                Some(Self::CmdChessRogueUpdateReviveInfoScNotify)
            }
            "CmdChessRogueMoveCellNotify" => Some(Self::CmdChessRogueMoveCellNotify),
            "CmdChessRogueGiveUpScRsp" => Some(Self::CmdChessRogueGiveUpScRsp),
            "CmdFinishChessRogueNousSubStoryCsReq" => {
                Some(Self::CmdFinishChessRogueNousSubStoryCsReq)
            }
            "CmdSyncChessRogueNousSubStoryScNotify" => {
                Some(Self::CmdSyncChessRogueNousSubStoryScNotify)
            }
            "CmdChessRogueChangeyAeonDimensionNotify" => {
                Some(Self::CmdChessRogueChangeyAeonDimensionNotify)
            }
            "CmdChessRogueGoAheadScRsp" => Some(Self::CmdChessRogueGoAheadScRsp),
            "CmdChessRogueUpdateLevelBaseInfoScNotify" => {
                Some(Self::CmdChessRogueUpdateLevelBaseInfoScNotify)
            }
            "CmdChessRogueUpdateAeonModifierValueScNotify" => {
                Some(Self::CmdChessRogueUpdateAeonModifierValueScNotify)
            }
            "CmdFinishChessRogueSubStoryScRsp" => {
                Some(Self::CmdFinishChessRogueSubStoryScRsp)
            }
            "CmdGetChessRogueStoryAeonTalkInfoScRsp" => {
                Some(Self::CmdGetChessRogueStoryAeonTalkInfoScRsp)
            }
            "CmdEnterChessRogueAeonRoomScRsp" => {
                Some(Self::CmdEnterChessRogueAeonRoomScRsp)
            }
            "CmdChessRogueReRollDiceCsReq" => Some(Self::CmdChessRogueReRollDiceCsReq),
            "CmdFinishChessRogueNousSubStoryScRsp" => {
                Some(Self::CmdFinishChessRogueNousSubStoryScRsp)
            }
            "CmdChessRogueStartCsReq" => Some(Self::CmdChessRogueStartCsReq),
            "CmdChessRogueEnterNextLayerCsReq" => {
                Some(Self::CmdChessRogueEnterNextLayerCsReq)
            }
            "CmdChessRogueNousGetRogueTalentInfoScRsp" => {
                Some(Self::CmdChessRogueNousGetRogueTalentInfoScRsp)
            }
            "CmdGetChessRogueStoryInfoScRsp" => {
                Some(Self::CmdGetChessRogueStoryInfoScRsp)
            }
            "CmdChessRogueNousEditDiceCsReq" => {
                Some(Self::CmdChessRogueNousEditDiceCsReq)
            }
            "CmdChessRogueQueryScRsp" => Some(Self::CmdChessRogueQueryScRsp),
            "CmdChessRogueSelectCellCsReq" => Some(Self::CmdChessRogueSelectCellCsReq),
            "CmdSelectChessRogueSubStoryScRsp" => {
                Some(Self::CmdSelectChessRogueSubStoryScRsp)
            }
            "CmdGetChessRogueNousStoryInfoScRsp" => {
                Some(Self::CmdGetChessRogueNousStoryInfoScRsp)
            }
            "CmdChessRogueReRollDiceScRsp" => Some(Self::CmdChessRogueReRollDiceScRsp),
            "CmdChessRogueSelectCellScRsp" => Some(Self::CmdChessRogueSelectCellScRsp),
            "CmdSelectChessRogueNousSubStoryScRsp" => {
                Some(Self::CmdSelectChessRogueNousSubStoryScRsp)
            }
            "CmdChessRoguePickAvatarScRsp" => Some(Self::CmdChessRoguePickAvatarScRsp),
            "CmdChessRogueSelectBpCsReq" => Some(Self::CmdChessRogueSelectBpCsReq),
            "CmdChessRoguePickAvatarCsReq" => Some(Self::CmdChessRoguePickAvatarCsReq),
            "CmdChessRogueSelectBpScRsp" => Some(Self::CmdChessRogueSelectBpScRsp),
            "CmdChessRogueGiveUpRollScRsp" => Some(Self::CmdChessRogueGiveUpRollScRsp),
            "CmdChessRogueUpdateAllowedSelectCellScNotify" => {
                Some(Self::CmdChessRogueUpdateAllowedSelectCellScNotify)
            }
            "CmdChessRogueEnterCellCsReq" => Some(Self::CmdChessRogueEnterCellCsReq),
            "CmdChessRogueReviveAvatarScRsp" => {
                Some(Self::CmdChessRogueReviveAvatarScRsp)
            }
            "CmdGetChessRogueBuffEnhanceInfoScRsp" => {
                Some(Self::CmdGetChessRogueBuffEnhanceInfoScRsp)
            }
            "CmdChessRogueLeaveScRsp" => Some(Self::CmdChessRogueLeaveScRsp),
            "CmdChessRogueUpdateDiceInfoScNotify" => {
                Some(Self::CmdChessRogueUpdateDiceInfoScNotify)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Nlmollcfcgb {
    ChessRogueDiceIdle = 0,
    ChessRogueDiceRolled = 1,
    ChessRogueDiceConfirmed = 2,
    ChessRogueDiceGiveup = 3,
}
impl Nlmollcfcgb {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::ChessRogueDiceIdle => "CHESS_ROGUE_DICE_IDLE",
            Self::ChessRogueDiceRolled => "CHESS_ROGUE_DICE_ROLLED",
            Self::ChessRogueDiceConfirmed => "CHESS_ROGUE_DICE_CONFIRMED",
            Self::ChessRogueDiceGiveup => "CHESS_ROGUE_DICE_GIVEUP",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CHESS_ROGUE_DICE_IDLE" => Some(Self::ChessRogueDiceIdle),
            "CHESS_ROGUE_DICE_ROLLED" => Some(Self::ChessRogueDiceRolled),
            "CHESS_ROGUE_DICE_CONFIRMED" => Some(Self::ChessRogueDiceConfirmed),
            "CHESS_ROGUE_DICE_GIVEUP" => Some(Self::ChessRogueDiceGiveup),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Aikblmohhjp {
    ChessRogueDiceFixed = 0,
    ChessRogueDiceEditable = 1,
}
impl Aikblmohhjp {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::ChessRogueDiceFixed => "CHESS_ROGUE_DICE_FIXED",
            Self::ChessRogueDiceEditable => "CHESS_ROGUE_DICE_EDITABLE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CHESS_ROGUE_DICE_FIXED" => Some(Self::ChessRogueDiceFixed),
            "CHESS_ROGUE_DICE_EDITABLE" => Some(Self::ChessRogueDiceEditable),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Eieenafclll {
    Idle = 0,
    Selected = 1,
    Processing = 2,
    Finish = 3,
}
impl Eieenafclll {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Idle => "IDLE",
            Self::Selected => "SELECTED",
            Self::Processing => "PROCESSING",
            Self::Finish => "FINISH",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "IDLE" => Some(Self::Idle),
            "SELECTED" => Some(Self::Selected),
            "PROCESSING" => Some(Self::Processing),
            "FINISH" => Some(Self::Finish),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Ogjbgonlhih {
    ChessRogueCellSpecialTypeNone = 0,
    ChessRogueCellSpecialTypeLocked = 1,
    ChessRogueCellSpecialTypeReplicate = 2,
    ChessRogueCellSpecialTypeProtected = 3,
    ChessRogueCellSpecialTypeSeed = 4,
    ChessRogueCellSpecialTypeStamp = 5,
}
impl Ogjbgonlhih {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::ChessRogueCellSpecialTypeNone => "CHESS_ROGUE_CELL_SPECIAL_TYPE_NONE",
            Self::ChessRogueCellSpecialTypeLocked => {
                "CHESS_ROGUE_CELL_SPECIAL_TYPE_LOCKED"
            }
            Self::ChessRogueCellSpecialTypeReplicate => {
                "CHESS_ROGUE_CELL_SPECIAL_TYPE_REPLICATE"
            }
            Self::ChessRogueCellSpecialTypeProtected => {
                "CHESS_ROGUE_CELL_SPECIAL_TYPE_PROTECTED"
            }
            Self::ChessRogueCellSpecialTypeSeed => "CHESS_ROGUE_CELL_SPECIAL_TYPE_SEED",
            Self::ChessRogueCellSpecialTypeStamp => "CHESS_ROGUE_CELL_SPECIAL_TYPE_STAMP",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CHESS_ROGUE_CELL_SPECIAL_TYPE_NONE" => {
                Some(Self::ChessRogueCellSpecialTypeNone)
            }
            "CHESS_ROGUE_CELL_SPECIAL_TYPE_LOCKED" => {
                Some(Self::ChessRogueCellSpecialTypeLocked)
            }
            "CHESS_ROGUE_CELL_SPECIAL_TYPE_REPLICATE" => {
                Some(Self::ChessRogueCellSpecialTypeReplicate)
            }
            "CHESS_ROGUE_CELL_SPECIAL_TYPE_PROTECTED" => {
                Some(Self::ChessRogueCellSpecialTypeProtected)
            }
            "CHESS_ROGUE_CELL_SPECIAL_TYPE_SEED" => {
                Some(Self::ChessRogueCellSpecialTypeSeed)
            }
            "CHESS_ROGUE_CELL_SPECIAL_TYPE_STAMP" => {
                Some(Self::ChessRogueCellSpecialTypeStamp)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Ibmlfggingp {
    ChessRogueLevelIdle = 0,
    ChessRogueLevelProcessing = 1,
    ChessRogueLevelPending = 2,
    ChessRogueLevelFinish = 3,
    ChessRogueLevelFailed = 4,
    ChessRogueLevelForceFinish = 5,
}
impl Ibmlfggingp {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::ChessRogueLevelIdle => "CHESS_ROGUE_LEVEL_IDLE",
            Self::ChessRogueLevelProcessing => "CHESS_ROGUE_LEVEL_PROCESSING",
            Self::ChessRogueLevelPending => "CHESS_ROGUE_LEVEL_PENDING",
            Self::ChessRogueLevelFinish => "CHESS_ROGUE_LEVEL_FINISH",
            Self::ChessRogueLevelFailed => "CHESS_ROGUE_LEVEL_FAILED",
            Self::ChessRogueLevelForceFinish => "CHESS_ROGUE_LEVEL_FORCE_FINISH",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CHESS_ROGUE_LEVEL_IDLE" => Some(Self::ChessRogueLevelIdle),
            "CHESS_ROGUE_LEVEL_PROCESSING" => Some(Self::ChessRogueLevelProcessing),
            "CHESS_ROGUE_LEVEL_PENDING" => Some(Self::ChessRogueLevelPending),
            "CHESS_ROGUE_LEVEL_FINISH" => Some(Self::ChessRogueLevelFinish),
            "CHESS_ROGUE_LEVEL_FAILED" => Some(Self::ChessRogueLevelFailed),
            "CHESS_ROGUE_LEVEL_FORCE_FINISH" => Some(Self::ChessRogueLevelForceFinish),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Kfhlbkccaco {
    ChessRogueAccountByNone = 0,
    ChessRogueAccountByNormalFinish = 1,
    ChessRogueAccountByNormalQuit = 2,
    ChessRogueAccountByDialog = 3,
    ChessRogueAccountByFailed = 4,
    ChessRogueAccountByCustomOp = 5,
}
impl Kfhlbkccaco {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::ChessRogueAccountByNone => "CHESS_ROGUE_ACCOUNT_BY_NONE",
            Self::ChessRogueAccountByNormalFinish => {
                "CHESS_ROGUE_ACCOUNT_BY_NORMAL_FINISH"
            }
            Self::ChessRogueAccountByNormalQuit => "CHESS_ROGUE_ACCOUNT_BY_NORMAL_QUIT",
            Self::ChessRogueAccountByDialog => "CHESS_ROGUE_ACCOUNT_BY_DIALOG",
            Self::ChessRogueAccountByFailed => "CHESS_ROGUE_ACCOUNT_BY_FAILED",
            Self::ChessRogueAccountByCustomOp => "CHESS_ROGUE_ACCOUNT_BY_CUSTOM_OP",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CHESS_ROGUE_ACCOUNT_BY_NONE" => Some(Self::ChessRogueAccountByNone),
            "CHESS_ROGUE_ACCOUNT_BY_NORMAL_FINISH" => {
                Some(Self::ChessRogueAccountByNormalFinish)
            }
            "CHESS_ROGUE_ACCOUNT_BY_NORMAL_QUIT" => {
                Some(Self::ChessRogueAccountByNormalQuit)
            }
            "CHESS_ROGUE_ACCOUNT_BY_DIALOG" => Some(Self::ChessRogueAccountByDialog),
            "CHESS_ROGUE_ACCOUNT_BY_FAILED" => Some(Self::ChessRogueAccountByFailed),
            "CHESS_ROGUE_ACCOUNT_BY_CUSTOM_OP" => Some(Self::ChessRogueAccountByCustomOp),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Obfdebfdgob {
    ChessRogueBuffSourceTypeNone = 0,
    ChessRogueBuffSourceTypeSelect = 1,
    ChessRogueBuffSourceTypeEnhance = 2,
    ChessRogueBuffSourceTypeMiracle = 3,
    ChessRogueBuffSourceTypeDialogue = 4,
    ChessRogueBuffSourceTypeBonus = 5,
    ChessRogueBuffSourceTypeShop = 6,
    ChessRogueBuffSourceTypeDice = 7,
    ChessRogueBuffSourceTypeAeon = 8,
    ChessRogueBuffSourceTypeMazeSkill = 9,
    ChessRogueBuffSourceTypeLevelMechanism = 10,
}
impl Obfdebfdgob {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::ChessRogueBuffSourceTypeNone => "CHESS_ROGUE_BUFF_SOURCE_TYPE_NONE",
            Self::ChessRogueBuffSourceTypeSelect => "CHESS_ROGUE_BUFF_SOURCE_TYPE_SELECT",
            Self::ChessRogueBuffSourceTypeEnhance => {
                "CHESS_ROGUE_BUFF_SOURCE_TYPE_ENHANCE"
            }
            Self::ChessRogueBuffSourceTypeMiracle => {
                "CHESS_ROGUE_BUFF_SOURCE_TYPE_MIRACLE"
            }
            Self::ChessRogueBuffSourceTypeDialogue => {
                "CHESS_ROGUE_BUFF_SOURCE_TYPE_DIALOGUE"
            }
            Self::ChessRogueBuffSourceTypeBonus => "CHESS_ROGUE_BUFF_SOURCE_TYPE_BONUS",
            Self::ChessRogueBuffSourceTypeShop => "CHESS_ROGUE_BUFF_SOURCE_TYPE_SHOP",
            Self::ChessRogueBuffSourceTypeDice => "CHESS_ROGUE_BUFF_SOURCE_TYPE_DICE",
            Self::ChessRogueBuffSourceTypeAeon => "CHESS_ROGUE_BUFF_SOURCE_TYPE_AEON",
            Self::ChessRogueBuffSourceTypeMazeSkill => {
                "CHESS_ROGUE_BUFF_SOURCE_TYPE_MAZE_SKILL"
            }
            Self::ChessRogueBuffSourceTypeLevelMechanism => {
                "CHESS_ROGUE_BUFF_SOURCE_TYPE_LEVEL_MECHANISM"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CHESS_ROGUE_BUFF_SOURCE_TYPE_NONE" => {
                Some(Self::ChessRogueBuffSourceTypeNone)
            }
            "CHESS_ROGUE_BUFF_SOURCE_TYPE_SELECT" => {
                Some(Self::ChessRogueBuffSourceTypeSelect)
            }
            "CHESS_ROGUE_BUFF_SOURCE_TYPE_ENHANCE" => {
                Some(Self::ChessRogueBuffSourceTypeEnhance)
            }
            "CHESS_ROGUE_BUFF_SOURCE_TYPE_MIRACLE" => {
                Some(Self::ChessRogueBuffSourceTypeMiracle)
            }
            "CHESS_ROGUE_BUFF_SOURCE_TYPE_DIALOGUE" => {
                Some(Self::ChessRogueBuffSourceTypeDialogue)
            }
            "CHESS_ROGUE_BUFF_SOURCE_TYPE_BONUS" => {
                Some(Self::ChessRogueBuffSourceTypeBonus)
            }
            "CHESS_ROGUE_BUFF_SOURCE_TYPE_SHOP" => {
                Some(Self::ChessRogueBuffSourceTypeShop)
            }
            "CHESS_ROGUE_BUFF_SOURCE_TYPE_DICE" => {
                Some(Self::ChessRogueBuffSourceTypeDice)
            }
            "CHESS_ROGUE_BUFF_SOURCE_TYPE_AEON" => {
                Some(Self::ChessRogueBuffSourceTypeAeon)
            }
            "CHESS_ROGUE_BUFF_SOURCE_TYPE_MAZE_SKILL" => {
                Some(Self::ChessRogueBuffSourceTypeMazeSkill)
            }
            "CHESS_ROGUE_BUFF_SOURCE_TYPE_LEVEL_MECHANISM" => {
                Some(Self::ChessRogueBuffSourceTypeLevelMechanism)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Hfenkddaoff {
    ChessRogueMiracleSourceTypeNone = 0,
    ChessRogueMiracleSourceTypeSelect = 1,
    ChessRogueMiracleSourceTypeDialogue = 2,
    ChessRogueMiracleSourceTypeBonus = 3,
    ChessRogueMiracleSourceTypeUse = 4,
    ChessRogueMiracleSourceTypeReset = 5,
    ChessRogueMiracleSourceTypeReplace = 6,
    ChessRogueMiracleSourceTypeTrade = 7,
    ChessRogueMiracleSourceTypeGet = 8,
    ChessRogueMiracleSourceTypeShop = 9,
    ChessRogueMiracleSourceTypeMazeSkill = 10,
    ChessRogueMiracleSourceTypeLevelMechanism = 11,
}
impl Hfenkddaoff {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::ChessRogueMiracleSourceTypeNone => {
                "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_NONE"
            }
            Self::ChessRogueMiracleSourceTypeSelect => {
                "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_SELECT"
            }
            Self::ChessRogueMiracleSourceTypeDialogue => {
                "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_DIALOGUE"
            }
            Self::ChessRogueMiracleSourceTypeBonus => {
                "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_BONUS"
            }
            Self::ChessRogueMiracleSourceTypeUse => "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_USE",
            Self::ChessRogueMiracleSourceTypeReset => {
                "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_RESET"
            }
            Self::ChessRogueMiracleSourceTypeReplace => {
                "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_REPLACE"
            }
            Self::ChessRogueMiracleSourceTypeTrade => {
                "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_TRADE"
            }
            Self::ChessRogueMiracleSourceTypeGet => "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_GET",
            Self::ChessRogueMiracleSourceTypeShop => {
                "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_SHOP"
            }
            Self::ChessRogueMiracleSourceTypeMazeSkill => {
                "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_MAZE_SKILL"
            }
            Self::ChessRogueMiracleSourceTypeLevelMechanism => {
                "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_LEVEL_MECHANISM"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_NONE" => {
                Some(Self::ChessRogueMiracleSourceTypeNone)
            }
            "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_SELECT" => {
                Some(Self::ChessRogueMiracleSourceTypeSelect)
            }
            "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_DIALOGUE" => {
                Some(Self::ChessRogueMiracleSourceTypeDialogue)
            }
            "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_BONUS" => {
                Some(Self::ChessRogueMiracleSourceTypeBonus)
            }
            "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_USE" => {
                Some(Self::ChessRogueMiracleSourceTypeUse)
            }
            "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_RESET" => {
                Some(Self::ChessRogueMiracleSourceTypeReset)
            }
            "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_REPLACE" => {
                Some(Self::ChessRogueMiracleSourceTypeReplace)
            }
            "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_TRADE" => {
                Some(Self::ChessRogueMiracleSourceTypeTrade)
            }
            "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_GET" => {
                Some(Self::ChessRogueMiracleSourceTypeGet)
            }
            "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_SHOP" => {
                Some(Self::ChessRogueMiracleSourceTypeShop)
            }
            "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_MAZE_SKILL" => {
                Some(Self::ChessRogueMiracleSourceTypeMazeSkill)
            }
            "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_LEVEL_MECHANISM" => {
                Some(Self::ChessRogueMiracleSourceTypeLevelMechanism)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Mmkdkdgfblh {
    ChessRogueUpdateLevelStatusByNone = 0,
    ChessRogueUpdateLevelStatusByDialog = 1,
}
impl Mmkdkdgfblh {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::ChessRogueUpdateLevelStatusByNone => {
                "CHESS_ROGUE_UPDATE_LEVEL_STATUS_BY_NONE"
            }
            Self::ChessRogueUpdateLevelStatusByDialog => {
                "CHESS_ROGUE_UPDATE_LEVEL_STATUS_BY_DIALOG"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CHESS_ROGUE_UPDATE_LEVEL_STATUS_BY_NONE" => {
                Some(Self::ChessRogueUpdateLevelStatusByNone)
            }
            "CHESS_ROGUE_UPDATE_LEVEL_STATUS_BY_DIALOG" => {
                Some(Self::ChessRogueUpdateLevelStatusByDialog)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Aebjegdpong {
    ChessRogueCellUpdateReasonNone = 0,
    ChessRogueCellUpdateReasonModifier = 1,
}
impl Aebjegdpong {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::ChessRogueCellUpdateReasonNone => "CHESS_ROGUE_CELL_UPDATE_REASON_NONE",
            Self::ChessRogueCellUpdateReasonModifier => {
                "CHESS_ROGUE_CELL_UPDATE_REASON_MODIFIER"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CHESS_ROGUE_CELL_UPDATE_REASON_NONE" => {
                Some(Self::ChessRogueCellUpdateReasonNone)
            }
            "CHESS_ROGUE_CELL_UPDATE_REASON_MODIFIER" => {
                Some(Self::ChessRogueCellUpdateReasonModifier)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Cbncoeiemfi {
    ChessRogueAeonTypeNone = 0,
    ChessRogueAeonTypeKnight = 1,
    ChessRogueAeonTypeMemory = 2,
    ChessRogueAeonTypeWarlock = 3,
    ChessRogueAeonTypePriest = 4,
    ChessRogueAeonTypeRogue = 5,
    ChessRogueAeonTypeWarrior = 6,
    ChessRogueAeonTypeHappy = 7,
    ChessRogueAeonTypeBreed = 8,
}
impl Cbncoeiemfi {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::ChessRogueAeonTypeNone => "CHESS_ROGUE_AEON_TYPE_NONE",
            Self::ChessRogueAeonTypeKnight => "CHESS_ROGUE_AEON_TYPE_KNIGHT",
            Self::ChessRogueAeonTypeMemory => "CHESS_ROGUE_AEON_TYPE_MEMORY",
            Self::ChessRogueAeonTypeWarlock => "CHESS_ROGUE_AEON_TYPE_WARLOCK",
            Self::ChessRogueAeonTypePriest => "CHESS_ROGUE_AEON_TYPE_PRIEST",
            Self::ChessRogueAeonTypeRogue => "CHESS_ROGUE_AEON_TYPE_ROGUE",
            Self::ChessRogueAeonTypeWarrior => "CHESS_ROGUE_AEON_TYPE_WARRIOR",
            Self::ChessRogueAeonTypeHappy => "CHESS_ROGUE_AEON_TYPE_HAPPY",
            Self::ChessRogueAeonTypeBreed => "CHESS_ROGUE_AEON_TYPE_BREED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CHESS_ROGUE_AEON_TYPE_NONE" => Some(Self::ChessRogueAeonTypeNone),
            "CHESS_ROGUE_AEON_TYPE_KNIGHT" => Some(Self::ChessRogueAeonTypeKnight),
            "CHESS_ROGUE_AEON_TYPE_MEMORY" => Some(Self::ChessRogueAeonTypeMemory),
            "CHESS_ROGUE_AEON_TYPE_WARLOCK" => Some(Self::ChessRogueAeonTypeWarlock),
            "CHESS_ROGUE_AEON_TYPE_PRIEST" => Some(Self::ChessRogueAeonTypePriest),
            "CHESS_ROGUE_AEON_TYPE_ROGUE" => Some(Self::ChessRogueAeonTypeRogue),
            "CHESS_ROGUE_AEON_TYPE_WARRIOR" => Some(Self::ChessRogueAeonTypeWarrior),
            "CHESS_ROGUE_AEON_TYPE_HAPPY" => Some(Self::ChessRogueAeonTypeHappy),
            "CHESS_ROGUE_AEON_TYPE_BREED" => Some(Self::ChessRogueAeonTypeBreed),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Lmgjdlookoj {
    ChessRogueDiceSourceTypeNone = 0,
    ChessRogueDiceSourceTypeNormal = 1,
    ChessRogueDiceSourceTypeRepeat = 2,
    ChessRogueDiceSourceTypeCheat = 3,
}
impl Lmgjdlookoj {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::ChessRogueDiceSourceTypeNone => "CHESS_ROGUE_DICE_SOURCE_TYPE_NONE",
            Self::ChessRogueDiceSourceTypeNormal => "CHESS_ROGUE_DICE_SOURCE_TYPE_NORMAL",
            Self::ChessRogueDiceSourceTypeRepeat => "CHESS_ROGUE_DICE_SOURCE_TYPE_REPEAT",
            Self::ChessRogueDiceSourceTypeCheat => "CHESS_ROGUE_DICE_SOURCE_TYPE_CHEAT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CHESS_ROGUE_DICE_SOURCE_TYPE_NONE" => {
                Some(Self::ChessRogueDiceSourceTypeNone)
            }
            "CHESS_ROGUE_DICE_SOURCE_TYPE_NORMAL" => {
                Some(Self::ChessRogueDiceSourceTypeNormal)
            }
            "CHESS_ROGUE_DICE_SOURCE_TYPE_REPEAT" => {
                Some(Self::ChessRogueDiceSourceTypeRepeat)
            }
            "CHESS_ROGUE_DICE_SOURCE_TYPE_CHEAT" => {
                Some(Self::ChessRogueDiceSourceTypeCheat)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Cdoegmdjgoc {
    ChessRogueNousMainStoryStatusNone = 0,
    ChessRogueNousMainStoryStatusUnlock = 1,
    ChessRogueNousMainStoryStatusFinish = 2,
    ChessRogueNousMainStoryStatusCanTrigger = 3,
}
impl Cdoegmdjgoc {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::ChessRogueNousMainStoryStatusNone => {
                "CHESS_ROGUE_NOUS_MAIN_STORY_STATUS_NONE"
            }
            Self::ChessRogueNousMainStoryStatusUnlock => {
                "CHESS_ROGUE_NOUS_MAIN_STORY_STATUS_UNLOCK"
            }
            Self::ChessRogueNousMainStoryStatusFinish => {
                "CHESS_ROGUE_NOUS_MAIN_STORY_STATUS_FINISH"
            }
            Self::ChessRogueNousMainStoryStatusCanTrigger => {
                "CHESS_ROGUE_NOUS_MAIN_STORY_STATUS_CAN_TRIGGER"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CHESS_ROGUE_NOUS_MAIN_STORY_STATUS_NONE" => {
                Some(Self::ChessRogueNousMainStoryStatusNone)
            }
            "CHESS_ROGUE_NOUS_MAIN_STORY_STATUS_UNLOCK" => {
                Some(Self::ChessRogueNousMainStoryStatusUnlock)
            }
            "CHESS_ROGUE_NOUS_MAIN_STORY_STATUS_FINISH" => {
                Some(Self::ChessRogueNousMainStoryStatusFinish)
            }
            "CHESS_ROGUE_NOUS_MAIN_STORY_STATUS_CAN_TRIGGER" => {
                Some(Self::ChessRogueNousMainStoryStatusCanTrigger)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Faohejiddhj {
    None = 0,
    PhaseOne = 1,
    PhaseTwo = 2,
}
impl Faohejiddhj {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "NONE",
            Self::PhaseOne => "PHASE_ONE",
            Self::PhaseTwo => "PHASE_TWO",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "NONE" => Some(Self::None),
            "PHASE_ONE" => Some(Self::PhaseOne),
            "PHASE_TWO" => Some(Self::PhaseTwo),
            _ => None,
        }
    }
}
/// CJFGFGIMMNO
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdChimeraType {
    None = 0,
    CmdChimeraQuitEndlessScRsp = 8165,
    CmdChimeraStartEndlessScRsp = 8174,
    CmdChimeraStartEndlessCsReq = 8179,
    CmdChimeraRoundWorkStartScRsp = 8169,
    CmdChimeraFinishRoundScRsp = 8161,
    CmdChimeraFinishRoundCsReq = 8164,
    CmdChimeraFinishEndlessRoundScRsp = 8166,
    CmdChimeraFinishEndlessRoundCsReq = 8175,
    CmdChimeraGetDataScRsp = 8168,
    CmdChimeraDoFinalRoundScRsp = 8170,
    CmdChimeraQuitEndlessCsReq = 8178,
    CmdChimeraDoFinalRoundCsReq = 8176,
    CmdChimeraSetLineupScRsp = 8162,
    CmdChimeraGetDataCsReq = 8177,
    CmdChimeraSetLineupCsReq = 8172,
    CmdChimeraRoundWorkStartCsReq = 8173,
}
impl CmdChimeraType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdChimeraTypeNone",
            Self::CmdChimeraQuitEndlessScRsp => "CmdChimeraQuitEndlessScRsp",
            Self::CmdChimeraStartEndlessScRsp => "CmdChimeraStartEndlessScRsp",
            Self::CmdChimeraStartEndlessCsReq => "CmdChimeraStartEndlessCsReq",
            Self::CmdChimeraRoundWorkStartScRsp => "CmdChimeraRoundWorkStartScRsp",
            Self::CmdChimeraFinishRoundScRsp => "CmdChimeraFinishRoundScRsp",
            Self::CmdChimeraFinishRoundCsReq => "CmdChimeraFinishRoundCsReq",
            Self::CmdChimeraFinishEndlessRoundScRsp => {
                "CmdChimeraFinishEndlessRoundScRsp"
            }
            Self::CmdChimeraFinishEndlessRoundCsReq => {
                "CmdChimeraFinishEndlessRoundCsReq"
            }
            Self::CmdChimeraGetDataScRsp => "CmdChimeraGetDataScRsp",
            Self::CmdChimeraDoFinalRoundScRsp => "CmdChimeraDoFinalRoundScRsp",
            Self::CmdChimeraQuitEndlessCsReq => "CmdChimeraQuitEndlessCsReq",
            Self::CmdChimeraDoFinalRoundCsReq => "CmdChimeraDoFinalRoundCsReq",
            Self::CmdChimeraSetLineupScRsp => "CmdChimeraSetLineupScRsp",
            Self::CmdChimeraGetDataCsReq => "CmdChimeraGetDataCsReq",
            Self::CmdChimeraSetLineupCsReq => "CmdChimeraSetLineupCsReq",
            Self::CmdChimeraRoundWorkStartCsReq => "CmdChimeraRoundWorkStartCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdChimeraTypeNone" => Some(Self::None),
            "CmdChimeraQuitEndlessScRsp" => Some(Self::CmdChimeraQuitEndlessScRsp),
            "CmdChimeraStartEndlessScRsp" => Some(Self::CmdChimeraStartEndlessScRsp),
            "CmdChimeraStartEndlessCsReq" => Some(Self::CmdChimeraStartEndlessCsReq),
            "CmdChimeraRoundWorkStartScRsp" => Some(Self::CmdChimeraRoundWorkStartScRsp),
            "CmdChimeraFinishRoundScRsp" => Some(Self::CmdChimeraFinishRoundScRsp),
            "CmdChimeraFinishRoundCsReq" => Some(Self::CmdChimeraFinishRoundCsReq),
            "CmdChimeraFinishEndlessRoundScRsp" => {
                Some(Self::CmdChimeraFinishEndlessRoundScRsp)
            }
            "CmdChimeraFinishEndlessRoundCsReq" => {
                Some(Self::CmdChimeraFinishEndlessRoundCsReq)
            }
            "CmdChimeraGetDataScRsp" => Some(Self::CmdChimeraGetDataScRsp),
            "CmdChimeraDoFinalRoundScRsp" => Some(Self::CmdChimeraDoFinalRoundScRsp),
            "CmdChimeraQuitEndlessCsReq" => Some(Self::CmdChimeraQuitEndlessCsReq),
            "CmdChimeraDoFinalRoundCsReq" => Some(Self::CmdChimeraDoFinalRoundCsReq),
            "CmdChimeraSetLineupScRsp" => Some(Self::CmdChimeraSetLineupScRsp),
            "CmdChimeraGetDataCsReq" => Some(Self::CmdChimeraGetDataCsReq),
            "CmdChimeraSetLineupCsReq" => Some(Self::CmdChimeraSetLineupCsReq),
            "CmdChimeraRoundWorkStartCsReq" => Some(Self::CmdChimeraRoundWorkStartCsReq),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Oapdmkkkeol {
    ChimeraLastPhaseFinishNone = 0,
    ChimeraLastPhaseFinishNormal = 1,
    ChimeraLastPhaseFinishSkip = 2,
    ChimeraLastPhaseFinishForce = 3,
}
impl Oapdmkkkeol {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::ChimeraLastPhaseFinishNone => "CHIMERA_LAST_PHASE_FINISH_NONE",
            Self::ChimeraLastPhaseFinishNormal => "CHIMERA_LAST_PHASE_FINISH_NORMAL",
            Self::ChimeraLastPhaseFinishSkip => "CHIMERA_LAST_PHASE_FINISH_SKIP",
            Self::ChimeraLastPhaseFinishForce => "CHIMERA_LAST_PHASE_FINISH_FORCE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CHIMERA_LAST_PHASE_FINISH_NONE" => Some(Self::ChimeraLastPhaseFinishNone),
            "CHIMERA_LAST_PHASE_FINISH_NORMAL" => {
                Some(Self::ChimeraLastPhaseFinishNormal)
            }
            "CHIMERA_LAST_PHASE_FINISH_SKIP" => Some(Self::ChimeraLastPhaseFinishSkip),
            "CHIMERA_LAST_PHASE_FINISH_FORCE" => Some(Self::ChimeraLastPhaseFinishForce),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Biakdfeljfm {
    ChimeraRoundWorkEndNone = 0,
    ChimeraRoundWorkEndSucc = 1,
    ChimeraRoundWorkEndFail = 2,
    ChimeraRoundWorkEndLeave = 3,
}
impl Biakdfeljfm {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::ChimeraRoundWorkEndNone => "CHIMERA_ROUND_WORK_END_NONE",
            Self::ChimeraRoundWorkEndSucc => "CHIMERA_ROUND_WORK_END_SUCC",
            Self::ChimeraRoundWorkEndFail => "CHIMERA_ROUND_WORK_END_FAIL",
            Self::ChimeraRoundWorkEndLeave => "CHIMERA_ROUND_WORK_END_LEAVE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CHIMERA_ROUND_WORK_END_NONE" => Some(Self::ChimeraRoundWorkEndNone),
            "CHIMERA_ROUND_WORK_END_SUCC" => Some(Self::ChimeraRoundWorkEndSucc),
            "CHIMERA_ROUND_WORK_END_FAIL" => Some(Self::ChimeraRoundWorkEndFail),
            "CHIMERA_ROUND_WORK_END_LEAVE" => Some(Self::ChimeraRoundWorkEndLeave),
            _ => None,
        }
    }
}
/// DIBEHAAGJDB
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdClockParkType {
    None = 0,
    CmdClockParkUseBuffScRsp = 7209,
    CmdClockParkUnlockTalentCsReq = 7206,
    CmdClockParkGetOngoingScriptInfoScRsp = 7215,
    CmdClockParkGetOngoingScriptInfoCsReq = 7225,
    CmdClockParkHandleWaitOperationCsReq = 7230,
    CmdClockParkStartScriptScRsp = 7229,
    CmdClockParkFinishScriptScNotify = 7224,
    CmdClockParkBattleEndScNotify = 7240,
    CmdClockParkStartScriptCsReq = 7207,
    CmdClockParkGetInfoScRsp = 7237,
    CmdClockParkGetInfoCsReq = 7226,
    CmdClockParkUnlockTalentScRsp = 7233,
    CmdClockParkHandleWaitOperationScRsp = 7202,
    CmdClockParkQuitScriptScRsp = 7204,
    CmdClockParkUseBuffCsReq = 7235,
    CmdClockParkQuitScriptCsReq = 7248,
}
impl CmdClockParkType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdClockParkTypeNone",
            Self::CmdClockParkUseBuffScRsp => "CmdClockParkUseBuffScRsp",
            Self::CmdClockParkUnlockTalentCsReq => "CmdClockParkUnlockTalentCsReq",
            Self::CmdClockParkGetOngoingScriptInfoScRsp => {
                "CmdClockParkGetOngoingScriptInfoScRsp"
            }
            Self::CmdClockParkGetOngoingScriptInfoCsReq => {
                "CmdClockParkGetOngoingScriptInfoCsReq"
            }
            Self::CmdClockParkHandleWaitOperationCsReq => {
                "CmdClockParkHandleWaitOperationCsReq"
            }
            Self::CmdClockParkStartScriptScRsp => "CmdClockParkStartScriptScRsp",
            Self::CmdClockParkFinishScriptScNotify => "CmdClockParkFinishScriptScNotify",
            Self::CmdClockParkBattleEndScNotify => "CmdClockParkBattleEndScNotify",
            Self::CmdClockParkStartScriptCsReq => "CmdClockParkStartScriptCsReq",
            Self::CmdClockParkGetInfoScRsp => "CmdClockParkGetInfoScRsp",
            Self::CmdClockParkGetInfoCsReq => "CmdClockParkGetInfoCsReq",
            Self::CmdClockParkUnlockTalentScRsp => "CmdClockParkUnlockTalentScRsp",
            Self::CmdClockParkHandleWaitOperationScRsp => {
                "CmdClockParkHandleWaitOperationScRsp"
            }
            Self::CmdClockParkQuitScriptScRsp => "CmdClockParkQuitScriptScRsp",
            Self::CmdClockParkUseBuffCsReq => "CmdClockParkUseBuffCsReq",
            Self::CmdClockParkQuitScriptCsReq => "CmdClockParkQuitScriptCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdClockParkTypeNone" => Some(Self::None),
            "CmdClockParkUseBuffScRsp" => Some(Self::CmdClockParkUseBuffScRsp),
            "CmdClockParkUnlockTalentCsReq" => Some(Self::CmdClockParkUnlockTalentCsReq),
            "CmdClockParkGetOngoingScriptInfoScRsp" => {
                Some(Self::CmdClockParkGetOngoingScriptInfoScRsp)
            }
            "CmdClockParkGetOngoingScriptInfoCsReq" => {
                Some(Self::CmdClockParkGetOngoingScriptInfoCsReq)
            }
            "CmdClockParkHandleWaitOperationCsReq" => {
                Some(Self::CmdClockParkHandleWaitOperationCsReq)
            }
            "CmdClockParkStartScriptScRsp" => Some(Self::CmdClockParkStartScriptScRsp),
            "CmdClockParkFinishScriptScNotify" => {
                Some(Self::CmdClockParkFinishScriptScNotify)
            }
            "CmdClockParkBattleEndScNotify" => Some(Self::CmdClockParkBattleEndScNotify),
            "CmdClockParkStartScriptCsReq" => Some(Self::CmdClockParkStartScriptCsReq),
            "CmdClockParkGetInfoScRsp" => Some(Self::CmdClockParkGetInfoScRsp),
            "CmdClockParkGetInfoCsReq" => Some(Self::CmdClockParkGetInfoCsReq),
            "CmdClockParkUnlockTalentScRsp" => Some(Self::CmdClockParkUnlockTalentScRsp),
            "CmdClockParkHandleWaitOperationScRsp" => {
                Some(Self::CmdClockParkHandleWaitOperationScRsp)
            }
            "CmdClockParkQuitScriptScRsp" => Some(Self::CmdClockParkQuitScriptScRsp),
            "CmdClockParkUseBuffCsReq" => Some(Self::CmdClockParkUseBuffCsReq),
            "CmdClockParkQuitScriptCsReq" => Some(Self::CmdClockParkQuitScriptCsReq),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ClockParkPlayStatus {
    ClockParkPlayNone = 0,
    ClockParkPlayNormalDeath = 1,
    ClockParkPlayNormalPass = 2,
    ClockParkPlayFinishScript = 5,
}
impl ClockParkPlayStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::ClockParkPlayNone => "CLOCK_PARK_PLAY_NONE",
            Self::ClockParkPlayNormalDeath => "CLOCK_PARK_PLAY_NORMAL_DEATH",
            Self::ClockParkPlayNormalPass => "CLOCK_PARK_PLAY_NORMAL_PASS",
            Self::ClockParkPlayFinishScript => "CLOCK_PARK_PLAY_FINISH_SCRIPT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CLOCK_PARK_PLAY_NONE" => Some(Self::ClockParkPlayNone),
            "CLOCK_PARK_PLAY_NORMAL_DEATH" => Some(Self::ClockParkPlayNormalDeath),
            "CLOCK_PARK_PLAY_NORMAL_PASS" => Some(Self::ClockParkPlayNormalPass),
            "CLOCK_PARK_PLAY_FINISH_SCRIPT" => Some(Self::ClockParkPlayFinishScript),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum MissionStatus {
    MissionNone = 0,
    MissionDoing = 1,
    MissionFinish = 2,
    MissionPrepared = 3,
}
impl MissionStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::MissionNone => "MISSION_NONE",
            Self::MissionDoing => "MISSION_DOING",
            Self::MissionFinish => "MISSION_FINISH",
            Self::MissionPrepared => "MISSION_PREPARED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MISSION_NONE" => Some(Self::MissionNone),
            "MISSION_DOING" => Some(Self::MissionDoing),
            "MISSION_FINISH" => Some(Self::MissionFinish),
            "MISSION_PREPARED" => Some(Self::MissionPrepared),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum MessageSectionStatus {
    MessageSectionNone = 0,
    MessageSectionDoing = 1,
    MessageSectionFinish = 2,
    MessageSectionFrozen = 3,
}
impl MessageSectionStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::MessageSectionNone => "MESSAGE_SECTION_NONE",
            Self::MessageSectionDoing => "MESSAGE_SECTION_DOING",
            Self::MessageSectionFinish => "MESSAGE_SECTION_FINISH",
            Self::MessageSectionFrozen => "MESSAGE_SECTION_FROZEN",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MESSAGE_SECTION_NONE" => Some(Self::MessageSectionNone),
            "MESSAGE_SECTION_DOING" => Some(Self::MessageSectionDoing),
            "MESSAGE_SECTION_FINISH" => Some(Self::MessageSectionFinish),
            "MESSAGE_SECTION_FROZEN" => Some(Self::MessageSectionFrozen),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum MessageGroupStatus {
    MessageGroupNone = 0,
    MessageGroupDoing = 1,
    MessageGroupFinish = 2,
    MessageGroupFrozen = 3,
}
impl MessageGroupStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::MessageGroupNone => "MESSAGE_GROUP_NONE",
            Self::MessageGroupDoing => "MESSAGE_GROUP_DOING",
            Self::MessageGroupFinish => "MESSAGE_GROUP_FINISH",
            Self::MessageGroupFrozen => "MESSAGE_GROUP_FROZEN",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MESSAGE_GROUP_NONE" => Some(Self::MessageGroupNone),
            "MESSAGE_GROUP_DOING" => Some(Self::MessageGroupDoing),
            "MESSAGE_GROUP_FINISH" => Some(Self::MessageGroupFinish),
            "MESSAGE_GROUP_FROZEN" => Some(Self::MessageGroupFrozen),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum BattleRecordType {
    BattleRecordNone = 0,
    BattleRecordChallenge = 1,
    BattleRecordRogue = 2,
}
impl BattleRecordType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::BattleRecordNone => "BATTLE_RECORD_NONE",
            Self::BattleRecordChallenge => "BATTLE_RECORD_CHALLENGE",
            Self::BattleRecordRogue => "BATTLE_RECORD_ROGUE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "BATTLE_RECORD_NONE" => Some(Self::BattleRecordNone),
            "BATTLE_RECORD_CHALLENGE" => Some(Self::BattleRecordChallenge),
            "BATTLE_RECORD_ROGUE" => Some(Self::BattleRecordRogue),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum RebattleType {
    None = 0,
    RebattleMidway = 1,
    RebattleLose = 2,
    RebattleMidwayLineup = 3,
    RebattleLoseLineup = 4,
    QuitMidway = 5,
    QuitLose = 6,
}
impl RebattleType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "REBATTLE_TYPE_NONE",
            Self::RebattleMidway => "REBATTLE_TYPE_REBATTLE_MIDWAY",
            Self::RebattleLose => "REBATTLE_TYPE_REBATTLE_LOSE",
            Self::RebattleMidwayLineup => "REBATTLE_TYPE_REBATTLE_MIDWAY_LINEUP",
            Self::RebattleLoseLineup => "REBATTLE_TYPE_REBATTLE_LOSE_LINEUP",
            Self::QuitMidway => "REBATTLE_TYPE_QUIT_MIDWAY",
            Self::QuitLose => "REBATTLE_TYPE_QUIT_LOSE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "REBATTLE_TYPE_NONE" => Some(Self::None),
            "REBATTLE_TYPE_REBATTLE_MIDWAY" => Some(Self::RebattleMidway),
            "REBATTLE_TYPE_REBATTLE_LOSE" => Some(Self::RebattleLose),
            "REBATTLE_TYPE_REBATTLE_MIDWAY_LINEUP" => Some(Self::RebattleMidwayLineup),
            "REBATTLE_TYPE_REBATTLE_LOSE_LINEUP" => Some(Self::RebattleLoseLineup),
            "REBATTLE_TYPE_QUIT_MIDWAY" => Some(Self::QuitMidway),
            "REBATTLE_TYPE_QUIT_LOSE" => Some(Self::QuitLose),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ContentPackageStatus {
    None = 0,
    Init = 1,
    Doing = 2,
    Finished = 3,
    Release = 4,
}
impl ContentPackageStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "ContentPackageStatus_None",
            Self::Init => "ContentPackageStatus_Init",
            Self::Doing => "ContentPackageStatus_Doing",
            Self::Finished => "ContentPackageStatus_Finished",
            Self::Release => "ContentPackageStatus_Release",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ContentPackageStatus_None" => Some(Self::None),
            "ContentPackageStatus_Init" => Some(Self::Init),
            "ContentPackageStatus_Doing" => Some(Self::Doing),
            "ContentPackageStatus_Finished" => Some(Self::Finished),
            "ContentPackageStatus_Release" => Some(Self::Release),
            _ => None,
        }
    }
}
/// AMFHHOJFONL
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdContentPackageType {
    None = 0,
    CmdContentPackageGetDataScRsp = 7537,
    CmdContentPackageTransferScNotify = 7533,
    CmdContentPackageUnlockCsReq = 7543,
    CmdContentPackageSyncDataScNotify = 7541,
    CmdContentPackageUnlockScRsp = 7506,
    CmdContentPackageGetDataCsReq = 7526,
}
impl CmdContentPackageType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdContentPackageTypeNone",
            Self::CmdContentPackageGetDataScRsp => "CmdContentPackageGetDataScRsp",
            Self::CmdContentPackageTransferScNotify => {
                "CmdContentPackageTransferScNotify"
            }
            Self::CmdContentPackageUnlockCsReq => "CmdContentPackageUnlockCsReq",
            Self::CmdContentPackageSyncDataScNotify => {
                "CmdContentPackageSyncDataScNotify"
            }
            Self::CmdContentPackageUnlockScRsp => "CmdContentPackageUnlockScRsp",
            Self::CmdContentPackageGetDataCsReq => "CmdContentPackageGetDataCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdContentPackageTypeNone" => Some(Self::None),
            "CmdContentPackageGetDataScRsp" => Some(Self::CmdContentPackageGetDataScRsp),
            "CmdContentPackageTransferScNotify" => {
                Some(Self::CmdContentPackageTransferScNotify)
            }
            "CmdContentPackageUnlockCsReq" => Some(Self::CmdContentPackageUnlockCsReq),
            "CmdContentPackageSyncDataScNotify" => {
                Some(Self::CmdContentPackageSyncDataScNotify)
            }
            "CmdContentPackageUnlockScRsp" => Some(Self::CmdContentPackageUnlockScRsp),
            "CmdContentPackageGetDataCsReq" => Some(Self::CmdContentPackageGetDataCsReq),
            _ => None,
        }
    }
}
/// EFPGANHIKIB
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdDailyActiveType {
    None = 0,
    CmdTakeAllApRewardCsReq = 3356,
    CmdGetDailyActiveInfoScRsp = 3324,
    CmdGetDailyActiveInfoCsReq = 3358,
    CmdDailyActiveInfoNotify = 3330,
    CmdTakeAllApRewardScRsp = 3397,
    CmdTakeApRewardScRsp = 3368,
    CmdTakeApRewardCsReq = 3301,
}
impl CmdDailyActiveType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdDailyActiveTypeNone",
            Self::CmdTakeAllApRewardCsReq => "CmdTakeAllApRewardCsReq",
            Self::CmdGetDailyActiveInfoScRsp => "CmdGetDailyActiveInfoScRsp",
            Self::CmdGetDailyActiveInfoCsReq => "CmdGetDailyActiveInfoCsReq",
            Self::CmdDailyActiveInfoNotify => "CmdDailyActiveInfoNotify",
            Self::CmdTakeAllApRewardScRsp => "CmdTakeAllApRewardScRsp",
            Self::CmdTakeApRewardScRsp => "CmdTakeApRewardScRsp",
            Self::CmdTakeApRewardCsReq => "CmdTakeApRewardCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdDailyActiveTypeNone" => Some(Self::None),
            "CmdTakeAllApRewardCsReq" => Some(Self::CmdTakeAllApRewardCsReq),
            "CmdGetDailyActiveInfoScRsp" => Some(Self::CmdGetDailyActiveInfoScRsp),
            "CmdGetDailyActiveInfoCsReq" => Some(Self::CmdGetDailyActiveInfoCsReq),
            "CmdDailyActiveInfoNotify" => Some(Self::CmdDailyActiveInfoNotify),
            "CmdTakeAllApRewardScRsp" => Some(Self::CmdTakeAllApRewardScRsp),
            "CmdTakeApRewardScRsp" => Some(Self::CmdTakeApRewardScRsp),
            "CmdTakeApRewardCsReq" => Some(Self::CmdTakeApRewardCsReq),
            _ => None,
        }
    }
}
/// KGPDDMGIINK
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdDrinkMakerType {
    None = 0,
    CmdDrinkMakerChallengeCsReq = 6986,
    CmdEndDrinkMakerSequenceScRsp = 6981,
    CmdDrinkMakerChallengeScRsp = 6998,
    CmdDrinkMakerDayEndScNotify = 6995,
    CmdMakeMissionDrinkScRsp = 6994,
    CmdMakeDrinkCsReq = 6992,
    CmdGetDrinkMakerDataScRsp = 6988,
    CmdGetDrinkMakerDataCsReq = 6997,
    CmdMakeMissionDrinkCsReq = 6999,
    CmdMakeDrinkScRsp = 6982,
    CmdEndDrinkMakerSequenceCsReq = 6984,
    CmdDrinkMakerUpdateTipsNotify = 6985,
}
impl CmdDrinkMakerType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdDrinkMakerTypeNone",
            Self::CmdDrinkMakerChallengeCsReq => "CmdDrinkMakerChallengeCsReq",
            Self::CmdEndDrinkMakerSequenceScRsp => "CmdEndDrinkMakerSequenceScRsp",
            Self::CmdDrinkMakerChallengeScRsp => "CmdDrinkMakerChallengeScRsp",
            Self::CmdDrinkMakerDayEndScNotify => "CmdDrinkMakerDayEndScNotify",
            Self::CmdMakeMissionDrinkScRsp => "CmdMakeMissionDrinkScRsp",
            Self::CmdMakeDrinkCsReq => "CmdMakeDrinkCsReq",
            Self::CmdGetDrinkMakerDataScRsp => "CmdGetDrinkMakerDataScRsp",
            Self::CmdGetDrinkMakerDataCsReq => "CmdGetDrinkMakerDataCsReq",
            Self::CmdMakeMissionDrinkCsReq => "CmdMakeMissionDrinkCsReq",
            Self::CmdMakeDrinkScRsp => "CmdMakeDrinkScRsp",
            Self::CmdEndDrinkMakerSequenceCsReq => "CmdEndDrinkMakerSequenceCsReq",
            Self::CmdDrinkMakerUpdateTipsNotify => "CmdDrinkMakerUpdateTipsNotify",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdDrinkMakerTypeNone" => Some(Self::None),
            "CmdDrinkMakerChallengeCsReq" => Some(Self::CmdDrinkMakerChallengeCsReq),
            "CmdEndDrinkMakerSequenceScRsp" => Some(Self::CmdEndDrinkMakerSequenceScRsp),
            "CmdDrinkMakerChallengeScRsp" => Some(Self::CmdDrinkMakerChallengeScRsp),
            "CmdDrinkMakerDayEndScNotify" => Some(Self::CmdDrinkMakerDayEndScNotify),
            "CmdMakeMissionDrinkScRsp" => Some(Self::CmdMakeMissionDrinkScRsp),
            "CmdMakeDrinkCsReq" => Some(Self::CmdMakeDrinkCsReq),
            "CmdGetDrinkMakerDataScRsp" => Some(Self::CmdGetDrinkMakerDataScRsp),
            "CmdGetDrinkMakerDataCsReq" => Some(Self::CmdGetDrinkMakerDataCsReq),
            "CmdMakeMissionDrinkCsReq" => Some(Self::CmdMakeMissionDrinkCsReq),
            "CmdMakeDrinkScRsp" => Some(Self::CmdMakeDrinkScRsp),
            "CmdEndDrinkMakerSequenceCsReq" => Some(Self::CmdEndDrinkMakerSequenceCsReq),
            "CmdDrinkMakerUpdateTipsNotify" => Some(Self::CmdDrinkMakerUpdateTipsNotify),
            _ => None,
        }
    }
}
/// KCLCJEPMDGP
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdEraFlipperType {
    None = 0,
    CmdChangeEraFlipperDataCsReq = 6591,
    CmdResetEraFlipperDataScRsp = 6583,
    CmdChangeEraFlipperDataScRsp = 6593,
    CmdEraFlipperDataChangeScNotify = 6575,
    CmdEnterEraFlipperRegionCsReq = 6557,
    CmdGetEraFlipperDataScRsp = 6587,
    CmdGetEraFlipperDataCsReq = 6576,
    CmdResetEraFlipperDataCsReq = 6556,
    CmdEnterEraFlipperRegionScRsp = 6579,
}
impl CmdEraFlipperType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdEraFlipperTypeNone",
            Self::CmdChangeEraFlipperDataCsReq => "CmdChangeEraFlipperDataCsReq",
            Self::CmdResetEraFlipperDataScRsp => "CmdResetEraFlipperDataScRsp",
            Self::CmdChangeEraFlipperDataScRsp => "CmdChangeEraFlipperDataScRsp",
            Self::CmdEraFlipperDataChangeScNotify => "CmdEraFlipperDataChangeScNotify",
            Self::CmdEnterEraFlipperRegionCsReq => "CmdEnterEraFlipperRegionCsReq",
            Self::CmdGetEraFlipperDataScRsp => "CmdGetEraFlipperDataScRsp",
            Self::CmdGetEraFlipperDataCsReq => "CmdGetEraFlipperDataCsReq",
            Self::CmdResetEraFlipperDataCsReq => "CmdResetEraFlipperDataCsReq",
            Self::CmdEnterEraFlipperRegionScRsp => "CmdEnterEraFlipperRegionScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdEraFlipperTypeNone" => Some(Self::None),
            "CmdChangeEraFlipperDataCsReq" => Some(Self::CmdChangeEraFlipperDataCsReq),
            "CmdResetEraFlipperDataScRsp" => Some(Self::CmdResetEraFlipperDataScRsp),
            "CmdChangeEraFlipperDataScRsp" => Some(Self::CmdChangeEraFlipperDataScRsp),
            "CmdEraFlipperDataChangeScNotify" => {
                Some(Self::CmdEraFlipperDataChangeScNotify)
            }
            "CmdEnterEraFlipperRegionCsReq" => Some(Self::CmdEnterEraFlipperRegionCsReq),
            "CmdGetEraFlipperDataScRsp" => Some(Self::CmdGetEraFlipperDataScRsp),
            "CmdGetEraFlipperDataCsReq" => Some(Self::CmdGetEraFlipperDataCsReq),
            "CmdResetEraFlipperDataCsReq" => Some(Self::CmdResetEraFlipperDataCsReq),
            "CmdEnterEraFlipperRegionScRsp" => Some(Self::CmdEnterEraFlipperRegionScRsp),
            _ => None,
        }
    }
}
/// IGDLIBJNFMD
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdEvolveBuildType {
    CmdEvolveBuildNone = 0,
    CmdEvolveBuildShopAbilityDownCsReq = 7110,
    CmdEvolveBuildReRandomStageScRsp = 7148,
    CmdEvolveBuildShopAbilityUpCsReq = 7114,
    CmdEvolveBuildShopAbilityDownScRsp = 7135,
    CmdEvolveBuildCoinNotify = 7120,
    CmdEvolveBuildReRandomStageCsReq = 7102,
    CmdEvolveBuildLeaveScRsp = 7115,
    CmdEvolveBuildFinishScNotify = 7130,
    CmdEvolveBuildQueryInfoScRsp = 7137,
    CmdEvolveBuildUnlockInfoNotify = 7139,
    CmdEvolveBuildTakeExpRewardCsReq = 7109,
    CmdEvolveBuildStartLevelCsReq = 7141,
    CmdEvolveBuildStartLevelScRsp = 7143,
    CmdEvolveBuildStartStageScRsp = 7133,
    CmdEvolveBuildShopAbilityResetCsReq = 7101,
    CmdEvolveBuildShopAbilityUpScRsp = 7140,
    CmdEvolveBuildGiveupCsReq = 7107,
    CmdEvolveBuildStartStageCsReq = 7106,
    CmdEvolveBuildGiveupScRsp = 7129,
    CmdEvolveBuildQueryInfoCsReq = 7126,
    CmdEvolveBuildTakeExpRewardScRsp = 7124,
    CmdEvolveBuildShopAbilityResetScRsp = 7121,
    CmdEvolveBuildLeaveCsReq = 7125,
}
impl CmdEvolveBuildType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::CmdEvolveBuildNone => "CmdEvolveBuildNone",
            Self::CmdEvolveBuildShopAbilityDownCsReq => {
                "CmdEvolveBuildShopAbilityDownCsReq"
            }
            Self::CmdEvolveBuildReRandomStageScRsp => "CmdEvolveBuildReRandomStageScRsp",
            Self::CmdEvolveBuildShopAbilityUpCsReq => "CmdEvolveBuildShopAbilityUpCsReq",
            Self::CmdEvolveBuildShopAbilityDownScRsp => {
                "CmdEvolveBuildShopAbilityDownScRsp"
            }
            Self::CmdEvolveBuildCoinNotify => "CmdEvolveBuildCoinNotify",
            Self::CmdEvolveBuildReRandomStageCsReq => "CmdEvolveBuildReRandomStageCsReq",
            Self::CmdEvolveBuildLeaveScRsp => "CmdEvolveBuildLeaveScRsp",
            Self::CmdEvolveBuildFinishScNotify => "CmdEvolveBuildFinishScNotify",
            Self::CmdEvolveBuildQueryInfoScRsp => "CmdEvolveBuildQueryInfoScRsp",
            Self::CmdEvolveBuildUnlockInfoNotify => "CmdEvolveBuildUnlockInfoNotify",
            Self::CmdEvolveBuildTakeExpRewardCsReq => "CmdEvolveBuildTakeExpRewardCsReq",
            Self::CmdEvolveBuildStartLevelCsReq => "CmdEvolveBuildStartLevelCsReq",
            Self::CmdEvolveBuildStartLevelScRsp => "CmdEvolveBuildStartLevelScRsp",
            Self::CmdEvolveBuildStartStageScRsp => "CmdEvolveBuildStartStageScRsp",
            Self::CmdEvolveBuildShopAbilityResetCsReq => {
                "CmdEvolveBuildShopAbilityResetCsReq"
            }
            Self::CmdEvolveBuildShopAbilityUpScRsp => "CmdEvolveBuildShopAbilityUpScRsp",
            Self::CmdEvolveBuildGiveupCsReq => "CmdEvolveBuildGiveupCsReq",
            Self::CmdEvolveBuildStartStageCsReq => "CmdEvolveBuildStartStageCsReq",
            Self::CmdEvolveBuildGiveupScRsp => "CmdEvolveBuildGiveupScRsp",
            Self::CmdEvolveBuildQueryInfoCsReq => "CmdEvolveBuildQueryInfoCsReq",
            Self::CmdEvolveBuildTakeExpRewardScRsp => "CmdEvolveBuildTakeExpRewardScRsp",
            Self::CmdEvolveBuildShopAbilityResetScRsp => {
                "CmdEvolveBuildShopAbilityResetScRsp"
            }
            Self::CmdEvolveBuildLeaveCsReq => "CmdEvolveBuildLeaveCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdEvolveBuildNone" => Some(Self::CmdEvolveBuildNone),
            "CmdEvolveBuildShopAbilityDownCsReq" => {
                Some(Self::CmdEvolveBuildShopAbilityDownCsReq)
            }
            "CmdEvolveBuildReRandomStageScRsp" => {
                Some(Self::CmdEvolveBuildReRandomStageScRsp)
            }
            "CmdEvolveBuildShopAbilityUpCsReq" => {
                Some(Self::CmdEvolveBuildShopAbilityUpCsReq)
            }
            "CmdEvolveBuildShopAbilityDownScRsp" => {
                Some(Self::CmdEvolveBuildShopAbilityDownScRsp)
            }
            "CmdEvolveBuildCoinNotify" => Some(Self::CmdEvolveBuildCoinNotify),
            "CmdEvolveBuildReRandomStageCsReq" => {
                Some(Self::CmdEvolveBuildReRandomStageCsReq)
            }
            "CmdEvolveBuildLeaveScRsp" => Some(Self::CmdEvolveBuildLeaveScRsp),
            "CmdEvolveBuildFinishScNotify" => Some(Self::CmdEvolveBuildFinishScNotify),
            "CmdEvolveBuildQueryInfoScRsp" => Some(Self::CmdEvolveBuildQueryInfoScRsp),
            "CmdEvolveBuildUnlockInfoNotify" => {
                Some(Self::CmdEvolveBuildUnlockInfoNotify)
            }
            "CmdEvolveBuildTakeExpRewardCsReq" => {
                Some(Self::CmdEvolveBuildTakeExpRewardCsReq)
            }
            "CmdEvolveBuildStartLevelCsReq" => Some(Self::CmdEvolveBuildStartLevelCsReq),
            "CmdEvolveBuildStartLevelScRsp" => Some(Self::CmdEvolveBuildStartLevelScRsp),
            "CmdEvolveBuildStartStageScRsp" => Some(Self::CmdEvolveBuildStartStageScRsp),
            "CmdEvolveBuildShopAbilityResetCsReq" => {
                Some(Self::CmdEvolveBuildShopAbilityResetCsReq)
            }
            "CmdEvolveBuildShopAbilityUpScRsp" => {
                Some(Self::CmdEvolveBuildShopAbilityUpScRsp)
            }
            "CmdEvolveBuildGiveupCsReq" => Some(Self::CmdEvolveBuildGiveupCsReq),
            "CmdEvolveBuildStartStageCsReq" => Some(Self::CmdEvolveBuildStartStageCsReq),
            "CmdEvolveBuildGiveupScRsp" => Some(Self::CmdEvolveBuildGiveupScRsp),
            "CmdEvolveBuildQueryInfoCsReq" => Some(Self::CmdEvolveBuildQueryInfoCsReq),
            "CmdEvolveBuildTakeExpRewardScRsp" => {
                Some(Self::CmdEvolveBuildTakeExpRewardScRsp)
            }
            "CmdEvolveBuildShopAbilityResetScRsp" => {
                Some(Self::CmdEvolveBuildShopAbilityResetScRsp)
            }
            "CmdEvolveBuildLeaveCsReq" => Some(Self::CmdEvolveBuildLeaveCsReq),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Oijlbloohjg {
    EvolvePeriodNone = 0,
    EvolvePeriodFirst = 1,
    EvolvePeriodSecond = 2,
    EvolvePeriodThird = 3,
    EvolvePeriodExtra = 4,
}
impl Oijlbloohjg {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::EvolvePeriodNone => "EVOLVE_PERIOD_NONE",
            Self::EvolvePeriodFirst => "EVOLVE_PERIOD_FIRST",
            Self::EvolvePeriodSecond => "EVOLVE_PERIOD_SECOND",
            Self::EvolvePeriodThird => "EVOLVE_PERIOD_THIRD",
            Self::EvolvePeriodExtra => "EVOLVE_PERIOD_EXTRA",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "EVOLVE_PERIOD_NONE" => Some(Self::EvolvePeriodNone),
            "EVOLVE_PERIOD_FIRST" => Some(Self::EvolvePeriodFirst),
            "EVOLVE_PERIOD_SECOND" => Some(Self::EvolvePeriodSecond),
            "EVOLVE_PERIOD_THIRD" => Some(Self::EvolvePeriodThird),
            "EVOLVE_PERIOD_EXTRA" => Some(Self::EvolvePeriodExtra),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Dlhcmcnihii {
    EvolveBattleResultNone = 0,
    EvolveBattleResultWin = 1,
    EvolveBattleResultAllAvatarDead = 2,
    EvolveBattleResultNoDeadLine = 3,
    EvolveBattleResultQuit = 4,
}
impl Dlhcmcnihii {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::EvolveBattleResultNone => "EVOLVE_BATTLE_RESULT_NONE",
            Self::EvolveBattleResultWin => "EVOLVE_BATTLE_RESULT_WIN",
            Self::EvolveBattleResultAllAvatarDead => {
                "EVOLVE_BATTLE_RESULT_ALL_AVATAR_DEAD"
            }
            Self::EvolveBattleResultNoDeadLine => "EVOLVE_BATTLE_RESULT_NO_DEAD_LINE",
            Self::EvolveBattleResultQuit => "EVOLVE_BATTLE_RESULT_QUIT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "EVOLVE_BATTLE_RESULT_NONE" => Some(Self::EvolveBattleResultNone),
            "EVOLVE_BATTLE_RESULT_WIN" => Some(Self::EvolveBattleResultWin),
            "EVOLVE_BATTLE_RESULT_ALL_AVATAR_DEAD" => {
                Some(Self::EvolveBattleResultAllAvatarDead)
            }
            "EVOLVE_BATTLE_RESULT_NO_DEAD_LINE" => {
                Some(Self::EvolveBattleResultNoDeadLine)
            }
            "EVOLVE_BATTLE_RESULT_QUIT" => Some(Self::EvolveBattleResultQuit),
            _ => None,
        }
    }
}
/// MCFNPIKEGKO
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdExpeditionType {
    None = 0,
    CmdGetExpeditionDataCsReq = 2501,
    CmdAcceptMultipleExpeditionCsReq = 2580,
    CmdTakeExpeditionRewardCsReq = 2597,
    CmdTakeActivityExpeditionRewardScRsp = 2547,
    CmdTakeExpeditionRewardScRsp = 2576,
    CmdTakeMultipleActivityExpeditionRewardCsReq = 2512,
    CmdTakeMultipleExpeditionRewardCsReq = 2596,
    CmdGetExpeditionDataScRsp = 2568,
    CmdAcceptActivityExpeditionScRsp = 2505,
    CmdCancelActivityExpeditionScRsp = 2549,
    CmdAcceptExpeditionCsReq = 2558,
    CmdCancelExpeditionScRsp = 2556,
    CmdAcceptExpeditionScRsp = 2524,
    CmdTakeMultipleActivityExpeditionRewardScRsp = 2517,
    CmdTakeActivityExpeditionRewardCsReq = 2522,
    CmdAcceptMultipleExpeditionScRsp = 2539,
    CmdExpeditionDataChangeScNotify = 2528,
    CmdCancelExpeditionCsReq = 2530,
    CmdCancelActivityExpeditionCsReq = 2514,
    CmdAcceptActivityExpeditionCsReq = 2511,
    CmdTakeMultipleExpeditionRewardScRsp = 2523,
}
impl CmdExpeditionType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdExpeditionTypeNone",
            Self::CmdGetExpeditionDataCsReq => "CmdGetExpeditionDataCsReq",
            Self::CmdAcceptMultipleExpeditionCsReq => "CmdAcceptMultipleExpeditionCsReq",
            Self::CmdTakeExpeditionRewardCsReq => "CmdTakeExpeditionRewardCsReq",
            Self::CmdTakeActivityExpeditionRewardScRsp => {
                "CmdTakeActivityExpeditionRewardScRsp"
            }
            Self::CmdTakeExpeditionRewardScRsp => "CmdTakeExpeditionRewardScRsp",
            Self::CmdTakeMultipleActivityExpeditionRewardCsReq => {
                "CmdTakeMultipleActivityExpeditionRewardCsReq"
            }
            Self::CmdTakeMultipleExpeditionRewardCsReq => {
                "CmdTakeMultipleExpeditionRewardCsReq"
            }
            Self::CmdGetExpeditionDataScRsp => "CmdGetExpeditionDataScRsp",
            Self::CmdAcceptActivityExpeditionScRsp => "CmdAcceptActivityExpeditionScRsp",
            Self::CmdCancelActivityExpeditionScRsp => "CmdCancelActivityExpeditionScRsp",
            Self::CmdAcceptExpeditionCsReq => "CmdAcceptExpeditionCsReq",
            Self::CmdCancelExpeditionScRsp => "CmdCancelExpeditionScRsp",
            Self::CmdAcceptExpeditionScRsp => "CmdAcceptExpeditionScRsp",
            Self::CmdTakeMultipleActivityExpeditionRewardScRsp => {
                "CmdTakeMultipleActivityExpeditionRewardScRsp"
            }
            Self::CmdTakeActivityExpeditionRewardCsReq => {
                "CmdTakeActivityExpeditionRewardCsReq"
            }
            Self::CmdAcceptMultipleExpeditionScRsp => "CmdAcceptMultipleExpeditionScRsp",
            Self::CmdExpeditionDataChangeScNotify => "CmdExpeditionDataChangeScNotify",
            Self::CmdCancelExpeditionCsReq => "CmdCancelExpeditionCsReq",
            Self::CmdCancelActivityExpeditionCsReq => "CmdCancelActivityExpeditionCsReq",
            Self::CmdAcceptActivityExpeditionCsReq => "CmdAcceptActivityExpeditionCsReq",
            Self::CmdTakeMultipleExpeditionRewardScRsp => {
                "CmdTakeMultipleExpeditionRewardScRsp"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdExpeditionTypeNone" => Some(Self::None),
            "CmdGetExpeditionDataCsReq" => Some(Self::CmdGetExpeditionDataCsReq),
            "CmdAcceptMultipleExpeditionCsReq" => {
                Some(Self::CmdAcceptMultipleExpeditionCsReq)
            }
            "CmdTakeExpeditionRewardCsReq" => Some(Self::CmdTakeExpeditionRewardCsReq),
            "CmdTakeActivityExpeditionRewardScRsp" => {
                Some(Self::CmdTakeActivityExpeditionRewardScRsp)
            }
            "CmdTakeExpeditionRewardScRsp" => Some(Self::CmdTakeExpeditionRewardScRsp),
            "CmdTakeMultipleActivityExpeditionRewardCsReq" => {
                Some(Self::CmdTakeMultipleActivityExpeditionRewardCsReq)
            }
            "CmdTakeMultipleExpeditionRewardCsReq" => {
                Some(Self::CmdTakeMultipleExpeditionRewardCsReq)
            }
            "CmdGetExpeditionDataScRsp" => Some(Self::CmdGetExpeditionDataScRsp),
            "CmdAcceptActivityExpeditionScRsp" => {
                Some(Self::CmdAcceptActivityExpeditionScRsp)
            }
            "CmdCancelActivityExpeditionScRsp" => {
                Some(Self::CmdCancelActivityExpeditionScRsp)
            }
            "CmdAcceptExpeditionCsReq" => Some(Self::CmdAcceptExpeditionCsReq),
            "CmdCancelExpeditionScRsp" => Some(Self::CmdCancelExpeditionScRsp),
            "CmdAcceptExpeditionScRsp" => Some(Self::CmdAcceptExpeditionScRsp),
            "CmdTakeMultipleActivityExpeditionRewardScRsp" => {
                Some(Self::CmdTakeMultipleActivityExpeditionRewardScRsp)
            }
            "CmdTakeActivityExpeditionRewardCsReq" => {
                Some(Self::CmdTakeActivityExpeditionRewardCsReq)
            }
            "CmdAcceptMultipleExpeditionScRsp" => {
                Some(Self::CmdAcceptMultipleExpeditionScRsp)
            }
            "CmdExpeditionDataChangeScNotify" => {
                Some(Self::CmdExpeditionDataChangeScNotify)
            }
            "CmdCancelExpeditionCsReq" => Some(Self::CmdCancelExpeditionCsReq),
            "CmdCancelActivityExpeditionCsReq" => {
                Some(Self::CmdCancelActivityExpeditionCsReq)
            }
            "CmdAcceptActivityExpeditionCsReq" => {
                Some(Self::CmdAcceptActivityExpeditionCsReq)
            }
            "CmdTakeMultipleExpeditionRewardScRsp" => {
                Some(Self::CmdTakeMultipleExpeditionRewardScRsp)
            }
            _ => None,
        }
    }
}
/// DIJNBPEMECG
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdFantasticStoryActivityType {
    None = 0,
    CmdGetFantasticStoryActivityDataCsReq = 4901,
    CmdGetFantasticStoryActivityDataScRsp = 4968,
    CmdFantasticStoryActivityBattleEndScNotify = 4956,
    CmdFinishChapterScNotify = 4958,
    CmdEnterFantasticStoryActivityStageCsReq = 4924,
    CmdEnterFantasticStoryActivityStageScRsp = 4930,
}
impl CmdFantasticStoryActivityType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdFantasticStoryActivityTypeNone",
            Self::CmdGetFantasticStoryActivityDataCsReq => {
                "CmdGetFantasticStoryActivityDataCsReq"
            }
            Self::CmdGetFantasticStoryActivityDataScRsp => {
                "CmdGetFantasticStoryActivityDataScRsp"
            }
            Self::CmdFantasticStoryActivityBattleEndScNotify => {
                "CmdFantasticStoryActivityBattleEndScNotify"
            }
            Self::CmdFinishChapterScNotify => "CmdFinishChapterScNotify",
            Self::CmdEnterFantasticStoryActivityStageCsReq => {
                "CmdEnterFantasticStoryActivityStageCsReq"
            }
            Self::CmdEnterFantasticStoryActivityStageScRsp => {
                "CmdEnterFantasticStoryActivityStageScRsp"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdFantasticStoryActivityTypeNone" => Some(Self::None),
            "CmdGetFantasticStoryActivityDataCsReq" => {
                Some(Self::CmdGetFantasticStoryActivityDataCsReq)
            }
            "CmdGetFantasticStoryActivityDataScRsp" => {
                Some(Self::CmdGetFantasticStoryActivityDataScRsp)
            }
            "CmdFantasticStoryActivityBattleEndScNotify" => {
                Some(Self::CmdFantasticStoryActivityBattleEndScNotify)
            }
            "CmdFinishChapterScNotify" => Some(Self::CmdFinishChapterScNotify),
            "CmdEnterFantasticStoryActivityStageCsReq" => {
                Some(Self::CmdEnterFantasticStoryActivityStageCsReq)
            }
            "CmdEnterFantasticStoryActivityStageScRsp" => {
                Some(Self::CmdEnterFantasticStoryActivityStageScRsp)
            }
            _ => None,
        }
    }
}
/// DDJJLOHOOIH
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdFeverTimeActivityType {
    None = 0,
    CmdEnterFeverTimeActivityStageCsReq = 7159,
    CmdFeverTimeActivityBattleEndScNotify = 7151,
    CmdEnterFeverTimeActivityStageScRsp = 7158,
    CmdGetFeverTimeActivityDataCsReq = 7156,
    CmdGetFeverTimeActivityDataScRsp = 7155,
}
impl CmdFeverTimeActivityType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdFeverTimeActivityTypeNone",
            Self::CmdEnterFeverTimeActivityStageCsReq => {
                "CmdEnterFeverTimeActivityStageCsReq"
            }
            Self::CmdFeverTimeActivityBattleEndScNotify => {
                "CmdFeverTimeActivityBattleEndScNotify"
            }
            Self::CmdEnterFeverTimeActivityStageScRsp => {
                "CmdEnterFeverTimeActivityStageScRsp"
            }
            Self::CmdGetFeverTimeActivityDataCsReq => "CmdGetFeverTimeActivityDataCsReq",
            Self::CmdGetFeverTimeActivityDataScRsp => "CmdGetFeverTimeActivityDataScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdFeverTimeActivityTypeNone" => Some(Self::None),
            "CmdEnterFeverTimeActivityStageCsReq" => {
                Some(Self::CmdEnterFeverTimeActivityStageCsReq)
            }
            "CmdFeverTimeActivityBattleEndScNotify" => {
                Some(Self::CmdFeverTimeActivityBattleEndScNotify)
            }
            "CmdEnterFeverTimeActivityStageScRsp" => {
                Some(Self::CmdEnterFeverTimeActivityStageScRsp)
            }
            "CmdGetFeverTimeActivityDataCsReq" => {
                Some(Self::CmdGetFeverTimeActivityDataCsReq)
            }
            "CmdGetFeverTimeActivityDataScRsp" => {
                Some(Self::CmdGetFeverTimeActivityDataScRsp)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Pmnfdjcllgb {
    FeverTimeBattleRankC = 0,
    FeverTimeBattleRankB = 1,
    FeverTimeBattleRankA = 2,
    FeverTimeBattleRankS = 3,
    FeverTimeBattleRankSs = 4,
}
impl Pmnfdjcllgb {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::FeverTimeBattleRankC => "FEVER_TIME_BATTLE_RANK_C",
            Self::FeverTimeBattleRankB => "FEVER_TIME_BATTLE_RANK_B",
            Self::FeverTimeBattleRankA => "FEVER_TIME_BATTLE_RANK_A",
            Self::FeverTimeBattleRankS => "FEVER_TIME_BATTLE_RANK_S",
            Self::FeverTimeBattleRankSs => "FEVER_TIME_BATTLE_RANK_SS",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "FEVER_TIME_BATTLE_RANK_C" => Some(Self::FeverTimeBattleRankC),
            "FEVER_TIME_BATTLE_RANK_B" => Some(Self::FeverTimeBattleRankB),
            "FEVER_TIME_BATTLE_RANK_A" => Some(Self::FeverTimeBattleRankA),
            "FEVER_TIME_BATTLE_RANK_S" => Some(Self::FeverTimeBattleRankS),
            "FEVER_TIME_BATTLE_RANK_SS" => Some(Self::FeverTimeBattleRankSs),
            _ => None,
        }
    }
}
/// BHKHKPHJGLN
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdFightType {
    None = 0,
    CmdFightHeartBeatCsReq = 30030,
    CmdFightEnterCsReq = 30001,
    CmdFightSessionStopScNotify = 30097,
    CmdFightKickOutScNotify = 30024,
    CmdFightHeartBeatScRsp = 30056,
    CmdFightLeaveScNotify = 30058,
    CmdFightEnterScRsp = 30068,
}
impl CmdFightType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdFightTypeNone",
            Self::CmdFightHeartBeatCsReq => "CmdFightHeartBeatCsReq",
            Self::CmdFightEnterCsReq => "CmdFightEnterCsReq",
            Self::CmdFightSessionStopScNotify => "CmdFightSessionStopScNotify",
            Self::CmdFightKickOutScNotify => "CmdFightKickOutScNotify",
            Self::CmdFightHeartBeatScRsp => "CmdFightHeartBeatScRsp",
            Self::CmdFightLeaveScNotify => "CmdFightLeaveScNotify",
            Self::CmdFightEnterScRsp => "CmdFightEnterScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdFightTypeNone" => Some(Self::None),
            "CmdFightHeartBeatCsReq" => Some(Self::CmdFightHeartBeatCsReq),
            "CmdFightEnterCsReq" => Some(Self::CmdFightEnterCsReq),
            "CmdFightSessionStopScNotify" => Some(Self::CmdFightSessionStopScNotify),
            "CmdFightKickOutScNotify" => Some(Self::CmdFightKickOutScNotify),
            "CmdFightHeartBeatScRsp" => Some(Self::CmdFightHeartBeatScRsp),
            "CmdFightLeaveScNotify" => Some(Self::CmdFightLeaveScNotify),
            "CmdFightEnterScRsp" => Some(Self::CmdFightEnterScRsp),
            _ => None,
        }
    }
}
/// IOEJAHMFDCO
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdFightActivityType {
    None = 0,
    CmdEnterFightActivityStageScRsp = 3630,
    CmdGetFightActivityDataCsReq = 3601,
    CmdGetFightActivityDataScRsp = 3668,
    CmdTakeFightActivityRewardScRsp = 3697,
    CmdFightActivityDataChangeScNotify = 3658,
    CmdEnterFightActivityStageCsReq = 3624,
    CmdTakeFightActivityRewardCsReq = 3656,
}
impl CmdFightActivityType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdFightActivityTypeNone",
            Self::CmdEnterFightActivityStageScRsp => "CmdEnterFightActivityStageScRsp",
            Self::CmdGetFightActivityDataCsReq => "CmdGetFightActivityDataCsReq",
            Self::CmdGetFightActivityDataScRsp => "CmdGetFightActivityDataScRsp",
            Self::CmdTakeFightActivityRewardScRsp => "CmdTakeFightActivityRewardScRsp",
            Self::CmdFightActivityDataChangeScNotify => {
                "CmdFightActivityDataChangeScNotify"
            }
            Self::CmdEnterFightActivityStageCsReq => "CmdEnterFightActivityStageCsReq",
            Self::CmdTakeFightActivityRewardCsReq => "CmdTakeFightActivityRewardCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdFightActivityTypeNone" => Some(Self::None),
            "CmdEnterFightActivityStageScRsp" => {
                Some(Self::CmdEnterFightActivityStageScRsp)
            }
            "CmdGetFightActivityDataCsReq" => Some(Self::CmdGetFightActivityDataCsReq),
            "CmdGetFightActivityDataScRsp" => Some(Self::CmdGetFightActivityDataScRsp),
            "CmdTakeFightActivityRewardScRsp" => {
                Some(Self::CmdTakeFightActivityRewardScRsp)
            }
            "CmdFightActivityDataChangeScNotify" => {
                Some(Self::CmdFightActivityDataChangeScNotify)
            }
            "CmdEnterFightActivityStageCsReq" => {
                Some(Self::CmdEnterFightActivityStageCsReq)
            }
            "CmdTakeFightActivityRewardCsReq" => {
                Some(Self::CmdTakeFightActivityRewardCsReq)
            }
            _ => None,
        }
    }
}
/// FOMPLGANNAG
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdFightFestType {
    None = 0,
    CmdFightFestScoreUpdateNotify = 7256,
    CmdGetFightFestDataScRsp = 7287,
    CmdFightFestUnlockSkillNotify = 7283,
    CmdStartFightFestScRsp = 7293,
    CmdGetFightFestDataCsReq = 7276,
    CmdFightFestUpdateCoinNotify = 7279,
    CmdStartFightFestCsReq = 7291,
    CmdFightFestUpdateChallengeRecordNotify = 7257,
}
impl CmdFightFestType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdFightFestTypeNone",
            Self::CmdFightFestScoreUpdateNotify => "CmdFightFestScoreUpdateNotify",
            Self::CmdGetFightFestDataScRsp => "CmdGetFightFestDataScRsp",
            Self::CmdFightFestUnlockSkillNotify => "CmdFightFestUnlockSkillNotify",
            Self::CmdStartFightFestScRsp => "CmdStartFightFestScRsp",
            Self::CmdGetFightFestDataCsReq => "CmdGetFightFestDataCsReq",
            Self::CmdFightFestUpdateCoinNotify => "CmdFightFestUpdateCoinNotify",
            Self::CmdStartFightFestCsReq => "CmdStartFightFestCsReq",
            Self::CmdFightFestUpdateChallengeRecordNotify => {
                "CmdFightFestUpdateChallengeRecordNotify"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdFightFestTypeNone" => Some(Self::None),
            "CmdFightFestScoreUpdateNotify" => Some(Self::CmdFightFestScoreUpdateNotify),
            "CmdGetFightFestDataScRsp" => Some(Self::CmdGetFightFestDataScRsp),
            "CmdFightFestUnlockSkillNotify" => Some(Self::CmdFightFestUnlockSkillNotify),
            "CmdStartFightFestScRsp" => Some(Self::CmdStartFightFestScRsp),
            "CmdGetFightFestDataCsReq" => Some(Self::CmdGetFightFestDataCsReq),
            "CmdFightFestUpdateCoinNotify" => Some(Self::CmdFightFestUpdateCoinNotify),
            "CmdStartFightFestCsReq" => Some(Self::CmdStartFightFestCsReq),
            "CmdFightFestUpdateChallengeRecordNotify" => {
                Some(Self::CmdFightFestUpdateChallengeRecordNotify)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Hgdapjpkffb {
    FightFestBattleRankC = 0,
    FightFestBattleRankB = 1,
    FightFestBattleRankA = 2,
    FightFestBattleRankS = 3,
    FightFestBattleRankSs = 4,
}
impl Hgdapjpkffb {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::FightFestBattleRankC => "FIGHT_FEST_BATTLE_RANK_C",
            Self::FightFestBattleRankB => "FIGHT_FEST_BATTLE_RANK_B",
            Self::FightFestBattleRankA => "FIGHT_FEST_BATTLE_RANK_A",
            Self::FightFestBattleRankS => "FIGHT_FEST_BATTLE_RANK_S",
            Self::FightFestBattleRankSs => "FIGHT_FEST_BATTLE_RANK_SS",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "FIGHT_FEST_BATTLE_RANK_C" => Some(Self::FightFestBattleRankC),
            "FIGHT_FEST_BATTLE_RANK_B" => Some(Self::FightFestBattleRankB),
            "FIGHT_FEST_BATTLE_RANK_A" => Some(Self::FightFestBattleRankA),
            "FIGHT_FEST_BATTLE_RANK_S" => Some(Self::FightFestBattleRankS),
            "FIGHT_FEST_BATTLE_RANK_SS" => Some(Self::FightFestBattleRankSs),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Aploagdibki {
    FightFestTypeNone = 0,
    FightFestTypeMain = 1,
    FightFestTypeScore = 2,
    FightFestTypeChallenge = 3,
    FightFestTypeTeach = 4,
}
impl Aploagdibki {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::FightFestTypeNone => "FIGHT_FEST_TYPE_NONE",
            Self::FightFestTypeMain => "FIGHT_FEST_TYPE_MAIN",
            Self::FightFestTypeScore => "FIGHT_FEST_TYPE_SCORE",
            Self::FightFestTypeChallenge => "FIGHT_FEST_TYPE_CHALLENGE",
            Self::FightFestTypeTeach => "FIGHT_FEST_TYPE_TEACH",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "FIGHT_FEST_TYPE_NONE" => Some(Self::FightFestTypeNone),
            "FIGHT_FEST_TYPE_MAIN" => Some(Self::FightFestTypeMain),
            "FIGHT_FEST_TYPE_SCORE" => Some(Self::FightFestTypeScore),
            "FIGHT_FEST_TYPE_CHALLENGE" => Some(Self::FightFestTypeChallenge),
            "FIGHT_FEST_TYPE_TEACH" => Some(Self::FightFestTypeTeach),
            _ => None,
        }
    }
}
/// LBFDFOPFEKO
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdFightMathc3Type {
    None = 0,
    CmdFightMatch3ChatCsReq = 30128,
    CmdFightMatch3ChatScNotify = 30105,
    CmdFightMatch3SwapCsReq = 30156,
    CmdFightMatch3TurnStartScNotify = 30124,
    CmdFightMatch3DataCsReq = 30101,
    CmdFightMatch3TurnEndScNotify = 30130,
    CmdFightMatch3StartCountDownScNotify = 30158,
    CmdFightMatch3SwapScRsp = 30197,
    CmdFightMatch3ForceUpdateNotify = 30114,
    CmdFightMatch3DataScRsp = 30168,
    CmdFightMatch3OpponentDataScNotify = 30176,
    CmdFightMatch3ChatScRsp = 30111,
}
impl CmdFightMathc3Type {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdFightMathc3TypeNone",
            Self::CmdFightMatch3ChatCsReq => "CmdFightMatch3ChatCsReq",
            Self::CmdFightMatch3ChatScNotify => "CmdFightMatch3ChatScNotify",
            Self::CmdFightMatch3SwapCsReq => "CmdFightMatch3SwapCsReq",
            Self::CmdFightMatch3TurnStartScNotify => "CmdFightMatch3TurnStartScNotify",
            Self::CmdFightMatch3DataCsReq => "CmdFightMatch3DataCsReq",
            Self::CmdFightMatch3TurnEndScNotify => "CmdFightMatch3TurnEndScNotify",
            Self::CmdFightMatch3StartCountDownScNotify => {
                "CmdFightMatch3StartCountDownScNotify"
            }
            Self::CmdFightMatch3SwapScRsp => "CmdFightMatch3SwapScRsp",
            Self::CmdFightMatch3ForceUpdateNotify => "CmdFightMatch3ForceUpdateNotify",
            Self::CmdFightMatch3DataScRsp => "CmdFightMatch3DataScRsp",
            Self::CmdFightMatch3OpponentDataScNotify => {
                "CmdFightMatch3OpponentDataScNotify"
            }
            Self::CmdFightMatch3ChatScRsp => "CmdFightMatch3ChatScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdFightMathc3TypeNone" => Some(Self::None),
            "CmdFightMatch3ChatCsReq" => Some(Self::CmdFightMatch3ChatCsReq),
            "CmdFightMatch3ChatScNotify" => Some(Self::CmdFightMatch3ChatScNotify),
            "CmdFightMatch3SwapCsReq" => Some(Self::CmdFightMatch3SwapCsReq),
            "CmdFightMatch3TurnStartScNotify" => {
                Some(Self::CmdFightMatch3TurnStartScNotify)
            }
            "CmdFightMatch3DataCsReq" => Some(Self::CmdFightMatch3DataCsReq),
            "CmdFightMatch3TurnEndScNotify" => Some(Self::CmdFightMatch3TurnEndScNotify),
            "CmdFightMatch3StartCountDownScNotify" => {
                Some(Self::CmdFightMatch3StartCountDownScNotify)
            }
            "CmdFightMatch3SwapScRsp" => Some(Self::CmdFightMatch3SwapScRsp),
            "CmdFightMatch3ForceUpdateNotify" => {
                Some(Self::CmdFightMatch3ForceUpdateNotify)
            }
            "CmdFightMatch3DataScRsp" => Some(Self::CmdFightMatch3DataScRsp),
            "CmdFightMatch3OpponentDataScNotify" => {
                Some(Self::CmdFightMatch3OpponentDataScNotify)
            }
            "CmdFightMatch3ChatScRsp" => Some(Self::CmdFightMatch3ChatScRsp),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Dgfcbofaoia {
    Match3StateIdle = 0,
    Match3StateStart = 1,
    Match3StateMatch = 2,
    Match3StateGame = 3,
    Match3StateHalftime = 4,
    Match3StateOver = 5,
}
impl Dgfcbofaoia {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Match3StateIdle => "MATCH3_STATE_IDLE",
            Self::Match3StateStart => "MATCH3_STATE_START",
            Self::Match3StateMatch => "MATCH3_STATE_MATCH",
            Self::Match3StateGame => "MATCH3_STATE_GAME",
            Self::Match3StateHalftime => "MATCH3_STATE_HALFTIME",
            Self::Match3StateOver => "MATCH3_STATE_OVER",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MATCH3_STATE_IDLE" => Some(Self::Match3StateIdle),
            "MATCH3_STATE_START" => Some(Self::Match3StateStart),
            "MATCH3_STATE_MATCH" => Some(Self::Match3StateMatch),
            "MATCH3_STATE_GAME" => Some(Self::Match3StateGame),
            "MATCH3_STATE_HALFTIME" => Some(Self::Match3StateHalftime),
            "MATCH3_STATE_OVER" => Some(Self::Match3StateOver),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Nppnfppenmc {
    Match3PlayerStateAlive = 0,
    Match3PlayerStateDying = 1,
    Match3PlayerStateDead = 2,
    Match3PlayerStateLeave = 3,
}
impl Nppnfppenmc {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Match3PlayerStateAlive => "MATCH3_PLAYER_STATE_ALIVE",
            Self::Match3PlayerStateDying => "MATCH3_PLAYER_STATE_DYING",
            Self::Match3PlayerStateDead => "MATCH3_PLAYER_STATE_DEAD",
            Self::Match3PlayerStateLeave => "MATCH3_PLAYER_STATE_LEAVE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MATCH3_PLAYER_STATE_ALIVE" => Some(Self::Match3PlayerStateAlive),
            "MATCH3_PLAYER_STATE_DYING" => Some(Self::Match3PlayerStateDying),
            "MATCH3_PLAYER_STATE_DEAD" => Some(Self::Match3PlayerStateDead),
            "MATCH3_PLAYER_STATE_LEAVE" => Some(Self::Match3PlayerStateLeave),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Bfilliobmfn {
    EventBegin = 0,
    EventBreak = 1,
    EventFall = 2,
    EventRefresh = 3,
    EventBirdSkill = 4,
    EventEnv = 5,
    EventShuffle = 6,
    EventSettleTag = 7,
}
impl Bfilliobmfn {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::EventBegin => "EVENT_BEGIN",
            Self::EventBreak => "EVENT_BREAK",
            Self::EventFall => "EVENT_FALL",
            Self::EventRefresh => "EVENT_REFRESH",
            Self::EventBirdSkill => "EVENT_BIRD_SKILL",
            Self::EventEnv => "EVENT_ENV",
            Self::EventShuffle => "EVENT_SHUFFLE",
            Self::EventSettleTag => "EVENT_SETTLE_TAG",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "EVENT_BEGIN" => Some(Self::EventBegin),
            "EVENT_BREAK" => Some(Self::EventBreak),
            "EVENT_FALL" => Some(Self::EventFall),
            "EVENT_REFRESH" => Some(Self::EventRefresh),
            "EVENT_BIRD_SKILL" => Some(Self::EventBirdSkill),
            "EVENT_ENV" => Some(Self::EventEnv),
            "EVENT_SHUFFLE" => Some(Self::EventShuffle),
            "EVENT_SETTLE_TAG" => Some(Self::EventSettleTag),
            _ => None,
        }
    }
}
/// EBLNKOEFMJC
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdFriendType {
    None = 0,
    CmdGetPlatformPlayerInfoCsReq = 2913,
    CmdGetFriendRecommendListInfoCsReq = 2923,
    CmdGetPlayerDetailInfoCsReq = 2958,
    CmdAddBlacklistScRsp = 2939,
    CmdGetCurAssistCsReq = 2919,
    CmdSetFriendRemarkNameScRsp = 2991,
    CmdGetFriendChallengeDetailCsReq = 2955,
    CmdSyncApplyFriendScNotify = 2928,
    CmdGetFriendChallengeDetailScRsp = 2985,
    CmdGetFriendBattleRecordDetailCsReq = 2960,
    CmdSetAssistCsReq = 2981,
    CmdApplyFriendCsReq = 2997,
    CmdSearchPlayerScRsp = 2920,
    CmdDeleteFriendScRsp = 2922,
    CmdGetFriendDevelopmentInfoScRsp = 2907,
    CmdGetFriendChallengeLineupScRsp = 2990,
    CmdCurAssistChangedNotify = 2957,
    CmdReportPlayerCsReq = 2918,
    CmdSetAssistScRsp = 2938,
    CmdGetFriendDevelopmentInfoCsReq = 2963,
    CmdGetAssistListScRsp = 2970,
    CmdSyncDeleteFriendScNotify = 2947,
    CmdAddBlacklistCsReq = 2980,
    CmdHandleFriendScRsp = 2905,
    CmdGetCurAssistScRsp = 2982,
    CmdGetAssistHistoryScRsp = 2941,
    CmdSearchPlayerCsReq = 2969,
    CmdGetFriendApplyListInfoCsReq = 2930,
    CmdSetForbidOtherApplyFriendCsReq = 2929,
    CmdHandleFriendCsReq = 2911,
    CmdNewAssistHistoryNotify = 2973,
    CmdGetFriendListInfoScRsp = 2968,
    CmdGetAssistListCsReq = 2992,
    CmdDeleteBlacklistCsReq = 2950,
    CmdGetFriendBattleRecordDetailScRsp = 2926,
    CmdGetFriendChallengeLineupCsReq = 2961,
    CmdGetPlatformPlayerInfoScRsp = 2908,
    CmdTakeAssistRewardScRsp = 2903,
    CmdTakeAssistRewardCsReq = 2940,
    CmdGetFriendAssistListScRsp = 2954,
    CmdGetFriendRecommendListInfoScRsp = 2912,
    CmdGetAssistHistoryCsReq = 2959,
    CmdGetPlayerDetailInfoScRsp = 2924,
    CmdGetFriendAssistListCsReq = 2906,
    CmdGetFriendLoginInfoScRsp = 2967,
    CmdGetFriendApplyListInfoScRsp = 2956,
    CmdSyncAddBlacklistScNotify = 2996,
    CmdDeleteBlacklistScRsp = 2948,
    CmdApplyFriendScRsp = 2976,
    CmdSetForbidOtherApplyFriendScRsp = 2964,
    CmdReportPlayerScRsp = 2995,
    CmdSetFriendMarkScRsp = 2977,
    CmdGetFriendLoginInfoCsReq = 2978,
    CmdGetFriendListInfoCsReq = 2901,
    CmdSetFriendMarkCsReq = 2915,
    CmdDeleteFriendCsReq = 2949,
    CmdSyncHandleFriendScNotify = 2914,
    CmdSetFriendRemarkNameCsReq = 2917,
}
impl CmdFriendType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdFriendTypeNone",
            Self::CmdGetPlatformPlayerInfoCsReq => "CmdGetPlatformPlayerInfoCsReq",
            Self::CmdGetFriendRecommendListInfoCsReq => {
                "CmdGetFriendRecommendListInfoCsReq"
            }
            Self::CmdGetPlayerDetailInfoCsReq => "CmdGetPlayerDetailInfoCsReq",
            Self::CmdAddBlacklistScRsp => "CmdAddBlacklistScRsp",
            Self::CmdGetCurAssistCsReq => "CmdGetCurAssistCsReq",
            Self::CmdSetFriendRemarkNameScRsp => "CmdSetFriendRemarkNameScRsp",
            Self::CmdGetFriendChallengeDetailCsReq => "CmdGetFriendChallengeDetailCsReq",
            Self::CmdSyncApplyFriendScNotify => "CmdSyncApplyFriendScNotify",
            Self::CmdGetFriendChallengeDetailScRsp => "CmdGetFriendChallengeDetailScRsp",
            Self::CmdGetFriendBattleRecordDetailCsReq => {
                "CmdGetFriendBattleRecordDetailCsReq"
            }
            Self::CmdSetAssistCsReq => "CmdSetAssistCsReq",
            Self::CmdApplyFriendCsReq => "CmdApplyFriendCsReq",
            Self::CmdSearchPlayerScRsp => "CmdSearchPlayerScRsp",
            Self::CmdDeleteFriendScRsp => "CmdDeleteFriendScRsp",
            Self::CmdGetFriendDevelopmentInfoScRsp => "CmdGetFriendDevelopmentInfoScRsp",
            Self::CmdGetFriendChallengeLineupScRsp => "CmdGetFriendChallengeLineupScRsp",
            Self::CmdCurAssistChangedNotify => "CmdCurAssistChangedNotify",
            Self::CmdReportPlayerCsReq => "CmdReportPlayerCsReq",
            Self::CmdSetAssistScRsp => "CmdSetAssistScRsp",
            Self::CmdGetFriendDevelopmentInfoCsReq => "CmdGetFriendDevelopmentInfoCsReq",
            Self::CmdGetAssistListScRsp => "CmdGetAssistListScRsp",
            Self::CmdSyncDeleteFriendScNotify => "CmdSyncDeleteFriendScNotify",
            Self::CmdAddBlacklistCsReq => "CmdAddBlacklistCsReq",
            Self::CmdHandleFriendScRsp => "CmdHandleFriendScRsp",
            Self::CmdGetCurAssistScRsp => "CmdGetCurAssistScRsp",
            Self::CmdGetAssistHistoryScRsp => "CmdGetAssistHistoryScRsp",
            Self::CmdSearchPlayerCsReq => "CmdSearchPlayerCsReq",
            Self::CmdGetFriendApplyListInfoCsReq => "CmdGetFriendApplyListInfoCsReq",
            Self::CmdSetForbidOtherApplyFriendCsReq => {
                "CmdSetForbidOtherApplyFriendCsReq"
            }
            Self::CmdHandleFriendCsReq => "CmdHandleFriendCsReq",
            Self::CmdNewAssistHistoryNotify => "CmdNewAssistHistoryNotify",
            Self::CmdGetFriendListInfoScRsp => "CmdGetFriendListInfoScRsp",
            Self::CmdGetAssistListCsReq => "CmdGetAssistListCsReq",
            Self::CmdDeleteBlacklistCsReq => "CmdDeleteBlacklistCsReq",
            Self::CmdGetFriendBattleRecordDetailScRsp => {
                "CmdGetFriendBattleRecordDetailScRsp"
            }
            Self::CmdGetFriendChallengeLineupCsReq => "CmdGetFriendChallengeLineupCsReq",
            Self::CmdGetPlatformPlayerInfoScRsp => "CmdGetPlatformPlayerInfoScRsp",
            Self::CmdTakeAssistRewardScRsp => "CmdTakeAssistRewardScRsp",
            Self::CmdTakeAssistRewardCsReq => "CmdTakeAssistRewardCsReq",
            Self::CmdGetFriendAssistListScRsp => "CmdGetFriendAssistListScRsp",
            Self::CmdGetFriendRecommendListInfoScRsp => {
                "CmdGetFriendRecommendListInfoScRsp"
            }
            Self::CmdGetAssistHistoryCsReq => "CmdGetAssistHistoryCsReq",
            Self::CmdGetPlayerDetailInfoScRsp => "CmdGetPlayerDetailInfoScRsp",
            Self::CmdGetFriendAssistListCsReq => "CmdGetFriendAssistListCsReq",
            Self::CmdGetFriendLoginInfoScRsp => "CmdGetFriendLoginInfoScRsp",
            Self::CmdGetFriendApplyListInfoScRsp => "CmdGetFriendApplyListInfoScRsp",
            Self::CmdSyncAddBlacklistScNotify => "CmdSyncAddBlacklistScNotify",
            Self::CmdDeleteBlacklistScRsp => "CmdDeleteBlacklistScRsp",
            Self::CmdApplyFriendScRsp => "CmdApplyFriendScRsp",
            Self::CmdSetForbidOtherApplyFriendScRsp => {
                "CmdSetForbidOtherApplyFriendScRsp"
            }
            Self::CmdReportPlayerScRsp => "CmdReportPlayerScRsp",
            Self::CmdSetFriendMarkScRsp => "CmdSetFriendMarkScRsp",
            Self::CmdGetFriendLoginInfoCsReq => "CmdGetFriendLoginInfoCsReq",
            Self::CmdGetFriendListInfoCsReq => "CmdGetFriendListInfoCsReq",
            Self::CmdSetFriendMarkCsReq => "CmdSetFriendMarkCsReq",
            Self::CmdDeleteFriendCsReq => "CmdDeleteFriendCsReq",
            Self::CmdSyncHandleFriendScNotify => "CmdSyncHandleFriendScNotify",
            Self::CmdSetFriendRemarkNameCsReq => "CmdSetFriendRemarkNameCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdFriendTypeNone" => Some(Self::None),
            "CmdGetPlatformPlayerInfoCsReq" => Some(Self::CmdGetPlatformPlayerInfoCsReq),
            "CmdGetFriendRecommendListInfoCsReq" => {
                Some(Self::CmdGetFriendRecommendListInfoCsReq)
            }
            "CmdGetPlayerDetailInfoCsReq" => Some(Self::CmdGetPlayerDetailInfoCsReq),
            "CmdAddBlacklistScRsp" => Some(Self::CmdAddBlacklistScRsp),
            "CmdGetCurAssistCsReq" => Some(Self::CmdGetCurAssistCsReq),
            "CmdSetFriendRemarkNameScRsp" => Some(Self::CmdSetFriendRemarkNameScRsp),
            "CmdGetFriendChallengeDetailCsReq" => {
                Some(Self::CmdGetFriendChallengeDetailCsReq)
            }
            "CmdSyncApplyFriendScNotify" => Some(Self::CmdSyncApplyFriendScNotify),
            "CmdGetFriendChallengeDetailScRsp" => {
                Some(Self::CmdGetFriendChallengeDetailScRsp)
            }
            "CmdGetFriendBattleRecordDetailCsReq" => {
                Some(Self::CmdGetFriendBattleRecordDetailCsReq)
            }
            "CmdSetAssistCsReq" => Some(Self::CmdSetAssistCsReq),
            "CmdApplyFriendCsReq" => Some(Self::CmdApplyFriendCsReq),
            "CmdSearchPlayerScRsp" => Some(Self::CmdSearchPlayerScRsp),
            "CmdDeleteFriendScRsp" => Some(Self::CmdDeleteFriendScRsp),
            "CmdGetFriendDevelopmentInfoScRsp" => {
                Some(Self::CmdGetFriendDevelopmentInfoScRsp)
            }
            "CmdGetFriendChallengeLineupScRsp" => {
                Some(Self::CmdGetFriendChallengeLineupScRsp)
            }
            "CmdCurAssistChangedNotify" => Some(Self::CmdCurAssistChangedNotify),
            "CmdReportPlayerCsReq" => Some(Self::CmdReportPlayerCsReq),
            "CmdSetAssistScRsp" => Some(Self::CmdSetAssistScRsp),
            "CmdGetFriendDevelopmentInfoCsReq" => {
                Some(Self::CmdGetFriendDevelopmentInfoCsReq)
            }
            "CmdGetAssistListScRsp" => Some(Self::CmdGetAssistListScRsp),
            "CmdSyncDeleteFriendScNotify" => Some(Self::CmdSyncDeleteFriendScNotify),
            "CmdAddBlacklistCsReq" => Some(Self::CmdAddBlacklistCsReq),
            "CmdHandleFriendScRsp" => Some(Self::CmdHandleFriendScRsp),
            "CmdGetCurAssistScRsp" => Some(Self::CmdGetCurAssistScRsp),
            "CmdGetAssistHistoryScRsp" => Some(Self::CmdGetAssistHistoryScRsp),
            "CmdSearchPlayerCsReq" => Some(Self::CmdSearchPlayerCsReq),
            "CmdGetFriendApplyListInfoCsReq" => {
                Some(Self::CmdGetFriendApplyListInfoCsReq)
            }
            "CmdSetForbidOtherApplyFriendCsReq" => {
                Some(Self::CmdSetForbidOtherApplyFriendCsReq)
            }
            "CmdHandleFriendCsReq" => Some(Self::CmdHandleFriendCsReq),
            "CmdNewAssistHistoryNotify" => Some(Self::CmdNewAssistHistoryNotify),
            "CmdGetFriendListInfoScRsp" => Some(Self::CmdGetFriendListInfoScRsp),
            "CmdGetAssistListCsReq" => Some(Self::CmdGetAssistListCsReq),
            "CmdDeleteBlacklistCsReq" => Some(Self::CmdDeleteBlacklistCsReq),
            "CmdGetFriendBattleRecordDetailScRsp" => {
                Some(Self::CmdGetFriendBattleRecordDetailScRsp)
            }
            "CmdGetFriendChallengeLineupCsReq" => {
                Some(Self::CmdGetFriendChallengeLineupCsReq)
            }
            "CmdGetPlatformPlayerInfoScRsp" => Some(Self::CmdGetPlatformPlayerInfoScRsp),
            "CmdTakeAssistRewardScRsp" => Some(Self::CmdTakeAssistRewardScRsp),
            "CmdTakeAssistRewardCsReq" => Some(Self::CmdTakeAssistRewardCsReq),
            "CmdGetFriendAssistListScRsp" => Some(Self::CmdGetFriendAssistListScRsp),
            "CmdGetFriendRecommendListInfoScRsp" => {
                Some(Self::CmdGetFriendRecommendListInfoScRsp)
            }
            "CmdGetAssistHistoryCsReq" => Some(Self::CmdGetAssistHistoryCsReq),
            "CmdGetPlayerDetailInfoScRsp" => Some(Self::CmdGetPlayerDetailInfoScRsp),
            "CmdGetFriendAssistListCsReq" => Some(Self::CmdGetFriendAssistListCsReq),
            "CmdGetFriendLoginInfoScRsp" => Some(Self::CmdGetFriendLoginInfoScRsp),
            "CmdGetFriendApplyListInfoScRsp" => {
                Some(Self::CmdGetFriendApplyListInfoScRsp)
            }
            "CmdSyncAddBlacklistScNotify" => Some(Self::CmdSyncAddBlacklistScNotify),
            "CmdDeleteBlacklistScRsp" => Some(Self::CmdDeleteBlacklistScRsp),
            "CmdApplyFriendScRsp" => Some(Self::CmdApplyFriendScRsp),
            "CmdSetForbidOtherApplyFriendScRsp" => {
                Some(Self::CmdSetForbidOtherApplyFriendScRsp)
            }
            "CmdReportPlayerScRsp" => Some(Self::CmdReportPlayerScRsp),
            "CmdSetFriendMarkScRsp" => Some(Self::CmdSetFriendMarkScRsp),
            "CmdGetFriendLoginInfoCsReq" => Some(Self::CmdGetFriendLoginInfoCsReq),
            "CmdGetFriendListInfoCsReq" => Some(Self::CmdGetFriendListInfoCsReq),
            "CmdSetFriendMarkCsReq" => Some(Self::CmdSetFriendMarkCsReq),
            "CmdDeleteFriendCsReq" => Some(Self::CmdDeleteFriendCsReq),
            "CmdSyncHandleFriendScNotify" => Some(Self::CmdSyncHandleFriendScNotify),
            "CmdSetFriendRemarkNameCsReq" => Some(Self::CmdSetFriendRemarkNameCsReq),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum FriendOnlineStatus {
    Offline = 0,
    Online = 1,
}
impl FriendOnlineStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Offline => "FRIEND_ONLINE_STATUS_OFFLINE",
            Self::Online => "FRIEND_ONLINE_STATUS_ONLINE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "FRIEND_ONLINE_STATUS_OFFLINE" => Some(Self::Offline),
            "FRIEND_ONLINE_STATUS_ONLINE" => Some(Self::Online),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum FriendApplySource {
    None = 0,
    Search = 1,
    Recommend = 2,
    Assist = 3,
    RecommendAssist = 4,
    PsnFriend = 5,
    AssistReward = 6,
}
impl FriendApplySource {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "FRIEND_APPLY_SOURCE_NONE",
            Self::Search => "FRIEND_APPLY_SOURCE_SEARCH",
            Self::Recommend => "FRIEND_APPLY_SOURCE_RECOMMEND",
            Self::Assist => "FRIEND_APPLY_SOURCE_ASSIST",
            Self::RecommendAssist => "FRIEND_APPLY_SOURCE_RECOMMEND_ASSIST",
            Self::PsnFriend => "FRIEND_APPLY_SOURCE_PSN_FRIEND",
            Self::AssistReward => "FRIEND_APPLY_SOURCE_ASSIST_REWARD",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "FRIEND_APPLY_SOURCE_NONE" => Some(Self::None),
            "FRIEND_APPLY_SOURCE_SEARCH" => Some(Self::Search),
            "FRIEND_APPLY_SOURCE_RECOMMEND" => Some(Self::Recommend),
            "FRIEND_APPLY_SOURCE_ASSIST" => Some(Self::Assist),
            "FRIEND_APPLY_SOURCE_RECOMMEND_ASSIST" => Some(Self::RecommendAssist),
            "FRIEND_APPLY_SOURCE_PSN_FRIEND" => Some(Self::PsnFriend),
            "FRIEND_APPLY_SOURCE_ASSIST_REWARD" => Some(Self::AssistReward),
            _ => None,
        }
    }
}
/// KNKDEJPLOGG
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdGachaType {
    None = 0,
    CmdGetGachaInfoScRsp = 1968,
    CmdExchangeGachaCeilingCsReq = 1997,
    CmdGetGachaInfoCsReq = 1901,
    CmdDoGachaCsReq = 1958,
    CmdDoGachaScRsp = 1924,
    CmdGetGachaCeilingScRsp = 1956,
    CmdExchangeGachaCeilingScRsp = 1976,
    CmdGetGachaCeilingCsReq = 1930,
}
impl CmdGachaType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdGachaTypeNone",
            Self::CmdGetGachaInfoScRsp => "CmdGetGachaInfoScRsp",
            Self::CmdExchangeGachaCeilingCsReq => "CmdExchangeGachaCeilingCsReq",
            Self::CmdGetGachaInfoCsReq => "CmdGetGachaInfoCsReq",
            Self::CmdDoGachaCsReq => "CmdDoGachaCsReq",
            Self::CmdDoGachaScRsp => "CmdDoGachaScRsp",
            Self::CmdGetGachaCeilingScRsp => "CmdGetGachaCeilingScRsp",
            Self::CmdExchangeGachaCeilingScRsp => "CmdExchangeGachaCeilingScRsp",
            Self::CmdGetGachaCeilingCsReq => "CmdGetGachaCeilingCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdGachaTypeNone" => Some(Self::None),
            "CmdGetGachaInfoScRsp" => Some(Self::CmdGetGachaInfoScRsp),
            "CmdExchangeGachaCeilingCsReq" => Some(Self::CmdExchangeGachaCeilingCsReq),
            "CmdGetGachaInfoCsReq" => Some(Self::CmdGetGachaInfoCsReq),
            "CmdDoGachaCsReq" => Some(Self::CmdDoGachaCsReq),
            "CmdDoGachaScRsp" => Some(Self::CmdDoGachaScRsp),
            "CmdGetGachaCeilingScRsp" => Some(Self::CmdGetGachaCeilingScRsp),
            "CmdExchangeGachaCeilingScRsp" => Some(Self::CmdExchangeGachaCeilingScRsp),
            "CmdGetGachaCeilingCsReq" => Some(Self::CmdGetGachaCeilingCsReq),
            _ => None,
        }
    }
}
/// LGLAJCBOAMK
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdHeartdialType {
    None = 0,
    CmdHeartDialTraceScriptScRsp = 6305,
    CmdFinishEmotionDialoguePerformanceCsReq = 6397,
    CmdGetHeartDialInfoScRsp = 6368,
    CmdSubmitEmotionItemCsReq = 6330,
    CmdSubmitEmotionItemScRsp = 6356,
    CmdHeartDialTraceScriptCsReq = 6311,
    CmdHeartDialScriptChangeScNotify = 6328,
    CmdGetHeartDialInfoCsReq = 6301,
    CmdChangeScriptEmotionCsReq = 6358,
    CmdChangeScriptEmotionScRsp = 6324,
    CmdFinishEmotionDialoguePerformanceScRsp = 6376,
}
impl CmdHeartdialType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdHeartdialTypeNone",
            Self::CmdHeartDialTraceScriptScRsp => "CmdHeartDialTraceScriptScRsp",
            Self::CmdFinishEmotionDialoguePerformanceCsReq => {
                "CmdFinishEmotionDialoguePerformanceCsReq"
            }
            Self::CmdGetHeartDialInfoScRsp => "CmdGetHeartDialInfoScRsp",
            Self::CmdSubmitEmotionItemCsReq => "CmdSubmitEmotionItemCsReq",
            Self::CmdSubmitEmotionItemScRsp => "CmdSubmitEmotionItemScRsp",
            Self::CmdHeartDialTraceScriptCsReq => "CmdHeartDialTraceScriptCsReq",
            Self::CmdHeartDialScriptChangeScNotify => "CmdHeartDialScriptChangeScNotify",
            Self::CmdGetHeartDialInfoCsReq => "CmdGetHeartDialInfoCsReq",
            Self::CmdChangeScriptEmotionCsReq => "CmdChangeScriptEmotionCsReq",
            Self::CmdChangeScriptEmotionScRsp => "CmdChangeScriptEmotionScRsp",
            Self::CmdFinishEmotionDialoguePerformanceScRsp => {
                "CmdFinishEmotionDialoguePerformanceScRsp"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdHeartdialTypeNone" => Some(Self::None),
            "CmdHeartDialTraceScriptScRsp" => Some(Self::CmdHeartDialTraceScriptScRsp),
            "CmdFinishEmotionDialoguePerformanceCsReq" => {
                Some(Self::CmdFinishEmotionDialoguePerformanceCsReq)
            }
            "CmdGetHeartDialInfoScRsp" => Some(Self::CmdGetHeartDialInfoScRsp),
            "CmdSubmitEmotionItemCsReq" => Some(Self::CmdSubmitEmotionItemCsReq),
            "CmdSubmitEmotionItemScRsp" => Some(Self::CmdSubmitEmotionItemScRsp),
            "CmdHeartDialTraceScriptCsReq" => Some(Self::CmdHeartDialTraceScriptCsReq),
            "CmdHeartDialScriptChangeScNotify" => {
                Some(Self::CmdHeartDialScriptChangeScNotify)
            }
            "CmdGetHeartDialInfoCsReq" => Some(Self::CmdGetHeartDialInfoCsReq),
            "CmdChangeScriptEmotionCsReq" => Some(Self::CmdChangeScriptEmotionCsReq),
            "CmdChangeScriptEmotionScRsp" => Some(Self::CmdChangeScriptEmotionScRsp),
            "CmdFinishEmotionDialoguePerformanceScRsp" => {
                Some(Self::CmdFinishEmotionDialoguePerformanceScRsp)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Bfdflhekfgk {
    HeartDialEmotionTypePeace = 0,
    HeartDialEmotionTypeAnger = 1,
    HeartDialEmotionTypeHappy = 2,
    HeartDialEmotionTypeSad = 3,
}
impl Bfdflhekfgk {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::HeartDialEmotionTypePeace => "HEART_DIAL_EMOTION_TYPE_PEACE",
            Self::HeartDialEmotionTypeAnger => "HEART_DIAL_EMOTION_TYPE_ANGER",
            Self::HeartDialEmotionTypeHappy => "HEART_DIAL_EMOTION_TYPE_HAPPY",
            Self::HeartDialEmotionTypeSad => "HEART_DIAL_EMOTION_TYPE_SAD",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "HEART_DIAL_EMOTION_TYPE_PEACE" => Some(Self::HeartDialEmotionTypePeace),
            "HEART_DIAL_EMOTION_TYPE_ANGER" => Some(Self::HeartDialEmotionTypeAnger),
            "HEART_DIAL_EMOTION_TYPE_HAPPY" => Some(Self::HeartDialEmotionTypeHappy),
            "HEART_DIAL_EMOTION_TYPE_SAD" => Some(Self::HeartDialEmotionTypeSad),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Afefbpablhm {
    HeartDialStepTypeMissing = 0,
    HeartDialStepTypeFull = 1,
    HeartDialStepTypeLock = 2,
    HeartDialStepTypeUnlock = 3,
    HeartDialStepTypeNormal = 4,
    HeartDialStepTypeControl = 5,
}
impl Afefbpablhm {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::HeartDialStepTypeMissing => "HEART_DIAL_STEP_TYPE_MISSING",
            Self::HeartDialStepTypeFull => "HEART_DIAL_STEP_TYPE_FULL",
            Self::HeartDialStepTypeLock => "HEART_DIAL_STEP_TYPE_LOCK",
            Self::HeartDialStepTypeUnlock => "HEART_DIAL_STEP_TYPE_UNLOCK",
            Self::HeartDialStepTypeNormal => "HEART_DIAL_STEP_TYPE_NORMAL",
            Self::HeartDialStepTypeControl => "HEART_DIAL_STEP_TYPE_CONTROL",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "HEART_DIAL_STEP_TYPE_MISSING" => Some(Self::HeartDialStepTypeMissing),
            "HEART_DIAL_STEP_TYPE_FULL" => Some(Self::HeartDialStepTypeFull),
            "HEART_DIAL_STEP_TYPE_LOCK" => Some(Self::HeartDialStepTypeLock),
            "HEART_DIAL_STEP_TYPE_UNLOCK" => Some(Self::HeartDialStepTypeUnlock),
            "HEART_DIAL_STEP_TYPE_NORMAL" => Some(Self::HeartDialStepTypeNormal),
            "HEART_DIAL_STEP_TYPE_CONTROL" => Some(Self::HeartDialStepTypeControl),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Ooehgmemkoi {
    HeartDialUnlockStatusLock = 0,
    HeartDialUnlockStatusUnlockSingle = 1,
    HeartDialUnlockStatusUnlockAll = 2,
}
impl Ooehgmemkoi {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::HeartDialUnlockStatusLock => "HEART_DIAL_UNLOCK_STATUS_LOCK",
            Self::HeartDialUnlockStatusUnlockSingle => {
                "HEART_DIAL_UNLOCK_STATUS_UNLOCK_SINGLE"
            }
            Self::HeartDialUnlockStatusUnlockAll => "HEART_DIAL_UNLOCK_STATUS_UNLOCK_ALL",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "HEART_DIAL_UNLOCK_STATUS_LOCK" => Some(Self::HeartDialUnlockStatusLock),
            "HEART_DIAL_UNLOCK_STATUS_UNLOCK_SINGLE" => {
                Some(Self::HeartDialUnlockStatusUnlockSingle)
            }
            "HEART_DIAL_UNLOCK_STATUS_UNLOCK_ALL" => {
                Some(Self::HeartDialUnlockStatusUnlockAll)
            }
            _ => None,
        }
    }
}
/// ONLOCFMPMMD
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdHeliobusType {
    None = 0,
    CmdHeliobusInfoChangedScNotify = 5814,
    CmdHeliobusSnsCommentScRsp = 5811,
    CmdHeliobusStartRaidCsReq = 5891,
    CmdHeliobusSnsLikeScRsp = 5876,
    CmdHeliobusSnsReadCsReq = 5858,
    CmdHeliobusSelectSkillCsReq = 5880,
    CmdHeliobusUnlockSkillScNotify = 5847,
    CmdHeliobusEnterBattleScRsp = 5817,
    CmdHeliobusSnsCommentCsReq = 5828,
    CmdHeliobusUpgradeLevelScRsp = 5822,
    CmdHeliobusSnsPostCsReq = 5830,
    CmdHeliobusChallengeUpdateScNotify = 5895,
    CmdHeliobusSnsPostScRsp = 5856,
    CmdHeliobusSnsUpdateScNotify = 5805,
    CmdHeliobusLineupUpdateScNotify = 5850,
    CmdHeliobusSnsReadScRsp = 5824,
    CmdHeliobusStartRaidScRsp = 5818,
    CmdHeliobusSnsLikeCsReq = 5897,
    CmdHeliobusActivityDataScRsp = 5868,
    CmdHeliobusUpgradeLevelCsReq = 5849,
    CmdHeliobusSelectSkillScRsp = 5839,
    CmdHeliobusActivityDataCsReq = 5801,
    CmdHeliobusEnterBattleCsReq = 5812,
}
impl CmdHeliobusType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdHeliobusTypeNone",
            Self::CmdHeliobusInfoChangedScNotify => "CmdHeliobusInfoChangedScNotify",
            Self::CmdHeliobusSnsCommentScRsp => "CmdHeliobusSnsCommentScRsp",
            Self::CmdHeliobusStartRaidCsReq => "CmdHeliobusStartRaidCsReq",
            Self::CmdHeliobusSnsLikeScRsp => "CmdHeliobusSnsLikeScRsp",
            Self::CmdHeliobusSnsReadCsReq => "CmdHeliobusSnsReadCsReq",
            Self::CmdHeliobusSelectSkillCsReq => "CmdHeliobusSelectSkillCsReq",
            Self::CmdHeliobusUnlockSkillScNotify => "CmdHeliobusUnlockSkillScNotify",
            Self::CmdHeliobusEnterBattleScRsp => "CmdHeliobusEnterBattleScRsp",
            Self::CmdHeliobusSnsCommentCsReq => "CmdHeliobusSnsCommentCsReq",
            Self::CmdHeliobusUpgradeLevelScRsp => "CmdHeliobusUpgradeLevelScRsp",
            Self::CmdHeliobusSnsPostCsReq => "CmdHeliobusSnsPostCsReq",
            Self::CmdHeliobusChallengeUpdateScNotify => {
                "CmdHeliobusChallengeUpdateScNotify"
            }
            Self::CmdHeliobusSnsPostScRsp => "CmdHeliobusSnsPostScRsp",
            Self::CmdHeliobusSnsUpdateScNotify => "CmdHeliobusSnsUpdateScNotify",
            Self::CmdHeliobusLineupUpdateScNotify => "CmdHeliobusLineupUpdateScNotify",
            Self::CmdHeliobusSnsReadScRsp => "CmdHeliobusSnsReadScRsp",
            Self::CmdHeliobusStartRaidScRsp => "CmdHeliobusStartRaidScRsp",
            Self::CmdHeliobusSnsLikeCsReq => "CmdHeliobusSnsLikeCsReq",
            Self::CmdHeliobusActivityDataScRsp => "CmdHeliobusActivityDataScRsp",
            Self::CmdHeliobusUpgradeLevelCsReq => "CmdHeliobusUpgradeLevelCsReq",
            Self::CmdHeliobusSelectSkillScRsp => "CmdHeliobusSelectSkillScRsp",
            Self::CmdHeliobusActivityDataCsReq => "CmdHeliobusActivityDataCsReq",
            Self::CmdHeliobusEnterBattleCsReq => "CmdHeliobusEnterBattleCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdHeliobusTypeNone" => Some(Self::None),
            "CmdHeliobusInfoChangedScNotify" => {
                Some(Self::CmdHeliobusInfoChangedScNotify)
            }
            "CmdHeliobusSnsCommentScRsp" => Some(Self::CmdHeliobusSnsCommentScRsp),
            "CmdHeliobusStartRaidCsReq" => Some(Self::CmdHeliobusStartRaidCsReq),
            "CmdHeliobusSnsLikeScRsp" => Some(Self::CmdHeliobusSnsLikeScRsp),
            "CmdHeliobusSnsReadCsReq" => Some(Self::CmdHeliobusSnsReadCsReq),
            "CmdHeliobusSelectSkillCsReq" => Some(Self::CmdHeliobusSelectSkillCsReq),
            "CmdHeliobusUnlockSkillScNotify" => {
                Some(Self::CmdHeliobusUnlockSkillScNotify)
            }
            "CmdHeliobusEnterBattleScRsp" => Some(Self::CmdHeliobusEnterBattleScRsp),
            "CmdHeliobusSnsCommentCsReq" => Some(Self::CmdHeliobusSnsCommentCsReq),
            "CmdHeliobusUpgradeLevelScRsp" => Some(Self::CmdHeliobusUpgradeLevelScRsp),
            "CmdHeliobusSnsPostCsReq" => Some(Self::CmdHeliobusSnsPostCsReq),
            "CmdHeliobusChallengeUpdateScNotify" => {
                Some(Self::CmdHeliobusChallengeUpdateScNotify)
            }
            "CmdHeliobusSnsPostScRsp" => Some(Self::CmdHeliobusSnsPostScRsp),
            "CmdHeliobusSnsUpdateScNotify" => Some(Self::CmdHeliobusSnsUpdateScNotify),
            "CmdHeliobusLineupUpdateScNotify" => {
                Some(Self::CmdHeliobusLineupUpdateScNotify)
            }
            "CmdHeliobusSnsReadScRsp" => Some(Self::CmdHeliobusSnsReadScRsp),
            "CmdHeliobusStartRaidScRsp" => Some(Self::CmdHeliobusStartRaidScRsp),
            "CmdHeliobusSnsLikeCsReq" => Some(Self::CmdHeliobusSnsLikeCsReq),
            "CmdHeliobusActivityDataScRsp" => Some(Self::CmdHeliobusActivityDataScRsp),
            "CmdHeliobusUpgradeLevelCsReq" => Some(Self::CmdHeliobusUpgradeLevelCsReq),
            "CmdHeliobusSelectSkillScRsp" => Some(Self::CmdHeliobusSelectSkillScRsp),
            "CmdHeliobusActivityDataCsReq" => Some(Self::CmdHeliobusActivityDataCsReq),
            "CmdHeliobusEnterBattleCsReq" => Some(Self::CmdHeliobusEnterBattleCsReq),
            _ => None,
        }
    }
}
/// KMEAJJECJFD
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdItemType {
    None = 0,
    CmdPromoteEquipmentScRsp = 524,
    CmdMarkItemCsReq = 559,
    CmdPromoteEquipmentCsReq = 558,
    CmdGetBagScRsp = 568,
    CmdExpUpEquipmentScRsp = 514,
    CmdRelicReforgeCsReq = 588,
    CmdExpUpEquipmentCsReq = 505,
    CmdDiscardRelicCsReq = 508,
    CmdAddRelicFilterPlanCsReq = 554,
    CmdGetMarkItemListCsReq = 519,
    CmdSetTurnFoodSwitchCsReq = 503,
    CmdUseItemCsReq = 597,
    CmdRankUpEquipmentCsReq = 528,
    CmdGetMarkItemListScRsp = 582,
    CmdGetRecyleTimeScRsp = 520,
    CmdComposeLimitNumUpdateNotify = 570,
    CmdSellItemScRsp = 512,
    CmdDiscardRelicScRsp = 578,
    CmdRechargeSuccNotify = 517,
    CmdUseItemScRsp = 576,
    CmdExpUpRelicCsReq = 547,
    CmdAddEquipmentScNotify = 548,
    CmdDestroyItemScRsp = 538,
    CmdDestroyItemCsReq = 581,
    CmdMarkRelicFilterPlanCsReq = 526,
    CmdModifyRelicFilterPlanScRsp = 555,
    CmdGetRelicFilterPlanCsReq = 577,
    CmdGetRelicFilterPlanScRsp = 506,
    CmdGetBagCsReq = 501,
    CmdRelicReforgeScRsp = 589,
    CmdRelicReforgeConfirmCsReq = 565,
    CmdLockRelicCsReq = 539,
    CmdRelicFilterPlanClearNameScNotify = 507,
    CmdMarkItemScRsp = 541,
    CmdExchangeHcoinScRsp = 518,
    CmdGeneralVirtualItemDataNotify = 513,
    CmdDeleteRelicFilterPlanScRsp = 560,
    CmdGetRecyleTimeCsReq = 569,
    CmdSetTurnFoodSwitchScRsp = 557,
    CmdComposeSelectedRelicCsReq = 595,
    CmdRankUpEquipmentScRsp = 511,
    CmdLockEquipmentCsReq = 530,
    CmdSellItemCsReq = 523,
    CmdAddRelicFilterPlanScRsp = 561,
    CmdDeleteRelicFilterPlanCsReq = 585,
    CmdSyncTurnFoodNotify = 540,
    CmdExchangeHcoinCsReq = 591,
    CmdMarkRelicFilterPlanScRsp = 563,
    CmdLockEquipmentScRsp = 556,
    CmdRelicReforgeConfirmScRsp = 574,
    CmdCancelMarkItemNotify = 573,
    CmdComposeItemCsReq = 549,
    CmdComposeSelectedRelicScRsp = 550,
    CmdExpUpRelicScRsp = 580,
    CmdComposeLimitNumCompleteNotify = 592,
    CmdModifyRelicFilterPlanCsReq = 590,
    CmdComposeItemScRsp = 522,
    CmdLockRelicScRsp = 596,
}
impl CmdItemType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdItemTypeNone",
            Self::CmdPromoteEquipmentScRsp => "CmdPromoteEquipmentScRsp",
            Self::CmdMarkItemCsReq => "CmdMarkItemCsReq",
            Self::CmdPromoteEquipmentCsReq => "CmdPromoteEquipmentCsReq",
            Self::CmdGetBagScRsp => "CmdGetBagScRsp",
            Self::CmdExpUpEquipmentScRsp => "CmdExpUpEquipmentScRsp",
            Self::CmdRelicReforgeCsReq => "CmdRelicReforgeCsReq",
            Self::CmdExpUpEquipmentCsReq => "CmdExpUpEquipmentCsReq",
            Self::CmdDiscardRelicCsReq => "CmdDiscardRelicCsReq",
            Self::CmdAddRelicFilterPlanCsReq => "CmdAddRelicFilterPlanCsReq",
            Self::CmdGetMarkItemListCsReq => "CmdGetMarkItemListCsReq",
            Self::CmdSetTurnFoodSwitchCsReq => "CmdSetTurnFoodSwitchCsReq",
            Self::CmdUseItemCsReq => "CmdUseItemCsReq",
            Self::CmdRankUpEquipmentCsReq => "CmdRankUpEquipmentCsReq",
            Self::CmdGetMarkItemListScRsp => "CmdGetMarkItemListScRsp",
            Self::CmdGetRecyleTimeScRsp => "CmdGetRecyleTimeScRsp",
            Self::CmdComposeLimitNumUpdateNotify => "CmdComposeLimitNumUpdateNotify",
            Self::CmdSellItemScRsp => "CmdSellItemScRsp",
            Self::CmdDiscardRelicScRsp => "CmdDiscardRelicScRsp",
            Self::CmdRechargeSuccNotify => "CmdRechargeSuccNotify",
            Self::CmdUseItemScRsp => "CmdUseItemScRsp",
            Self::CmdExpUpRelicCsReq => "CmdExpUpRelicCsReq",
            Self::CmdAddEquipmentScNotify => "CmdAddEquipmentScNotify",
            Self::CmdDestroyItemScRsp => "CmdDestroyItemScRsp",
            Self::CmdDestroyItemCsReq => "CmdDestroyItemCsReq",
            Self::CmdMarkRelicFilterPlanCsReq => "CmdMarkRelicFilterPlanCsReq",
            Self::CmdModifyRelicFilterPlanScRsp => "CmdModifyRelicFilterPlanScRsp",
            Self::CmdGetRelicFilterPlanCsReq => "CmdGetRelicFilterPlanCsReq",
            Self::CmdGetRelicFilterPlanScRsp => "CmdGetRelicFilterPlanScRsp",
            Self::CmdGetBagCsReq => "CmdGetBagCsReq",
            Self::CmdRelicReforgeScRsp => "CmdRelicReforgeScRsp",
            Self::CmdRelicReforgeConfirmCsReq => "CmdRelicReforgeConfirmCsReq",
            Self::CmdLockRelicCsReq => "CmdLockRelicCsReq",
            Self::CmdRelicFilterPlanClearNameScNotify => {
                "CmdRelicFilterPlanClearNameScNotify"
            }
            Self::CmdMarkItemScRsp => "CmdMarkItemScRsp",
            Self::CmdExchangeHcoinScRsp => "CmdExchangeHcoinScRsp",
            Self::CmdGeneralVirtualItemDataNotify => "CmdGeneralVirtualItemDataNotify",
            Self::CmdDeleteRelicFilterPlanScRsp => "CmdDeleteRelicFilterPlanScRsp",
            Self::CmdGetRecyleTimeCsReq => "CmdGetRecyleTimeCsReq",
            Self::CmdSetTurnFoodSwitchScRsp => "CmdSetTurnFoodSwitchScRsp",
            Self::CmdComposeSelectedRelicCsReq => "CmdComposeSelectedRelicCsReq",
            Self::CmdRankUpEquipmentScRsp => "CmdRankUpEquipmentScRsp",
            Self::CmdLockEquipmentCsReq => "CmdLockEquipmentCsReq",
            Self::CmdSellItemCsReq => "CmdSellItemCsReq",
            Self::CmdAddRelicFilterPlanScRsp => "CmdAddRelicFilterPlanScRsp",
            Self::CmdDeleteRelicFilterPlanCsReq => "CmdDeleteRelicFilterPlanCsReq",
            Self::CmdSyncTurnFoodNotify => "CmdSyncTurnFoodNotify",
            Self::CmdExchangeHcoinCsReq => "CmdExchangeHcoinCsReq",
            Self::CmdMarkRelicFilterPlanScRsp => "CmdMarkRelicFilterPlanScRsp",
            Self::CmdLockEquipmentScRsp => "CmdLockEquipmentScRsp",
            Self::CmdRelicReforgeConfirmScRsp => "CmdRelicReforgeConfirmScRsp",
            Self::CmdCancelMarkItemNotify => "CmdCancelMarkItemNotify",
            Self::CmdComposeItemCsReq => "CmdComposeItemCsReq",
            Self::CmdComposeSelectedRelicScRsp => "CmdComposeSelectedRelicScRsp",
            Self::CmdExpUpRelicScRsp => "CmdExpUpRelicScRsp",
            Self::CmdComposeLimitNumCompleteNotify => "CmdComposeLimitNumCompleteNotify",
            Self::CmdModifyRelicFilterPlanCsReq => "CmdModifyRelicFilterPlanCsReq",
            Self::CmdComposeItemScRsp => "CmdComposeItemScRsp",
            Self::CmdLockRelicScRsp => "CmdLockRelicScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdItemTypeNone" => Some(Self::None),
            "CmdPromoteEquipmentScRsp" => Some(Self::CmdPromoteEquipmentScRsp),
            "CmdMarkItemCsReq" => Some(Self::CmdMarkItemCsReq),
            "CmdPromoteEquipmentCsReq" => Some(Self::CmdPromoteEquipmentCsReq),
            "CmdGetBagScRsp" => Some(Self::CmdGetBagScRsp),
            "CmdExpUpEquipmentScRsp" => Some(Self::CmdExpUpEquipmentScRsp),
            "CmdRelicReforgeCsReq" => Some(Self::CmdRelicReforgeCsReq),
            "CmdExpUpEquipmentCsReq" => Some(Self::CmdExpUpEquipmentCsReq),
            "CmdDiscardRelicCsReq" => Some(Self::CmdDiscardRelicCsReq),
            "CmdAddRelicFilterPlanCsReq" => Some(Self::CmdAddRelicFilterPlanCsReq),
            "CmdGetMarkItemListCsReq" => Some(Self::CmdGetMarkItemListCsReq),
            "CmdSetTurnFoodSwitchCsReq" => Some(Self::CmdSetTurnFoodSwitchCsReq),
            "CmdUseItemCsReq" => Some(Self::CmdUseItemCsReq),
            "CmdRankUpEquipmentCsReq" => Some(Self::CmdRankUpEquipmentCsReq),
            "CmdGetMarkItemListScRsp" => Some(Self::CmdGetMarkItemListScRsp),
            "CmdGetRecyleTimeScRsp" => Some(Self::CmdGetRecyleTimeScRsp),
            "CmdComposeLimitNumUpdateNotify" => {
                Some(Self::CmdComposeLimitNumUpdateNotify)
            }
            "CmdSellItemScRsp" => Some(Self::CmdSellItemScRsp),
            "CmdDiscardRelicScRsp" => Some(Self::CmdDiscardRelicScRsp),
            "CmdRechargeSuccNotify" => Some(Self::CmdRechargeSuccNotify),
            "CmdUseItemScRsp" => Some(Self::CmdUseItemScRsp),
            "CmdExpUpRelicCsReq" => Some(Self::CmdExpUpRelicCsReq),
            "CmdAddEquipmentScNotify" => Some(Self::CmdAddEquipmentScNotify),
            "CmdDestroyItemScRsp" => Some(Self::CmdDestroyItemScRsp),
            "CmdDestroyItemCsReq" => Some(Self::CmdDestroyItemCsReq),
            "CmdMarkRelicFilterPlanCsReq" => Some(Self::CmdMarkRelicFilterPlanCsReq),
            "CmdModifyRelicFilterPlanScRsp" => Some(Self::CmdModifyRelicFilterPlanScRsp),
            "CmdGetRelicFilterPlanCsReq" => Some(Self::CmdGetRelicFilterPlanCsReq),
            "CmdGetRelicFilterPlanScRsp" => Some(Self::CmdGetRelicFilterPlanScRsp),
            "CmdGetBagCsReq" => Some(Self::CmdGetBagCsReq),
            "CmdRelicReforgeScRsp" => Some(Self::CmdRelicReforgeScRsp),
            "CmdRelicReforgeConfirmCsReq" => Some(Self::CmdRelicReforgeConfirmCsReq),
            "CmdLockRelicCsReq" => Some(Self::CmdLockRelicCsReq),
            "CmdRelicFilterPlanClearNameScNotify" => {
                Some(Self::CmdRelicFilterPlanClearNameScNotify)
            }
            "CmdMarkItemScRsp" => Some(Self::CmdMarkItemScRsp),
            "CmdExchangeHcoinScRsp" => Some(Self::CmdExchangeHcoinScRsp),
            "CmdGeneralVirtualItemDataNotify" => {
                Some(Self::CmdGeneralVirtualItemDataNotify)
            }
            "CmdDeleteRelicFilterPlanScRsp" => Some(Self::CmdDeleteRelicFilterPlanScRsp),
            "CmdGetRecyleTimeCsReq" => Some(Self::CmdGetRecyleTimeCsReq),
            "CmdSetTurnFoodSwitchScRsp" => Some(Self::CmdSetTurnFoodSwitchScRsp),
            "CmdComposeSelectedRelicCsReq" => Some(Self::CmdComposeSelectedRelicCsReq),
            "CmdRankUpEquipmentScRsp" => Some(Self::CmdRankUpEquipmentScRsp),
            "CmdLockEquipmentCsReq" => Some(Self::CmdLockEquipmentCsReq),
            "CmdSellItemCsReq" => Some(Self::CmdSellItemCsReq),
            "CmdAddRelicFilterPlanScRsp" => Some(Self::CmdAddRelicFilterPlanScRsp),
            "CmdDeleteRelicFilterPlanCsReq" => Some(Self::CmdDeleteRelicFilterPlanCsReq),
            "CmdSyncTurnFoodNotify" => Some(Self::CmdSyncTurnFoodNotify),
            "CmdExchangeHcoinCsReq" => Some(Self::CmdExchangeHcoinCsReq),
            "CmdMarkRelicFilterPlanScRsp" => Some(Self::CmdMarkRelicFilterPlanScRsp),
            "CmdLockEquipmentScRsp" => Some(Self::CmdLockEquipmentScRsp),
            "CmdRelicReforgeConfirmScRsp" => Some(Self::CmdRelicReforgeConfirmScRsp),
            "CmdCancelMarkItemNotify" => Some(Self::CmdCancelMarkItemNotify),
            "CmdComposeItemCsReq" => Some(Self::CmdComposeItemCsReq),
            "CmdComposeSelectedRelicScRsp" => Some(Self::CmdComposeSelectedRelicScRsp),
            "CmdExpUpRelicScRsp" => Some(Self::CmdExpUpRelicScRsp),
            "CmdComposeLimitNumCompleteNotify" => {
                Some(Self::CmdComposeLimitNumCompleteNotify)
            }
            "CmdModifyRelicFilterPlanCsReq" => Some(Self::CmdModifyRelicFilterPlanCsReq),
            "CmdComposeItemScRsp" => Some(Self::CmdComposeItemScRsp),
            "CmdLockRelicScRsp" => Some(Self::CmdLockRelicScRsp),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum TurnFoodSwitch {
    None = 0,
    Attack = 1,
    Define = 2,
}
impl TurnFoodSwitch {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "TURN_FOOD_SWITCH_NONE",
            Self::Attack => "TURN_FOOD_SWITCH_ATTACK",
            Self::Define => "TURN_FOOD_SWITCH_DEFINE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "TURN_FOOD_SWITCH_NONE" => Some(Self::None),
            "TURN_FOOD_SWITCH_ATTACK" => Some(Self::Attack),
            "TURN_FOOD_SWITCH_DEFINE" => Some(Self::Define),
            _ => None,
        }
    }
}
/// CNEHLGPAMNH
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdJukeboxType {
    None = 0,
    CmdGetJukeboxDataCsReq = 3101,
    CmdPlayBackGroundMusicScRsp = 3124,
    CmdTrialBackGroundMusicCsReq = 3197,
    CmdUnlockBackGroundMusicScRsp = 3156,
    CmdPlayBackGroundMusicCsReq = 3158,
    CmdTrialBackGroundMusicScRsp = 3176,
    CmdUnlockBackGroundMusicCsReq = 3130,
    CmdGetJukeboxDataScRsp = 3168,
}
impl CmdJukeboxType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdJukeboxTypeNone",
            Self::CmdGetJukeboxDataCsReq => "CmdGetJukeboxDataCsReq",
            Self::CmdPlayBackGroundMusicScRsp => "CmdPlayBackGroundMusicScRsp",
            Self::CmdTrialBackGroundMusicCsReq => "CmdTrialBackGroundMusicCsReq",
            Self::CmdUnlockBackGroundMusicScRsp => "CmdUnlockBackGroundMusicScRsp",
            Self::CmdPlayBackGroundMusicCsReq => "CmdPlayBackGroundMusicCsReq",
            Self::CmdTrialBackGroundMusicScRsp => "CmdTrialBackGroundMusicScRsp",
            Self::CmdUnlockBackGroundMusicCsReq => "CmdUnlockBackGroundMusicCsReq",
            Self::CmdGetJukeboxDataScRsp => "CmdGetJukeboxDataScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdJukeboxTypeNone" => Some(Self::None),
            "CmdGetJukeboxDataCsReq" => Some(Self::CmdGetJukeboxDataCsReq),
            "CmdPlayBackGroundMusicScRsp" => Some(Self::CmdPlayBackGroundMusicScRsp),
            "CmdTrialBackGroundMusicCsReq" => Some(Self::CmdTrialBackGroundMusicCsReq),
            "CmdUnlockBackGroundMusicScRsp" => Some(Self::CmdUnlockBackGroundMusicScRsp),
            "CmdPlayBackGroundMusicCsReq" => Some(Self::CmdPlayBackGroundMusicCsReq),
            "CmdTrialBackGroundMusicScRsp" => Some(Self::CmdTrialBackGroundMusicScRsp),
            "CmdUnlockBackGroundMusicCsReq" => Some(Self::CmdUnlockBackGroundMusicCsReq),
            "CmdGetJukeboxDataScRsp" => Some(Self::CmdGetJukeboxDataScRsp),
            _ => None,
        }
    }
}
/// BFNPHAGFANF
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdLineupType {
    None = 0,
    CmdQuitLineupScRsp = 776,
    CmdSwapLineupCsReq = 728,
    CmdExtraLineupDestroyNotify = 750,
    CmdSetLineupNameCsReq = 796,
    CmdReplaceLineupScRsp = 795,
    CmdReplaceLineupCsReq = 718,
    CmdGetStageLineupScRsp = 768,
    CmdSwapLineupScRsp = 711,
    CmdSyncLineupNotify = 705,
    CmdGetCurLineupDataScRsp = 724,
    CmdGetStageLineupCsReq = 701,
    CmdSetLineupNameScRsp = 723,
    CmdGetLineupAvatarDataCsReq = 714,
    CmdGetAllLineupDataCsReq = 712,
    CmdJoinLineupScRsp = 756,
    CmdChangeLineupLeaderScRsp = 747,
    CmdGetAllLineupDataScRsp = 717,
    CmdChangeLineupLeaderCsReq = 722,
    CmdJoinLineupCsReq = 730,
    CmdVirtualLineupTrialAvatarChangeScNotify = 748,
    CmdQuitLineupCsReq = 797,
    CmdGetCurLineupDataCsReq = 758,
    CmdSwitchLineupIndexScRsp = 739,
    CmdVirtualLineupDestroyNotify = 791,
    CmdGetLineupAvatarDataScRsp = 749,
    CmdSwitchLineupIndexCsReq = 780,
}
impl CmdLineupType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdLineupTypeNone",
            Self::CmdQuitLineupScRsp => "CmdQuitLineupScRsp",
            Self::CmdSwapLineupCsReq => "CmdSwapLineupCsReq",
            Self::CmdExtraLineupDestroyNotify => "CmdExtraLineupDestroyNotify",
            Self::CmdSetLineupNameCsReq => "CmdSetLineupNameCsReq",
            Self::CmdReplaceLineupScRsp => "CmdReplaceLineupScRsp",
            Self::CmdReplaceLineupCsReq => "CmdReplaceLineupCsReq",
            Self::CmdGetStageLineupScRsp => "CmdGetStageLineupScRsp",
            Self::CmdSwapLineupScRsp => "CmdSwapLineupScRsp",
            Self::CmdSyncLineupNotify => "CmdSyncLineupNotify",
            Self::CmdGetCurLineupDataScRsp => "CmdGetCurLineupDataScRsp",
            Self::CmdGetStageLineupCsReq => "CmdGetStageLineupCsReq",
            Self::CmdSetLineupNameScRsp => "CmdSetLineupNameScRsp",
            Self::CmdGetLineupAvatarDataCsReq => "CmdGetLineupAvatarDataCsReq",
            Self::CmdGetAllLineupDataCsReq => "CmdGetAllLineupDataCsReq",
            Self::CmdJoinLineupScRsp => "CmdJoinLineupScRsp",
            Self::CmdChangeLineupLeaderScRsp => "CmdChangeLineupLeaderScRsp",
            Self::CmdGetAllLineupDataScRsp => "CmdGetAllLineupDataScRsp",
            Self::CmdChangeLineupLeaderCsReq => "CmdChangeLineupLeaderCsReq",
            Self::CmdJoinLineupCsReq => "CmdJoinLineupCsReq",
            Self::CmdVirtualLineupTrialAvatarChangeScNotify => {
                "CmdVirtualLineupTrialAvatarChangeScNotify"
            }
            Self::CmdQuitLineupCsReq => "CmdQuitLineupCsReq",
            Self::CmdGetCurLineupDataCsReq => "CmdGetCurLineupDataCsReq",
            Self::CmdSwitchLineupIndexScRsp => "CmdSwitchLineupIndexScRsp",
            Self::CmdVirtualLineupDestroyNotify => "CmdVirtualLineupDestroyNotify",
            Self::CmdGetLineupAvatarDataScRsp => "CmdGetLineupAvatarDataScRsp",
            Self::CmdSwitchLineupIndexCsReq => "CmdSwitchLineupIndexCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdLineupTypeNone" => Some(Self::None),
            "CmdQuitLineupScRsp" => Some(Self::CmdQuitLineupScRsp),
            "CmdSwapLineupCsReq" => Some(Self::CmdSwapLineupCsReq),
            "CmdExtraLineupDestroyNotify" => Some(Self::CmdExtraLineupDestroyNotify),
            "CmdSetLineupNameCsReq" => Some(Self::CmdSetLineupNameCsReq),
            "CmdReplaceLineupScRsp" => Some(Self::CmdReplaceLineupScRsp),
            "CmdReplaceLineupCsReq" => Some(Self::CmdReplaceLineupCsReq),
            "CmdGetStageLineupScRsp" => Some(Self::CmdGetStageLineupScRsp),
            "CmdSwapLineupScRsp" => Some(Self::CmdSwapLineupScRsp),
            "CmdSyncLineupNotify" => Some(Self::CmdSyncLineupNotify),
            "CmdGetCurLineupDataScRsp" => Some(Self::CmdGetCurLineupDataScRsp),
            "CmdGetStageLineupCsReq" => Some(Self::CmdGetStageLineupCsReq),
            "CmdSetLineupNameScRsp" => Some(Self::CmdSetLineupNameScRsp),
            "CmdGetLineupAvatarDataCsReq" => Some(Self::CmdGetLineupAvatarDataCsReq),
            "CmdGetAllLineupDataCsReq" => Some(Self::CmdGetAllLineupDataCsReq),
            "CmdJoinLineupScRsp" => Some(Self::CmdJoinLineupScRsp),
            "CmdChangeLineupLeaderScRsp" => Some(Self::CmdChangeLineupLeaderScRsp),
            "CmdGetAllLineupDataScRsp" => Some(Self::CmdGetAllLineupDataScRsp),
            "CmdChangeLineupLeaderCsReq" => Some(Self::CmdChangeLineupLeaderCsReq),
            "CmdJoinLineupCsReq" => Some(Self::CmdJoinLineupCsReq),
            "CmdVirtualLineupTrialAvatarChangeScNotify" => {
                Some(Self::CmdVirtualLineupTrialAvatarChangeScNotify)
            }
            "CmdQuitLineupCsReq" => Some(Self::CmdQuitLineupCsReq),
            "CmdGetCurLineupDataCsReq" => Some(Self::CmdGetCurLineupDataCsReq),
            "CmdSwitchLineupIndexScRsp" => Some(Self::CmdSwitchLineupIndexScRsp),
            "CmdVirtualLineupDestroyNotify" => Some(Self::CmdVirtualLineupDestroyNotify),
            "CmdGetLineupAvatarDataScRsp" => Some(Self::CmdGetLineupAvatarDataScRsp),
            "CmdSwitchLineupIndexCsReq" => Some(Self::CmdSwitchLineupIndexCsReq),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Pbpahlpfnda {
    LineupTypeNone = 0,
    LineupTypePreset = 1,
    LineupTypeVirtual = 2,
    LineupTypeExtra = 3,
    LineupTypeStoryLine = 4,
}
impl Pbpahlpfnda {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::LineupTypeNone => "LINEUP_TYPE_NONE",
            Self::LineupTypePreset => "LINEUP_TYPE_PRESET",
            Self::LineupTypeVirtual => "LINEUP_TYPE_VIRTUAL",
            Self::LineupTypeExtra => "LINEUP_TYPE_EXTRA",
            Self::LineupTypeStoryLine => "LINEUP_TYPE_STORY_LINE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "LINEUP_TYPE_NONE" => Some(Self::LineupTypeNone),
            "LINEUP_TYPE_PRESET" => Some(Self::LineupTypePreset),
            "LINEUP_TYPE_VIRTUAL" => Some(Self::LineupTypeVirtual),
            "LINEUP_TYPE_EXTRA" => Some(Self::LineupTypeExtra),
            "LINEUP_TYPE_STORY_LINE" => Some(Self::LineupTypeStoryLine),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ExtraLineupType {
    LineupNone = 0,
    LineupChallenge = 1,
    LineupRogue = 2,
    LineupChallenge2 = 3,
    LineupChallenge3 = 4,
    LineupRogueChallenge = 5,
    LineupStageTrial = 6,
    LineupRogueTrial = 7,
    LineupActivity = 8,
    LineupBoxingClub = 9,
    LineupTreasureDungeon = 11,
    LineupChessRogue = 12,
    LineupHeliobus = 13,
    LineupTournRogue = 14,
    LineupRelicRogue = 15,
    LineupArcadeRogue = 16,
    LineupMagicRogue = 17,
}
impl ExtraLineupType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::LineupNone => "LINEUP_NONE",
            Self::LineupChallenge => "LINEUP_CHALLENGE",
            Self::LineupRogue => "LINEUP_ROGUE",
            Self::LineupChallenge2 => "LINEUP_CHALLENGE_2",
            Self::LineupChallenge3 => "LINEUP_CHALLENGE_3",
            Self::LineupRogueChallenge => "LINEUP_ROGUE_CHALLENGE",
            Self::LineupStageTrial => "LINEUP_STAGE_TRIAL",
            Self::LineupRogueTrial => "LINEUP_ROGUE_TRIAL",
            Self::LineupActivity => "LINEUP_ACTIVITY",
            Self::LineupBoxingClub => "LINEUP_BOXING_CLUB",
            Self::LineupTreasureDungeon => "LINEUP_TREASURE_DUNGEON",
            Self::LineupChessRogue => "LINEUP_CHESS_ROGUE",
            Self::LineupHeliobus => "LINEUP_HELIOBUS",
            Self::LineupTournRogue => "LINEUP_TOURN_ROGUE",
            Self::LineupRelicRogue => "LINEUP_RELIC_ROGUE",
            Self::LineupArcadeRogue => "LINEUP_ARCADE_ROGUE",
            Self::LineupMagicRogue => "LINEUP_MAGIC_ROGUE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "LINEUP_NONE" => Some(Self::LineupNone),
            "LINEUP_CHALLENGE" => Some(Self::LineupChallenge),
            "LINEUP_ROGUE" => Some(Self::LineupRogue),
            "LINEUP_CHALLENGE_2" => Some(Self::LineupChallenge2),
            "LINEUP_CHALLENGE_3" => Some(Self::LineupChallenge3),
            "LINEUP_ROGUE_CHALLENGE" => Some(Self::LineupRogueChallenge),
            "LINEUP_STAGE_TRIAL" => Some(Self::LineupStageTrial),
            "LINEUP_ROGUE_TRIAL" => Some(Self::LineupRogueTrial),
            "LINEUP_ACTIVITY" => Some(Self::LineupActivity),
            "LINEUP_BOXING_CLUB" => Some(Self::LineupBoxingClub),
            "LINEUP_TREASURE_DUNGEON" => Some(Self::LineupTreasureDungeon),
            "LINEUP_CHESS_ROGUE" => Some(Self::LineupChessRogue),
            "LINEUP_HELIOBUS" => Some(Self::LineupHeliobus),
            "LINEUP_TOURN_ROGUE" => Some(Self::LineupTournRogue),
            "LINEUP_RELIC_ROGUE" => Some(Self::LineupRelicRogue),
            "LINEUP_ARCADE_ROGUE" => Some(Self::LineupArcadeRogue),
            "LINEUP_MAGIC_ROGUE" => Some(Self::LineupMagicRogue),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum SyncLineupReason {
    SyncReasonNone = 0,
    SyncReasonMpAdd = 1,
    SyncReasonMpAddPropHit = 2,
    SyncReasonHpAdd = 3,
    SyncReasonHpAddPropHit = 4,
}
impl SyncLineupReason {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::SyncReasonNone => "SYNC_REASON_NONE",
            Self::SyncReasonMpAdd => "SYNC_REASON_MP_ADD",
            Self::SyncReasonMpAddPropHit => "SYNC_REASON_MP_ADD_PROP_HIT",
            Self::SyncReasonHpAdd => "SYNC_REASON_HP_ADD",
            Self::SyncReasonHpAddPropHit => "SYNC_REASON_HP_ADD_PROP_HIT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SYNC_REASON_NONE" => Some(Self::SyncReasonNone),
            "SYNC_REASON_MP_ADD" => Some(Self::SyncReasonMpAdd),
            "SYNC_REASON_MP_ADD_PROP_HIT" => Some(Self::SyncReasonMpAddPropHit),
            "SYNC_REASON_HP_ADD" => Some(Self::SyncReasonHpAdd),
            "SYNC_REASON_HP_ADD_PROP_HIT" => Some(Self::SyncReasonHpAddPropHit),
            _ => None,
        }
    }
}
/// HGGAGPEPKLN
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdLobbyType {
    None = 0,
    CmdLobbyInviteCsReq = 7352,
    CmdLobbyGetInfoScRsp = 7360,
    CmdLobbyModifyPlayerInfoCsReq = 7357,
    CmdLobbyKickOutCsReq = 7375,
    CmdLobbyBeginScRsp = 7383,
    CmdLobbyCreateScRsp = 7387,
    CmdLobbyQuitScRsp = 7382,
    CmdLobbyCreateCsReq = 7376,
    CmdLobbyBeginCsReq = 7356,
    CmdLobbyJoinCsReq = 7391,
    CmdLobbyQuitCsReq = 7354,
    CmdLobbyModifyPlayerInfoScRsp = 7379,
    CmdLobbySyncInfoScNotify = 7380,
    CmdLobbyInviteScNotify = 7364,
    CmdLobbyJoinScRsp = 7393,
    CmdLobbyGetInfoCsReq = 7390,
    CmdLobbyInviteScRsp = 7398,
    CmdLobbyKickOutScRsp = 7365,
}
impl CmdLobbyType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdLobbyTypeNone",
            Self::CmdLobbyInviteCsReq => "CmdLobbyInviteCsReq",
            Self::CmdLobbyGetInfoScRsp => "CmdLobbyGetInfoScRsp",
            Self::CmdLobbyModifyPlayerInfoCsReq => "CmdLobbyModifyPlayerInfoCsReq",
            Self::CmdLobbyKickOutCsReq => "CmdLobbyKickOutCsReq",
            Self::CmdLobbyBeginScRsp => "CmdLobbyBeginScRsp",
            Self::CmdLobbyCreateScRsp => "CmdLobbyCreateScRsp",
            Self::CmdLobbyQuitScRsp => "CmdLobbyQuitScRsp",
            Self::CmdLobbyCreateCsReq => "CmdLobbyCreateCsReq",
            Self::CmdLobbyBeginCsReq => "CmdLobbyBeginCsReq",
            Self::CmdLobbyJoinCsReq => "CmdLobbyJoinCsReq",
            Self::CmdLobbyQuitCsReq => "CmdLobbyQuitCsReq",
            Self::CmdLobbyModifyPlayerInfoScRsp => "CmdLobbyModifyPlayerInfoScRsp",
            Self::CmdLobbySyncInfoScNotify => "CmdLobbySyncInfoScNotify",
            Self::CmdLobbyInviteScNotify => "CmdLobbyInviteScNotify",
            Self::CmdLobbyJoinScRsp => "CmdLobbyJoinScRsp",
            Self::CmdLobbyGetInfoCsReq => "CmdLobbyGetInfoCsReq",
            Self::CmdLobbyInviteScRsp => "CmdLobbyInviteScRsp",
            Self::CmdLobbyKickOutScRsp => "CmdLobbyKickOutScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdLobbyTypeNone" => Some(Self::None),
            "CmdLobbyInviteCsReq" => Some(Self::CmdLobbyInviteCsReq),
            "CmdLobbyGetInfoScRsp" => Some(Self::CmdLobbyGetInfoScRsp),
            "CmdLobbyModifyPlayerInfoCsReq" => Some(Self::CmdLobbyModifyPlayerInfoCsReq),
            "CmdLobbyKickOutCsReq" => Some(Self::CmdLobbyKickOutCsReq),
            "CmdLobbyBeginScRsp" => Some(Self::CmdLobbyBeginScRsp),
            "CmdLobbyCreateScRsp" => Some(Self::CmdLobbyCreateScRsp),
            "CmdLobbyQuitScRsp" => Some(Self::CmdLobbyQuitScRsp),
            "CmdLobbyCreateCsReq" => Some(Self::CmdLobbyCreateCsReq),
            "CmdLobbyBeginCsReq" => Some(Self::CmdLobbyBeginCsReq),
            "CmdLobbyJoinCsReq" => Some(Self::CmdLobbyJoinCsReq),
            "CmdLobbyQuitCsReq" => Some(Self::CmdLobbyQuitCsReq),
            "CmdLobbyModifyPlayerInfoScRsp" => Some(Self::CmdLobbyModifyPlayerInfoScRsp),
            "CmdLobbySyncInfoScNotify" => Some(Self::CmdLobbySyncInfoScNotify),
            "CmdLobbyInviteScNotify" => Some(Self::CmdLobbyInviteScNotify),
            "CmdLobbyJoinScRsp" => Some(Self::CmdLobbyJoinScRsp),
            "CmdLobbyGetInfoCsReq" => Some(Self::CmdLobbyGetInfoCsReq),
            "CmdLobbyInviteScRsp" => Some(Self::CmdLobbyInviteScRsp),
            "CmdLobbyKickOutScRsp" => Some(Self::CmdLobbyKickOutScRsp),
            _ => None,
        }
    }
}
/// EOADFOLDOCJ
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdMailType {
    None = 0,
    CmdTakeMailAttachmentCsReq = 897,
    CmdGetMailScRsp = 868,
    CmdDelMailScRsp = 856,
    CmdGetMailCsReq = 801,
    CmdMarkReadMailScRsp = 824,
    CmdNewMailScNotify = 828,
    CmdMarkReadMailCsReq = 858,
    CmdTakeMailAttachmentScRsp = 876,
    CmdDelMailCsReq = 830,
}
impl CmdMailType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdMailTypeNone",
            Self::CmdTakeMailAttachmentCsReq => "CmdTakeMailAttachmentCsReq",
            Self::CmdGetMailScRsp => "CmdGetMailScRsp",
            Self::CmdDelMailScRsp => "CmdDelMailScRsp",
            Self::CmdGetMailCsReq => "CmdGetMailCsReq",
            Self::CmdMarkReadMailScRsp => "CmdMarkReadMailScRsp",
            Self::CmdNewMailScNotify => "CmdNewMailScNotify",
            Self::CmdMarkReadMailCsReq => "CmdMarkReadMailCsReq",
            Self::CmdTakeMailAttachmentScRsp => "CmdTakeMailAttachmentScRsp",
            Self::CmdDelMailCsReq => "CmdDelMailCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdMailTypeNone" => Some(Self::None),
            "CmdTakeMailAttachmentCsReq" => Some(Self::CmdTakeMailAttachmentCsReq),
            "CmdGetMailScRsp" => Some(Self::CmdGetMailScRsp),
            "CmdDelMailScRsp" => Some(Self::CmdDelMailScRsp),
            "CmdGetMailCsReq" => Some(Self::CmdGetMailCsReq),
            "CmdMarkReadMailScRsp" => Some(Self::CmdMarkReadMailScRsp),
            "CmdNewMailScNotify" => Some(Self::CmdNewMailScNotify),
            "CmdMarkReadMailCsReq" => Some(Self::CmdMarkReadMailCsReq),
            "CmdTakeMailAttachmentScRsp" => Some(Self::CmdTakeMailAttachmentScRsp),
            "CmdDelMailCsReq" => Some(Self::CmdDelMailCsReq),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum MailType {
    Normal = 0,
    Star = 1,
}
impl MailType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Normal => "MAIL_TYPE_NORMAL",
            Self::Star => "MAIL_TYPE_STAR",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MAIL_TYPE_NORMAL" => Some(Self::Normal),
            "MAIL_TYPE_STAR" => Some(Self::Star),
            _ => None,
        }
    }
}
/// CAABCBEELDO
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdMapRotationType {
    None = 0,
    CmdLeaveMapRotationRegionCsReq = 6828,
    CmdUpdateEnergyScNotify = 6880,
    CmdInteractChargerScRsp = 6824,
    CmdRemoveRotaterScRsp = 6823,
    CmdGetMapRotationDataScRsp = 6814,
    CmdRotateMapScRsp = 6876,
    CmdRotateMapCsReq = 6897,
    CmdInteractChargerCsReq = 6858,
    CmdResetMapRotationRegionCsReq = 6849,
    CmdDeployRotaterCsReq = 6830,
    CmdUpdateMapRotationDataScNotify = 6839,
    CmdLeaveMapRotationRegionScNotify = 6847,
    CmdLeaveMapRotationRegionScRsp = 6811,
    CmdEnterMapRotationRegionScRsp = 6868,
    CmdEnterMapRotationRegionCsReq = 6801,
    CmdGetMapRotationDataCsReq = 6805,
    CmdResetMapRotationRegionScRsp = 6822,
    CmdUpdateRotaterScNotify = 6812,
    CmdRemoveRotaterCsReq = 6896,
    CmdDeployRotaterScRsp = 6856,
}
impl CmdMapRotationType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdMapRotationTypeNone",
            Self::CmdLeaveMapRotationRegionCsReq => "CmdLeaveMapRotationRegionCsReq",
            Self::CmdUpdateEnergyScNotify => "CmdUpdateEnergyScNotify",
            Self::CmdInteractChargerScRsp => "CmdInteractChargerScRsp",
            Self::CmdRemoveRotaterScRsp => "CmdRemoveRotaterScRsp",
            Self::CmdGetMapRotationDataScRsp => "CmdGetMapRotationDataScRsp",
            Self::CmdRotateMapScRsp => "CmdRotateMapScRsp",
            Self::CmdRotateMapCsReq => "CmdRotateMapCsReq",
            Self::CmdInteractChargerCsReq => "CmdInteractChargerCsReq",
            Self::CmdResetMapRotationRegionCsReq => "CmdResetMapRotationRegionCsReq",
            Self::CmdDeployRotaterCsReq => "CmdDeployRotaterCsReq",
            Self::CmdUpdateMapRotationDataScNotify => "CmdUpdateMapRotationDataScNotify",
            Self::CmdLeaveMapRotationRegionScNotify => {
                "CmdLeaveMapRotationRegionScNotify"
            }
            Self::CmdLeaveMapRotationRegionScRsp => "CmdLeaveMapRotationRegionScRsp",
            Self::CmdEnterMapRotationRegionScRsp => "CmdEnterMapRotationRegionScRsp",
            Self::CmdEnterMapRotationRegionCsReq => "CmdEnterMapRotationRegionCsReq",
            Self::CmdGetMapRotationDataCsReq => "CmdGetMapRotationDataCsReq",
            Self::CmdResetMapRotationRegionScRsp => "CmdResetMapRotationRegionScRsp",
            Self::CmdUpdateRotaterScNotify => "CmdUpdateRotaterScNotify",
            Self::CmdRemoveRotaterCsReq => "CmdRemoveRotaterCsReq",
            Self::CmdDeployRotaterScRsp => "CmdDeployRotaterScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdMapRotationTypeNone" => Some(Self::None),
            "CmdLeaveMapRotationRegionCsReq" => {
                Some(Self::CmdLeaveMapRotationRegionCsReq)
            }
            "CmdUpdateEnergyScNotify" => Some(Self::CmdUpdateEnergyScNotify),
            "CmdInteractChargerScRsp" => Some(Self::CmdInteractChargerScRsp),
            "CmdRemoveRotaterScRsp" => Some(Self::CmdRemoveRotaterScRsp),
            "CmdGetMapRotationDataScRsp" => Some(Self::CmdGetMapRotationDataScRsp),
            "CmdRotateMapScRsp" => Some(Self::CmdRotateMapScRsp),
            "CmdRotateMapCsReq" => Some(Self::CmdRotateMapCsReq),
            "CmdInteractChargerCsReq" => Some(Self::CmdInteractChargerCsReq),
            "CmdResetMapRotationRegionCsReq" => {
                Some(Self::CmdResetMapRotationRegionCsReq)
            }
            "CmdDeployRotaterCsReq" => Some(Self::CmdDeployRotaterCsReq),
            "CmdUpdateMapRotationDataScNotify" => {
                Some(Self::CmdUpdateMapRotationDataScNotify)
            }
            "CmdLeaveMapRotationRegionScNotify" => {
                Some(Self::CmdLeaveMapRotationRegionScNotify)
            }
            "CmdLeaveMapRotationRegionScRsp" => {
                Some(Self::CmdLeaveMapRotationRegionScRsp)
            }
            "CmdEnterMapRotationRegionScRsp" => {
                Some(Self::CmdEnterMapRotationRegionScRsp)
            }
            "CmdEnterMapRotationRegionCsReq" => {
                Some(Self::CmdEnterMapRotationRegionCsReq)
            }
            "CmdGetMapRotationDataCsReq" => Some(Self::CmdGetMapRotationDataCsReq),
            "CmdResetMapRotationRegionScRsp" => {
                Some(Self::CmdResetMapRotationRegionScRsp)
            }
            "CmdUpdateRotaterScNotify" => Some(Self::CmdUpdateRotaterScNotify),
            "CmdRemoveRotaterCsReq" => Some(Self::CmdRemoveRotaterCsReq),
            "CmdDeployRotaterScRsp" => Some(Self::CmdDeployRotaterScRsp),
            _ => None,
        }
    }
}
/// GODAKGNEGMM
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdMarkChestType {
    None = 0,
    CmdGetMarkChestCsReq = 8197,
    CmdUpdateMarkChestScRsp = 8182,
    CmdGetMarkChestScRsp = 8188,
    CmdMarkChestChangedScNotify = 8184,
    CmdUpdateMarkChestCsReq = 8192,
}
impl CmdMarkChestType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdMarkChestTypeNone",
            Self::CmdGetMarkChestCsReq => "CmdGetMarkChestCsReq",
            Self::CmdUpdateMarkChestScRsp => "CmdUpdateMarkChestScRsp",
            Self::CmdGetMarkChestScRsp => "CmdGetMarkChestScRsp",
            Self::CmdMarkChestChangedScNotify => "CmdMarkChestChangedScNotify",
            Self::CmdUpdateMarkChestCsReq => "CmdUpdateMarkChestCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdMarkChestTypeNone" => Some(Self::None),
            "CmdGetMarkChestCsReq" => Some(Self::CmdGetMarkChestCsReq),
            "CmdUpdateMarkChestScRsp" => Some(Self::CmdUpdateMarkChestScRsp),
            "CmdGetMarkChestScRsp" => Some(Self::CmdGetMarkChestScRsp),
            "CmdMarkChestChangedScNotify" => Some(Self::CmdMarkChestChangedScNotify),
            "CmdUpdateMarkChestCsReq" => Some(Self::CmdUpdateMarkChestCsReq),
            _ => None,
        }
    }
}
/// CMNBDIABCMK
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdMatchType {
    None = 0,
    CmdGetCrossInfoCsReq = 7333,
    CmdMatchResultScNotify = 7306,
    CmdStartMatchCsReq = 7326,
    CmdCancelMatchScRsp = 7343,
    CmdGetCrossInfoScRsp = 7307,
    CmdStartMatchScRsp = 7337,
    CmdCancelMatchCsReq = 7341,
}
impl CmdMatchType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdMatchTypeNone",
            Self::CmdGetCrossInfoCsReq => "CmdGetCrossInfoCsReq",
            Self::CmdMatchResultScNotify => "CmdMatchResultScNotify",
            Self::CmdStartMatchCsReq => "CmdStartMatchCsReq",
            Self::CmdCancelMatchScRsp => "CmdCancelMatchScRsp",
            Self::CmdGetCrossInfoScRsp => "CmdGetCrossInfoScRsp",
            Self::CmdStartMatchScRsp => "CmdStartMatchScRsp",
            Self::CmdCancelMatchCsReq => "CmdCancelMatchCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdMatchTypeNone" => Some(Self::None),
            "CmdGetCrossInfoCsReq" => Some(Self::CmdGetCrossInfoCsReq),
            "CmdMatchResultScNotify" => Some(Self::CmdMatchResultScNotify),
            "CmdStartMatchCsReq" => Some(Self::CmdStartMatchCsReq),
            "CmdCancelMatchScRsp" => Some(Self::CmdCancelMatchScRsp),
            "CmdGetCrossInfoScRsp" => Some(Self::CmdGetCrossInfoScRsp),
            "CmdStartMatchScRsp" => Some(Self::CmdStartMatchScRsp),
            "CmdCancelMatchCsReq" => Some(Self::CmdCancelMatchCsReq),
            _ => None,
        }
    }
}
/// GIPAEBEPNNJ
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdMatchThreeModuleType {
    None = 0,
    CmdMatchThreeSyncDataScNotify = 7406,
    CmdMatchThreeLevelEndCsReq = 7441,
    CmdMatchThreeGetDataScRsp = 7437,
    CmdMatchThreeLevelEndScRsp = 7443,
    CmdMatchThreeSetBirdPosCsReq = 7433,
    CmdMatchThreeSetBirdPosScRsp = 7407,
    CmdMatchThreeGetDataCsReq = 7426,
}
impl CmdMatchThreeModuleType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdMatchThreeModuleTypeNone",
            Self::CmdMatchThreeSyncDataScNotify => "CmdMatchThreeSyncDataScNotify",
            Self::CmdMatchThreeLevelEndCsReq => "CmdMatchThreeLevelEndCsReq",
            Self::CmdMatchThreeGetDataScRsp => "CmdMatchThreeGetDataScRsp",
            Self::CmdMatchThreeLevelEndScRsp => "CmdMatchThreeLevelEndScRsp",
            Self::CmdMatchThreeSetBirdPosCsReq => "CmdMatchThreeSetBirdPosCsReq",
            Self::CmdMatchThreeSetBirdPosScRsp => "CmdMatchThreeSetBirdPosScRsp",
            Self::CmdMatchThreeGetDataCsReq => "CmdMatchThreeGetDataCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdMatchThreeModuleTypeNone" => Some(Self::None),
            "CmdMatchThreeSyncDataScNotify" => Some(Self::CmdMatchThreeSyncDataScNotify),
            "CmdMatchThreeLevelEndCsReq" => Some(Self::CmdMatchThreeLevelEndCsReq),
            "CmdMatchThreeGetDataScRsp" => Some(Self::CmdMatchThreeGetDataScRsp),
            "CmdMatchThreeLevelEndScRsp" => Some(Self::CmdMatchThreeLevelEndScRsp),
            "CmdMatchThreeSetBirdPosCsReq" => Some(Self::CmdMatchThreeSetBirdPosCsReq),
            "CmdMatchThreeSetBirdPosScRsp" => Some(Self::CmdMatchThreeSetBirdPosScRsp),
            "CmdMatchThreeGetDataCsReq" => Some(Self::CmdMatchThreeGetDataCsReq),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Ajddhbhmoof {
    MatchThreeStatisticsNone = 0,
    MatchThreeStatisticsFirst = 1,
    MatchThreeStatisticsSecond = 2,
    MatchThreeStatisticsThird = 3,
    MatchThreeStatisticsFruit = 4,
    MatchThreeStatisticsSkill = 5,
    MatchThreeStatisticsDefeat = 6,
    MatchThreeStatisticsBomb = 7,
    MatchThreeStatisticsDamage = 8,
    MatchThreeStatisticsEnergy = 9,
    MatchThreeStatisticsSwapBomb = 10,
}
impl Ajddhbhmoof {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::MatchThreeStatisticsNone => "MatchThreeStatistics_None",
            Self::MatchThreeStatisticsFirst => "MatchThreeStatistics_First",
            Self::MatchThreeStatisticsSecond => "MatchThreeStatistics_Second",
            Self::MatchThreeStatisticsThird => "MatchThreeStatistics_Third",
            Self::MatchThreeStatisticsFruit => "MatchThreeStatistics_Fruit",
            Self::MatchThreeStatisticsSkill => "MatchThreeStatistics_Skill",
            Self::MatchThreeStatisticsDefeat => "MatchThreeStatistics_Defeat",
            Self::MatchThreeStatisticsBomb => "MatchThreeStatistics_Bomb",
            Self::MatchThreeStatisticsDamage => "MatchThreeStatistics_Damage",
            Self::MatchThreeStatisticsEnergy => "MatchThreeStatistics_Energy",
            Self::MatchThreeStatisticsSwapBomb => "MatchThreeStatistics_SwapBomb",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MatchThreeStatistics_None" => Some(Self::MatchThreeStatisticsNone),
            "MatchThreeStatistics_First" => Some(Self::MatchThreeStatisticsFirst),
            "MatchThreeStatistics_Second" => Some(Self::MatchThreeStatisticsSecond),
            "MatchThreeStatistics_Third" => Some(Self::MatchThreeStatisticsThird),
            "MatchThreeStatistics_Fruit" => Some(Self::MatchThreeStatisticsFruit),
            "MatchThreeStatistics_Skill" => Some(Self::MatchThreeStatisticsSkill),
            "MatchThreeStatistics_Defeat" => Some(Self::MatchThreeStatisticsDefeat),
            "MatchThreeStatistics_Bomb" => Some(Self::MatchThreeStatisticsBomb),
            "MatchThreeStatistics_Damage" => Some(Self::MatchThreeStatisticsDamage),
            "MatchThreeStatistics_Energy" => Some(Self::MatchThreeStatisticsEnergy),
            "MatchThreeStatistics_SwapBomb" => Some(Self::MatchThreeStatisticsSwapBomb),
            _ => None,
        }
    }
}
/// MMOLEKJKOHN
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdMessageType {
    None = 0,
    CmdGetNpcStatusCsReq = 2758,
    CmdGetNpcStatusScRsp = 2724,
    CmdGetMissionMessageInfoCsReq = 2705,
    CmdFinishSectionIdCsReq = 2797,
    CmdGetNpcMessageGroupScRsp = 2768,
    CmdFinishItemIdCsReq = 2730,
    CmdGetMissionMessageInfoScRsp = 2714,
    CmdFinishItemIdScRsp = 2756,
    CmdFinishPerformSectionIdScRsp = 2711,
    CmdFinishSectionIdScRsp = 2776,
    CmdGetNpcMessageGroupCsReq = 2701,
    CmdFinishPerformSectionIdCsReq = 2728,
}
impl CmdMessageType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdMessageTypeNone",
            Self::CmdGetNpcStatusCsReq => "CmdGetNpcStatusCsReq",
            Self::CmdGetNpcStatusScRsp => "CmdGetNpcStatusScRsp",
            Self::CmdGetMissionMessageInfoCsReq => "CmdGetMissionMessageInfoCsReq",
            Self::CmdFinishSectionIdCsReq => "CmdFinishSectionIdCsReq",
            Self::CmdGetNpcMessageGroupScRsp => "CmdGetNpcMessageGroupScRsp",
            Self::CmdFinishItemIdCsReq => "CmdFinishItemIdCsReq",
            Self::CmdGetMissionMessageInfoScRsp => "CmdGetMissionMessageInfoScRsp",
            Self::CmdFinishItemIdScRsp => "CmdFinishItemIdScRsp",
            Self::CmdFinishPerformSectionIdScRsp => "CmdFinishPerformSectionIdScRsp",
            Self::CmdFinishSectionIdScRsp => "CmdFinishSectionIdScRsp",
            Self::CmdGetNpcMessageGroupCsReq => "CmdGetNpcMessageGroupCsReq",
            Self::CmdFinishPerformSectionIdCsReq => "CmdFinishPerformSectionIdCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdMessageTypeNone" => Some(Self::None),
            "CmdGetNpcStatusCsReq" => Some(Self::CmdGetNpcStatusCsReq),
            "CmdGetNpcStatusScRsp" => Some(Self::CmdGetNpcStatusScRsp),
            "CmdGetMissionMessageInfoCsReq" => Some(Self::CmdGetMissionMessageInfoCsReq),
            "CmdFinishSectionIdCsReq" => Some(Self::CmdFinishSectionIdCsReq),
            "CmdGetNpcMessageGroupScRsp" => Some(Self::CmdGetNpcMessageGroupScRsp),
            "CmdFinishItemIdCsReq" => Some(Self::CmdFinishItemIdCsReq),
            "CmdGetMissionMessageInfoScRsp" => Some(Self::CmdGetMissionMessageInfoScRsp),
            "CmdFinishItemIdScRsp" => Some(Self::CmdFinishItemIdScRsp),
            "CmdFinishPerformSectionIdScRsp" => {
                Some(Self::CmdFinishPerformSectionIdScRsp)
            }
            "CmdFinishSectionIdScRsp" => Some(Self::CmdFinishSectionIdScRsp),
            "CmdGetNpcMessageGroupCsReq" => Some(Self::CmdGetNpcMessageGroupCsReq),
            "CmdFinishPerformSectionIdCsReq" => {
                Some(Self::CmdFinishPerformSectionIdCsReq)
            }
            _ => None,
        }
    }
}
/// HHLNLNJIEKE
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdMiscModuleType {
    None = 0,
    CmdTakePictureCsReq = 4130,
    CmdUpdateGunPlayDataScRsp = 4120,
    CmdDifficultyAdjustmentGetDataScRsp = 4170,
    CmdShareCsReq = 4101,
    CmdTriggerVoiceCsReq = 4149,
    CmdGetGunPlayDataScRsp = 4148,
    CmdMazeKillDirectScRsp = 4182,
    CmdGetShareDataScRsp = 4124,
    CmdTriggerVoiceScRsp = 4122,
    CmdSecurityReportScRsp = 4114,
    CmdGetMovieRacingDataCsReq = 4117,
    CmdGetGunPlayDataCsReq = 4150,
    CmdDifficultyAdjustmentGetDataCsReq = 4192,
    CmdCancelCacheNotifyScRsp = 4111,
    CmdUpdateMovieRacingDataCsReq = 4118,
    CmdUpdateMovieRacingDataScRsp = 4195,
    CmdGetMovieRacingDataScRsp = 4191,
    CmdGetShareDataCsReq = 4158,
    CmdCancelCacheNotifyCsReq = 4128,
    CmdUpdateGunPlayDataCsReq = 4169,
    CmdDifficultyAdjustmentUpdateDataCsReq = 4181,
    CmdSubmitOrigamiItemScRsp = 4180,
    CmdSecurityReportCsReq = 4105,
    CmdShareScRsp = 4168,
    CmdSubmitOrigamiItemCsReq = 4147,
    CmdMazeKillDirectCsReq = 4119,
    CmdDifficultyAdjustmentUpdateDataScRsp = 4138,
    CmdTakePictureScRsp = 4156,
}
impl CmdMiscModuleType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdMiscModuleTypeNone",
            Self::CmdTakePictureCsReq => "CmdTakePictureCsReq",
            Self::CmdUpdateGunPlayDataScRsp => "CmdUpdateGunPlayDataScRsp",
            Self::CmdDifficultyAdjustmentGetDataScRsp => {
                "CmdDifficultyAdjustmentGetDataScRsp"
            }
            Self::CmdShareCsReq => "CmdShareCsReq",
            Self::CmdTriggerVoiceCsReq => "CmdTriggerVoiceCsReq",
            Self::CmdGetGunPlayDataScRsp => "CmdGetGunPlayDataScRsp",
            Self::CmdMazeKillDirectScRsp => "CmdMazeKillDirectScRsp",
            Self::CmdGetShareDataScRsp => "CmdGetShareDataScRsp",
            Self::CmdTriggerVoiceScRsp => "CmdTriggerVoiceScRsp",
            Self::CmdSecurityReportScRsp => "CmdSecurityReportScRsp",
            Self::CmdGetMovieRacingDataCsReq => "CmdGetMovieRacingDataCsReq",
            Self::CmdGetGunPlayDataCsReq => "CmdGetGunPlayDataCsReq",
            Self::CmdDifficultyAdjustmentGetDataCsReq => {
                "CmdDifficultyAdjustmentGetDataCsReq"
            }
            Self::CmdCancelCacheNotifyScRsp => "CmdCancelCacheNotifyScRsp",
            Self::CmdUpdateMovieRacingDataCsReq => "CmdUpdateMovieRacingDataCsReq",
            Self::CmdUpdateMovieRacingDataScRsp => "CmdUpdateMovieRacingDataScRsp",
            Self::CmdGetMovieRacingDataScRsp => "CmdGetMovieRacingDataScRsp",
            Self::CmdGetShareDataCsReq => "CmdGetShareDataCsReq",
            Self::CmdCancelCacheNotifyCsReq => "CmdCancelCacheNotifyCsReq",
            Self::CmdUpdateGunPlayDataCsReq => "CmdUpdateGunPlayDataCsReq",
            Self::CmdDifficultyAdjustmentUpdateDataCsReq => {
                "CmdDifficultyAdjustmentUpdateDataCsReq"
            }
            Self::CmdSubmitOrigamiItemScRsp => "CmdSubmitOrigamiItemScRsp",
            Self::CmdSecurityReportCsReq => "CmdSecurityReportCsReq",
            Self::CmdShareScRsp => "CmdShareScRsp",
            Self::CmdSubmitOrigamiItemCsReq => "CmdSubmitOrigamiItemCsReq",
            Self::CmdMazeKillDirectCsReq => "CmdMazeKillDirectCsReq",
            Self::CmdDifficultyAdjustmentUpdateDataScRsp => {
                "CmdDifficultyAdjustmentUpdateDataScRsp"
            }
            Self::CmdTakePictureScRsp => "CmdTakePictureScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdMiscModuleTypeNone" => Some(Self::None),
            "CmdTakePictureCsReq" => Some(Self::CmdTakePictureCsReq),
            "CmdUpdateGunPlayDataScRsp" => Some(Self::CmdUpdateGunPlayDataScRsp),
            "CmdDifficultyAdjustmentGetDataScRsp" => {
                Some(Self::CmdDifficultyAdjustmentGetDataScRsp)
            }
            "CmdShareCsReq" => Some(Self::CmdShareCsReq),
            "CmdTriggerVoiceCsReq" => Some(Self::CmdTriggerVoiceCsReq),
            "CmdGetGunPlayDataScRsp" => Some(Self::CmdGetGunPlayDataScRsp),
            "CmdMazeKillDirectScRsp" => Some(Self::CmdMazeKillDirectScRsp),
            "CmdGetShareDataScRsp" => Some(Self::CmdGetShareDataScRsp),
            "CmdTriggerVoiceScRsp" => Some(Self::CmdTriggerVoiceScRsp),
            "CmdSecurityReportScRsp" => Some(Self::CmdSecurityReportScRsp),
            "CmdGetMovieRacingDataCsReq" => Some(Self::CmdGetMovieRacingDataCsReq),
            "CmdGetGunPlayDataCsReq" => Some(Self::CmdGetGunPlayDataCsReq),
            "CmdDifficultyAdjustmentGetDataCsReq" => {
                Some(Self::CmdDifficultyAdjustmentGetDataCsReq)
            }
            "CmdCancelCacheNotifyScRsp" => Some(Self::CmdCancelCacheNotifyScRsp),
            "CmdUpdateMovieRacingDataCsReq" => Some(Self::CmdUpdateMovieRacingDataCsReq),
            "CmdUpdateMovieRacingDataScRsp" => Some(Self::CmdUpdateMovieRacingDataScRsp),
            "CmdGetMovieRacingDataScRsp" => Some(Self::CmdGetMovieRacingDataScRsp),
            "CmdGetShareDataCsReq" => Some(Self::CmdGetShareDataCsReq),
            "CmdCancelCacheNotifyCsReq" => Some(Self::CmdCancelCacheNotifyCsReq),
            "CmdUpdateGunPlayDataCsReq" => Some(Self::CmdUpdateGunPlayDataCsReq),
            "CmdDifficultyAdjustmentUpdateDataCsReq" => {
                Some(Self::CmdDifficultyAdjustmentUpdateDataCsReq)
            }
            "CmdSubmitOrigamiItemScRsp" => Some(Self::CmdSubmitOrigamiItemScRsp),
            "CmdSecurityReportCsReq" => Some(Self::CmdSecurityReportCsReq),
            "CmdShareScRsp" => Some(Self::CmdShareScRsp),
            "CmdSubmitOrigamiItemCsReq" => Some(Self::CmdSubmitOrigamiItemCsReq),
            "CmdMazeKillDirectCsReq" => Some(Self::CmdMazeKillDirectCsReq),
            "CmdDifficultyAdjustmentUpdateDataScRsp" => {
                Some(Self::CmdDifficultyAdjustmentUpdateDataScRsp)
            }
            "CmdTakePictureScRsp" => Some(Self::CmdTakePictureScRsp),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CancelNotifyType {
    CacheNotifyTypeNone = 0,
    CacheNotifyTypeRecycle = 1,
    CacheNotifyTypeRecharge = 2,
}
impl CancelNotifyType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::CacheNotifyTypeNone => "CACHE_NOTIFY_TYPE_NONE",
            Self::CacheNotifyTypeRecycle => "CACHE_NOTIFY_TYPE_RECYCLE",
            Self::CacheNotifyTypeRecharge => "CACHE_NOTIFY_TYPE_RECHARGE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CACHE_NOTIFY_TYPE_NONE" => Some(Self::CacheNotifyTypeNone),
            "CACHE_NOTIFY_TYPE_RECYCLE" => Some(Self::CacheNotifyTypeRecycle),
            "CACHE_NOTIFY_TYPE_RECHARGE" => Some(Self::CacheNotifyTypeRecharge),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Dcadlnjbkbk {
    MovieRacingOverTake = 0,
    MovieRacingOverTakeEndless = 1,
    MovieRacingShooting = 2,
    MovieRacingShootingEndless = 3,
}
impl Dcadlnjbkbk {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::MovieRacingOverTake => "MOVIE_RACING_OVER_TAKE",
            Self::MovieRacingOverTakeEndless => "MOVIE_RACING_OVER_TAKE_ENDLESS",
            Self::MovieRacingShooting => "MOVIE_RACING_SHOOTING",
            Self::MovieRacingShootingEndless => "MOVIE_RACING_SHOOTING_ENDLESS",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MOVIE_RACING_OVER_TAKE" => Some(Self::MovieRacingOverTake),
            "MOVIE_RACING_OVER_TAKE_ENDLESS" => Some(Self::MovieRacingOverTakeEndless),
            "MOVIE_RACING_SHOOTING" => Some(Self::MovieRacingShooting),
            "MOVIE_RACING_SHOOTING_ENDLESS" => Some(Self::MovieRacingShootingEndless),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Fjhikfikamo {
    DifficultyAjustmentTypeDefault = 0,
    DifficultyAjustmentTypeEasy = 1,
}
impl Fjhikfikamo {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::DifficultyAjustmentTypeDefault => "DIFFICULTY_AJUSTMENT_TYPE_DEFAULT",
            Self::DifficultyAjustmentTypeEasy => "DIFFICULTY_AJUSTMENT_TYPE_EASY",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "DIFFICULTY_AJUSTMENT_TYPE_DEFAULT" => {
                Some(Self::DifficultyAjustmentTypeDefault)
            }
            "DIFFICULTY_AJUSTMENT_TYPE_EASY" => Some(Self::DifficultyAjustmentTypeEasy),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Giilenmkcah {
    DifficultyAjustmentSourceNone = 0,
    DifficultyAjustmentSourceRaid = 1,
    DifficultyAjustmentSourceEvent = 2,
}
impl Giilenmkcah {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::DifficultyAjustmentSourceNone => "DIFFICULTY_AJUSTMENT_SOURCE_NONE",
            Self::DifficultyAjustmentSourceRaid => "DIFFICULTY_AJUSTMENT_SOURCE_RAID",
            Self::DifficultyAjustmentSourceEvent => "DIFFICULTY_AJUSTMENT_SOURCE_EVENT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "DIFFICULTY_AJUSTMENT_SOURCE_NONE" => {
                Some(Self::DifficultyAjustmentSourceNone)
            }
            "DIFFICULTY_AJUSTMENT_SOURCE_RAID" => {
                Some(Self::DifficultyAjustmentSourceRaid)
            }
            "DIFFICULTY_AJUSTMENT_SOURCE_EVENT" => {
                Some(Self::DifficultyAjustmentSourceEvent)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Mnijhmepgnn {
    MazeKillSourceNone = 0,
    MazeKillSourceSwitchHand = 1,
    MazeKillSourceTimeLine = 2,
}
impl Mnijhmepgnn {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::MazeKillSourceNone => "MAZE_KILL_SOURCE_NONE",
            Self::MazeKillSourceSwitchHand => "MAZE_KILL_SOURCE_SWITCH_HAND",
            Self::MazeKillSourceTimeLine => "MAZE_KILL_SOURCE_TIME_LINE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MAZE_KILL_SOURCE_NONE" => Some(Self::MazeKillSourceNone),
            "MAZE_KILL_SOURCE_SWITCH_HAND" => Some(Self::MazeKillSourceSwitchHand),
            "MAZE_KILL_SOURCE_TIME_LINE" => Some(Self::MazeKillSourceTimeLine),
            _ => None,
        }
    }
}
/// KHKMAFONKBD
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdMissionType {
    None = 0,
    CmdFinishTalkMissionCsReq = 1258,
    CmdFinishCosumeItemMissionCsReq = 1249,
    CmdGetMainMissionCustomValueScRsp = 1282,
    CmdStartFinishMainMissionScNotify = 1270,
    CmdMissionRewardScNotify = 1230,
    CmdGetMissionDataCsReq = 1201,
    CmdUpdateTrackMainMissionIdCsReq = 1273,
    CmdFinishedMissionScNotify = 1203,
    CmdGetMainMissionCustomValueCsReq = 1219,
    CmdFinishCosumeItemMissionScRsp = 1222,
    CmdFinishTalkMissionScRsp = 1224,
    CmdGetMissionStatusScRsp = 1217,
    CmdStartFinishSubMissionScNotify = 1292,
    CmdGetMissionStatusCsReq = 1212,
    CmdSyncTaskScRsp = 1297,
    CmdAcceptMainMissionCsReq = 1281,
    CmdTeleportToMissionResetPointCsReq = 1269,
    CmdSyncTaskCsReq = 1256,
    CmdGetMissionDataScRsp = 1268,
    CmdMissionGroupWarnScNotify = 1214,
    CmdMissionAcceptScNotify = 1259,
    CmdTeleportToMissionResetPointScRsp = 1220,
    CmdAcceptMainMissionScRsp = 1238,
    CmdSubMissionRewardScNotify = 1248,
    CmdUpdateTrackMainMissionIdScRsp = 1240,
}
impl CmdMissionType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdMissionTypeNone",
            Self::CmdFinishTalkMissionCsReq => "CmdFinishTalkMissionCsReq",
            Self::CmdFinishCosumeItemMissionCsReq => "CmdFinishCosumeItemMissionCsReq",
            Self::CmdGetMainMissionCustomValueScRsp => {
                "CmdGetMainMissionCustomValueScRsp"
            }
            Self::CmdStartFinishMainMissionScNotify => {
                "CmdStartFinishMainMissionScNotify"
            }
            Self::CmdMissionRewardScNotify => "CmdMissionRewardScNotify",
            Self::CmdGetMissionDataCsReq => "CmdGetMissionDataCsReq",
            Self::CmdUpdateTrackMainMissionIdCsReq => "CmdUpdateTrackMainMissionIdCsReq",
            Self::CmdFinishedMissionScNotify => "CmdFinishedMissionScNotify",
            Self::CmdGetMainMissionCustomValueCsReq => {
                "CmdGetMainMissionCustomValueCsReq"
            }
            Self::CmdFinishCosumeItemMissionScRsp => "CmdFinishCosumeItemMissionScRsp",
            Self::CmdFinishTalkMissionScRsp => "CmdFinishTalkMissionScRsp",
            Self::CmdGetMissionStatusScRsp => "CmdGetMissionStatusScRsp",
            Self::CmdStartFinishSubMissionScNotify => "CmdStartFinishSubMissionScNotify",
            Self::CmdGetMissionStatusCsReq => "CmdGetMissionStatusCsReq",
            Self::CmdSyncTaskScRsp => "CmdSyncTaskScRsp",
            Self::CmdAcceptMainMissionCsReq => "CmdAcceptMainMissionCsReq",
            Self::CmdTeleportToMissionResetPointCsReq => {
                "CmdTeleportToMissionResetPointCsReq"
            }
            Self::CmdSyncTaskCsReq => "CmdSyncTaskCsReq",
            Self::CmdGetMissionDataScRsp => "CmdGetMissionDataScRsp",
            Self::CmdMissionGroupWarnScNotify => "CmdMissionGroupWarnScNotify",
            Self::CmdMissionAcceptScNotify => "CmdMissionAcceptScNotify",
            Self::CmdTeleportToMissionResetPointScRsp => {
                "CmdTeleportToMissionResetPointScRsp"
            }
            Self::CmdAcceptMainMissionScRsp => "CmdAcceptMainMissionScRsp",
            Self::CmdSubMissionRewardScNotify => "CmdSubMissionRewardScNotify",
            Self::CmdUpdateTrackMainMissionIdScRsp => "CmdUpdateTrackMainMissionIdScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdMissionTypeNone" => Some(Self::None),
            "CmdFinishTalkMissionCsReq" => Some(Self::CmdFinishTalkMissionCsReq),
            "CmdFinishCosumeItemMissionCsReq" => {
                Some(Self::CmdFinishCosumeItemMissionCsReq)
            }
            "CmdGetMainMissionCustomValueScRsp" => {
                Some(Self::CmdGetMainMissionCustomValueScRsp)
            }
            "CmdStartFinishMainMissionScNotify" => {
                Some(Self::CmdStartFinishMainMissionScNotify)
            }
            "CmdMissionRewardScNotify" => Some(Self::CmdMissionRewardScNotify),
            "CmdGetMissionDataCsReq" => Some(Self::CmdGetMissionDataCsReq),
            "CmdUpdateTrackMainMissionIdCsReq" => {
                Some(Self::CmdUpdateTrackMainMissionIdCsReq)
            }
            "CmdFinishedMissionScNotify" => Some(Self::CmdFinishedMissionScNotify),
            "CmdGetMainMissionCustomValueCsReq" => {
                Some(Self::CmdGetMainMissionCustomValueCsReq)
            }
            "CmdFinishCosumeItemMissionScRsp" => {
                Some(Self::CmdFinishCosumeItemMissionScRsp)
            }
            "CmdFinishTalkMissionScRsp" => Some(Self::CmdFinishTalkMissionScRsp),
            "CmdGetMissionStatusScRsp" => Some(Self::CmdGetMissionStatusScRsp),
            "CmdStartFinishSubMissionScNotify" => {
                Some(Self::CmdStartFinishSubMissionScNotify)
            }
            "CmdGetMissionStatusCsReq" => Some(Self::CmdGetMissionStatusCsReq),
            "CmdSyncTaskScRsp" => Some(Self::CmdSyncTaskScRsp),
            "CmdAcceptMainMissionCsReq" => Some(Self::CmdAcceptMainMissionCsReq),
            "CmdTeleportToMissionResetPointCsReq" => {
                Some(Self::CmdTeleportToMissionResetPointCsReq)
            }
            "CmdSyncTaskCsReq" => Some(Self::CmdSyncTaskCsReq),
            "CmdGetMissionDataScRsp" => Some(Self::CmdGetMissionDataScRsp),
            "CmdMissionGroupWarnScNotify" => Some(Self::CmdMissionGroupWarnScNotify),
            "CmdMissionAcceptScNotify" => Some(Self::CmdMissionAcceptScNotify),
            "CmdTeleportToMissionResetPointScRsp" => {
                Some(Self::CmdTeleportToMissionResetPointScRsp)
            }
            "CmdAcceptMainMissionScRsp" => Some(Self::CmdAcceptMainMissionScRsp),
            "CmdSubMissionRewardScNotify" => Some(Self::CmdSubMissionRewardScNotify),
            "CmdUpdateTrackMainMissionIdScRsp" => {
                Some(Self::CmdUpdateTrackMainMissionIdScRsp)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum MissionSyncRecord {
    None = 0,
    MainMissionAccept = 1,
    MainMissionStart = 2,
    MainMissionFinish = 3,
    MainMissionDelete = 4,
    MissionAccept = 11,
    MissionStart = 12,
    MissionFinish = 13,
    MissionDelete = 14,
    MissionProgress = 15,
}
impl MissionSyncRecord {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "MISSION_SYNC_RECORD_NONE",
            Self::MainMissionAccept => "MISSION_SYNC_RECORD_MAIN_MISSION_ACCEPT",
            Self::MainMissionStart => "MISSION_SYNC_RECORD_MAIN_MISSION_START",
            Self::MainMissionFinish => "MISSION_SYNC_RECORD_MAIN_MISSION_FINISH",
            Self::MainMissionDelete => "MISSION_SYNC_RECORD_MAIN_MISSION_DELETE",
            Self::MissionAccept => "MISSION_SYNC_RECORD_MISSION_ACCEPT",
            Self::MissionStart => "MISSION_SYNC_RECORD_MISSION_START",
            Self::MissionFinish => "MISSION_SYNC_RECORD_MISSION_FINISH",
            Self::MissionDelete => "MISSION_SYNC_RECORD_MISSION_DELETE",
            Self::MissionProgress => "MISSION_SYNC_RECORD_MISSION_PROGRESS",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MISSION_SYNC_RECORD_NONE" => Some(Self::None),
            "MISSION_SYNC_RECORD_MAIN_MISSION_ACCEPT" => Some(Self::MainMissionAccept),
            "MISSION_SYNC_RECORD_MAIN_MISSION_START" => Some(Self::MainMissionStart),
            "MISSION_SYNC_RECORD_MAIN_MISSION_FINISH" => Some(Self::MainMissionFinish),
            "MISSION_SYNC_RECORD_MAIN_MISSION_DELETE" => Some(Self::MainMissionDelete),
            "MISSION_SYNC_RECORD_MISSION_ACCEPT" => Some(Self::MissionAccept),
            "MISSION_SYNC_RECORD_MISSION_START" => Some(Self::MissionStart),
            "MISSION_SYNC_RECORD_MISSION_FINISH" => Some(Self::MissionFinish),
            "MISSION_SYNC_RECORD_MISSION_DELETE" => Some(Self::MissionDelete),
            "MISSION_SYNC_RECORD_MISSION_PROGRESS" => Some(Self::MissionProgress),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Gjpkmnefcfo {
    MainMissionSyncNone = 0,
    MainMissionSyncMcv = 1,
}
impl Gjpkmnefcfo {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::MainMissionSyncNone => "MAIN_MISSION_SYNC_NONE",
            Self::MainMissionSyncMcv => "MAIN_MISSION_SYNC_MCV",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MAIN_MISSION_SYNC_NONE" => Some(Self::MainMissionSyncNone),
            "MAIN_MISSION_SYNC_MCV" => Some(Self::MainMissionSyncMcv),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum TrackMainMissionUpdateReasonId {
    TrackMainMissionUpdateNone = 0,
    TrackMainMissionUpdateAuto = 1,
    TrackMainMissionUpdateManual = 2,
    TrackMainMissionUpdateLoginReport = 3,
}
impl TrackMainMissionUpdateReasonId {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::TrackMainMissionUpdateNone => "TRACK_MAIN_MISSION_UPDATE_NONE",
            Self::TrackMainMissionUpdateAuto => "TRACK_MAIN_MISSION_UPDATE_AUTO",
            Self::TrackMainMissionUpdateManual => "TRACK_MAIN_MISSION_UPDATE_MANUAL",
            Self::TrackMainMissionUpdateLoginReport => {
                "TRACK_MAIN_MISSION_UPDATE_LOGIN_REPORT"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "TRACK_MAIN_MISSION_UPDATE_NONE" => Some(Self::TrackMainMissionUpdateNone),
            "TRACK_MAIN_MISSION_UPDATE_AUTO" => Some(Self::TrackMainMissionUpdateAuto),
            "TRACK_MAIN_MISSION_UPDATE_MANUAL" => {
                Some(Self::TrackMainMissionUpdateManual)
            }
            "TRACK_MAIN_MISSION_UPDATE_LOGIN_REPORT" => {
                Some(Self::TrackMainMissionUpdateLoginReport)
            }
            _ => None,
        }
    }
}
/// OBAKFMLNFJK
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdMonopolyType {
    None = 0,
    CmdMonopolyCheatDiceCsReq = 7069,
    CmdMonopolyGameBingoFlipCardScRsp = 7041,
    CmdMonopolyRollRandomCsReq = 7047,
    CmdMonopolyRollRandomScRsp = 7080,
    CmdMonopolyAcceptQuizCsReq = 7073,
    CmdMonopolyGameBingoFlipCardCsReq = 7059,
    CmdMonopolyGameCreateScNotify = 7003,
    CmdMonopolyClickCellScRsp = 7099,
    CmdMonopolyGiveUpCurContentScRsp = 7048,
    CmdMonopolySelectOptionScRsp = 7005,
    CmdMonopolyClickCellCsReq = 7035,
    CmdGetMonopolyInfoCsReq = 7001,
    CmdMonopolyGetRaffleTicketCsReq = 7084,
    CmdMonopolyCheatDiceScRsp = 7020,
    CmdMonopolyRollDiceScRsp = 7097,
    CmdMonopolyGameGachaCsReq = 7019,
    CmdMonopolyGameSettleScNotify = 7038,
    CmdMonopolyCellUpdateNotify = 7024,
    CmdMonopolyQuizDurationChangeScNotify = 7029,
    CmdGetSocialEventServerCacheCsReq = 7065,
    CmdMonopolyConfirmRandomCsReq = 7023,
    CmdMonopolyReRollRandomCsReq = 7039,
    CmdMonopolyTakeRaffleTicketRewardCsReq = 7034,
    CmdGetMonopolyFriendRankingListCsReq = 7061,
    CmdMonopolyGetDailyInitItemCsReq = 7053,
    CmdMonopolySocialEventEffectScNotify = 7089,
    CmdMonopolyUpgradeAssetScRsp = 7095,
    CmdMonopolyAcceptQuizScRsp = 7040,
    CmdMonopolyLikeScNotify = 7060,
    CmdMonopolyBuyGoodsCsReq = 7017,
    CmdMonopolySelectOptionCsReq = 7011,
    CmdMonopolyGiveUpCurContentCsReq = 7050,
    CmdMonopolyMoveCsReq = 7076,
    CmdMonopolyConditionUpdateScNotify = 7043,
    CmdMonopolyEventLoadUpdateScNotify = 7046,
    CmdGetMonopolyMbtiReportRewardScRsp = 7062,
    CmdMonopolyEventSelectFriendScRsp = 7088,
    CmdMonopolyLikeCsReq = 7055,
    CmdMonopolySttUpdateScNotify = 7066,
    CmdMonopolyBuyGoodsScRsp = 7091,
    CmdMonopolyReRollRandomScRsp = 7096,
    CmdMonopolyConfirmRandomScRsp = 7012,
    CmdMonopolyGetRegionProgressCsReq = 7093,
    CmdMonopolyGuessBuyInformationCsReq = 7008,
    CmdGetMonopolyInfoScRsp = 7068,
    CmdGetMonopolyFriendRankingListScRsp = 7090,
    CmdMonopolyGetRaffleTicketScRsp = 7010,
    CmdMonopolyGameRaiseRatioScRsp = 7081,
    CmdMonopolyGetRafflePoolInfoScRsp = 7002,
    CmdGetSocialEventServerCacheScRsp = 7074,
    CmdGetMonopolyMbtiReportRewardCsReq = 7042,
    CmdMonopolyUpgradeAssetCsReq = 7018,
    CmdDeleteSocialEventServerCacheCsReq = 7052,
    CmdMonopolyRollDiceCsReq = 7056,
    CmdMonopolyGetRegionProgressScRsp = 7072,
    CmdMonopolyGuessChooseCsReq = 7057,
    CmdMonopolyTakeRaffleTicketRewardScRsp = 7027,
    CmdMonopolyClickMbtiReportScRsp = 7045,
    CmdMonopolyGetDailyInitItemScRsp = 7016,
    CmdMonopolyEventSelectFriendCsReq = 7007,
    CmdMonopolyContentUpdateScNotify = 7092,
    CmdMonopolyLikeScRsp = 7085,
    CmdDailyFirstEnterMonopolyActivityScRsp = 7022,
    CmdGetMonopolyDailyReportCsReq = 7083,
    CmdMonopolyScrachRaffleTicketCsReq = 7086,
    CmdMonopolyClickMbtiReportCsReq = 7094,
    CmdGetMbtiReportCsReq = 7026,
    CmdMonopolyGameGachaScRsp = 7082,
    CmdMonopolyGetRafflePoolInfoCsReq = 7033,
    CmdMonopolyScrachRaffleTicketScRsp = 7051,
    CmdMonopolyGuessDrawScNotify = 7067,
    CmdMonopolyTakePhaseRewardCsReq = 7031,
    CmdMonopolyActionResultScNotify = 7058,
    CmdMonopolyGuessChooseScRsp = 7013,
    CmdMonopolyGameRaiseRatioCsReq = 7070,
    CmdMonopolyTakePhaseRewardScRsp = 7098,
    CmdDeleteSocialEventServerCacheScRsp = 7004,
    CmdMonopolyMoveScRsp = 7028,
    CmdMonopolyDailySettleScNotify = 7054,
    CmdGetMbtiReportScRsp = 7063,
    CmdDailyFirstEnterMonopolyActivityCsReq = 7049,
    CmdGetMonopolyDailyReportScRsp = 7032,
    CmdMonopolyGuessBuyInformationScRsp = 7078,
}
impl CmdMonopolyType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdMonopolyTypeNone",
            Self::CmdMonopolyCheatDiceCsReq => "CmdMonopolyCheatDiceCsReq",
            Self::CmdMonopolyGameBingoFlipCardScRsp => {
                "CmdMonopolyGameBingoFlipCardScRsp"
            }
            Self::CmdMonopolyRollRandomCsReq => "CmdMonopolyRollRandomCsReq",
            Self::CmdMonopolyRollRandomScRsp => "CmdMonopolyRollRandomScRsp",
            Self::CmdMonopolyAcceptQuizCsReq => "CmdMonopolyAcceptQuizCsReq",
            Self::CmdMonopolyGameBingoFlipCardCsReq => {
                "CmdMonopolyGameBingoFlipCardCsReq"
            }
            Self::CmdMonopolyGameCreateScNotify => "CmdMonopolyGameCreateScNotify",
            Self::CmdMonopolyClickCellScRsp => "CmdMonopolyClickCellScRsp",
            Self::CmdMonopolyGiveUpCurContentScRsp => "CmdMonopolyGiveUpCurContentScRsp",
            Self::CmdMonopolySelectOptionScRsp => "CmdMonopolySelectOptionScRsp",
            Self::CmdMonopolyClickCellCsReq => "CmdMonopolyClickCellCsReq",
            Self::CmdGetMonopolyInfoCsReq => "CmdGetMonopolyInfoCsReq",
            Self::CmdMonopolyGetRaffleTicketCsReq => "CmdMonopolyGetRaffleTicketCsReq",
            Self::CmdMonopolyCheatDiceScRsp => "CmdMonopolyCheatDiceScRsp",
            Self::CmdMonopolyRollDiceScRsp => "CmdMonopolyRollDiceScRsp",
            Self::CmdMonopolyGameGachaCsReq => "CmdMonopolyGameGachaCsReq",
            Self::CmdMonopolyGameSettleScNotify => "CmdMonopolyGameSettleScNotify",
            Self::CmdMonopolyCellUpdateNotify => "CmdMonopolyCellUpdateNotify",
            Self::CmdMonopolyQuizDurationChangeScNotify => {
                "CmdMonopolyQuizDurationChangeScNotify"
            }
            Self::CmdGetSocialEventServerCacheCsReq => {
                "CmdGetSocialEventServerCacheCsReq"
            }
            Self::CmdMonopolyConfirmRandomCsReq => "CmdMonopolyConfirmRandomCsReq",
            Self::CmdMonopolyReRollRandomCsReq => "CmdMonopolyReRollRandomCsReq",
            Self::CmdMonopolyTakeRaffleTicketRewardCsReq => {
                "CmdMonopolyTakeRaffleTicketRewardCsReq"
            }
            Self::CmdGetMonopolyFriendRankingListCsReq => {
                "CmdGetMonopolyFriendRankingListCsReq"
            }
            Self::CmdMonopolyGetDailyInitItemCsReq => "CmdMonopolyGetDailyInitItemCsReq",
            Self::CmdMonopolySocialEventEffectScNotify => {
                "CmdMonopolySocialEventEffectScNotify"
            }
            Self::CmdMonopolyUpgradeAssetScRsp => "CmdMonopolyUpgradeAssetScRsp",
            Self::CmdMonopolyAcceptQuizScRsp => "CmdMonopolyAcceptQuizScRsp",
            Self::CmdMonopolyLikeScNotify => "CmdMonopolyLikeScNotify",
            Self::CmdMonopolyBuyGoodsCsReq => "CmdMonopolyBuyGoodsCsReq",
            Self::CmdMonopolySelectOptionCsReq => "CmdMonopolySelectOptionCsReq",
            Self::CmdMonopolyGiveUpCurContentCsReq => "CmdMonopolyGiveUpCurContentCsReq",
            Self::CmdMonopolyMoveCsReq => "CmdMonopolyMoveCsReq",
            Self::CmdMonopolyConditionUpdateScNotify => {
                "CmdMonopolyConditionUpdateScNotify"
            }
            Self::CmdMonopolyEventLoadUpdateScNotify => {
                "CmdMonopolyEventLoadUpdateScNotify"
            }
            Self::CmdGetMonopolyMbtiReportRewardScRsp => {
                "CmdGetMonopolyMbtiReportRewardScRsp"
            }
            Self::CmdMonopolyEventSelectFriendScRsp => {
                "CmdMonopolyEventSelectFriendScRsp"
            }
            Self::CmdMonopolyLikeCsReq => "CmdMonopolyLikeCsReq",
            Self::CmdMonopolySttUpdateScNotify => "CmdMonopolySttUpdateScNotify",
            Self::CmdMonopolyBuyGoodsScRsp => "CmdMonopolyBuyGoodsScRsp",
            Self::CmdMonopolyReRollRandomScRsp => "CmdMonopolyReRollRandomScRsp",
            Self::CmdMonopolyConfirmRandomScRsp => "CmdMonopolyConfirmRandomScRsp",
            Self::CmdMonopolyGetRegionProgressCsReq => {
                "CmdMonopolyGetRegionProgressCsReq"
            }
            Self::CmdMonopolyGuessBuyInformationCsReq => {
                "CmdMonopolyGuessBuyInformationCsReq"
            }
            Self::CmdGetMonopolyInfoScRsp => "CmdGetMonopolyInfoScRsp",
            Self::CmdGetMonopolyFriendRankingListScRsp => {
                "CmdGetMonopolyFriendRankingListScRsp"
            }
            Self::CmdMonopolyGetRaffleTicketScRsp => "CmdMonopolyGetRaffleTicketScRsp",
            Self::CmdMonopolyGameRaiseRatioScRsp => "CmdMonopolyGameRaiseRatioScRsp",
            Self::CmdMonopolyGetRafflePoolInfoScRsp => {
                "CmdMonopolyGetRafflePoolInfoScRsp"
            }
            Self::CmdGetSocialEventServerCacheScRsp => {
                "CmdGetSocialEventServerCacheScRsp"
            }
            Self::CmdGetMonopolyMbtiReportRewardCsReq => {
                "CmdGetMonopolyMbtiReportRewardCsReq"
            }
            Self::CmdMonopolyUpgradeAssetCsReq => "CmdMonopolyUpgradeAssetCsReq",
            Self::CmdDeleteSocialEventServerCacheCsReq => {
                "CmdDeleteSocialEventServerCacheCsReq"
            }
            Self::CmdMonopolyRollDiceCsReq => "CmdMonopolyRollDiceCsReq",
            Self::CmdMonopolyGetRegionProgressScRsp => {
                "CmdMonopolyGetRegionProgressScRsp"
            }
            Self::CmdMonopolyGuessChooseCsReq => "CmdMonopolyGuessChooseCsReq",
            Self::CmdMonopolyTakeRaffleTicketRewardScRsp => {
                "CmdMonopolyTakeRaffleTicketRewardScRsp"
            }
            Self::CmdMonopolyClickMbtiReportScRsp => "CmdMonopolyClickMbtiReportScRsp",
            Self::CmdMonopolyGetDailyInitItemScRsp => "CmdMonopolyGetDailyInitItemScRsp",
            Self::CmdMonopolyEventSelectFriendCsReq => {
                "CmdMonopolyEventSelectFriendCsReq"
            }
            Self::CmdMonopolyContentUpdateScNotify => "CmdMonopolyContentUpdateScNotify",
            Self::CmdMonopolyLikeScRsp => "CmdMonopolyLikeScRsp",
            Self::CmdDailyFirstEnterMonopolyActivityScRsp => {
                "CmdDailyFirstEnterMonopolyActivityScRsp"
            }
            Self::CmdGetMonopolyDailyReportCsReq => "CmdGetMonopolyDailyReportCsReq",
            Self::CmdMonopolyScrachRaffleTicketCsReq => {
                "CmdMonopolyScrachRaffleTicketCsReq"
            }
            Self::CmdMonopolyClickMbtiReportCsReq => "CmdMonopolyClickMbtiReportCsReq",
            Self::CmdGetMbtiReportCsReq => "CmdGetMbtiReportCsReq",
            Self::CmdMonopolyGameGachaScRsp => "CmdMonopolyGameGachaScRsp",
            Self::CmdMonopolyGetRafflePoolInfoCsReq => {
                "CmdMonopolyGetRafflePoolInfoCsReq"
            }
            Self::CmdMonopolyScrachRaffleTicketScRsp => {
                "CmdMonopolyScrachRaffleTicketScRsp"
            }
            Self::CmdMonopolyGuessDrawScNotify => "CmdMonopolyGuessDrawScNotify",
            Self::CmdMonopolyTakePhaseRewardCsReq => "CmdMonopolyTakePhaseRewardCsReq",
            Self::CmdMonopolyActionResultScNotify => "CmdMonopolyActionResultScNotify",
            Self::CmdMonopolyGuessChooseScRsp => "CmdMonopolyGuessChooseScRsp",
            Self::CmdMonopolyGameRaiseRatioCsReq => "CmdMonopolyGameRaiseRatioCsReq",
            Self::CmdMonopolyTakePhaseRewardScRsp => "CmdMonopolyTakePhaseRewardScRsp",
            Self::CmdDeleteSocialEventServerCacheScRsp => {
                "CmdDeleteSocialEventServerCacheScRsp"
            }
            Self::CmdMonopolyMoveScRsp => "CmdMonopolyMoveScRsp",
            Self::CmdMonopolyDailySettleScNotify => "CmdMonopolyDailySettleScNotify",
            Self::CmdGetMbtiReportScRsp => "CmdGetMbtiReportScRsp",
            Self::CmdDailyFirstEnterMonopolyActivityCsReq => {
                "CmdDailyFirstEnterMonopolyActivityCsReq"
            }
            Self::CmdGetMonopolyDailyReportScRsp => "CmdGetMonopolyDailyReportScRsp",
            Self::CmdMonopolyGuessBuyInformationScRsp => {
                "CmdMonopolyGuessBuyInformationScRsp"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdMonopolyTypeNone" => Some(Self::None),
            "CmdMonopolyCheatDiceCsReq" => Some(Self::CmdMonopolyCheatDiceCsReq),
            "CmdMonopolyGameBingoFlipCardScRsp" => {
                Some(Self::CmdMonopolyGameBingoFlipCardScRsp)
            }
            "CmdMonopolyRollRandomCsReq" => Some(Self::CmdMonopolyRollRandomCsReq),
            "CmdMonopolyRollRandomScRsp" => Some(Self::CmdMonopolyRollRandomScRsp),
            "CmdMonopolyAcceptQuizCsReq" => Some(Self::CmdMonopolyAcceptQuizCsReq),
            "CmdMonopolyGameBingoFlipCardCsReq" => {
                Some(Self::CmdMonopolyGameBingoFlipCardCsReq)
            }
            "CmdMonopolyGameCreateScNotify" => Some(Self::CmdMonopolyGameCreateScNotify),
            "CmdMonopolyClickCellScRsp" => Some(Self::CmdMonopolyClickCellScRsp),
            "CmdMonopolyGiveUpCurContentScRsp" => {
                Some(Self::CmdMonopolyGiveUpCurContentScRsp)
            }
            "CmdMonopolySelectOptionScRsp" => Some(Self::CmdMonopolySelectOptionScRsp),
            "CmdMonopolyClickCellCsReq" => Some(Self::CmdMonopolyClickCellCsReq),
            "CmdGetMonopolyInfoCsReq" => Some(Self::CmdGetMonopolyInfoCsReq),
            "CmdMonopolyGetRaffleTicketCsReq" => {
                Some(Self::CmdMonopolyGetRaffleTicketCsReq)
            }
            "CmdMonopolyCheatDiceScRsp" => Some(Self::CmdMonopolyCheatDiceScRsp),
            "CmdMonopolyRollDiceScRsp" => Some(Self::CmdMonopolyRollDiceScRsp),
            "CmdMonopolyGameGachaCsReq" => Some(Self::CmdMonopolyGameGachaCsReq),
            "CmdMonopolyGameSettleScNotify" => Some(Self::CmdMonopolyGameSettleScNotify),
            "CmdMonopolyCellUpdateNotify" => Some(Self::CmdMonopolyCellUpdateNotify),
            "CmdMonopolyQuizDurationChangeScNotify" => {
                Some(Self::CmdMonopolyQuizDurationChangeScNotify)
            }
            "CmdGetSocialEventServerCacheCsReq" => {
                Some(Self::CmdGetSocialEventServerCacheCsReq)
            }
            "CmdMonopolyConfirmRandomCsReq" => Some(Self::CmdMonopolyConfirmRandomCsReq),
            "CmdMonopolyReRollRandomCsReq" => Some(Self::CmdMonopolyReRollRandomCsReq),
            "CmdMonopolyTakeRaffleTicketRewardCsReq" => {
                Some(Self::CmdMonopolyTakeRaffleTicketRewardCsReq)
            }
            "CmdGetMonopolyFriendRankingListCsReq" => {
                Some(Self::CmdGetMonopolyFriendRankingListCsReq)
            }
            "CmdMonopolyGetDailyInitItemCsReq" => {
                Some(Self::CmdMonopolyGetDailyInitItemCsReq)
            }
            "CmdMonopolySocialEventEffectScNotify" => {
                Some(Self::CmdMonopolySocialEventEffectScNotify)
            }
            "CmdMonopolyUpgradeAssetScRsp" => Some(Self::CmdMonopolyUpgradeAssetScRsp),
            "CmdMonopolyAcceptQuizScRsp" => Some(Self::CmdMonopolyAcceptQuizScRsp),
            "CmdMonopolyLikeScNotify" => Some(Self::CmdMonopolyLikeScNotify),
            "CmdMonopolyBuyGoodsCsReq" => Some(Self::CmdMonopolyBuyGoodsCsReq),
            "CmdMonopolySelectOptionCsReq" => Some(Self::CmdMonopolySelectOptionCsReq),
            "CmdMonopolyGiveUpCurContentCsReq" => {
                Some(Self::CmdMonopolyGiveUpCurContentCsReq)
            }
            "CmdMonopolyMoveCsReq" => Some(Self::CmdMonopolyMoveCsReq),
            "CmdMonopolyConditionUpdateScNotify" => {
                Some(Self::CmdMonopolyConditionUpdateScNotify)
            }
            "CmdMonopolyEventLoadUpdateScNotify" => {
                Some(Self::CmdMonopolyEventLoadUpdateScNotify)
            }
            "CmdGetMonopolyMbtiReportRewardScRsp" => {
                Some(Self::CmdGetMonopolyMbtiReportRewardScRsp)
            }
            "CmdMonopolyEventSelectFriendScRsp" => {
                Some(Self::CmdMonopolyEventSelectFriendScRsp)
            }
            "CmdMonopolyLikeCsReq" => Some(Self::CmdMonopolyLikeCsReq),
            "CmdMonopolySttUpdateScNotify" => Some(Self::CmdMonopolySttUpdateScNotify),
            "CmdMonopolyBuyGoodsScRsp" => Some(Self::CmdMonopolyBuyGoodsScRsp),
            "CmdMonopolyReRollRandomScRsp" => Some(Self::CmdMonopolyReRollRandomScRsp),
            "CmdMonopolyConfirmRandomScRsp" => Some(Self::CmdMonopolyConfirmRandomScRsp),
            "CmdMonopolyGetRegionProgressCsReq" => {
                Some(Self::CmdMonopolyGetRegionProgressCsReq)
            }
            "CmdMonopolyGuessBuyInformationCsReq" => {
                Some(Self::CmdMonopolyGuessBuyInformationCsReq)
            }
            "CmdGetMonopolyInfoScRsp" => Some(Self::CmdGetMonopolyInfoScRsp),
            "CmdGetMonopolyFriendRankingListScRsp" => {
                Some(Self::CmdGetMonopolyFriendRankingListScRsp)
            }
            "CmdMonopolyGetRaffleTicketScRsp" => {
                Some(Self::CmdMonopolyGetRaffleTicketScRsp)
            }
            "CmdMonopolyGameRaiseRatioScRsp" => {
                Some(Self::CmdMonopolyGameRaiseRatioScRsp)
            }
            "CmdMonopolyGetRafflePoolInfoScRsp" => {
                Some(Self::CmdMonopolyGetRafflePoolInfoScRsp)
            }
            "CmdGetSocialEventServerCacheScRsp" => {
                Some(Self::CmdGetSocialEventServerCacheScRsp)
            }
            "CmdGetMonopolyMbtiReportRewardCsReq" => {
                Some(Self::CmdGetMonopolyMbtiReportRewardCsReq)
            }
            "CmdMonopolyUpgradeAssetCsReq" => Some(Self::CmdMonopolyUpgradeAssetCsReq),
            "CmdDeleteSocialEventServerCacheCsReq" => {
                Some(Self::CmdDeleteSocialEventServerCacheCsReq)
            }
            "CmdMonopolyRollDiceCsReq" => Some(Self::CmdMonopolyRollDiceCsReq),
            "CmdMonopolyGetRegionProgressScRsp" => {
                Some(Self::CmdMonopolyGetRegionProgressScRsp)
            }
            "CmdMonopolyGuessChooseCsReq" => Some(Self::CmdMonopolyGuessChooseCsReq),
            "CmdMonopolyTakeRaffleTicketRewardScRsp" => {
                Some(Self::CmdMonopolyTakeRaffleTicketRewardScRsp)
            }
            "CmdMonopolyClickMbtiReportScRsp" => {
                Some(Self::CmdMonopolyClickMbtiReportScRsp)
            }
            "CmdMonopolyGetDailyInitItemScRsp" => {
                Some(Self::CmdMonopolyGetDailyInitItemScRsp)
            }
            "CmdMonopolyEventSelectFriendCsReq" => {
                Some(Self::CmdMonopolyEventSelectFriendCsReq)
            }
            "CmdMonopolyContentUpdateScNotify" => {
                Some(Self::CmdMonopolyContentUpdateScNotify)
            }
            "CmdMonopolyLikeScRsp" => Some(Self::CmdMonopolyLikeScRsp),
            "CmdDailyFirstEnterMonopolyActivityScRsp" => {
                Some(Self::CmdDailyFirstEnterMonopolyActivityScRsp)
            }
            "CmdGetMonopolyDailyReportCsReq" => {
                Some(Self::CmdGetMonopolyDailyReportCsReq)
            }
            "CmdMonopolyScrachRaffleTicketCsReq" => {
                Some(Self::CmdMonopolyScrachRaffleTicketCsReq)
            }
            "CmdMonopolyClickMbtiReportCsReq" => {
                Some(Self::CmdMonopolyClickMbtiReportCsReq)
            }
            "CmdGetMbtiReportCsReq" => Some(Self::CmdGetMbtiReportCsReq),
            "CmdMonopolyGameGachaScRsp" => Some(Self::CmdMonopolyGameGachaScRsp),
            "CmdMonopolyGetRafflePoolInfoCsReq" => {
                Some(Self::CmdMonopolyGetRafflePoolInfoCsReq)
            }
            "CmdMonopolyScrachRaffleTicketScRsp" => {
                Some(Self::CmdMonopolyScrachRaffleTicketScRsp)
            }
            "CmdMonopolyGuessDrawScNotify" => Some(Self::CmdMonopolyGuessDrawScNotify),
            "CmdMonopolyTakePhaseRewardCsReq" => {
                Some(Self::CmdMonopolyTakePhaseRewardCsReq)
            }
            "CmdMonopolyActionResultScNotify" => {
                Some(Self::CmdMonopolyActionResultScNotify)
            }
            "CmdMonopolyGuessChooseScRsp" => Some(Self::CmdMonopolyGuessChooseScRsp),
            "CmdMonopolyGameRaiseRatioCsReq" => {
                Some(Self::CmdMonopolyGameRaiseRatioCsReq)
            }
            "CmdMonopolyTakePhaseRewardScRsp" => {
                Some(Self::CmdMonopolyTakePhaseRewardScRsp)
            }
            "CmdDeleteSocialEventServerCacheScRsp" => {
                Some(Self::CmdDeleteSocialEventServerCacheScRsp)
            }
            "CmdMonopolyMoveScRsp" => Some(Self::CmdMonopolyMoveScRsp),
            "CmdMonopolyDailySettleScNotify" => {
                Some(Self::CmdMonopolyDailySettleScNotify)
            }
            "CmdGetMbtiReportScRsp" => Some(Self::CmdGetMbtiReportScRsp),
            "CmdDailyFirstEnterMonopolyActivityCsReq" => {
                Some(Self::CmdDailyFirstEnterMonopolyActivityCsReq)
            }
            "CmdGetMonopolyDailyReportScRsp" => {
                Some(Self::CmdGetMonopolyDailyReportScRsp)
            }
            "CmdMonopolyGuessBuyInformationScRsp" => {
                Some(Self::CmdMonopolyGuessBuyInformationScRsp)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Gojoindbkik {
    MonopolySocialEventStatusNone = 0,
    MonopolySocialEventStatusWaitingSelectFriend = 1,
}
impl Gojoindbkik {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::MonopolySocialEventStatusNone => "MONOPOLY_SOCIAL_EVENT_STATUS_NONE",
            Self::MonopolySocialEventStatusWaitingSelectFriend => {
                "MONOPOLY_SOCIAL_EVENT_STATUS_WAITING_SELECT_FRIEND"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MONOPOLY_SOCIAL_EVENT_STATUS_NONE" => {
                Some(Self::MonopolySocialEventStatusNone)
            }
            "MONOPOLY_SOCIAL_EVENT_STATUS_WAITING_SELECT_FRIEND" => {
                Some(Self::MonopolySocialEventStatusWaitingSelectFriend)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Ihgjllngdkl {
    MonopolyCellStateIdle = 0,
    MonopolyCellStateBarrier = 1,
    MonopolyCellStateGround = 2,
    MonopolyCellStateFinish = 3,
}
impl Ihgjllngdkl {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::MonopolyCellStateIdle => "MONOPOLY_CELL_STATE_IDLE",
            Self::MonopolyCellStateBarrier => "MONOPOLY_CELL_STATE_BARRIER",
            Self::MonopolyCellStateGround => "MONOPOLY_CELL_STATE_GROUND",
            Self::MonopolyCellStateFinish => "MONOPOLY_CELL_STATE_FINISH",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MONOPOLY_CELL_STATE_IDLE" => Some(Self::MonopolyCellStateIdle),
            "MONOPOLY_CELL_STATE_BARRIER" => Some(Self::MonopolyCellStateBarrier),
            "MONOPOLY_CELL_STATE_GROUND" => Some(Self::MonopolyCellStateGround),
            "MONOPOLY_CELL_STATE_FINISH" => Some(Self::MonopolyCellStateFinish),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Gkejfkakenm {
    MonopolyActionResultSourceTypeNone = 0,
    MonopolyActionResultSourceTypeEffect = 1,
    MonopolyActionResultSourceTypeAssetBonus = 2,
    MonopolyActionResultSourceTypeAssetTax = 3,
    MonopolyActionResultSourceTypeAssetUpgrade = 4,
    MonopolyActionResultSourceTypeGameSettle = 5,
    MonopolyActionResultSourceTypeBuyGoods = 6,
    MonopolyActionResultSourceTypeClick = 7,
    MonopolyActionResultSourceTypeSocialEvent = 8,
    MonopolyActionResultSourceTypeLike = 9,
    MonopolyActionResultSourceTypeQuizGameSettle = 10,
}
impl Gkejfkakenm {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::MonopolyActionResultSourceTypeNone => {
                "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_NONE"
            }
            Self::MonopolyActionResultSourceTypeEffect => {
                "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_EFFECT"
            }
            Self::MonopolyActionResultSourceTypeAssetBonus => {
                "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_ASSET_BONUS"
            }
            Self::MonopolyActionResultSourceTypeAssetTax => {
                "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_ASSET_TAX"
            }
            Self::MonopolyActionResultSourceTypeAssetUpgrade => {
                "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_ASSET_UPGRADE"
            }
            Self::MonopolyActionResultSourceTypeGameSettle => {
                "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_GAME_SETTLE"
            }
            Self::MonopolyActionResultSourceTypeBuyGoods => {
                "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_BUY_GOODS"
            }
            Self::MonopolyActionResultSourceTypeClick => {
                "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_CLICK"
            }
            Self::MonopolyActionResultSourceTypeSocialEvent => {
                "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_SOCIAL_EVENT"
            }
            Self::MonopolyActionResultSourceTypeLike => {
                "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_LIKE"
            }
            Self::MonopolyActionResultSourceTypeQuizGameSettle => {
                "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_QUIZ_GAME_SETTLE"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_NONE" => {
                Some(Self::MonopolyActionResultSourceTypeNone)
            }
            "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_EFFECT" => {
                Some(Self::MonopolyActionResultSourceTypeEffect)
            }
            "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_ASSET_BONUS" => {
                Some(Self::MonopolyActionResultSourceTypeAssetBonus)
            }
            "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_ASSET_TAX" => {
                Some(Self::MonopolyActionResultSourceTypeAssetTax)
            }
            "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_ASSET_UPGRADE" => {
                Some(Self::MonopolyActionResultSourceTypeAssetUpgrade)
            }
            "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_GAME_SETTLE" => {
                Some(Self::MonopolyActionResultSourceTypeGameSettle)
            }
            "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_BUY_GOODS" => {
                Some(Self::MonopolyActionResultSourceTypeBuyGoods)
            }
            "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_CLICK" => {
                Some(Self::MonopolyActionResultSourceTypeClick)
            }
            "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_SOCIAL_EVENT" => {
                Some(Self::MonopolyActionResultSourceTypeSocialEvent)
            }
            "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_LIKE" => {
                Some(Self::MonopolyActionResultSourceTypeLike)
            }
            "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_QUIZ_GAME_SETTLE" => {
                Some(Self::MonopolyActionResultSourceTypeQuizGameSettle)
            }
            _ => None,
        }
    }
}
/// GGJAIBFOBCD
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdMultiplayerType {
    None = 0,
    CmdMultiplayerFightGiveUpCsReq = 1030,
    CmdMultiplayerFightGiveUpScRsp = 1056,
    CmdMultiplayerFightGameStartScNotify = 1097,
    CmdMultiplayerFightGameFinishScNotify = 1076,
    CmdMultiplayerGetFightGateCsReq = 1058,
    CmdMultiplayerGetFightGateScRsp = 1024,
    CmdMultiplayerFightGameStateScRsp = 1068,
    CmdMultiplayerFightGameStateCsReq = 1001,
    CmdMultiplayerMatch3FinishScNotify = 1028,
}
impl CmdMultiplayerType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdMultiplayerTypeNone",
            Self::CmdMultiplayerFightGiveUpCsReq => "CmdMultiplayerFightGiveUpCsReq",
            Self::CmdMultiplayerFightGiveUpScRsp => "CmdMultiplayerFightGiveUpScRsp",
            Self::CmdMultiplayerFightGameStartScNotify => {
                "CmdMultiplayerFightGameStartScNotify"
            }
            Self::CmdMultiplayerFightGameFinishScNotify => {
                "CmdMultiplayerFightGameFinishScNotify"
            }
            Self::CmdMultiplayerGetFightGateCsReq => "CmdMultiplayerGetFightGateCsReq",
            Self::CmdMultiplayerGetFightGateScRsp => "CmdMultiplayerGetFightGateScRsp",
            Self::CmdMultiplayerFightGameStateScRsp => {
                "CmdMultiplayerFightGameStateScRsp"
            }
            Self::CmdMultiplayerFightGameStateCsReq => {
                "CmdMultiplayerFightGameStateCsReq"
            }
            Self::CmdMultiplayerMatch3FinishScNotify => {
                "CmdMultiplayerMatch3FinishScNotify"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdMultiplayerTypeNone" => Some(Self::None),
            "CmdMultiplayerFightGiveUpCsReq" => {
                Some(Self::CmdMultiplayerFightGiveUpCsReq)
            }
            "CmdMultiplayerFightGiveUpScRsp" => {
                Some(Self::CmdMultiplayerFightGiveUpScRsp)
            }
            "CmdMultiplayerFightGameStartScNotify" => {
                Some(Self::CmdMultiplayerFightGameStartScNotify)
            }
            "CmdMultiplayerFightGameFinishScNotify" => {
                Some(Self::CmdMultiplayerFightGameFinishScNotify)
            }
            "CmdMultiplayerGetFightGateCsReq" => {
                Some(Self::CmdMultiplayerGetFightGateCsReq)
            }
            "CmdMultiplayerGetFightGateScRsp" => {
                Some(Self::CmdMultiplayerGetFightGateScRsp)
            }
            "CmdMultiplayerFightGameStateScRsp" => {
                Some(Self::CmdMultiplayerFightGameStateScRsp)
            }
            "CmdMultiplayerFightGameStateCsReq" => {
                Some(Self::CmdMultiplayerFightGameStateCsReq)
            }
            "CmdMultiplayerMatch3FinishScNotify" => {
                Some(Self::CmdMultiplayerMatch3FinishScNotify)
            }
            _ => None,
        }
    }
}
/// LAJPOLACPBI
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdMultipleDropType {
    None = 0,
    CmdGetPlayerReturnMultiDropInfoCsReq = 4624,
    CmdMultipleDropInfoScNotify = 4658,
    CmdGetMultipleDropInfoCsReq = 4601,
    CmdGetMultipleDropInfoScRsp = 4668,
    CmdMultipleDropInfoNotify = 4656,
    CmdGetPlayerReturnMultiDropInfoScRsp = 4630,
}
impl CmdMultipleDropType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdMultipleDropTypeNone",
            Self::CmdGetPlayerReturnMultiDropInfoCsReq => {
                "CmdGetPlayerReturnMultiDropInfoCsReq"
            }
            Self::CmdMultipleDropInfoScNotify => "CmdMultipleDropInfoScNotify",
            Self::CmdGetMultipleDropInfoCsReq => "CmdGetMultipleDropInfoCsReq",
            Self::CmdGetMultipleDropInfoScRsp => "CmdGetMultipleDropInfoScRsp",
            Self::CmdMultipleDropInfoNotify => "CmdMultipleDropInfoNotify",
            Self::CmdGetPlayerReturnMultiDropInfoScRsp => {
                "CmdGetPlayerReturnMultiDropInfoScRsp"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdMultipleDropTypeNone" => Some(Self::None),
            "CmdGetPlayerReturnMultiDropInfoCsReq" => {
                Some(Self::CmdGetPlayerReturnMultiDropInfoCsReq)
            }
            "CmdMultipleDropInfoScNotify" => Some(Self::CmdMultipleDropInfoScNotify),
            "CmdGetMultipleDropInfoCsReq" => Some(Self::CmdGetMultipleDropInfoCsReq),
            "CmdGetMultipleDropInfoScRsp" => Some(Self::CmdGetMultipleDropInfoScRsp),
            "CmdMultipleDropInfoNotify" => Some(Self::CmdMultipleDropInfoNotify),
            "CmdGetPlayerReturnMultiDropInfoScRsp" => {
                Some(Self::CmdGetPlayerReturnMultiDropInfoScRsp)
            }
            _ => None,
        }
    }
}
/// FBGHFPEFFGL
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdMuseumType {
    None = 0,
    CmdMuseumTargetRewardNotify = 4369,
    CmdFinishCurTurnCsReq = 4305,
    CmdMuseumRandomEventSelectScRsp = 4318,
    CmdGetStuffScNotify = 4328,
    CmdRemoveStuffFromAreaScRsp = 4376,
    CmdSetStuffToAreaCsReq = 4330,
    CmdMuseumRandomEventSelectCsReq = 4391,
    CmdMuseumRandomEventQueryCsReq = 4312,
    CmdMuseumInfoChangedScNotify = 4339,
    CmdMuseumTargetStartNotify = 4350,
    CmdRemoveStuffFromAreaCsReq = 4397,
    CmdMuseumTakeCollectRewardScRsp = 4392,
    CmdUpgradeAreaCsReq = 4349,
    CmdUpgradeAreaStatScRsp = 4380,
    CmdUpgradeAreaStatCsReq = 4347,
    CmdFinishCurTurnScRsp = 4314,
    CmdMuseumDispatchFinishedScNotify = 4395,
    CmdBuyNpcStuffCsReq = 4358,
    CmdMuseumFundsChangedScNotify = 4396,
    CmdUpgradeAreaScRsp = 4322,
    CmdGetMuseumInfoScRsp = 4368,
    CmdMuseumTakeCollectRewardCsReq = 4320,
    CmdSetStuffToAreaScRsp = 4356,
    CmdMuseumRandomEventQueryScRsp = 4317,
    CmdMuseumTargetMissionFinishNotify = 4348,
    CmdBuyNpcStuffScRsp = 4324,
    CmdGetExhibitScNotify = 4311,
    CmdGetMuseumInfoCsReq = 4301,
    CmdMuseumRandomEventStartScNotify = 4323,
}
impl CmdMuseumType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdMuseumTypeNone",
            Self::CmdMuseumTargetRewardNotify => "CmdMuseumTargetRewardNotify",
            Self::CmdFinishCurTurnCsReq => "CmdFinishCurTurnCsReq",
            Self::CmdMuseumRandomEventSelectScRsp => "CmdMuseumRandomEventSelectScRsp",
            Self::CmdGetStuffScNotify => "CmdGetStuffScNotify",
            Self::CmdRemoveStuffFromAreaScRsp => "CmdRemoveStuffFromAreaScRsp",
            Self::CmdSetStuffToAreaCsReq => "CmdSetStuffToAreaCsReq",
            Self::CmdMuseumRandomEventSelectCsReq => "CmdMuseumRandomEventSelectCsReq",
            Self::CmdMuseumRandomEventQueryCsReq => "CmdMuseumRandomEventQueryCsReq",
            Self::CmdMuseumInfoChangedScNotify => "CmdMuseumInfoChangedScNotify",
            Self::CmdMuseumTargetStartNotify => "CmdMuseumTargetStartNotify",
            Self::CmdRemoveStuffFromAreaCsReq => "CmdRemoveStuffFromAreaCsReq",
            Self::CmdMuseumTakeCollectRewardScRsp => "CmdMuseumTakeCollectRewardScRsp",
            Self::CmdUpgradeAreaCsReq => "CmdUpgradeAreaCsReq",
            Self::CmdUpgradeAreaStatScRsp => "CmdUpgradeAreaStatScRsp",
            Self::CmdUpgradeAreaStatCsReq => "CmdUpgradeAreaStatCsReq",
            Self::CmdFinishCurTurnScRsp => "CmdFinishCurTurnScRsp",
            Self::CmdMuseumDispatchFinishedScNotify => {
                "CmdMuseumDispatchFinishedScNotify"
            }
            Self::CmdBuyNpcStuffCsReq => "CmdBuyNpcStuffCsReq",
            Self::CmdMuseumFundsChangedScNotify => "CmdMuseumFundsChangedScNotify",
            Self::CmdUpgradeAreaScRsp => "CmdUpgradeAreaScRsp",
            Self::CmdGetMuseumInfoScRsp => "CmdGetMuseumInfoScRsp",
            Self::CmdMuseumTakeCollectRewardCsReq => "CmdMuseumTakeCollectRewardCsReq",
            Self::CmdSetStuffToAreaScRsp => "CmdSetStuffToAreaScRsp",
            Self::CmdMuseumRandomEventQueryScRsp => "CmdMuseumRandomEventQueryScRsp",
            Self::CmdMuseumTargetMissionFinishNotify => {
                "CmdMuseumTargetMissionFinishNotify"
            }
            Self::CmdBuyNpcStuffScRsp => "CmdBuyNpcStuffScRsp",
            Self::CmdGetExhibitScNotify => "CmdGetExhibitScNotify",
            Self::CmdGetMuseumInfoCsReq => "CmdGetMuseumInfoCsReq",
            Self::CmdMuseumRandomEventStartScNotify => {
                "CmdMuseumRandomEventStartScNotify"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdMuseumTypeNone" => Some(Self::None),
            "CmdMuseumTargetRewardNotify" => Some(Self::CmdMuseumTargetRewardNotify),
            "CmdFinishCurTurnCsReq" => Some(Self::CmdFinishCurTurnCsReq),
            "CmdMuseumRandomEventSelectScRsp" => {
                Some(Self::CmdMuseumRandomEventSelectScRsp)
            }
            "CmdGetStuffScNotify" => Some(Self::CmdGetStuffScNotify),
            "CmdRemoveStuffFromAreaScRsp" => Some(Self::CmdRemoveStuffFromAreaScRsp),
            "CmdSetStuffToAreaCsReq" => Some(Self::CmdSetStuffToAreaCsReq),
            "CmdMuseumRandomEventSelectCsReq" => {
                Some(Self::CmdMuseumRandomEventSelectCsReq)
            }
            "CmdMuseumRandomEventQueryCsReq" => {
                Some(Self::CmdMuseumRandomEventQueryCsReq)
            }
            "CmdMuseumInfoChangedScNotify" => Some(Self::CmdMuseumInfoChangedScNotify),
            "CmdMuseumTargetStartNotify" => Some(Self::CmdMuseumTargetStartNotify),
            "CmdRemoveStuffFromAreaCsReq" => Some(Self::CmdRemoveStuffFromAreaCsReq),
            "CmdMuseumTakeCollectRewardScRsp" => {
                Some(Self::CmdMuseumTakeCollectRewardScRsp)
            }
            "CmdUpgradeAreaCsReq" => Some(Self::CmdUpgradeAreaCsReq),
            "CmdUpgradeAreaStatScRsp" => Some(Self::CmdUpgradeAreaStatScRsp),
            "CmdUpgradeAreaStatCsReq" => Some(Self::CmdUpgradeAreaStatCsReq),
            "CmdFinishCurTurnScRsp" => Some(Self::CmdFinishCurTurnScRsp),
            "CmdMuseumDispatchFinishedScNotify" => {
                Some(Self::CmdMuseumDispatchFinishedScNotify)
            }
            "CmdBuyNpcStuffCsReq" => Some(Self::CmdBuyNpcStuffCsReq),
            "CmdMuseumFundsChangedScNotify" => Some(Self::CmdMuseumFundsChangedScNotify),
            "CmdUpgradeAreaScRsp" => Some(Self::CmdUpgradeAreaScRsp),
            "CmdGetMuseumInfoScRsp" => Some(Self::CmdGetMuseumInfoScRsp),
            "CmdMuseumTakeCollectRewardCsReq" => {
                Some(Self::CmdMuseumTakeCollectRewardCsReq)
            }
            "CmdSetStuffToAreaScRsp" => Some(Self::CmdSetStuffToAreaScRsp),
            "CmdMuseumRandomEventQueryScRsp" => {
                Some(Self::CmdMuseumRandomEventQueryScRsp)
            }
            "CmdMuseumTargetMissionFinishNotify" => {
                Some(Self::CmdMuseumTargetMissionFinishNotify)
            }
            "CmdBuyNpcStuffScRsp" => Some(Self::CmdBuyNpcStuffScRsp),
            "CmdGetExhibitScNotify" => Some(Self::CmdGetExhibitScNotify),
            "CmdGetMuseumInfoCsReq" => Some(Self::CmdGetMuseumInfoCsReq),
            "CmdMuseumRandomEventStartScNotify" => {
                Some(Self::CmdMuseumRandomEventStartScNotify)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Aihadkbhpbm {
    MuseumRandomEventStateNone = 0,
    MuseumRandomEventStateStart = 1,
    MuseumRandomEventStateProcessing = 2,
    MuseumRandomEventStateFinish = 3,
}
impl Aihadkbhpbm {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::MuseumRandomEventStateNone => "MUSEUM_RANDOM_EVENT_STATE_NONE",
            Self::MuseumRandomEventStateStart => "MUSEUM_RANDOM_EVENT_STATE_START",
            Self::MuseumRandomEventStateProcessing => {
                "MUSEUM_RANDOM_EVENT_STATE_PROCESSING"
            }
            Self::MuseumRandomEventStateFinish => "MUSEUM_RANDOM_EVENT_STATE_FINISH",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MUSEUM_RANDOM_EVENT_STATE_NONE" => Some(Self::MuseumRandomEventStateNone),
            "MUSEUM_RANDOM_EVENT_STATE_START" => Some(Self::MuseumRandomEventStateStart),
            "MUSEUM_RANDOM_EVENT_STATE_PROCESSING" => {
                Some(Self::MuseumRandomEventStateProcessing)
            }
            "MUSEUM_RANDOM_EVENT_STATE_FINISH" => {
                Some(Self::MuseumRandomEventStateFinish)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Kamlglmnjgj {
    WorkPosNone = 0,
    WorkPos1 = 1,
    WorkPos2 = 2,
    WorkPos3 = 3,
}
impl Kamlglmnjgj {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::WorkPosNone => "WORK_POS_NONE",
            Self::WorkPos1 => "WORK_POS_1",
            Self::WorkPos2 => "WORK_POS_2",
            Self::WorkPos3 => "WORK_POS_3",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "WORK_POS_NONE" => Some(Self::WorkPosNone),
            "WORK_POS_1" => Some(Self::WorkPos1),
            "WORK_POS_2" => Some(Self::WorkPos2),
            "WORK_POS_3" => Some(Self::WorkPos3),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Ibbgdgghejl {
    StatTypeNone = 0,
    StatTypeArt = 1,
    StatTypeCulture = 2,
    StatTypePopular = 3,
}
impl Ibbgdgghejl {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::StatTypeNone => "STAT_TYPE_NONE",
            Self::StatTypeArt => "STAT_TYPE_ART",
            Self::StatTypeCulture => "STAT_TYPE_CULTURE",
            Self::StatTypePopular => "STAT_TYPE_POPULAR",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "STAT_TYPE_NONE" => Some(Self::StatTypeNone),
            "STAT_TYPE_ART" => Some(Self::StatTypeArt),
            "STAT_TYPE_CULTURE" => Some(Self::StatTypeCulture),
            "STAT_TYPE_POPULAR" => Some(Self::StatTypePopular),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Kgjjjkpdcfg {
    Unknow = 0,
    MissionReward = 1,
    EventBuyStuff = 2,
    MarketBuyStuff = 3,
    QuestReward = 4,
    Initial = 5,
    PhaseFinishReward = 6,
}
impl Kgjjjkpdcfg {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknow => "UNKNOW",
            Self::MissionReward => "MISSION_REWARD",
            Self::EventBuyStuff => "EVENT_BUY_STUFF",
            Self::MarketBuyStuff => "MARKET_BUY_STUFF",
            Self::QuestReward => "QUEST_REWARD",
            Self::Initial => "INITIAL",
            Self::PhaseFinishReward => "PHASE_FINISH_REWARD",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UNKNOW" => Some(Self::Unknow),
            "MISSION_REWARD" => Some(Self::MissionReward),
            "EVENT_BUY_STUFF" => Some(Self::EventBuyStuff),
            "MARKET_BUY_STUFF" => Some(Self::MarketBuyStuff),
            "QUEST_REWARD" => Some(Self::QuestReward),
            "INITIAL" => Some(Self::Initial),
            "PHASE_FINISH_REWARD" => Some(Self::PhaseFinishReward),
            _ => None,
        }
    }
}
/// FBGKFINCMIB
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdMusicRhythmType {
    None = 0,
    CmdMusicRhythmSaveSongConfigDataScRsp = 7595,
    CmdMusicRhythmUnlockTrackScNotify = 7591,
    CmdMusicRhythmFinishLevelCsReq = 7585,
    CmdMusicRhythmMaxDifficultyLevelsUnlockNotify = 7592,
    CmdMusicRhythmUnlockSongSfxScNotify = 7578,
    CmdMusicRhythmUnlockSongNotify = 7596,
    CmdMusicRhythmDataCsReq = 7583,
    CmdMusicRhythmDataScRsp = 7586,
    CmdMusicRhythmSaveSongConfigDataCsReq = 7572,
    CmdMusicRhythmStartLevelCsReq = 7598,
    CmdMusicRhythmStartLevelScRsp = 7571,
    CmdMusicRhythmFinishLevelScRsp = 7593,
}
impl CmdMusicRhythmType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdMusicRhythmTypeNone",
            Self::CmdMusicRhythmSaveSongConfigDataScRsp => {
                "CmdMusicRhythmSaveSongConfigDataScRsp"
            }
            Self::CmdMusicRhythmUnlockTrackScNotify => {
                "CmdMusicRhythmUnlockTrackScNotify"
            }
            Self::CmdMusicRhythmFinishLevelCsReq => "CmdMusicRhythmFinishLevelCsReq",
            Self::CmdMusicRhythmMaxDifficultyLevelsUnlockNotify => {
                "CmdMusicRhythmMaxDifficultyLevelsUnlockNotify"
            }
            Self::CmdMusicRhythmUnlockSongSfxScNotify => {
                "CmdMusicRhythmUnlockSongSfxScNotify"
            }
            Self::CmdMusicRhythmUnlockSongNotify => "CmdMusicRhythmUnlockSongNotify",
            Self::CmdMusicRhythmDataCsReq => "CmdMusicRhythmDataCsReq",
            Self::CmdMusicRhythmDataScRsp => "CmdMusicRhythmDataScRsp",
            Self::CmdMusicRhythmSaveSongConfigDataCsReq => {
                "CmdMusicRhythmSaveSongConfigDataCsReq"
            }
            Self::CmdMusicRhythmStartLevelCsReq => "CmdMusicRhythmStartLevelCsReq",
            Self::CmdMusicRhythmStartLevelScRsp => "CmdMusicRhythmStartLevelScRsp",
            Self::CmdMusicRhythmFinishLevelScRsp => "CmdMusicRhythmFinishLevelScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdMusicRhythmTypeNone" => Some(Self::None),
            "CmdMusicRhythmSaveSongConfigDataScRsp" => {
                Some(Self::CmdMusicRhythmSaveSongConfigDataScRsp)
            }
            "CmdMusicRhythmUnlockTrackScNotify" => {
                Some(Self::CmdMusicRhythmUnlockTrackScNotify)
            }
            "CmdMusicRhythmFinishLevelCsReq" => {
                Some(Self::CmdMusicRhythmFinishLevelCsReq)
            }
            "CmdMusicRhythmMaxDifficultyLevelsUnlockNotify" => {
                Some(Self::CmdMusicRhythmMaxDifficultyLevelsUnlockNotify)
            }
            "CmdMusicRhythmUnlockSongSfxScNotify" => {
                Some(Self::CmdMusicRhythmUnlockSongSfxScNotify)
            }
            "CmdMusicRhythmUnlockSongNotify" => {
                Some(Self::CmdMusicRhythmUnlockSongNotify)
            }
            "CmdMusicRhythmDataCsReq" => Some(Self::CmdMusicRhythmDataCsReq),
            "CmdMusicRhythmDataScRsp" => Some(Self::CmdMusicRhythmDataScRsp),
            "CmdMusicRhythmSaveSongConfigDataCsReq" => {
                Some(Self::CmdMusicRhythmSaveSongConfigDataCsReq)
            }
            "CmdMusicRhythmStartLevelCsReq" => Some(Self::CmdMusicRhythmStartLevelCsReq),
            "CmdMusicRhythmStartLevelScRsp" => Some(Self::CmdMusicRhythmStartLevelScRsp),
            "CmdMusicRhythmFinishLevelScRsp" => {
                Some(Self::CmdMusicRhythmFinishLevelScRsp)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Epgdhhhdjdc {
    StatusClose = 0,
    StatusOpen = 1,
}
impl Epgdhhhdjdc {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::StatusClose => "STATUS_CLOSE",
            Self::StatusOpen => "STATUS_OPEN",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "STATUS_CLOSE" => Some(Self::StatusClose),
            "STATUS_OPEN" => Some(Self::StatusOpen),
            _ => None,
        }
    }
}
/// BMOHAFKGGLO
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdOfferingType {
    None = 0,
    CmdSubmitOfferingItemScRsp = 6922,
    CmdTakeOfferingRewardScRsp = 6921,
    CmdGetOfferingInfoCsReq = 6937,
    CmdSubmitOfferingItemCsReq = 6932,
    CmdTakeOfferingRewardCsReq = 6924,
    CmdOfferingInfoScNotify = 6939,
    CmdGetOfferingInfoScRsp = 6928,
}
impl CmdOfferingType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdOfferingTypeNone",
            Self::CmdSubmitOfferingItemScRsp => "CmdSubmitOfferingItemScRsp",
            Self::CmdTakeOfferingRewardScRsp => "CmdTakeOfferingRewardScRsp",
            Self::CmdGetOfferingInfoCsReq => "CmdGetOfferingInfoCsReq",
            Self::CmdSubmitOfferingItemCsReq => "CmdSubmitOfferingItemCsReq",
            Self::CmdTakeOfferingRewardCsReq => "CmdTakeOfferingRewardCsReq",
            Self::CmdOfferingInfoScNotify => "CmdOfferingInfoScNotify",
            Self::CmdGetOfferingInfoScRsp => "CmdGetOfferingInfoScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdOfferingTypeNone" => Some(Self::None),
            "CmdSubmitOfferingItemScRsp" => Some(Self::CmdSubmitOfferingItemScRsp),
            "CmdTakeOfferingRewardScRsp" => Some(Self::CmdTakeOfferingRewardScRsp),
            "CmdGetOfferingInfoCsReq" => Some(Self::CmdGetOfferingInfoCsReq),
            "CmdSubmitOfferingItemCsReq" => Some(Self::CmdSubmitOfferingItemCsReq),
            "CmdTakeOfferingRewardCsReq" => Some(Self::CmdTakeOfferingRewardCsReq),
            "CmdOfferingInfoScNotify" => Some(Self::CmdOfferingInfoScNotify),
            "CmdGetOfferingInfoScRsp" => Some(Self::CmdGetOfferingInfoScRsp),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Fbomlibegoc {
    OfferingStateNone = 0,
    OfferingStateLock = 1,
    OfferingStateOpen = 2,
}
impl Fbomlibegoc {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::OfferingStateNone => "OFFERING_STATE_NONE",
            Self::OfferingStateLock => "OFFERING_STATE_LOCK",
            Self::OfferingStateOpen => "OFFERING_STATE_OPEN",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "OFFERING_STATE_NONE" => Some(Self::OfferingStateNone),
            "OFFERING_STATE_LOCK" => Some(Self::OfferingStateLock),
            "OFFERING_STATE_OPEN" => Some(Self::OfferingStateOpen),
            _ => None,
        }
    }
}
/// FBCBBJLCMGP
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdPamMissionType {
    None = 0,
    CmdAcceptedPamMissionExpireCsReq = 4001,
    CmdAcceptedPamMissionExpireScRsp = 4068,
    CmdSyncAcceptedPamMissionNotify = 4058,
}
impl CmdPamMissionType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdPamMissionTypeNone",
            Self::CmdAcceptedPamMissionExpireCsReq => "CmdAcceptedPamMissionExpireCsReq",
            Self::CmdAcceptedPamMissionExpireScRsp => "CmdAcceptedPamMissionExpireScRsp",
            Self::CmdSyncAcceptedPamMissionNotify => "CmdSyncAcceptedPamMissionNotify",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdPamMissionTypeNone" => Some(Self::None),
            "CmdAcceptedPamMissionExpireCsReq" => {
                Some(Self::CmdAcceptedPamMissionExpireCsReq)
            }
            "CmdAcceptedPamMissionExpireScRsp" => {
                Some(Self::CmdAcceptedPamMissionExpireScRsp)
            }
            "CmdSyncAcceptedPamMissionNotify" => {
                Some(Self::CmdSyncAcceptedPamMissionNotify)
            }
            _ => None,
        }
    }
}
/// PGNDIMHLNJJ
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdPamSkinType {
    None = 0,
    CmdUnlockPamSkinScNotify = 8124,
    CmdSelectPamSkinCsReq = 8132,
    CmdGetPamSkinDataCsReq = 8137,
    CmdGetPamSkinDataScRsp = 8128,
    CmdSelectPamSkinScRsp = 8122,
}
impl CmdPamSkinType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdPamSkinTypeNone",
            Self::CmdUnlockPamSkinScNotify => "CmdUnlockPamSkinScNotify",
            Self::CmdSelectPamSkinCsReq => "CmdSelectPamSkinCsReq",
            Self::CmdGetPamSkinDataCsReq => "CmdGetPamSkinDataCsReq",
            Self::CmdGetPamSkinDataScRsp => "CmdGetPamSkinDataScRsp",
            Self::CmdSelectPamSkinScRsp => "CmdSelectPamSkinScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdPamSkinTypeNone" => Some(Self::None),
            "CmdUnlockPamSkinScNotify" => Some(Self::CmdUnlockPamSkinScNotify),
            "CmdSelectPamSkinCsReq" => Some(Self::CmdSelectPamSkinCsReq),
            "CmdGetPamSkinDataCsReq" => Some(Self::CmdGetPamSkinDataCsReq),
            "CmdGetPamSkinDataScRsp" => Some(Self::CmdGetPamSkinDataScRsp),
            "CmdSelectPamSkinScRsp" => Some(Self::CmdSelectPamSkinScRsp),
            _ => None,
        }
    }
}
/// DDJJCPPGCOE
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdPetType {
    None = 0,
    CmdCurPetChangedScNotify = 7616,
    CmdSummonPetCsReq = 7601,
    CmdRecallPetCsReq = 7623,
    CmdRecallPetScRsp = 7608,
    CmdGetPetDataCsReq = 7622,
    CmdGetPetDataScRsp = 7614,
    CmdSummonPetScRsp = 7615,
}
impl CmdPetType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdPetTypeNone",
            Self::CmdCurPetChangedScNotify => "CmdCurPetChangedScNotify",
            Self::CmdSummonPetCsReq => "CmdSummonPetCsReq",
            Self::CmdRecallPetCsReq => "CmdRecallPetCsReq",
            Self::CmdRecallPetScRsp => "CmdRecallPetScRsp",
            Self::CmdGetPetDataCsReq => "CmdGetPetDataCsReq",
            Self::CmdGetPetDataScRsp => "CmdGetPetDataScRsp",
            Self::CmdSummonPetScRsp => "CmdSummonPetScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdPetTypeNone" => Some(Self::None),
            "CmdCurPetChangedScNotify" => Some(Self::CmdCurPetChangedScNotify),
            "CmdSummonPetCsReq" => Some(Self::CmdSummonPetCsReq),
            "CmdRecallPetCsReq" => Some(Self::CmdRecallPetCsReq),
            "CmdRecallPetScRsp" => Some(Self::CmdRecallPetScRsp),
            "CmdGetPetDataCsReq" => Some(Self::CmdGetPetDataCsReq),
            "CmdGetPetDataScRsp" => Some(Self::CmdGetPetDataScRsp),
            "CmdSummonPetScRsp" => Some(Self::CmdSummonPetScRsp),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Cdefbkpcppa {
    PetOperationTypeNone = 0,
    PetOperationTypeSummon = 1,
    PetOperationTypeRecall = 2,
}
impl Cdefbkpcppa {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::PetOperationTypeNone => "PET_OPERATION_TYPE_NONE",
            Self::PetOperationTypeSummon => "PET_OPERATION_TYPE_SUMMON",
            Self::PetOperationTypeRecall => "PET_OPERATION_TYPE_RECALL",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PET_OPERATION_TYPE_NONE" => Some(Self::PetOperationTypeNone),
            "PET_OPERATION_TYPE_SUMMON" => Some(Self::PetOperationTypeSummon),
            "PET_OPERATION_TYPE_RECALL" => Some(Self::PetOperationTypeRecall),
            _ => None,
        }
    }
}
/// ONIDFEPMGCF
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdPhoneType {
    None = 0,
    CmdGetPhoneDataScRsp = 5168,
    CmdUnlockPhoneThemeScNotify = 5176,
    CmdUnlockChatBubbleScNotify = 5130,
    CmdSelectPhoneThemeCsReq = 5156,
    CmdSelectPhoneThemeScRsp = 5197,
    CmdSelectChatBubbleScRsp = 5124,
    CmdGetPhoneDataCsReq = 5101,
    CmdSelectChatBubbleCsReq = 5158,
}
impl CmdPhoneType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdPhoneTypeNone",
            Self::CmdGetPhoneDataScRsp => "CmdGetPhoneDataScRsp",
            Self::CmdUnlockPhoneThemeScNotify => "CmdUnlockPhoneThemeScNotify",
            Self::CmdUnlockChatBubbleScNotify => "CmdUnlockChatBubbleScNotify",
            Self::CmdSelectPhoneThemeCsReq => "CmdSelectPhoneThemeCsReq",
            Self::CmdSelectPhoneThemeScRsp => "CmdSelectPhoneThemeScRsp",
            Self::CmdSelectChatBubbleScRsp => "CmdSelectChatBubbleScRsp",
            Self::CmdGetPhoneDataCsReq => "CmdGetPhoneDataCsReq",
            Self::CmdSelectChatBubbleCsReq => "CmdSelectChatBubbleCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdPhoneTypeNone" => Some(Self::None),
            "CmdGetPhoneDataScRsp" => Some(Self::CmdGetPhoneDataScRsp),
            "CmdUnlockPhoneThemeScNotify" => Some(Self::CmdUnlockPhoneThemeScNotify),
            "CmdUnlockChatBubbleScNotify" => Some(Self::CmdUnlockChatBubbleScNotify),
            "CmdSelectPhoneThemeCsReq" => Some(Self::CmdSelectPhoneThemeCsReq),
            "CmdSelectPhoneThemeScRsp" => Some(Self::CmdSelectPhoneThemeScRsp),
            "CmdSelectChatBubbleScRsp" => Some(Self::CmdSelectChatBubbleScRsp),
            "CmdGetPhoneDataCsReq" => Some(Self::CmdGetPhoneDataCsReq),
            "CmdSelectChatBubbleCsReq" => Some(Self::CmdSelectChatBubbleCsReq),
            _ => None,
        }
    }
}
/// ENDOCLJNEEC
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdPlayerType {
    None = 0,
    CmdPlayerLoginScRsp = 68,
    CmdReserveStaminaExchangeCsReq = 51,
    CmdFeatureSwitchClosedScNotify = 88,
    CmdGetAuthkeyCsReq = 80,
    CmdGetAuthkeyScRsp = 39,
    CmdQueryProductInfoScRsp = 67,
    CmdSetGameplayBirthdayCsReq = 54,
    CmdStaminaInfoScNotify = 72,
    CmdSetRedPointStatusScNotify = 34,
    CmdUnlockAvatarPathScRsp = 94,
    CmdSetGenderCsReq = 40,
    CmdGetSecretKeyInfoCsReq = 74,
    CmdGetLevelRewardTakenListCsReq = 91,
    CmdSetGameplayBirthdayScRsp = 61,
    CmdUnlockAvatarPathCsReq = 43,
    CmdGetGameStateServiceConfigCsReq = 21,
    CmdGetMultiPathAvatarInfoScRsp = 53,
    CmdServerAnnounceNotify = 70,
    CmdGateServerScNotify = 7,
    CmdSetMultipleAvatarPathsCsReq = 45,
    CmdReserveStaminaExchangeScRsp = 93,
    CmdUpdatePsnSettingsInfoScRsp = 42,
    CmdPlayerHeartBeatCsReq = 26,
    CmdGmTalkCsReq = 11,
    CmdGetBasicInfoScRsp = 77,
    CmdSetNicknameScRsp = 17,
    CmdClientObjUploadScRsp = 46,
    CmdUpdatePsnSettingsInfoCsReq = 66,
    CmdPlayerKickOutScNotify = 28,
    CmdPlayerHeartBeatScRsp = 63,
    CmdGetLevelRewardTakenListScRsp = 18,
    CmdSetPlayerInfoScRsp = 13,
    CmdUpdatePlayerSettingCsReq = 33,
    CmdQueryProductInfoCsReq = 78,
    CmdClientDownloadDataScNotify = 29,
    CmdGmTalkScNotify = 76,
    CmdClientObjDownloadDataScNotify = 31,
    CmdAceAntiCheaterCsReq = 90,
    CmdDailyRefreshNotify = 6,
    CmdGetLevelRewardCsReq = 95,
    CmdGetVideoVersionKeyCsReq = 84,
    CmdSetGenderScRsp = 3,
    CmdAceAntiCheaterScRsp = 55,
    CmdPlayerGetTokenScRsp = 56,
    CmdPlayerLogoutCsReq = 58,
    CmdPlayerLoginFinishCsReq = 4,
    CmdUpdateFeatureSwitchScNotify = 64,
    CmdGetSecretKeyInfoScRsp = 52,
    CmdMonthCardRewardNotify = 85,
    CmdAntiAddictScNotify = 23,
    CmdExchangeStaminaScRsp = 47,
    CmdUpdatePlayerSettingScRsp = 2,
    CmdPlayerLogoutScRsp = 24,
    CmdGetBasicInfoCsReq = 15,
    CmdPlayerLoginFinishScRsp = 79,
    CmdPlayerGetTokenCsReq = 30,
    CmdExchangeStaminaCsReq = 22,
    CmdGetGameStateServiceConfigScRsp = 37,
    CmdRetcodeNotify = 60,
    CmdAvatarPathChangedNotify = 16,
    CmdRegionStopScNotify = 96,
    CmdGmTalkScRsp = 5,
    CmdSetLanguageCsReq = 20,
    CmdSetMultipleAvatarPathsScRsp = 87,
    CmdSetNicknameCsReq = 12,
    CmdGetVideoVersionKeyScRsp = 10,
    CmdSetPlayerInfoCsReq = 57,
    CmdPlayerLoginCsReq = 1,
    CmdSetAvatarPathCsReq = 32,
    CmdClientObjUploadCsReq = 98,
    CmdSetLanguageScRsp = 92,
    CmdGetMultiPathAvatarInfoCsReq = 99,
    CmdGetLevelRewardScRsp = 50,
    CmdSetAvatarPathScRsp = 35,
}
impl CmdPlayerType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdPlayerTypeNone",
            Self::CmdPlayerLoginScRsp => "CmdPlayerLoginScRsp",
            Self::CmdReserveStaminaExchangeCsReq => "CmdReserveStaminaExchangeCsReq",
            Self::CmdFeatureSwitchClosedScNotify => "CmdFeatureSwitchClosedScNotify",
            Self::CmdGetAuthkeyCsReq => "CmdGetAuthkeyCsReq",
            Self::CmdGetAuthkeyScRsp => "CmdGetAuthkeyScRsp",
            Self::CmdQueryProductInfoScRsp => "CmdQueryProductInfoScRsp",
            Self::CmdSetGameplayBirthdayCsReq => "CmdSetGameplayBirthdayCsReq",
            Self::CmdStaminaInfoScNotify => "CmdStaminaInfoScNotify",
            Self::CmdSetRedPointStatusScNotify => "CmdSetRedPointStatusScNotify",
            Self::CmdUnlockAvatarPathScRsp => "CmdUnlockAvatarPathScRsp",
            Self::CmdSetGenderCsReq => "CmdSetGenderCsReq",
            Self::CmdGetSecretKeyInfoCsReq => "CmdGetSecretKeyInfoCsReq",
            Self::CmdGetLevelRewardTakenListCsReq => "CmdGetLevelRewardTakenListCsReq",
            Self::CmdSetGameplayBirthdayScRsp => "CmdSetGameplayBirthdayScRsp",
            Self::CmdUnlockAvatarPathCsReq => "CmdUnlockAvatarPathCsReq",
            Self::CmdGetGameStateServiceConfigCsReq => {
                "CmdGetGameStateServiceConfigCsReq"
            }
            Self::CmdGetMultiPathAvatarInfoScRsp => "CmdGetMultiPathAvatarInfoScRsp",
            Self::CmdServerAnnounceNotify => "CmdServerAnnounceNotify",
            Self::CmdGateServerScNotify => "CmdGateServerScNotify",
            Self::CmdSetMultipleAvatarPathsCsReq => "CmdSetMultipleAvatarPathsCsReq",
            Self::CmdReserveStaminaExchangeScRsp => "CmdReserveStaminaExchangeScRsp",
            Self::CmdUpdatePsnSettingsInfoScRsp => "CmdUpdatePsnSettingsInfoScRsp",
            Self::CmdPlayerHeartBeatCsReq => "CmdPlayerHeartBeatCsReq",
            Self::CmdGmTalkCsReq => "CmdGmTalkCsReq",
            Self::CmdGetBasicInfoScRsp => "CmdGetBasicInfoScRsp",
            Self::CmdSetNicknameScRsp => "CmdSetNicknameScRsp",
            Self::CmdClientObjUploadScRsp => "CmdClientObjUploadScRsp",
            Self::CmdUpdatePsnSettingsInfoCsReq => "CmdUpdatePsnSettingsInfoCsReq",
            Self::CmdPlayerKickOutScNotify => "CmdPlayerKickOutScNotify",
            Self::CmdPlayerHeartBeatScRsp => "CmdPlayerHeartBeatScRsp",
            Self::CmdGetLevelRewardTakenListScRsp => "CmdGetLevelRewardTakenListScRsp",
            Self::CmdSetPlayerInfoScRsp => "CmdSetPlayerInfoScRsp",
            Self::CmdUpdatePlayerSettingCsReq => "CmdUpdatePlayerSettingCsReq",
            Self::CmdQueryProductInfoCsReq => "CmdQueryProductInfoCsReq",
            Self::CmdClientDownloadDataScNotify => "CmdClientDownloadDataScNotify",
            Self::CmdGmTalkScNotify => "CmdGmTalkScNotify",
            Self::CmdClientObjDownloadDataScNotify => "CmdClientObjDownloadDataScNotify",
            Self::CmdAceAntiCheaterCsReq => "CmdAceAntiCheaterCsReq",
            Self::CmdDailyRefreshNotify => "CmdDailyRefreshNotify",
            Self::CmdGetLevelRewardCsReq => "CmdGetLevelRewardCsReq",
            Self::CmdGetVideoVersionKeyCsReq => "CmdGetVideoVersionKeyCsReq",
            Self::CmdSetGenderScRsp => "CmdSetGenderScRsp",
            Self::CmdAceAntiCheaterScRsp => "CmdAceAntiCheaterScRsp",
            Self::CmdPlayerGetTokenScRsp => "CmdPlayerGetTokenScRsp",
            Self::CmdPlayerLogoutCsReq => "CmdPlayerLogoutCsReq",
            Self::CmdPlayerLoginFinishCsReq => "CmdPlayerLoginFinishCsReq",
            Self::CmdUpdateFeatureSwitchScNotify => "CmdUpdateFeatureSwitchScNotify",
            Self::CmdGetSecretKeyInfoScRsp => "CmdGetSecretKeyInfoScRsp",
            Self::CmdMonthCardRewardNotify => "CmdMonthCardRewardNotify",
            Self::CmdAntiAddictScNotify => "CmdAntiAddictScNotify",
            Self::CmdExchangeStaminaScRsp => "CmdExchangeStaminaScRsp",
            Self::CmdUpdatePlayerSettingScRsp => "CmdUpdatePlayerSettingScRsp",
            Self::CmdPlayerLogoutScRsp => "CmdPlayerLogoutScRsp",
            Self::CmdGetBasicInfoCsReq => "CmdGetBasicInfoCsReq",
            Self::CmdPlayerLoginFinishScRsp => "CmdPlayerLoginFinishScRsp",
            Self::CmdPlayerGetTokenCsReq => "CmdPlayerGetTokenCsReq",
            Self::CmdExchangeStaminaCsReq => "CmdExchangeStaminaCsReq",
            Self::CmdGetGameStateServiceConfigScRsp => {
                "CmdGetGameStateServiceConfigScRsp"
            }
            Self::CmdRetcodeNotify => "CmdRetcodeNotify",
            Self::CmdAvatarPathChangedNotify => "CmdAvatarPathChangedNotify",
            Self::CmdRegionStopScNotify => "CmdRegionStopScNotify",
            Self::CmdGmTalkScRsp => "CmdGmTalkScRsp",
            Self::CmdSetLanguageCsReq => "CmdSetLanguageCsReq",
            Self::CmdSetMultipleAvatarPathsScRsp => "CmdSetMultipleAvatarPathsScRsp",
            Self::CmdSetNicknameCsReq => "CmdSetNicknameCsReq",
            Self::CmdGetVideoVersionKeyScRsp => "CmdGetVideoVersionKeyScRsp",
            Self::CmdSetPlayerInfoCsReq => "CmdSetPlayerInfoCsReq",
            Self::CmdPlayerLoginCsReq => "CmdPlayerLoginCsReq",
            Self::CmdSetAvatarPathCsReq => "CmdSetAvatarPathCsReq",
            Self::CmdClientObjUploadCsReq => "CmdClientObjUploadCsReq",
            Self::CmdSetLanguageScRsp => "CmdSetLanguageScRsp",
            Self::CmdGetMultiPathAvatarInfoCsReq => "CmdGetMultiPathAvatarInfoCsReq",
            Self::CmdGetLevelRewardScRsp => "CmdGetLevelRewardScRsp",
            Self::CmdSetAvatarPathScRsp => "CmdSetAvatarPathScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdPlayerTypeNone" => Some(Self::None),
            "CmdPlayerLoginScRsp" => Some(Self::CmdPlayerLoginScRsp),
            "CmdReserveStaminaExchangeCsReq" => {
                Some(Self::CmdReserveStaminaExchangeCsReq)
            }
            "CmdFeatureSwitchClosedScNotify" => {
                Some(Self::CmdFeatureSwitchClosedScNotify)
            }
            "CmdGetAuthkeyCsReq" => Some(Self::CmdGetAuthkeyCsReq),
            "CmdGetAuthkeyScRsp" => Some(Self::CmdGetAuthkeyScRsp),
            "CmdQueryProductInfoScRsp" => Some(Self::CmdQueryProductInfoScRsp),
            "CmdSetGameplayBirthdayCsReq" => Some(Self::CmdSetGameplayBirthdayCsReq),
            "CmdStaminaInfoScNotify" => Some(Self::CmdStaminaInfoScNotify),
            "CmdSetRedPointStatusScNotify" => Some(Self::CmdSetRedPointStatusScNotify),
            "CmdUnlockAvatarPathScRsp" => Some(Self::CmdUnlockAvatarPathScRsp),
            "CmdSetGenderCsReq" => Some(Self::CmdSetGenderCsReq),
            "CmdGetSecretKeyInfoCsReq" => Some(Self::CmdGetSecretKeyInfoCsReq),
            "CmdGetLevelRewardTakenListCsReq" => {
                Some(Self::CmdGetLevelRewardTakenListCsReq)
            }
            "CmdSetGameplayBirthdayScRsp" => Some(Self::CmdSetGameplayBirthdayScRsp),
            "CmdUnlockAvatarPathCsReq" => Some(Self::CmdUnlockAvatarPathCsReq),
            "CmdGetGameStateServiceConfigCsReq" => {
                Some(Self::CmdGetGameStateServiceConfigCsReq)
            }
            "CmdGetMultiPathAvatarInfoScRsp" => {
                Some(Self::CmdGetMultiPathAvatarInfoScRsp)
            }
            "CmdServerAnnounceNotify" => Some(Self::CmdServerAnnounceNotify),
            "CmdGateServerScNotify" => Some(Self::CmdGateServerScNotify),
            "CmdSetMultipleAvatarPathsCsReq" => {
                Some(Self::CmdSetMultipleAvatarPathsCsReq)
            }
            "CmdReserveStaminaExchangeScRsp" => {
                Some(Self::CmdReserveStaminaExchangeScRsp)
            }
            "CmdUpdatePsnSettingsInfoScRsp" => Some(Self::CmdUpdatePsnSettingsInfoScRsp),
            "CmdPlayerHeartBeatCsReq" => Some(Self::CmdPlayerHeartBeatCsReq),
            "CmdGmTalkCsReq" => Some(Self::CmdGmTalkCsReq),
            "CmdGetBasicInfoScRsp" => Some(Self::CmdGetBasicInfoScRsp),
            "CmdSetNicknameScRsp" => Some(Self::CmdSetNicknameScRsp),
            "CmdClientObjUploadScRsp" => Some(Self::CmdClientObjUploadScRsp),
            "CmdUpdatePsnSettingsInfoCsReq" => Some(Self::CmdUpdatePsnSettingsInfoCsReq),
            "CmdPlayerKickOutScNotify" => Some(Self::CmdPlayerKickOutScNotify),
            "CmdPlayerHeartBeatScRsp" => Some(Self::CmdPlayerHeartBeatScRsp),
            "CmdGetLevelRewardTakenListScRsp" => {
                Some(Self::CmdGetLevelRewardTakenListScRsp)
            }
            "CmdSetPlayerInfoScRsp" => Some(Self::CmdSetPlayerInfoScRsp),
            "CmdUpdatePlayerSettingCsReq" => Some(Self::CmdUpdatePlayerSettingCsReq),
            "CmdQueryProductInfoCsReq" => Some(Self::CmdQueryProductInfoCsReq),
            "CmdClientDownloadDataScNotify" => Some(Self::CmdClientDownloadDataScNotify),
            "CmdGmTalkScNotify" => Some(Self::CmdGmTalkScNotify),
            "CmdClientObjDownloadDataScNotify" => {
                Some(Self::CmdClientObjDownloadDataScNotify)
            }
            "CmdAceAntiCheaterCsReq" => Some(Self::CmdAceAntiCheaterCsReq),
            "CmdDailyRefreshNotify" => Some(Self::CmdDailyRefreshNotify),
            "CmdGetLevelRewardCsReq" => Some(Self::CmdGetLevelRewardCsReq),
            "CmdGetVideoVersionKeyCsReq" => Some(Self::CmdGetVideoVersionKeyCsReq),
            "CmdSetGenderScRsp" => Some(Self::CmdSetGenderScRsp),
            "CmdAceAntiCheaterScRsp" => Some(Self::CmdAceAntiCheaterScRsp),
            "CmdPlayerGetTokenScRsp" => Some(Self::CmdPlayerGetTokenScRsp),
            "CmdPlayerLogoutCsReq" => Some(Self::CmdPlayerLogoutCsReq),
            "CmdPlayerLoginFinishCsReq" => Some(Self::CmdPlayerLoginFinishCsReq),
            "CmdUpdateFeatureSwitchScNotify" => {
                Some(Self::CmdUpdateFeatureSwitchScNotify)
            }
            "CmdGetSecretKeyInfoScRsp" => Some(Self::CmdGetSecretKeyInfoScRsp),
            "CmdMonthCardRewardNotify" => Some(Self::CmdMonthCardRewardNotify),
            "CmdAntiAddictScNotify" => Some(Self::CmdAntiAddictScNotify),
            "CmdExchangeStaminaScRsp" => Some(Self::CmdExchangeStaminaScRsp),
            "CmdUpdatePlayerSettingScRsp" => Some(Self::CmdUpdatePlayerSettingScRsp),
            "CmdPlayerLogoutScRsp" => Some(Self::CmdPlayerLogoutScRsp),
            "CmdGetBasicInfoCsReq" => Some(Self::CmdGetBasicInfoCsReq),
            "CmdPlayerLoginFinishScRsp" => Some(Self::CmdPlayerLoginFinishScRsp),
            "CmdPlayerGetTokenCsReq" => Some(Self::CmdPlayerGetTokenCsReq),
            "CmdExchangeStaminaCsReq" => Some(Self::CmdExchangeStaminaCsReq),
            "CmdGetGameStateServiceConfigScRsp" => {
                Some(Self::CmdGetGameStateServiceConfigScRsp)
            }
            "CmdRetcodeNotify" => Some(Self::CmdRetcodeNotify),
            "CmdAvatarPathChangedNotify" => Some(Self::CmdAvatarPathChangedNotify),
            "CmdRegionStopScNotify" => Some(Self::CmdRegionStopScNotify),
            "CmdGmTalkScRsp" => Some(Self::CmdGmTalkScRsp),
            "CmdSetLanguageCsReq" => Some(Self::CmdSetLanguageCsReq),
            "CmdSetMultipleAvatarPathsScRsp" => {
                Some(Self::CmdSetMultipleAvatarPathsScRsp)
            }
            "CmdSetNicknameCsReq" => Some(Self::CmdSetNicknameCsReq),
            "CmdGetVideoVersionKeyScRsp" => Some(Self::CmdGetVideoVersionKeyScRsp),
            "CmdSetPlayerInfoCsReq" => Some(Self::CmdSetPlayerInfoCsReq),
            "CmdPlayerLoginCsReq" => Some(Self::CmdPlayerLoginCsReq),
            "CmdSetAvatarPathCsReq" => Some(Self::CmdSetAvatarPathCsReq),
            "CmdClientObjUploadCsReq" => Some(Self::CmdClientObjUploadCsReq),
            "CmdSetLanguageScRsp" => Some(Self::CmdSetLanguageScRsp),
            "CmdGetMultiPathAvatarInfoCsReq" => {
                Some(Self::CmdGetMultiPathAvatarInfoCsReq)
            }
            "CmdGetLevelRewardScRsp" => Some(Self::CmdGetLevelRewardScRsp),
            "CmdSetAvatarPathScRsp" => Some(Self::CmdSetAvatarPathScRsp),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Ilpmnldgeak {
    AuthkeySignTypeNone = 0,
    AuthkeySignTypeDefault = 1,
    AuthkeySignTypeRsa = 2,
}
impl Ilpmnldgeak {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::AuthkeySignTypeNone => "AUTHKEY_SIGN_TYPE_NONE",
            Self::AuthkeySignTypeDefault => "AUTHKEY_SIGN_TYPE_DEFAULT",
            Self::AuthkeySignTypeRsa => "AUTHKEY_SIGN_TYPE_RSA",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "AUTHKEY_SIGN_TYPE_NONE" => Some(Self::AuthkeySignTypeNone),
            "AUTHKEY_SIGN_TYPE_DEFAULT" => Some(Self::AuthkeySignTypeDefault),
            "AUTHKEY_SIGN_TYPE_RSA" => Some(Self::AuthkeySignTypeRsa),
            _ => None,
        }
    }
}
/// LEPEOCNCMAD
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdPlayerBoardType {
    None = 0,
    CmdSetDisplayAvatarCsReq = 2830,
    CmdSetHeadIconCsReq = 2858,
    CmdSetIsDisplayAvatarInfoScRsp = 2876,
    CmdGetPlayerBoardDataScRsp = 2868,
    CmdSetHeadIconScRsp = 2824,
    CmdUnlockHeadIconScNotify = 2828,
    CmdSetSignatureScRsp = 2805,
    CmdSetAssistAvatarCsReq = 2814,
    CmdSetDisplayAvatarScRsp = 2856,
    CmdSetIsDisplayAvatarInfoCsReq = 2897,
    CmdSetSignatureCsReq = 2811,
    CmdSetAssistAvatarScRsp = 2849,
    CmdGetPlayerBoardDataCsReq = 2801,
}
impl CmdPlayerBoardType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdPlayerBoardTypeNone",
            Self::CmdSetDisplayAvatarCsReq => "CmdSetDisplayAvatarCsReq",
            Self::CmdSetHeadIconCsReq => "CmdSetHeadIconCsReq",
            Self::CmdSetIsDisplayAvatarInfoScRsp => "CmdSetIsDisplayAvatarInfoScRsp",
            Self::CmdGetPlayerBoardDataScRsp => "CmdGetPlayerBoardDataScRsp",
            Self::CmdSetHeadIconScRsp => "CmdSetHeadIconScRsp",
            Self::CmdUnlockHeadIconScNotify => "CmdUnlockHeadIconScNotify",
            Self::CmdSetSignatureScRsp => "CmdSetSignatureScRsp",
            Self::CmdSetAssistAvatarCsReq => "CmdSetAssistAvatarCsReq",
            Self::CmdSetDisplayAvatarScRsp => "CmdSetDisplayAvatarScRsp",
            Self::CmdSetIsDisplayAvatarInfoCsReq => "CmdSetIsDisplayAvatarInfoCsReq",
            Self::CmdSetSignatureCsReq => "CmdSetSignatureCsReq",
            Self::CmdSetAssistAvatarScRsp => "CmdSetAssistAvatarScRsp",
            Self::CmdGetPlayerBoardDataCsReq => "CmdGetPlayerBoardDataCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdPlayerBoardTypeNone" => Some(Self::None),
            "CmdSetDisplayAvatarCsReq" => Some(Self::CmdSetDisplayAvatarCsReq),
            "CmdSetHeadIconCsReq" => Some(Self::CmdSetHeadIconCsReq),
            "CmdSetIsDisplayAvatarInfoScRsp" => {
                Some(Self::CmdSetIsDisplayAvatarInfoScRsp)
            }
            "CmdGetPlayerBoardDataScRsp" => Some(Self::CmdGetPlayerBoardDataScRsp),
            "CmdSetHeadIconScRsp" => Some(Self::CmdSetHeadIconScRsp),
            "CmdUnlockHeadIconScNotify" => Some(Self::CmdUnlockHeadIconScNotify),
            "CmdSetSignatureScRsp" => Some(Self::CmdSetSignatureScRsp),
            "CmdSetAssistAvatarCsReq" => Some(Self::CmdSetAssistAvatarCsReq),
            "CmdSetDisplayAvatarScRsp" => Some(Self::CmdSetDisplayAvatarScRsp),
            "CmdSetIsDisplayAvatarInfoCsReq" => {
                Some(Self::CmdSetIsDisplayAvatarInfoCsReq)
            }
            "CmdSetSignatureCsReq" => Some(Self::CmdSetSignatureCsReq),
            "CmdSetAssistAvatarScRsp" => Some(Self::CmdSetAssistAvatarScRsp),
            "CmdGetPlayerBoardDataCsReq" => Some(Self::CmdGetPlayerBoardDataCsReq),
            _ => None,
        }
    }
}
/// MPDJCJPDFGJ
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdPlayerReturnType {
    None = 0,
    CmdPlayerReturnSignScRsp = 4558,
    CmdPlayerReturnForceFinishScNotify = 4505,
    CmdPlayerReturnSignCsReq = 4568,
    CmdPlayerReturnTakeRewardCsReq = 4597,
    CmdPlayerReturnPointChangeScNotify = 4524,
    CmdPlayerReturnStartScNotify = 4501,
    CmdPlayerReturnTakeRewardScRsp = 4576,
    CmdPlayerReturnTakePointRewardCsReq = 4530,
    CmdPlayerReturnInfoQueryScRsp = 4511,
    CmdPlayerReturnInfoQueryCsReq = 4528,
    CmdPlayerReturnTakePointRewardScRsp = 4556,
}
impl CmdPlayerReturnType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdPlayerReturnTypeNone",
            Self::CmdPlayerReturnSignScRsp => "CmdPlayerReturnSignScRsp",
            Self::CmdPlayerReturnForceFinishScNotify => {
                "CmdPlayerReturnForceFinishScNotify"
            }
            Self::CmdPlayerReturnSignCsReq => "CmdPlayerReturnSignCsReq",
            Self::CmdPlayerReturnTakeRewardCsReq => "CmdPlayerReturnTakeRewardCsReq",
            Self::CmdPlayerReturnPointChangeScNotify => {
                "CmdPlayerReturnPointChangeScNotify"
            }
            Self::CmdPlayerReturnStartScNotify => "CmdPlayerReturnStartScNotify",
            Self::CmdPlayerReturnTakeRewardScRsp => "CmdPlayerReturnTakeRewardScRsp",
            Self::CmdPlayerReturnTakePointRewardCsReq => {
                "CmdPlayerReturnTakePointRewardCsReq"
            }
            Self::CmdPlayerReturnInfoQueryScRsp => "CmdPlayerReturnInfoQueryScRsp",
            Self::CmdPlayerReturnInfoQueryCsReq => "CmdPlayerReturnInfoQueryCsReq",
            Self::CmdPlayerReturnTakePointRewardScRsp => {
                "CmdPlayerReturnTakePointRewardScRsp"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdPlayerReturnTypeNone" => Some(Self::None),
            "CmdPlayerReturnSignScRsp" => Some(Self::CmdPlayerReturnSignScRsp),
            "CmdPlayerReturnForceFinishScNotify" => {
                Some(Self::CmdPlayerReturnForceFinishScNotify)
            }
            "CmdPlayerReturnSignCsReq" => Some(Self::CmdPlayerReturnSignCsReq),
            "CmdPlayerReturnTakeRewardCsReq" => {
                Some(Self::CmdPlayerReturnTakeRewardCsReq)
            }
            "CmdPlayerReturnPointChangeScNotify" => {
                Some(Self::CmdPlayerReturnPointChangeScNotify)
            }
            "CmdPlayerReturnStartScNotify" => Some(Self::CmdPlayerReturnStartScNotify),
            "CmdPlayerReturnTakeRewardScRsp" => {
                Some(Self::CmdPlayerReturnTakeRewardScRsp)
            }
            "CmdPlayerReturnTakePointRewardCsReq" => {
                Some(Self::CmdPlayerReturnTakePointRewardCsReq)
            }
            "CmdPlayerReturnInfoQueryScRsp" => Some(Self::CmdPlayerReturnInfoQueryScRsp),
            "CmdPlayerReturnInfoQueryCsReq" => Some(Self::CmdPlayerReturnInfoQueryCsReq),
            "CmdPlayerReturnTakePointRewardScRsp" => {
                Some(Self::CmdPlayerReturnTakePointRewardScRsp)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Nobpmmnfenj {
    PlayerReturnNone = 0,
    PlayerReturnProcessing = 1,
    PlayerReturnFinish = 2,
}
impl Nobpmmnfenj {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::PlayerReturnNone => "PLAYER_RETURN_NONE",
            Self::PlayerReturnProcessing => "PLAYER_RETURN_PROCESSING",
            Self::PlayerReturnFinish => "PLAYER_RETURN_FINISH",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PLAYER_RETURN_NONE" => Some(Self::PlayerReturnNone),
            "PLAYER_RETURN_PROCESSING" => Some(Self::PlayerReturnProcessing),
            "PLAYER_RETURN_FINISH" => Some(Self::PlayerReturnFinish),
            _ => None,
        }
    }
}
/// NINNNHBFPFO
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdPlotType {
    None = 0,
    CmdFinishPlotCsReq = 1101,
    CmdFinishPlotScRsp = 1168,
}
impl CmdPlotType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdPlotTypeNone",
            Self::CmdFinishPlotCsReq => "CmdFinishPlotCsReq",
            Self::CmdFinishPlotScRsp => "CmdFinishPlotScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdPlotTypeNone" => Some(Self::None),
            "CmdFinishPlotCsReq" => Some(Self::CmdFinishPlotCsReq),
            "CmdFinishPlotScRsp" => Some(Self::CmdFinishPlotScRsp),
            _ => None,
        }
    }
}
/// GAMDHCOLEIC
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdPunkLordType {
    None = 0,
    CmdTakeKilledPunkLordMonsterScoreScRsp = 3270,
    CmdSharePunkLordMonsterCsReq = 3230,
    CmdSummonPunkLordMonsterCsReq = 3297,
    CmdTakePunkLordPointRewardScRsp = 3222,
    CmdGetPunkLordDataScRsp = 3239,
    CmdGetPunkLordBattleRecordCsReq = 3238,
    CmdPunkLordDataChangeNotify = 3281,
    CmdPunkLordRaidTimeOutScNotify = 3223,
    CmdSummonPunkLordMonsterScRsp = 3276,
    CmdGetPunkLordMonsterDataCsReq = 3201,
    CmdPunkLordBattleResultScNotify = 3218,
    CmdGetPunkLordDataCsReq = 3280,
    CmdTakePunkLordPointRewardCsReq = 3249,
    CmdPunkLordMonsterInfoScNotify = 3247,
    CmdStartPunkLordRaidCsReq = 3258,
    CmdTakeKilledPunkLordMonsterScoreCsReq = 3292,
    CmdSharePunkLordMonsterScRsp = 3256,
    CmdPunkLordMonsterKilledNotify = 3220,
    CmdGetPunkLordMonsterDataScRsp = 3268,
    CmdStartPunkLordRaidScRsp = 3224,
    CmdGetPunkLordBattleRecordScRsp = 3219,
    CmdGetKilledPunkLordMonsterDataCsReq = 3295,
    CmdGetKilledPunkLordMonsterDataScRsp = 3250,
}
impl CmdPunkLordType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdPunkLordTypeNone",
            Self::CmdTakeKilledPunkLordMonsterScoreScRsp => {
                "CmdTakeKilledPunkLordMonsterScoreScRsp"
            }
            Self::CmdSharePunkLordMonsterCsReq => "CmdSharePunkLordMonsterCsReq",
            Self::CmdSummonPunkLordMonsterCsReq => "CmdSummonPunkLordMonsterCsReq",
            Self::CmdTakePunkLordPointRewardScRsp => "CmdTakePunkLordPointRewardScRsp",
            Self::CmdGetPunkLordDataScRsp => "CmdGetPunkLordDataScRsp",
            Self::CmdGetPunkLordBattleRecordCsReq => "CmdGetPunkLordBattleRecordCsReq",
            Self::CmdPunkLordDataChangeNotify => "CmdPunkLordDataChangeNotify",
            Self::CmdPunkLordRaidTimeOutScNotify => "CmdPunkLordRaidTimeOutScNotify",
            Self::CmdSummonPunkLordMonsterScRsp => "CmdSummonPunkLordMonsterScRsp",
            Self::CmdGetPunkLordMonsterDataCsReq => "CmdGetPunkLordMonsterDataCsReq",
            Self::CmdPunkLordBattleResultScNotify => "CmdPunkLordBattleResultScNotify",
            Self::CmdGetPunkLordDataCsReq => "CmdGetPunkLordDataCsReq",
            Self::CmdTakePunkLordPointRewardCsReq => "CmdTakePunkLordPointRewardCsReq",
            Self::CmdPunkLordMonsterInfoScNotify => "CmdPunkLordMonsterInfoScNotify",
            Self::CmdStartPunkLordRaidCsReq => "CmdStartPunkLordRaidCsReq",
            Self::CmdTakeKilledPunkLordMonsterScoreCsReq => {
                "CmdTakeKilledPunkLordMonsterScoreCsReq"
            }
            Self::CmdSharePunkLordMonsterScRsp => "CmdSharePunkLordMonsterScRsp",
            Self::CmdPunkLordMonsterKilledNotify => "CmdPunkLordMonsterKilledNotify",
            Self::CmdGetPunkLordMonsterDataScRsp => "CmdGetPunkLordMonsterDataScRsp",
            Self::CmdStartPunkLordRaidScRsp => "CmdStartPunkLordRaidScRsp",
            Self::CmdGetPunkLordBattleRecordScRsp => "CmdGetPunkLordBattleRecordScRsp",
            Self::CmdGetKilledPunkLordMonsterDataCsReq => {
                "CmdGetKilledPunkLordMonsterDataCsReq"
            }
            Self::CmdGetKilledPunkLordMonsterDataScRsp => {
                "CmdGetKilledPunkLordMonsterDataScRsp"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdPunkLordTypeNone" => Some(Self::None),
            "CmdTakeKilledPunkLordMonsterScoreScRsp" => {
                Some(Self::CmdTakeKilledPunkLordMonsterScoreScRsp)
            }
            "CmdSharePunkLordMonsterCsReq" => Some(Self::CmdSharePunkLordMonsterCsReq),
            "CmdSummonPunkLordMonsterCsReq" => Some(Self::CmdSummonPunkLordMonsterCsReq),
            "CmdTakePunkLordPointRewardScRsp" => {
                Some(Self::CmdTakePunkLordPointRewardScRsp)
            }
            "CmdGetPunkLordDataScRsp" => Some(Self::CmdGetPunkLordDataScRsp),
            "CmdGetPunkLordBattleRecordCsReq" => {
                Some(Self::CmdGetPunkLordBattleRecordCsReq)
            }
            "CmdPunkLordDataChangeNotify" => Some(Self::CmdPunkLordDataChangeNotify),
            "CmdPunkLordRaidTimeOutScNotify" => {
                Some(Self::CmdPunkLordRaidTimeOutScNotify)
            }
            "CmdSummonPunkLordMonsterScRsp" => Some(Self::CmdSummonPunkLordMonsterScRsp),
            "CmdGetPunkLordMonsterDataCsReq" => {
                Some(Self::CmdGetPunkLordMonsterDataCsReq)
            }
            "CmdPunkLordBattleResultScNotify" => {
                Some(Self::CmdPunkLordBattleResultScNotify)
            }
            "CmdGetPunkLordDataCsReq" => Some(Self::CmdGetPunkLordDataCsReq),
            "CmdTakePunkLordPointRewardCsReq" => {
                Some(Self::CmdTakePunkLordPointRewardCsReq)
            }
            "CmdPunkLordMonsterInfoScNotify" => {
                Some(Self::CmdPunkLordMonsterInfoScNotify)
            }
            "CmdStartPunkLordRaidCsReq" => Some(Self::CmdStartPunkLordRaidCsReq),
            "CmdTakeKilledPunkLordMonsterScoreCsReq" => {
                Some(Self::CmdTakeKilledPunkLordMonsterScoreCsReq)
            }
            "CmdSharePunkLordMonsterScRsp" => Some(Self::CmdSharePunkLordMonsterScRsp),
            "CmdPunkLordMonsterKilledNotify" => {
                Some(Self::CmdPunkLordMonsterKilledNotify)
            }
            "CmdGetPunkLordMonsterDataScRsp" => {
                Some(Self::CmdGetPunkLordMonsterDataScRsp)
            }
            "CmdStartPunkLordRaidScRsp" => Some(Self::CmdStartPunkLordRaidScRsp),
            "CmdGetPunkLordBattleRecordScRsp" => {
                Some(Self::CmdGetPunkLordBattleRecordScRsp)
            }
            "CmdGetKilledPunkLordMonsterDataCsReq" => {
                Some(Self::CmdGetKilledPunkLordMonsterDataCsReq)
            }
            "CmdGetKilledPunkLordMonsterDataScRsp" => {
                Some(Self::CmdGetKilledPunkLordMonsterDataScRsp)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Nlefpbicecn {
    PunkLordOperationNone = 0,
    PunkLordOperationRefresh = 1,
    PunkLordOperationShare = 2,
    PunkLordOperationStartRaid = 3,
    PunkLordOperationGetBattleRecord = 4,
}
impl Nlefpbicecn {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::PunkLordOperationNone => "PUNK_LORD_OPERATION_NONE",
            Self::PunkLordOperationRefresh => "PUNK_LORD_OPERATION_REFRESH",
            Self::PunkLordOperationShare => "PUNK_LORD_OPERATION_SHARE",
            Self::PunkLordOperationStartRaid => "PUNK_LORD_OPERATION_START_RAID",
            Self::PunkLordOperationGetBattleRecord => {
                "PUNK_LORD_OPERATION_GET_BATTLE_RECORD"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PUNK_LORD_OPERATION_NONE" => Some(Self::PunkLordOperationNone),
            "PUNK_LORD_OPERATION_REFRESH" => Some(Self::PunkLordOperationRefresh),
            "PUNK_LORD_OPERATION_SHARE" => Some(Self::PunkLordOperationShare),
            "PUNK_LORD_OPERATION_START_RAID" => Some(Self::PunkLordOperationStartRaid),
            "PUNK_LORD_OPERATION_GET_BATTLE_RECORD" => {
                Some(Self::PunkLordOperationGetBattleRecord)
            }
            _ => None,
        }
    }
}
/// HDGLIIEHOLC
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdQuestType {
    None = 0,
    CmdTakeQuestOptionalRewardScRsp = 949,
    CmdGetQuestRecordCsReq = 997,
    CmdGetQuestRecordScRsp = 976,
    CmdGetQuestDataCsReq = 901,
    CmdFinishQuestCsReq = 911,
    CmdBatchGetQuestDataCsReq = 947,
    CmdTakeQuestOptionalRewardCsReq = 914,
    CmdQuestRecordScNotify = 928,
    CmdTakeQuestRewardScRsp = 924,
    CmdFinishQuestScRsp = 905,
    CmdBatchGetQuestDataScRsp = 980,
    CmdGetQuestDataScRsp = 968,
    CmdTakeQuestRewardCsReq = 958,
}
impl CmdQuestType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdQuestTypeNone",
            Self::CmdTakeQuestOptionalRewardScRsp => "CmdTakeQuestOptionalRewardScRsp",
            Self::CmdGetQuestRecordCsReq => "CmdGetQuestRecordCsReq",
            Self::CmdGetQuestRecordScRsp => "CmdGetQuestRecordScRsp",
            Self::CmdGetQuestDataCsReq => "CmdGetQuestDataCsReq",
            Self::CmdFinishQuestCsReq => "CmdFinishQuestCsReq",
            Self::CmdBatchGetQuestDataCsReq => "CmdBatchGetQuestDataCsReq",
            Self::CmdTakeQuestOptionalRewardCsReq => "CmdTakeQuestOptionalRewardCsReq",
            Self::CmdQuestRecordScNotify => "CmdQuestRecordScNotify",
            Self::CmdTakeQuestRewardScRsp => "CmdTakeQuestRewardScRsp",
            Self::CmdFinishQuestScRsp => "CmdFinishQuestScRsp",
            Self::CmdBatchGetQuestDataScRsp => "CmdBatchGetQuestDataScRsp",
            Self::CmdGetQuestDataScRsp => "CmdGetQuestDataScRsp",
            Self::CmdTakeQuestRewardCsReq => "CmdTakeQuestRewardCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdQuestTypeNone" => Some(Self::None),
            "CmdTakeQuestOptionalRewardScRsp" => {
                Some(Self::CmdTakeQuestOptionalRewardScRsp)
            }
            "CmdGetQuestRecordCsReq" => Some(Self::CmdGetQuestRecordCsReq),
            "CmdGetQuestRecordScRsp" => Some(Self::CmdGetQuestRecordScRsp),
            "CmdGetQuestDataCsReq" => Some(Self::CmdGetQuestDataCsReq),
            "CmdFinishQuestCsReq" => Some(Self::CmdFinishQuestCsReq),
            "CmdBatchGetQuestDataCsReq" => Some(Self::CmdBatchGetQuestDataCsReq),
            "CmdTakeQuestOptionalRewardCsReq" => {
                Some(Self::CmdTakeQuestOptionalRewardCsReq)
            }
            "CmdQuestRecordScNotify" => Some(Self::CmdQuestRecordScNotify),
            "CmdTakeQuestRewardScRsp" => Some(Self::CmdTakeQuestRewardScRsp),
            "CmdFinishQuestScRsp" => Some(Self::CmdFinishQuestScRsp),
            "CmdBatchGetQuestDataScRsp" => Some(Self::CmdBatchGetQuestDataScRsp),
            "CmdGetQuestDataScRsp" => Some(Self::CmdGetQuestDataScRsp),
            "CmdTakeQuestRewardCsReq" => Some(Self::CmdTakeQuestRewardCsReq),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum QuestStatus {
    QuestNone = 0,
    QuestDoing = 1,
    QuestFinish = 2,
    QuestClose = 3,
    QuestDelete = 4,
}
impl QuestStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::QuestNone => "QUEST_NONE",
            Self::QuestDoing => "QUEST_DOING",
            Self::QuestFinish => "QUEST_FINISH",
            Self::QuestClose => "QUEST_CLOSE",
            Self::QuestDelete => "QUEST_DELETE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "QUEST_NONE" => Some(Self::QuestNone),
            "QUEST_DOING" => Some(Self::QuestDoing),
            "QUEST_FINISH" => Some(Self::QuestFinish),
            "QUEST_CLOSE" => Some(Self::QuestClose),
            "QUEST_DELETE" => Some(Self::QuestDelete),
            _ => None,
        }
    }
}
/// CIBIDIGCOGC
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdRaidType {
    None = 0,
    CmdSetClientRaidTargetCountCsReq = 2249,
    CmdGetChallengeRaidInfoScRsp = 2297,
    CmdRaidKickByServerScNotify = 2212,
    CmdStartRaidScRsp = 2268,
    CmdChallengeRaidNotify = 2211,
    CmdTakeChallengeRaidRewardScRsp = 2228,
    CmdGetSaveRaidScRsp = 2280,
    CmdGetAllSaveRaidCsReq = 2239,
    CmdGetChallengeRaidInfoCsReq = 2256,
    CmdTakeChallengeRaidRewardCsReq = 2276,
    CmdGetSaveRaidCsReq = 2247,
    CmdLeaveRaidScRsp = 2224,
    CmdLeaveRaidCsReq = 2258,
    CmdDelSaveRaidScNotify = 2223,
    CmdGetRaidInfoCsReq = 2205,
    CmdStartRaidCsReq = 2201,
    CmdGetRaidInfoScRsp = 2214,
    CmdRaidInfoNotify = 2230,
    CmdSetClientRaidTargetCountScRsp = 2222,
    CmdGetAllSaveRaidScRsp = 2296,
}
impl CmdRaidType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdRaidTypeNone",
            Self::CmdSetClientRaidTargetCountCsReq => "CmdSetClientRaidTargetCountCsReq",
            Self::CmdGetChallengeRaidInfoScRsp => "CmdGetChallengeRaidInfoScRsp",
            Self::CmdRaidKickByServerScNotify => "CmdRaidKickByServerScNotify",
            Self::CmdStartRaidScRsp => "CmdStartRaidScRsp",
            Self::CmdChallengeRaidNotify => "CmdChallengeRaidNotify",
            Self::CmdTakeChallengeRaidRewardScRsp => "CmdTakeChallengeRaidRewardScRsp",
            Self::CmdGetSaveRaidScRsp => "CmdGetSaveRaidScRsp",
            Self::CmdGetAllSaveRaidCsReq => "CmdGetAllSaveRaidCsReq",
            Self::CmdGetChallengeRaidInfoCsReq => "CmdGetChallengeRaidInfoCsReq",
            Self::CmdTakeChallengeRaidRewardCsReq => "CmdTakeChallengeRaidRewardCsReq",
            Self::CmdGetSaveRaidCsReq => "CmdGetSaveRaidCsReq",
            Self::CmdLeaveRaidScRsp => "CmdLeaveRaidScRsp",
            Self::CmdLeaveRaidCsReq => "CmdLeaveRaidCsReq",
            Self::CmdDelSaveRaidScNotify => "CmdDelSaveRaidScNotify",
            Self::CmdGetRaidInfoCsReq => "CmdGetRaidInfoCsReq",
            Self::CmdStartRaidCsReq => "CmdStartRaidCsReq",
            Self::CmdGetRaidInfoScRsp => "CmdGetRaidInfoScRsp",
            Self::CmdRaidInfoNotify => "CmdRaidInfoNotify",
            Self::CmdSetClientRaidTargetCountScRsp => "CmdSetClientRaidTargetCountScRsp",
            Self::CmdGetAllSaveRaidScRsp => "CmdGetAllSaveRaidScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdRaidTypeNone" => Some(Self::None),
            "CmdSetClientRaidTargetCountCsReq" => {
                Some(Self::CmdSetClientRaidTargetCountCsReq)
            }
            "CmdGetChallengeRaidInfoScRsp" => Some(Self::CmdGetChallengeRaidInfoScRsp),
            "CmdRaidKickByServerScNotify" => Some(Self::CmdRaidKickByServerScNotify),
            "CmdStartRaidScRsp" => Some(Self::CmdStartRaidScRsp),
            "CmdChallengeRaidNotify" => Some(Self::CmdChallengeRaidNotify),
            "CmdTakeChallengeRaidRewardScRsp" => {
                Some(Self::CmdTakeChallengeRaidRewardScRsp)
            }
            "CmdGetSaveRaidScRsp" => Some(Self::CmdGetSaveRaidScRsp),
            "CmdGetAllSaveRaidCsReq" => Some(Self::CmdGetAllSaveRaidCsReq),
            "CmdGetChallengeRaidInfoCsReq" => Some(Self::CmdGetChallengeRaidInfoCsReq),
            "CmdTakeChallengeRaidRewardCsReq" => {
                Some(Self::CmdTakeChallengeRaidRewardCsReq)
            }
            "CmdGetSaveRaidCsReq" => Some(Self::CmdGetSaveRaidCsReq),
            "CmdLeaveRaidScRsp" => Some(Self::CmdLeaveRaidScRsp),
            "CmdLeaveRaidCsReq" => Some(Self::CmdLeaveRaidCsReq),
            "CmdDelSaveRaidScNotify" => Some(Self::CmdDelSaveRaidScNotify),
            "CmdGetRaidInfoCsReq" => Some(Self::CmdGetRaidInfoCsReq),
            "CmdStartRaidCsReq" => Some(Self::CmdStartRaidCsReq),
            "CmdGetRaidInfoScRsp" => Some(Self::CmdGetRaidInfoScRsp),
            "CmdRaidInfoNotify" => Some(Self::CmdRaidInfoNotify),
            "CmdSetClientRaidTargetCountScRsp" => {
                Some(Self::CmdSetClientRaidTargetCountScRsp)
            }
            "CmdGetAllSaveRaidScRsp" => Some(Self::CmdGetAllSaveRaidScRsp),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Jldfakdkmjj {
    RaidStatusNone = 0,
    RaidStatusDoing = 1,
    RaidStatusFinish = 2,
    RaidStatusFailed = 3,
}
impl Jldfakdkmjj {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RaidStatusNone => "RAID_STATUS_NONE",
            Self::RaidStatusDoing => "RAID_STATUS_DOING",
            Self::RaidStatusFinish => "RAID_STATUS_FINISH",
            Self::RaidStatusFailed => "RAID_STATUS_FAILED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "RAID_STATUS_NONE" => Some(Self::RaidStatusNone),
            "RAID_STATUS_DOING" => Some(Self::RaidStatusDoing),
            "RAID_STATUS_FINISH" => Some(Self::RaidStatusFinish),
            "RAID_STATUS_FAILED" => Some(Self::RaidStatusFailed),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Fochdfjanpc {
    RaidTargetStatusNone = 0,
    RaidTargetStatusDoing = 1,
    RaidTargetStatusFinish = 2,
}
impl Fochdfjanpc {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RaidTargetStatusNone => "RAID_TARGET_STATUS_NONE",
            Self::RaidTargetStatusDoing => "RAID_TARGET_STATUS_DOING",
            Self::RaidTargetStatusFinish => "RAID_TARGET_STATUS_FINISH",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "RAID_TARGET_STATUS_NONE" => Some(Self::RaidTargetStatusNone),
            "RAID_TARGET_STATUS_DOING" => Some(Self::RaidTargetStatusDoing),
            "RAID_TARGET_STATUS_FINISH" => Some(Self::RaidTargetStatusFinish),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Egkfndoopnn {
    RaidKickReasonNone = 0,
    RaidKickReasonActivityScheduleFinish = 1,
}
impl Egkfndoopnn {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RaidKickReasonNone => "RAID_KICK_REASON_NONE",
            Self::RaidKickReasonActivityScheduleFinish => {
                "RAID_KICK_REASON_ACTIVITY_SCHEDULE_FINISH"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "RAID_KICK_REASON_NONE" => Some(Self::RaidKickReasonNone),
            "RAID_KICK_REASON_ACTIVITY_SCHEDULE_FINISH" => {
                Some(Self::RaidKickReasonActivityScheduleFinish)
            }
            _ => None,
        }
    }
}
/// BDBDGHIEELN
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdRaidCollectionType {
    None = 0,
    CmdRaidCollectionDataCsReq = 6957,
    CmdRaidCollectionEnterNextRaidCsReq = 6942,
    CmdRaidCollectionDataScRsp = 6948,
    CmdRaidCollectionEnterNextRaidScRsp = 6944,
    CmdRaidCollectionDataScNotify = 6952,
}
impl CmdRaidCollectionType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdRaidCollectionTypeNone",
            Self::CmdRaidCollectionDataCsReq => "CmdRaidCollectionDataCsReq",
            Self::CmdRaidCollectionEnterNextRaidCsReq => {
                "CmdRaidCollectionEnterNextRaidCsReq"
            }
            Self::CmdRaidCollectionDataScRsp => "CmdRaidCollectionDataScRsp",
            Self::CmdRaidCollectionEnterNextRaidScRsp => {
                "CmdRaidCollectionEnterNextRaidScRsp"
            }
            Self::CmdRaidCollectionDataScNotify => "CmdRaidCollectionDataScNotify",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdRaidCollectionTypeNone" => Some(Self::None),
            "CmdRaidCollectionDataCsReq" => Some(Self::CmdRaidCollectionDataCsReq),
            "CmdRaidCollectionEnterNextRaidCsReq" => {
                Some(Self::CmdRaidCollectionEnterNextRaidCsReq)
            }
            "CmdRaidCollectionDataScRsp" => Some(Self::CmdRaidCollectionDataScRsp),
            "CmdRaidCollectionEnterNextRaidScRsp" => {
                Some(Self::CmdRaidCollectionEnterNextRaidScRsp)
            }
            "CmdRaidCollectionDataScNotify" => Some(Self::CmdRaidCollectionDataScNotify),
            _ => None,
        }
    }
}
/// GJNKIPJFKJN
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdRecommendType {
    None = 0,
    CmdRelicAvatarRecommendScRsp = 2443,
    CmdGetBigDataRecommendCsReq = 2407,
    CmdRelicRecommendScRsp = 2437,
    CmdGetChallengeRecommendLineupListScRsp = 2433,
    CmdGetBigDataRecommendScRsp = 2429,
    CmdRelicRecommendCsReq = 2426,
    CmdRelicAvatarRecommendCsReq = 2441,
    CmdGetChallengeRecommendLineupListCsReq = 2406,
}
impl CmdRecommendType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CMD_RECOMMEND_TYPE_NONE",
            Self::CmdRelicAvatarRecommendScRsp => "CmdRelicAvatarRecommendScRsp",
            Self::CmdGetBigDataRecommendCsReq => "CmdGetBigDataRecommendCsReq",
            Self::CmdRelicRecommendScRsp => "CmdRelicRecommendScRsp",
            Self::CmdGetChallengeRecommendLineupListScRsp => {
                "CmdGetChallengeRecommendLineupListScRsp"
            }
            Self::CmdGetBigDataRecommendScRsp => "CmdGetBigDataRecommendScRsp",
            Self::CmdRelicRecommendCsReq => "CmdRelicRecommendCsReq",
            Self::CmdRelicAvatarRecommendCsReq => "CmdRelicAvatarRecommendCsReq",
            Self::CmdGetChallengeRecommendLineupListCsReq => {
                "CmdGetChallengeRecommendLineupListCsReq"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CMD_RECOMMEND_TYPE_NONE" => Some(Self::None),
            "CmdRelicAvatarRecommendScRsp" => Some(Self::CmdRelicAvatarRecommendScRsp),
            "CmdGetBigDataRecommendCsReq" => Some(Self::CmdGetBigDataRecommendCsReq),
            "CmdRelicRecommendScRsp" => Some(Self::CmdRelicRecommendScRsp),
            "CmdGetChallengeRecommendLineupListScRsp" => {
                Some(Self::CmdGetChallengeRecommendLineupListScRsp)
            }
            "CmdGetBigDataRecommendScRsp" => Some(Self::CmdGetBigDataRecommendScRsp),
            "CmdRelicRecommendCsReq" => Some(Self::CmdRelicRecommendCsReq),
            "CmdRelicAvatarRecommendCsReq" => Some(Self::CmdRelicAvatarRecommendCsReq),
            "CmdGetChallengeRecommendLineupListCsReq" => {
                Some(Self::CmdGetChallengeRecommendLineupListCsReq)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Kldhjgegglj {
    BigDataRecommendTypeNone = 0,
    BigDataRecommendTypeEquipment = 1,
    BigDataRecommendTypeRelicSuit = 2,
}
impl Kldhjgegglj {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::BigDataRecommendTypeNone => "BIG_DATA_RECOMMEND_TYPE_NONE",
            Self::BigDataRecommendTypeEquipment => "BIG_DATA_RECOMMEND_TYPE_EQUIPMENT",
            Self::BigDataRecommendTypeRelicSuit => "BIG_DATA_RECOMMEND_TYPE_RELIC_SUIT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "BIG_DATA_RECOMMEND_TYPE_NONE" => Some(Self::BigDataRecommendTypeNone),
            "BIG_DATA_RECOMMEND_TYPE_EQUIPMENT" => {
                Some(Self::BigDataRecommendTypeEquipment)
            }
            "BIG_DATA_RECOMMEND_TYPE_RELIC_SUIT" => {
                Some(Self::BigDataRecommendTypeRelicSuit)
            }
            _ => None,
        }
    }
}
/// HGJDCBDLEGP
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdRedDotType {
    None = 0,
    CmdGetAllRedDotDataCsReq = 5901,
    CmdGetSingleRedDotParamGroupScRsp = 5956,
    CmdGetSingleRedDotParamGroupCsReq = 5930,
    CmdUpdateRedDotDataCsReq = 5958,
    CmdUpdateRedDotDataScRsp = 5924,
    CmdGetAllRedDotDataScRsp = 5968,
}
impl CmdRedDotType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdRedDotTypeNone",
            Self::CmdGetAllRedDotDataCsReq => "CmdGetAllRedDotDataCsReq",
            Self::CmdGetSingleRedDotParamGroupScRsp => {
                "CmdGetSingleRedDotParamGroupScRsp"
            }
            Self::CmdGetSingleRedDotParamGroupCsReq => {
                "CmdGetSingleRedDotParamGroupCsReq"
            }
            Self::CmdUpdateRedDotDataCsReq => "CmdUpdateRedDotDataCsReq",
            Self::CmdUpdateRedDotDataScRsp => "CmdUpdateRedDotDataScRsp",
            Self::CmdGetAllRedDotDataScRsp => "CmdGetAllRedDotDataScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdRedDotTypeNone" => Some(Self::None),
            "CmdGetAllRedDotDataCsReq" => Some(Self::CmdGetAllRedDotDataCsReq),
            "CmdGetSingleRedDotParamGroupScRsp" => {
                Some(Self::CmdGetSingleRedDotParamGroupScRsp)
            }
            "CmdGetSingleRedDotParamGroupCsReq" => {
                Some(Self::CmdGetSingleRedDotParamGroupCsReq)
            }
            "CmdUpdateRedDotDataCsReq" => Some(Self::CmdUpdateRedDotDataCsReq),
            "CmdUpdateRedDotDataScRsp" => Some(Self::CmdUpdateRedDotDataScRsp),
            "CmdGetAllRedDotDataScRsp" => Some(Self::CmdGetAllRedDotDataScRsp),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Ojljhfnfdkp {
    UpdateReddotNone = 0,
    UpdateReddotAdd = 1,
    UpdateReddotReplace = 2,
}
impl Ojljhfnfdkp {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::UpdateReddotNone => "UPDATE_REDDOT_NONE",
            Self::UpdateReddotAdd => "UPDATE_REDDOT_ADD",
            Self::UpdateReddotReplace => "UPDATE_REDDOT_REPLACE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UPDATE_REDDOT_NONE" => Some(Self::UpdateReddotNone),
            "UPDATE_REDDOT_ADD" => Some(Self::UpdateReddotAdd),
            "UPDATE_REDDOT_REPLACE" => Some(Self::UpdateReddotReplace),
            _ => None,
        }
    }
}
/// EDPAMOGOONP
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdRelicSmartWearType {
    None = 0,
    CmdRelicSmartWearAddPlanScRsp = 8252,
    CmdRelicSmartWearDeletePlanCsReq = 8269,
    CmdRelicSmartWearPinRelicCsReq = 8265,
    CmdRelicSmartWearUpdatePlanScRsp = 8251,
    CmdRelicSmartWearGetPinRelicScRsp = 8255,
    CmdRelicSmartWearUpdatePlanCsReq = 8254,
    CmdRelicSmartWearAddPlanCsReq = 8262,
    CmdRelicSmartWearGetPlanCsReq = 8267,
    CmdRelicSmartWearGetPlanScRsp = 8258,
    CmdRelicSmartWearUpdatePinRelicScNotify = 8266,
    CmdRelicSmartWearGetPinRelicCsReq = 8268,
    CmdRelicSmartWearPinRelicScRsp = 8256,
    CmdRelicSmartWearDeletePlanScRsp = 8264,
}
impl CmdRelicSmartWearType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdRelicSmartWearTypeNone",
            Self::CmdRelicSmartWearAddPlanScRsp => "CmdRelicSmartWearAddPlanScRsp",
            Self::CmdRelicSmartWearDeletePlanCsReq => "CmdRelicSmartWearDeletePlanCsReq",
            Self::CmdRelicSmartWearPinRelicCsReq => "CmdRelicSmartWearPinRelicCsReq",
            Self::CmdRelicSmartWearUpdatePlanScRsp => "CmdRelicSmartWearUpdatePlanScRsp",
            Self::CmdRelicSmartWearGetPinRelicScRsp => {
                "CmdRelicSmartWearGetPinRelicScRsp"
            }
            Self::CmdRelicSmartWearUpdatePlanCsReq => "CmdRelicSmartWearUpdatePlanCsReq",
            Self::CmdRelicSmartWearAddPlanCsReq => "CmdRelicSmartWearAddPlanCsReq",
            Self::CmdRelicSmartWearGetPlanCsReq => "CmdRelicSmartWearGetPlanCsReq",
            Self::CmdRelicSmartWearGetPlanScRsp => "CmdRelicSmartWearGetPlanScRsp",
            Self::CmdRelicSmartWearUpdatePinRelicScNotify => {
                "CmdRelicSmartWearUpdatePinRelicScNotify"
            }
            Self::CmdRelicSmartWearGetPinRelicCsReq => {
                "CmdRelicSmartWearGetPinRelicCsReq"
            }
            Self::CmdRelicSmartWearPinRelicScRsp => "CmdRelicSmartWearPinRelicScRsp",
            Self::CmdRelicSmartWearDeletePlanScRsp => "CmdRelicSmartWearDeletePlanScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdRelicSmartWearTypeNone" => Some(Self::None),
            "CmdRelicSmartWearAddPlanScRsp" => Some(Self::CmdRelicSmartWearAddPlanScRsp),
            "CmdRelicSmartWearDeletePlanCsReq" => {
                Some(Self::CmdRelicSmartWearDeletePlanCsReq)
            }
            "CmdRelicSmartWearPinRelicCsReq" => {
                Some(Self::CmdRelicSmartWearPinRelicCsReq)
            }
            "CmdRelicSmartWearUpdatePlanScRsp" => {
                Some(Self::CmdRelicSmartWearUpdatePlanScRsp)
            }
            "CmdRelicSmartWearGetPinRelicScRsp" => {
                Some(Self::CmdRelicSmartWearGetPinRelicScRsp)
            }
            "CmdRelicSmartWearUpdatePlanCsReq" => {
                Some(Self::CmdRelicSmartWearUpdatePlanCsReq)
            }
            "CmdRelicSmartWearAddPlanCsReq" => Some(Self::CmdRelicSmartWearAddPlanCsReq),
            "CmdRelicSmartWearGetPlanCsReq" => Some(Self::CmdRelicSmartWearGetPlanCsReq),
            "CmdRelicSmartWearGetPlanScRsp" => Some(Self::CmdRelicSmartWearGetPlanScRsp),
            "CmdRelicSmartWearUpdatePinRelicScNotify" => {
                Some(Self::CmdRelicSmartWearUpdatePinRelicScNotify)
            }
            "CmdRelicSmartWearGetPinRelicCsReq" => {
                Some(Self::CmdRelicSmartWearGetPinRelicCsReq)
            }
            "CmdRelicSmartWearPinRelicScRsp" => {
                Some(Self::CmdRelicSmartWearPinRelicScRsp)
            }
            "CmdRelicSmartWearDeletePlanScRsp" => {
                Some(Self::CmdRelicSmartWearDeletePlanScRsp)
            }
            _ => None,
        }
    }
}
/// BOBKJOCALEM
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdReplayType {
    None = 0,
    CmdGetReplayTokenCsReq = 3501,
    CmdGetPlayerReplayInfoCsReq = 3558,
    CmdGetPlayerReplayInfoScRsp = 3524,
    CmdGetReplayTokenScRsp = 3568,
}
impl CmdReplayType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdReplayTypeNone",
            Self::CmdGetReplayTokenCsReq => "CmdGetReplayTokenCsReq",
            Self::CmdGetPlayerReplayInfoCsReq => "CmdGetPlayerReplayInfoCsReq",
            Self::CmdGetPlayerReplayInfoScRsp => "CmdGetPlayerReplayInfoScRsp",
            Self::CmdGetReplayTokenScRsp => "CmdGetReplayTokenScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdReplayTypeNone" => Some(Self::None),
            "CmdGetReplayTokenCsReq" => Some(Self::CmdGetReplayTokenCsReq),
            "CmdGetPlayerReplayInfoCsReq" => Some(Self::CmdGetPlayerReplayInfoCsReq),
            "CmdGetPlayerReplayInfoScRsp" => Some(Self::CmdGetPlayerReplayInfoScRsp),
            "CmdGetReplayTokenScRsp" => Some(Self::CmdGetReplayTokenScRsp),
            _ => None,
        }
    }
}
/// NMIPDKFMKDM
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdRndOptionType {
    None = 0,
    CmdDailyFirstMeetPamCsReq = 3458,
    CmdGetRndOptionScRsp = 3468,
    CmdGetRndOptionCsReq = 3401,
    CmdDailyFirstMeetPamScRsp = 3424,
}
impl CmdRndOptionType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdRndOptionTypeNone",
            Self::CmdDailyFirstMeetPamCsReq => "CmdDailyFirstMeetPamCsReq",
            Self::CmdGetRndOptionScRsp => "CmdGetRndOptionScRsp",
            Self::CmdGetRndOptionCsReq => "CmdGetRndOptionCsReq",
            Self::CmdDailyFirstMeetPamScRsp => "CmdDailyFirstMeetPamScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdRndOptionTypeNone" => Some(Self::None),
            "CmdDailyFirstMeetPamCsReq" => Some(Self::CmdDailyFirstMeetPamCsReq),
            "CmdGetRndOptionScRsp" => Some(Self::CmdGetRndOptionScRsp),
            "CmdGetRndOptionCsReq" => Some(Self::CmdGetRndOptionCsReq),
            "CmdDailyFirstMeetPamScRsp" => Some(Self::CmdDailyFirstMeetPamScRsp),
            _ => None,
        }
    }
}
/// BEMCJMPACCP
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdRogueType {
    None = 0,
    CmdReviveRogueAvatarCsReq = 1823,
    CmdSyncRogueStatusScNotify = 1844,
    CmdStartRogueCsReq = 1858,
    CmdGetRogueInfoCsReq = 1801,
    CmdEnterRogueMapRoomCsReq = 1803,
    CmdReviveRogueAvatarScRsp = 1812,
    CmdTakeRogueAeonLevelRewardScRsp = 1851,
    CmdSyncRogueAeonScNotify = 1810,
    CmdSyncRogueVirtualItemInfoScNotify = 1836,
    CmdSyncRogueGetItemScNotify = 1827,
    CmdGetRogueAeonInfoCsReq = 1835,
    CmdQuitRogueCsReq = 1838,
    CmdGetRogueAeonInfoScRsp = 1899,
    CmdSyncRogueReviveInfoScNotify = 1881,
    CmdSyncRogueAeonLevelUpRewardScNotify = 1802,
    CmdExchangeRogueRewardKeyScRsp = 1863,
    CmdSyncRogueAreaUnlockScNotify = 1834,
    CmdLeaveRogueScRsp = 1876,
    CmdSyncRogueMapRoomScNotify = 1878,
    CmdSyncRogueFinishScNotify = 1847,
    CmdPickRogueAvatarScRsp = 1839,
    CmdTakeRogueScoreRewardScRsp = 1891,
    CmdGetRogueInitialScoreScRsp = 1808,
    CmdEnableRogueTalentCsReq = 1845,
    CmdGetRogueInitialScoreCsReq = 1813,
    CmdGetRogueBuffEnhanceInfoCsReq = 1818,
    CmdStartRogueScRsp = 1824,
    CmdSyncRogueExploreWinScNotify = 1859,
    CmdSyncRogueRewardInfoScNotify = 1809,
    CmdEnhanceRogueBuffCsReq = 1850,
    CmdSyncRogueSeasonFinishScNotify = 1841,
    CmdLeaveRogueCsReq = 1897,
    CmdTakeRogueAeonLevelRewardCsReq = 1886,
    CmdEnterRogueMapRoomScRsp = 1857,
    CmdGetRogueBuffEnhanceInfoScRsp = 1895,
    CmdExchangeRogueRewardKeyCsReq = 1826,
    CmdSyncRoguePickAvatarInfoScNotify = 1900,
    CmdGetRogueInfoScRsp = 1868,
    CmdEnterRogueCsReq = 1830,
    CmdOpenRogueChestScRsp = 1860,
    CmdTakeRogueScoreRewardCsReq = 1817,
    CmdFinishAeonDialogueGroupScRsp = 1816,
    CmdEnableRogueTalentScRsp = 1887,
    CmdPickRogueAvatarCsReq = 1880,
    CmdGetRogueTalentInfoCsReq = 1843,
    CmdOpenRogueChestCsReq = 1885,
    CmdGetRogueScoreRewardInfoScRsp = 1898,
    CmdGetRogueTalentInfoScRsp = 1894,
    CmdQuitRogueScRsp = 1819,
    CmdGetRogueScoreRewardInfoCsReq = 1831,
    CmdEnhanceRogueBuffScRsp = 1848,
    CmdFinishAeonDialogueGroupCsReq = 1853,
    CmdEnterRogueScRsp = 1856,
}
impl CmdRogueType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdRogueTypeNone",
            Self::CmdReviveRogueAvatarCsReq => "CmdReviveRogueAvatarCsReq",
            Self::CmdSyncRogueStatusScNotify => "CmdSyncRogueStatusScNotify",
            Self::CmdStartRogueCsReq => "CmdStartRogueCsReq",
            Self::CmdGetRogueInfoCsReq => "CmdGetRogueInfoCsReq",
            Self::CmdEnterRogueMapRoomCsReq => "CmdEnterRogueMapRoomCsReq",
            Self::CmdReviveRogueAvatarScRsp => "CmdReviveRogueAvatarScRsp",
            Self::CmdTakeRogueAeonLevelRewardScRsp => "CmdTakeRogueAeonLevelRewardScRsp",
            Self::CmdSyncRogueAeonScNotify => "CmdSyncRogueAeonScNotify",
            Self::CmdSyncRogueVirtualItemInfoScNotify => {
                "CmdSyncRogueVirtualItemInfoScNotify"
            }
            Self::CmdSyncRogueGetItemScNotify => "CmdSyncRogueGetItemScNotify",
            Self::CmdGetRogueAeonInfoCsReq => "CmdGetRogueAeonInfoCsReq",
            Self::CmdQuitRogueCsReq => "CmdQuitRogueCsReq",
            Self::CmdGetRogueAeonInfoScRsp => "CmdGetRogueAeonInfoScRsp",
            Self::CmdSyncRogueReviveInfoScNotify => "CmdSyncRogueReviveInfoScNotify",
            Self::CmdSyncRogueAeonLevelUpRewardScNotify => {
                "CmdSyncRogueAeonLevelUpRewardScNotify"
            }
            Self::CmdExchangeRogueRewardKeyScRsp => "CmdExchangeRogueRewardKeyScRsp",
            Self::CmdSyncRogueAreaUnlockScNotify => "CmdSyncRogueAreaUnlockScNotify",
            Self::CmdLeaveRogueScRsp => "CmdLeaveRogueScRsp",
            Self::CmdSyncRogueMapRoomScNotify => "CmdSyncRogueMapRoomScNotify",
            Self::CmdSyncRogueFinishScNotify => "CmdSyncRogueFinishScNotify",
            Self::CmdPickRogueAvatarScRsp => "CmdPickRogueAvatarScRsp",
            Self::CmdTakeRogueScoreRewardScRsp => "CmdTakeRogueScoreRewardScRsp",
            Self::CmdGetRogueInitialScoreScRsp => "CmdGetRogueInitialScoreScRsp",
            Self::CmdEnableRogueTalentCsReq => "CmdEnableRogueTalentCsReq",
            Self::CmdGetRogueInitialScoreCsReq => "CmdGetRogueInitialScoreCsReq",
            Self::CmdGetRogueBuffEnhanceInfoCsReq => "CmdGetRogueBuffEnhanceInfoCsReq",
            Self::CmdStartRogueScRsp => "CmdStartRogueScRsp",
            Self::CmdSyncRogueExploreWinScNotify => "CmdSyncRogueExploreWinScNotify",
            Self::CmdSyncRogueRewardInfoScNotify => "CmdSyncRogueRewardInfoScNotify",
            Self::CmdEnhanceRogueBuffCsReq => "CmdEnhanceRogueBuffCsReq",
            Self::CmdSyncRogueSeasonFinishScNotify => "CmdSyncRogueSeasonFinishScNotify",
            Self::CmdLeaveRogueCsReq => "CmdLeaveRogueCsReq",
            Self::CmdTakeRogueAeonLevelRewardCsReq => "CmdTakeRogueAeonLevelRewardCsReq",
            Self::CmdEnterRogueMapRoomScRsp => "CmdEnterRogueMapRoomScRsp",
            Self::CmdGetRogueBuffEnhanceInfoScRsp => "CmdGetRogueBuffEnhanceInfoScRsp",
            Self::CmdExchangeRogueRewardKeyCsReq => "CmdExchangeRogueRewardKeyCsReq",
            Self::CmdSyncRoguePickAvatarInfoScNotify => {
                "CmdSyncRoguePickAvatarInfoScNotify"
            }
            Self::CmdGetRogueInfoScRsp => "CmdGetRogueInfoScRsp",
            Self::CmdEnterRogueCsReq => "CmdEnterRogueCsReq",
            Self::CmdOpenRogueChestScRsp => "CmdOpenRogueChestScRsp",
            Self::CmdTakeRogueScoreRewardCsReq => "CmdTakeRogueScoreRewardCsReq",
            Self::CmdFinishAeonDialogueGroupScRsp => "CmdFinishAeonDialogueGroupScRsp",
            Self::CmdEnableRogueTalentScRsp => "CmdEnableRogueTalentScRsp",
            Self::CmdPickRogueAvatarCsReq => "CmdPickRogueAvatarCsReq",
            Self::CmdGetRogueTalentInfoCsReq => "CmdGetRogueTalentInfoCsReq",
            Self::CmdOpenRogueChestCsReq => "CmdOpenRogueChestCsReq",
            Self::CmdGetRogueScoreRewardInfoScRsp => "CmdGetRogueScoreRewardInfoScRsp",
            Self::CmdGetRogueTalentInfoScRsp => "CmdGetRogueTalentInfoScRsp",
            Self::CmdQuitRogueScRsp => "CmdQuitRogueScRsp",
            Self::CmdGetRogueScoreRewardInfoCsReq => "CmdGetRogueScoreRewardInfoCsReq",
            Self::CmdEnhanceRogueBuffScRsp => "CmdEnhanceRogueBuffScRsp",
            Self::CmdFinishAeonDialogueGroupCsReq => "CmdFinishAeonDialogueGroupCsReq",
            Self::CmdEnterRogueScRsp => "CmdEnterRogueScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdRogueTypeNone" => Some(Self::None),
            "CmdReviveRogueAvatarCsReq" => Some(Self::CmdReviveRogueAvatarCsReq),
            "CmdSyncRogueStatusScNotify" => Some(Self::CmdSyncRogueStatusScNotify),
            "CmdStartRogueCsReq" => Some(Self::CmdStartRogueCsReq),
            "CmdGetRogueInfoCsReq" => Some(Self::CmdGetRogueInfoCsReq),
            "CmdEnterRogueMapRoomCsReq" => Some(Self::CmdEnterRogueMapRoomCsReq),
            "CmdReviveRogueAvatarScRsp" => Some(Self::CmdReviveRogueAvatarScRsp),
            "CmdTakeRogueAeonLevelRewardScRsp" => {
                Some(Self::CmdTakeRogueAeonLevelRewardScRsp)
            }
            "CmdSyncRogueAeonScNotify" => Some(Self::CmdSyncRogueAeonScNotify),
            "CmdSyncRogueVirtualItemInfoScNotify" => {
                Some(Self::CmdSyncRogueVirtualItemInfoScNotify)
            }
            "CmdSyncRogueGetItemScNotify" => Some(Self::CmdSyncRogueGetItemScNotify),
            "CmdGetRogueAeonInfoCsReq" => Some(Self::CmdGetRogueAeonInfoCsReq),
            "CmdQuitRogueCsReq" => Some(Self::CmdQuitRogueCsReq),
            "CmdGetRogueAeonInfoScRsp" => Some(Self::CmdGetRogueAeonInfoScRsp),
            "CmdSyncRogueReviveInfoScNotify" => {
                Some(Self::CmdSyncRogueReviveInfoScNotify)
            }
            "CmdSyncRogueAeonLevelUpRewardScNotify" => {
                Some(Self::CmdSyncRogueAeonLevelUpRewardScNotify)
            }
            "CmdExchangeRogueRewardKeyScRsp" => {
                Some(Self::CmdExchangeRogueRewardKeyScRsp)
            }
            "CmdSyncRogueAreaUnlockScNotify" => {
                Some(Self::CmdSyncRogueAreaUnlockScNotify)
            }
            "CmdLeaveRogueScRsp" => Some(Self::CmdLeaveRogueScRsp),
            "CmdSyncRogueMapRoomScNotify" => Some(Self::CmdSyncRogueMapRoomScNotify),
            "CmdSyncRogueFinishScNotify" => Some(Self::CmdSyncRogueFinishScNotify),
            "CmdPickRogueAvatarScRsp" => Some(Self::CmdPickRogueAvatarScRsp),
            "CmdTakeRogueScoreRewardScRsp" => Some(Self::CmdTakeRogueScoreRewardScRsp),
            "CmdGetRogueInitialScoreScRsp" => Some(Self::CmdGetRogueInitialScoreScRsp),
            "CmdEnableRogueTalentCsReq" => Some(Self::CmdEnableRogueTalentCsReq),
            "CmdGetRogueInitialScoreCsReq" => Some(Self::CmdGetRogueInitialScoreCsReq),
            "CmdGetRogueBuffEnhanceInfoCsReq" => {
                Some(Self::CmdGetRogueBuffEnhanceInfoCsReq)
            }
            "CmdStartRogueScRsp" => Some(Self::CmdStartRogueScRsp),
            "CmdSyncRogueExploreWinScNotify" => {
                Some(Self::CmdSyncRogueExploreWinScNotify)
            }
            "CmdSyncRogueRewardInfoScNotify" => {
                Some(Self::CmdSyncRogueRewardInfoScNotify)
            }
            "CmdEnhanceRogueBuffCsReq" => Some(Self::CmdEnhanceRogueBuffCsReq),
            "CmdSyncRogueSeasonFinishScNotify" => {
                Some(Self::CmdSyncRogueSeasonFinishScNotify)
            }
            "CmdLeaveRogueCsReq" => Some(Self::CmdLeaveRogueCsReq),
            "CmdTakeRogueAeonLevelRewardCsReq" => {
                Some(Self::CmdTakeRogueAeonLevelRewardCsReq)
            }
            "CmdEnterRogueMapRoomScRsp" => Some(Self::CmdEnterRogueMapRoomScRsp),
            "CmdGetRogueBuffEnhanceInfoScRsp" => {
                Some(Self::CmdGetRogueBuffEnhanceInfoScRsp)
            }
            "CmdExchangeRogueRewardKeyCsReq" => {
                Some(Self::CmdExchangeRogueRewardKeyCsReq)
            }
            "CmdSyncRoguePickAvatarInfoScNotify" => {
                Some(Self::CmdSyncRoguePickAvatarInfoScNotify)
            }
            "CmdGetRogueInfoScRsp" => Some(Self::CmdGetRogueInfoScRsp),
            "CmdEnterRogueCsReq" => Some(Self::CmdEnterRogueCsReq),
            "CmdOpenRogueChestScRsp" => Some(Self::CmdOpenRogueChestScRsp),
            "CmdTakeRogueScoreRewardCsReq" => Some(Self::CmdTakeRogueScoreRewardCsReq),
            "CmdFinishAeonDialogueGroupScRsp" => {
                Some(Self::CmdFinishAeonDialogueGroupScRsp)
            }
            "CmdEnableRogueTalentScRsp" => Some(Self::CmdEnableRogueTalentScRsp),
            "CmdPickRogueAvatarCsReq" => Some(Self::CmdPickRogueAvatarCsReq),
            "CmdGetRogueTalentInfoCsReq" => Some(Self::CmdGetRogueTalentInfoCsReq),
            "CmdOpenRogueChestCsReq" => Some(Self::CmdOpenRogueChestCsReq),
            "CmdGetRogueScoreRewardInfoScRsp" => {
                Some(Self::CmdGetRogueScoreRewardInfoScRsp)
            }
            "CmdGetRogueTalentInfoScRsp" => Some(Self::CmdGetRogueTalentInfoScRsp),
            "CmdQuitRogueScRsp" => Some(Self::CmdQuitRogueScRsp),
            "CmdGetRogueScoreRewardInfoCsReq" => {
                Some(Self::CmdGetRogueScoreRewardInfoCsReq)
            }
            "CmdEnhanceRogueBuffScRsp" => Some(Self::CmdEnhanceRogueBuffScRsp),
            "CmdFinishAeonDialogueGroupCsReq" => {
                Some(Self::CmdFinishAeonDialogueGroupCsReq)
            }
            "CmdEnterRogueScRsp" => Some(Self::CmdEnterRogueScRsp),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Egpimdadfdi {
    RogueStatusNone = 0,
    RogueStatusDoing = 1,
    RogueStatusPending = 2,
    RogueStatusEndless = 3,
    RogueStatusFinish = 4,
}
impl Egpimdadfdi {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueStatusNone => "ROGUE_STATUS_NONE",
            Self::RogueStatusDoing => "ROGUE_STATUS_DOING",
            Self::RogueStatusPending => "ROGUE_STATUS_PENDING",
            Self::RogueStatusEndless => "ROGUE_STATUS_ENDLESS",
            Self::RogueStatusFinish => "ROGUE_STATUS_FINISH",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_STATUS_NONE" => Some(Self::RogueStatusNone),
            "ROGUE_STATUS_DOING" => Some(Self::RogueStatusDoing),
            "ROGUE_STATUS_PENDING" => Some(Self::RogueStatusPending),
            "ROGUE_STATUS_ENDLESS" => Some(Self::RogueStatusEndless),
            "ROGUE_STATUS_FINISH" => Some(Self::RogueStatusFinish),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Ilnpbecoepl {
    RogueRoomStatusNone = 0,
    RogueRoomStatusLock = 1,
    RogueRoomStatusUnlock = 2,
    RogueRoomStatusPlay = 3,
    RogueRoomStatusFinish = 4,
}
impl Ilnpbecoepl {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueRoomStatusNone => "ROGUE_ROOM_STATUS_NONE",
            Self::RogueRoomStatusLock => "ROGUE_ROOM_STATUS_LOCK",
            Self::RogueRoomStatusUnlock => "ROGUE_ROOM_STATUS_UNLOCK",
            Self::RogueRoomStatusPlay => "ROGUE_ROOM_STATUS_PLAY",
            Self::RogueRoomStatusFinish => "ROGUE_ROOM_STATUS_FINISH",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_ROOM_STATUS_NONE" => Some(Self::RogueRoomStatusNone),
            "ROGUE_ROOM_STATUS_LOCK" => Some(Self::RogueRoomStatusLock),
            "ROGUE_ROOM_STATUS_UNLOCK" => Some(Self::RogueRoomStatusUnlock),
            "ROGUE_ROOM_STATUS_PLAY" => Some(Self::RogueRoomStatusPlay),
            "ROGUE_ROOM_STATUS_FINISH" => Some(Self::RogueRoomStatusFinish),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Jdakamigkhf {
    RogueAreaStatusLock = 0,
    RogueAreaStatusUnlock = 1,
    RogueAreaStatusFirstPass = 2,
    RogueAreaStatusClose = 3,
}
impl Jdakamigkhf {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueAreaStatusLock => "ROGUE_AREA_STATUS_LOCK",
            Self::RogueAreaStatusUnlock => "ROGUE_AREA_STATUS_UNLOCK",
            Self::RogueAreaStatusFirstPass => "ROGUE_AREA_STATUS_FIRST_PASS",
            Self::RogueAreaStatusClose => "ROGUE_AREA_STATUS_CLOSE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_AREA_STATUS_LOCK" => Some(Self::RogueAreaStatusLock),
            "ROGUE_AREA_STATUS_UNLOCK" => Some(Self::RogueAreaStatusUnlock),
            "ROGUE_AREA_STATUS_FIRST_PASS" => Some(Self::RogueAreaStatusFirstPass),
            "ROGUE_AREA_STATUS_CLOSE" => Some(Self::RogueAreaStatusClose),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Jjeikcobdlp {
    RogueBuffSourceTypeNone = 0,
    RogueBuffSourceTypeSelect = 1,
    RogueBuffSourceTypeEnhance = 2,
    RogueBuffSourceTypeMiracle = 3,
    RogueBuffSourceTypeDialogue = 4,
    RogueBuffSourceTypeBonus = 5,
    RogueBuffSourceTypeMazeSkill = 6,
    RogueBuffSourceTypeShop = 7,
    RogueBuffSourceTypeLevelMechanism = 8,
    RogueBuffSourceTypeEndlessLevelStart = 9,
}
impl Jjeikcobdlp {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueBuffSourceTypeNone => "ROGUE_BUFF_SOURCE_TYPE_NONE",
            Self::RogueBuffSourceTypeSelect => "ROGUE_BUFF_SOURCE_TYPE_SELECT",
            Self::RogueBuffSourceTypeEnhance => "ROGUE_BUFF_SOURCE_TYPE_ENHANCE",
            Self::RogueBuffSourceTypeMiracle => "ROGUE_BUFF_SOURCE_TYPE_MIRACLE",
            Self::RogueBuffSourceTypeDialogue => "ROGUE_BUFF_SOURCE_TYPE_DIALOGUE",
            Self::RogueBuffSourceTypeBonus => "ROGUE_BUFF_SOURCE_TYPE_BONUS",
            Self::RogueBuffSourceTypeMazeSkill => "ROGUE_BUFF_SOURCE_TYPE_MAZE_SKILL",
            Self::RogueBuffSourceTypeShop => "ROGUE_BUFF_SOURCE_TYPE_SHOP",
            Self::RogueBuffSourceTypeLevelMechanism => {
                "ROGUE_BUFF_SOURCE_TYPE_LEVEL_MECHANISM"
            }
            Self::RogueBuffSourceTypeEndlessLevelStart => {
                "ROGUE_BUFF_SOURCE_TYPE_ENDLESS_LEVEL_START"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_BUFF_SOURCE_TYPE_NONE" => Some(Self::RogueBuffSourceTypeNone),
            "ROGUE_BUFF_SOURCE_TYPE_SELECT" => Some(Self::RogueBuffSourceTypeSelect),
            "ROGUE_BUFF_SOURCE_TYPE_ENHANCE" => Some(Self::RogueBuffSourceTypeEnhance),
            "ROGUE_BUFF_SOURCE_TYPE_MIRACLE" => Some(Self::RogueBuffSourceTypeMiracle),
            "ROGUE_BUFF_SOURCE_TYPE_DIALOGUE" => Some(Self::RogueBuffSourceTypeDialogue),
            "ROGUE_BUFF_SOURCE_TYPE_BONUS" => Some(Self::RogueBuffSourceTypeBonus),
            "ROGUE_BUFF_SOURCE_TYPE_MAZE_SKILL" => {
                Some(Self::RogueBuffSourceTypeMazeSkill)
            }
            "ROGUE_BUFF_SOURCE_TYPE_SHOP" => Some(Self::RogueBuffSourceTypeShop),
            "ROGUE_BUFF_SOURCE_TYPE_LEVEL_MECHANISM" => {
                Some(Self::RogueBuffSourceTypeLevelMechanism)
            }
            "ROGUE_BUFF_SOURCE_TYPE_ENDLESS_LEVEL_START" => {
                Some(Self::RogueBuffSourceTypeEndlessLevelStart)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Eohhhddahkl {
    RogueMiracleSourceTypeNone = 0,
    RogueMiracleSourceTypeSelect = 1,
    RogueMiracleSourceTypeDialogue = 2,
    RogueMiracleSourceTypeBonus = 3,
    RogueMiracleSourceTypeUse = 4,
    RogueMiracleSourceTypeReset = 5,
    RogueMiracleSourceTypeReplace = 6,
    RogueMiracleSourceTypeTrade = 7,
    RogueMiracleSourceTypeGet = 8,
    RogueMiracleSourceTypeShop = 9,
    RogueMiracleSourceTypeMazeSkill = 10,
    RogueMiracleSourceTypeLevelMechanism = 11,
    RogueMiracleSourceTypeEndlessLevelStart = 12,
}
impl Eohhhddahkl {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueMiracleSourceTypeNone => "ROGUE_MIRACLE_SOURCE_TYPE_NONE",
            Self::RogueMiracleSourceTypeSelect => "ROGUE_MIRACLE_SOURCE_TYPE_SELECT",
            Self::RogueMiracleSourceTypeDialogue => "ROGUE_MIRACLE_SOURCE_TYPE_DIALOGUE",
            Self::RogueMiracleSourceTypeBonus => "ROGUE_MIRACLE_SOURCE_TYPE_BONUS",
            Self::RogueMiracleSourceTypeUse => "ROGUE_MIRACLE_SOURCE_TYPE_USE",
            Self::RogueMiracleSourceTypeReset => "ROGUE_MIRACLE_SOURCE_TYPE_RESET",
            Self::RogueMiracleSourceTypeReplace => "ROGUE_MIRACLE_SOURCE_TYPE_REPLACE",
            Self::RogueMiracleSourceTypeTrade => "ROGUE_MIRACLE_SOURCE_TYPE_TRADE",
            Self::RogueMiracleSourceTypeGet => "ROGUE_MIRACLE_SOURCE_TYPE_GET",
            Self::RogueMiracleSourceTypeShop => "ROGUE_MIRACLE_SOURCE_TYPE_SHOP",
            Self::RogueMiracleSourceTypeMazeSkill => {
                "ROGUE_MIRACLE_SOURCE_TYPE_MAZE_SKILL"
            }
            Self::RogueMiracleSourceTypeLevelMechanism => {
                "ROGUE_MIRACLE_SOURCE_TYPE_LEVEL_MECHANISM"
            }
            Self::RogueMiracleSourceTypeEndlessLevelStart => {
                "ROGUE_MIRACLE_SOURCE_TYPE_ENDLESS_LEVEL_START"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_MIRACLE_SOURCE_TYPE_NONE" => Some(Self::RogueMiracleSourceTypeNone),
            "ROGUE_MIRACLE_SOURCE_TYPE_SELECT" => {
                Some(Self::RogueMiracleSourceTypeSelect)
            }
            "ROGUE_MIRACLE_SOURCE_TYPE_DIALOGUE" => {
                Some(Self::RogueMiracleSourceTypeDialogue)
            }
            "ROGUE_MIRACLE_SOURCE_TYPE_BONUS" => Some(Self::RogueMiracleSourceTypeBonus),
            "ROGUE_MIRACLE_SOURCE_TYPE_USE" => Some(Self::RogueMiracleSourceTypeUse),
            "ROGUE_MIRACLE_SOURCE_TYPE_RESET" => Some(Self::RogueMiracleSourceTypeReset),
            "ROGUE_MIRACLE_SOURCE_TYPE_REPLACE" => {
                Some(Self::RogueMiracleSourceTypeReplace)
            }
            "ROGUE_MIRACLE_SOURCE_TYPE_TRADE" => Some(Self::RogueMiracleSourceTypeTrade),
            "ROGUE_MIRACLE_SOURCE_TYPE_GET" => Some(Self::RogueMiracleSourceTypeGet),
            "ROGUE_MIRACLE_SOURCE_TYPE_SHOP" => Some(Self::RogueMiracleSourceTypeShop),
            "ROGUE_MIRACLE_SOURCE_TYPE_MAZE_SKILL" => {
                Some(Self::RogueMiracleSourceTypeMazeSkill)
            }
            "ROGUE_MIRACLE_SOURCE_TYPE_LEVEL_MECHANISM" => {
                Some(Self::RogueMiracleSourceTypeLevelMechanism)
            }
            "ROGUE_MIRACLE_SOURCE_TYPE_ENDLESS_LEVEL_START" => {
                Some(Self::RogueMiracleSourceTypeEndlessLevelStart)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Ffnedmegpjd {
    RogueDialogueResultSucc = 0,
    RogueDialogueResultFail = 1,
}
impl Ffnedmegpjd {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueDialogueResultSucc => "ROGUE_DIALOGUE_RESULT_SUCC",
            Self::RogueDialogueResultFail => "ROGUE_DIALOGUE_RESULT_FAIL",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_DIALOGUE_RESULT_SUCC" => Some(Self::RogueDialogueResultSucc),
            "ROGUE_DIALOGUE_RESULT_FAIL" => Some(Self::RogueDialogueResultFail),
            _ => None,
        }
    }
}
/// EMFMBIEIDDL
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdRogueArcadeType {
    None = 0,
    CmdRogueArcadeLeaveCsReq = 7691,
    CmdRogueArcadeLeaveScRsp = 7693,
    CmdRogueArcadeRestartScRsp = 7683,
    CmdRogueArcadeStartScRsp = 7687,
    CmdRogueArcadeRestartCsReq = 7656,
    CmdRogueArcadeStartCsReq = 7676,
    CmdRogueArcadeGetInfoCsReq = 7657,
    CmdRogueArcadeGetInfoScRsp = 7679,
}
impl CmdRogueArcadeType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdRogueArcadeTypeNone",
            Self::CmdRogueArcadeLeaveCsReq => "CmdRogueArcadeLeaveCsReq",
            Self::CmdRogueArcadeLeaveScRsp => "CmdRogueArcadeLeaveScRsp",
            Self::CmdRogueArcadeRestartScRsp => "CmdRogueArcadeRestartScRsp",
            Self::CmdRogueArcadeStartScRsp => "CmdRogueArcadeStartScRsp",
            Self::CmdRogueArcadeRestartCsReq => "CmdRogueArcadeRestartCsReq",
            Self::CmdRogueArcadeStartCsReq => "CmdRogueArcadeStartCsReq",
            Self::CmdRogueArcadeGetInfoCsReq => "CmdRogueArcadeGetInfoCsReq",
            Self::CmdRogueArcadeGetInfoScRsp => "CmdRogueArcadeGetInfoScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdRogueArcadeTypeNone" => Some(Self::None),
            "CmdRogueArcadeLeaveCsReq" => Some(Self::CmdRogueArcadeLeaveCsReq),
            "CmdRogueArcadeLeaveScRsp" => Some(Self::CmdRogueArcadeLeaveScRsp),
            "CmdRogueArcadeRestartScRsp" => Some(Self::CmdRogueArcadeRestartScRsp),
            "CmdRogueArcadeStartScRsp" => Some(Self::CmdRogueArcadeStartScRsp),
            "CmdRogueArcadeRestartCsReq" => Some(Self::CmdRogueArcadeRestartCsReq),
            "CmdRogueArcadeStartCsReq" => Some(Self::CmdRogueArcadeStartCsReq),
            "CmdRogueArcadeGetInfoCsReq" => Some(Self::CmdRogueArcadeGetInfoCsReq),
            "CmdRogueArcadeGetInfoScRsp" => Some(Self::CmdRogueArcadeGetInfoScRsp),
            _ => None,
        }
    }
}
/// LKELJBKNBCJ
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdRogueCommonType {
    None = 0,
    CmdCommonRogueComponentUpdateScNotify = 5679,
    CmdTakeRogueEventHandbookRewardScRsp = 5678,
    CmdTakeRogueMiracleHandbookRewardScRsp = 5613,
    CmdGetRogueShopBuffInfoCsReq = 5656,
    CmdSyncRogueCommonDialogueDataScNotify = 5652,
    CmdBuyRogueShopFormulaScRsp = 5637,
    CmdStopRogueAdventureRoomScRsp = 5648,
    CmdGetRogueShopBuffInfoScRsp = 5697,
    CmdRogueWorkbenchHandleFuncScRsp = 5627,
    CmdEnhanceCommonRogueBuffScRsp = 5695,
    CmdCommonRogueQueryScRsp = 5660,
    CmdPrepareRogueAdventureRoomCsReq = 5668,
    CmdUpdateRogueAdventureRoomScoreScRsp = 5615,
    CmdFinishRogueCommonDialogueScRsp = 5674,
    CmdGetRogueAdventureRoomInfoScRsp = 5647,
    CmdBuyRogueShopMiracleScRsp = 5628,
    CmdGetRogueCollectionCsReq = 5686,
    CmdSelectRogueCommonDialogueOptionCsReq = 5688,
    CmdGetEnhanceCommonRogueBuffInfoScRsp = 5691,
    CmdGetRogueCommonDialogueDataScRsp = 5607,
    CmdGetRogueCollectionScRsp = 5651,
    CmdRogueDebugMessageScNotify = 5643,
    CmdEnhanceCommonRogueBuffCsReq = 5618,
    CmdSyncRogueCommonVirtualItemInfoScNotify = 5677,
    CmdCommonRogueUpdateScNotify = 5626,
    CmdHandleRogueCommonPendingActionScRsp = 5655,
    CmdSetRogueExhibitionScRsp = 5698,
    CmdGetRogueShopFormulaInfoScRsp = 5687,
    CmdRogueGetGambleInfoScRsp = 5632,
    CmdGetRogueExhibitionScRsp = 5602,
    CmdGetRogueShopMiracleInfoCsReq = 5624,
    CmdSelectRogueCommonDialogueOptionScRsp = 5689,
    CmdStopRogueAdventureRoomCsReq = 5650,
    CmdTakeRogueMiracleHandbookRewardCsReq = 5657,
    CmdHandleRogueCommonPendingActionCsReq = 5690,
    CmdGetRogueShopFormulaInfoCsReq = 5645,
    CmdSetRogueExhibitionCsReq = 5631,
    CmdRogueGetGambleInfoCsReq = 5683,
    CmdPrepareRogueAdventureRoomScRsp = 5658,
    CmdSetRogueCollectionScRsp = 5672,
    CmdBuyRogueShopMiracleCsReq = 5676,
    CmdCommonRogueQueryCsReq = 5685,
    CmdRogueWorkbenchHandleFuncCsReq = 5634,
    CmdFinishRogueCommonDialogueCsReq = 5665,
    CmdGetRogueHandbookDataCsReq = 5673,
    CmdSetRogueCollectionCsReq = 5693,
    CmdRogueDebugReplaySaveScNotify = 5694,
    CmdSyncRogueCommonActionResultScNotify = 5667,
    CmdBuyRogueShopFormulaCsReq = 5621,
    CmdGetRogueHandbookDataScRsp = 5640,
    CmdRogueNpcDisappearScRsp = 5649,
    CmdUpdateRogueAdventureRoomScoreCsReq = 5664,
    CmdRogueWorkbenchGetInfoCsReq = 5684,
    CmdRogueDoGambleCsReq = 5635,
    CmdGetRogueCommonDialogueDataCsReq = 5663,
    CmdRogueDoGambleScRsp = 5699,
    CmdBuyRogueShopBuffCsReq = 5611,
    CmdRogueNpcDisappearCsReq = 5614,
    CmdGetRogueShopMiracleInfoScRsp = 5630,
    CmdBuyRogueShopBuffScRsp = 5605,
    CmdTakeRogueEventHandbookRewardCsReq = 5608,
    CmdSyncRogueCommonPendingActionScNotify = 5629,
    CmdRogueWorkbenchGetInfoScRsp = 5610,
    CmdGetRogueAdventureRoomInfoCsReq = 5622,
    CmdGetEnhanceCommonRogueBuffInfoCsReq = 5617,
    CmdSyncRogueHandbookDataUpdateScNotify = 5603,
    CmdGetRogueExhibitionCsReq = 5633,
    CmdSyncRogueCommonDialogueOptionFinishScNotify = 5604,
    CmdSyncRogueAdventureRoomInfoScNotify = 5601,
}
impl CmdRogueCommonType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdRogueCommonTypeNone",
            Self::CmdCommonRogueComponentUpdateScNotify => {
                "CmdCommonRogueComponentUpdateScNotify"
            }
            Self::CmdTakeRogueEventHandbookRewardScRsp => {
                "CmdTakeRogueEventHandbookRewardScRsp"
            }
            Self::CmdTakeRogueMiracleHandbookRewardScRsp => {
                "CmdTakeRogueMiracleHandbookRewardScRsp"
            }
            Self::CmdGetRogueShopBuffInfoCsReq => "CmdGetRogueShopBuffInfoCsReq",
            Self::CmdSyncRogueCommonDialogueDataScNotify => {
                "CmdSyncRogueCommonDialogueDataScNotify"
            }
            Self::CmdBuyRogueShopFormulaScRsp => "CmdBuyRogueShopFormulaScRsp",
            Self::CmdStopRogueAdventureRoomScRsp => "CmdStopRogueAdventureRoomScRsp",
            Self::CmdGetRogueShopBuffInfoScRsp => "CmdGetRogueShopBuffInfoScRsp",
            Self::CmdRogueWorkbenchHandleFuncScRsp => "CmdRogueWorkbenchHandleFuncScRsp",
            Self::CmdEnhanceCommonRogueBuffScRsp => "CmdEnhanceCommonRogueBuffScRsp",
            Self::CmdCommonRogueQueryScRsp => "CmdCommonRogueQueryScRsp",
            Self::CmdPrepareRogueAdventureRoomCsReq => {
                "CmdPrepareRogueAdventureRoomCsReq"
            }
            Self::CmdUpdateRogueAdventureRoomScoreScRsp => {
                "CmdUpdateRogueAdventureRoomScoreScRsp"
            }
            Self::CmdFinishRogueCommonDialogueScRsp => {
                "CmdFinishRogueCommonDialogueScRsp"
            }
            Self::CmdGetRogueAdventureRoomInfoScRsp => {
                "CmdGetRogueAdventureRoomInfoScRsp"
            }
            Self::CmdBuyRogueShopMiracleScRsp => "CmdBuyRogueShopMiracleScRsp",
            Self::CmdGetRogueCollectionCsReq => "CmdGetRogueCollectionCsReq",
            Self::CmdSelectRogueCommonDialogueOptionCsReq => {
                "CmdSelectRogueCommonDialogueOptionCsReq"
            }
            Self::CmdGetEnhanceCommonRogueBuffInfoScRsp => {
                "CmdGetEnhanceCommonRogueBuffInfoScRsp"
            }
            Self::CmdGetRogueCommonDialogueDataScRsp => {
                "CmdGetRogueCommonDialogueDataScRsp"
            }
            Self::CmdGetRogueCollectionScRsp => "CmdGetRogueCollectionScRsp",
            Self::CmdRogueDebugMessageScNotify => "CmdRogueDebugMessageScNotify",
            Self::CmdEnhanceCommonRogueBuffCsReq => "CmdEnhanceCommonRogueBuffCsReq",
            Self::CmdSyncRogueCommonVirtualItemInfoScNotify => {
                "CmdSyncRogueCommonVirtualItemInfoScNotify"
            }
            Self::CmdCommonRogueUpdateScNotify => "CmdCommonRogueUpdateScNotify",
            Self::CmdHandleRogueCommonPendingActionScRsp => {
                "CmdHandleRogueCommonPendingActionScRsp"
            }
            Self::CmdSetRogueExhibitionScRsp => "CmdSetRogueExhibitionScRsp",
            Self::CmdGetRogueShopFormulaInfoScRsp => "CmdGetRogueShopFormulaInfoScRsp",
            Self::CmdRogueGetGambleInfoScRsp => "CmdRogueGetGambleInfoScRsp",
            Self::CmdGetRogueExhibitionScRsp => "CmdGetRogueExhibitionScRsp",
            Self::CmdGetRogueShopMiracleInfoCsReq => "CmdGetRogueShopMiracleInfoCsReq",
            Self::CmdSelectRogueCommonDialogueOptionScRsp => {
                "CmdSelectRogueCommonDialogueOptionScRsp"
            }
            Self::CmdStopRogueAdventureRoomCsReq => "CmdStopRogueAdventureRoomCsReq",
            Self::CmdTakeRogueMiracleHandbookRewardCsReq => {
                "CmdTakeRogueMiracleHandbookRewardCsReq"
            }
            Self::CmdHandleRogueCommonPendingActionCsReq => {
                "CmdHandleRogueCommonPendingActionCsReq"
            }
            Self::CmdGetRogueShopFormulaInfoCsReq => "CmdGetRogueShopFormulaInfoCsReq",
            Self::CmdSetRogueExhibitionCsReq => "CmdSetRogueExhibitionCsReq",
            Self::CmdRogueGetGambleInfoCsReq => "CmdRogueGetGambleInfoCsReq",
            Self::CmdPrepareRogueAdventureRoomScRsp => {
                "CmdPrepareRogueAdventureRoomScRsp"
            }
            Self::CmdSetRogueCollectionScRsp => "CmdSetRogueCollectionScRsp",
            Self::CmdBuyRogueShopMiracleCsReq => "CmdBuyRogueShopMiracleCsReq",
            Self::CmdCommonRogueQueryCsReq => "CmdCommonRogueQueryCsReq",
            Self::CmdRogueWorkbenchHandleFuncCsReq => "CmdRogueWorkbenchHandleFuncCsReq",
            Self::CmdFinishRogueCommonDialogueCsReq => {
                "CmdFinishRogueCommonDialogueCsReq"
            }
            Self::CmdGetRogueHandbookDataCsReq => "CmdGetRogueHandbookDataCsReq",
            Self::CmdSetRogueCollectionCsReq => "CmdSetRogueCollectionCsReq",
            Self::CmdRogueDebugReplaySaveScNotify => "CmdRogueDebugReplaySaveScNotify",
            Self::CmdSyncRogueCommonActionResultScNotify => {
                "CmdSyncRogueCommonActionResultScNotify"
            }
            Self::CmdBuyRogueShopFormulaCsReq => "CmdBuyRogueShopFormulaCsReq",
            Self::CmdGetRogueHandbookDataScRsp => "CmdGetRogueHandbookDataScRsp",
            Self::CmdRogueNpcDisappearScRsp => "CmdRogueNpcDisappearScRsp",
            Self::CmdUpdateRogueAdventureRoomScoreCsReq => {
                "CmdUpdateRogueAdventureRoomScoreCsReq"
            }
            Self::CmdRogueWorkbenchGetInfoCsReq => "CmdRogueWorkbenchGetInfoCsReq",
            Self::CmdRogueDoGambleCsReq => "CmdRogueDoGambleCsReq",
            Self::CmdGetRogueCommonDialogueDataCsReq => {
                "CmdGetRogueCommonDialogueDataCsReq"
            }
            Self::CmdRogueDoGambleScRsp => "CmdRogueDoGambleScRsp",
            Self::CmdBuyRogueShopBuffCsReq => "CmdBuyRogueShopBuffCsReq",
            Self::CmdRogueNpcDisappearCsReq => "CmdRogueNpcDisappearCsReq",
            Self::CmdGetRogueShopMiracleInfoScRsp => "CmdGetRogueShopMiracleInfoScRsp",
            Self::CmdBuyRogueShopBuffScRsp => "CmdBuyRogueShopBuffScRsp",
            Self::CmdTakeRogueEventHandbookRewardCsReq => {
                "CmdTakeRogueEventHandbookRewardCsReq"
            }
            Self::CmdSyncRogueCommonPendingActionScNotify => {
                "CmdSyncRogueCommonPendingActionScNotify"
            }
            Self::CmdRogueWorkbenchGetInfoScRsp => "CmdRogueWorkbenchGetInfoScRsp",
            Self::CmdGetRogueAdventureRoomInfoCsReq => {
                "CmdGetRogueAdventureRoomInfoCsReq"
            }
            Self::CmdGetEnhanceCommonRogueBuffInfoCsReq => {
                "CmdGetEnhanceCommonRogueBuffInfoCsReq"
            }
            Self::CmdSyncRogueHandbookDataUpdateScNotify => {
                "CmdSyncRogueHandbookDataUpdateScNotify"
            }
            Self::CmdGetRogueExhibitionCsReq => "CmdGetRogueExhibitionCsReq",
            Self::CmdSyncRogueCommonDialogueOptionFinishScNotify => {
                "CmdSyncRogueCommonDialogueOptionFinishScNotify"
            }
            Self::CmdSyncRogueAdventureRoomInfoScNotify => {
                "CmdSyncRogueAdventureRoomInfoScNotify"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdRogueCommonTypeNone" => Some(Self::None),
            "CmdCommonRogueComponentUpdateScNotify" => {
                Some(Self::CmdCommonRogueComponentUpdateScNotify)
            }
            "CmdTakeRogueEventHandbookRewardScRsp" => {
                Some(Self::CmdTakeRogueEventHandbookRewardScRsp)
            }
            "CmdTakeRogueMiracleHandbookRewardScRsp" => {
                Some(Self::CmdTakeRogueMiracleHandbookRewardScRsp)
            }
            "CmdGetRogueShopBuffInfoCsReq" => Some(Self::CmdGetRogueShopBuffInfoCsReq),
            "CmdSyncRogueCommonDialogueDataScNotify" => {
                Some(Self::CmdSyncRogueCommonDialogueDataScNotify)
            }
            "CmdBuyRogueShopFormulaScRsp" => Some(Self::CmdBuyRogueShopFormulaScRsp),
            "CmdStopRogueAdventureRoomScRsp" => {
                Some(Self::CmdStopRogueAdventureRoomScRsp)
            }
            "CmdGetRogueShopBuffInfoScRsp" => Some(Self::CmdGetRogueShopBuffInfoScRsp),
            "CmdRogueWorkbenchHandleFuncScRsp" => {
                Some(Self::CmdRogueWorkbenchHandleFuncScRsp)
            }
            "CmdEnhanceCommonRogueBuffScRsp" => {
                Some(Self::CmdEnhanceCommonRogueBuffScRsp)
            }
            "CmdCommonRogueQueryScRsp" => Some(Self::CmdCommonRogueQueryScRsp),
            "CmdPrepareRogueAdventureRoomCsReq" => {
                Some(Self::CmdPrepareRogueAdventureRoomCsReq)
            }
            "CmdUpdateRogueAdventureRoomScoreScRsp" => {
                Some(Self::CmdUpdateRogueAdventureRoomScoreScRsp)
            }
            "CmdFinishRogueCommonDialogueScRsp" => {
                Some(Self::CmdFinishRogueCommonDialogueScRsp)
            }
            "CmdGetRogueAdventureRoomInfoScRsp" => {
                Some(Self::CmdGetRogueAdventureRoomInfoScRsp)
            }
            "CmdBuyRogueShopMiracleScRsp" => Some(Self::CmdBuyRogueShopMiracleScRsp),
            "CmdGetRogueCollectionCsReq" => Some(Self::CmdGetRogueCollectionCsReq),
            "CmdSelectRogueCommonDialogueOptionCsReq" => {
                Some(Self::CmdSelectRogueCommonDialogueOptionCsReq)
            }
            "CmdGetEnhanceCommonRogueBuffInfoScRsp" => {
                Some(Self::CmdGetEnhanceCommonRogueBuffInfoScRsp)
            }
            "CmdGetRogueCommonDialogueDataScRsp" => {
                Some(Self::CmdGetRogueCommonDialogueDataScRsp)
            }
            "CmdGetRogueCollectionScRsp" => Some(Self::CmdGetRogueCollectionScRsp),
            "CmdRogueDebugMessageScNotify" => Some(Self::CmdRogueDebugMessageScNotify),
            "CmdEnhanceCommonRogueBuffCsReq" => {
                Some(Self::CmdEnhanceCommonRogueBuffCsReq)
            }
            "CmdSyncRogueCommonVirtualItemInfoScNotify" => {
                Some(Self::CmdSyncRogueCommonVirtualItemInfoScNotify)
            }
            "CmdCommonRogueUpdateScNotify" => Some(Self::CmdCommonRogueUpdateScNotify),
            "CmdHandleRogueCommonPendingActionScRsp" => {
                Some(Self::CmdHandleRogueCommonPendingActionScRsp)
            }
            "CmdSetRogueExhibitionScRsp" => Some(Self::CmdSetRogueExhibitionScRsp),
            "CmdGetRogueShopFormulaInfoScRsp" => {
                Some(Self::CmdGetRogueShopFormulaInfoScRsp)
            }
            "CmdRogueGetGambleInfoScRsp" => Some(Self::CmdRogueGetGambleInfoScRsp),
            "CmdGetRogueExhibitionScRsp" => Some(Self::CmdGetRogueExhibitionScRsp),
            "CmdGetRogueShopMiracleInfoCsReq" => {
                Some(Self::CmdGetRogueShopMiracleInfoCsReq)
            }
            "CmdSelectRogueCommonDialogueOptionScRsp" => {
                Some(Self::CmdSelectRogueCommonDialogueOptionScRsp)
            }
            "CmdStopRogueAdventureRoomCsReq" => {
                Some(Self::CmdStopRogueAdventureRoomCsReq)
            }
            "CmdTakeRogueMiracleHandbookRewardCsReq" => {
                Some(Self::CmdTakeRogueMiracleHandbookRewardCsReq)
            }
            "CmdHandleRogueCommonPendingActionCsReq" => {
                Some(Self::CmdHandleRogueCommonPendingActionCsReq)
            }
            "CmdGetRogueShopFormulaInfoCsReq" => {
                Some(Self::CmdGetRogueShopFormulaInfoCsReq)
            }
            "CmdSetRogueExhibitionCsReq" => Some(Self::CmdSetRogueExhibitionCsReq),
            "CmdRogueGetGambleInfoCsReq" => Some(Self::CmdRogueGetGambleInfoCsReq),
            "CmdPrepareRogueAdventureRoomScRsp" => {
                Some(Self::CmdPrepareRogueAdventureRoomScRsp)
            }
            "CmdSetRogueCollectionScRsp" => Some(Self::CmdSetRogueCollectionScRsp),
            "CmdBuyRogueShopMiracleCsReq" => Some(Self::CmdBuyRogueShopMiracleCsReq),
            "CmdCommonRogueQueryCsReq" => Some(Self::CmdCommonRogueQueryCsReq),
            "CmdRogueWorkbenchHandleFuncCsReq" => {
                Some(Self::CmdRogueWorkbenchHandleFuncCsReq)
            }
            "CmdFinishRogueCommonDialogueCsReq" => {
                Some(Self::CmdFinishRogueCommonDialogueCsReq)
            }
            "CmdGetRogueHandbookDataCsReq" => Some(Self::CmdGetRogueHandbookDataCsReq),
            "CmdSetRogueCollectionCsReq" => Some(Self::CmdSetRogueCollectionCsReq),
            "CmdRogueDebugReplaySaveScNotify" => {
                Some(Self::CmdRogueDebugReplaySaveScNotify)
            }
            "CmdSyncRogueCommonActionResultScNotify" => {
                Some(Self::CmdSyncRogueCommonActionResultScNotify)
            }
            "CmdBuyRogueShopFormulaCsReq" => Some(Self::CmdBuyRogueShopFormulaCsReq),
            "CmdGetRogueHandbookDataScRsp" => Some(Self::CmdGetRogueHandbookDataScRsp),
            "CmdRogueNpcDisappearScRsp" => Some(Self::CmdRogueNpcDisappearScRsp),
            "CmdUpdateRogueAdventureRoomScoreCsReq" => {
                Some(Self::CmdUpdateRogueAdventureRoomScoreCsReq)
            }
            "CmdRogueWorkbenchGetInfoCsReq" => Some(Self::CmdRogueWorkbenchGetInfoCsReq),
            "CmdRogueDoGambleCsReq" => Some(Self::CmdRogueDoGambleCsReq),
            "CmdGetRogueCommonDialogueDataCsReq" => {
                Some(Self::CmdGetRogueCommonDialogueDataCsReq)
            }
            "CmdRogueDoGambleScRsp" => Some(Self::CmdRogueDoGambleScRsp),
            "CmdBuyRogueShopBuffCsReq" => Some(Self::CmdBuyRogueShopBuffCsReq),
            "CmdRogueNpcDisappearCsReq" => Some(Self::CmdRogueNpcDisappearCsReq),
            "CmdGetRogueShopMiracleInfoScRsp" => {
                Some(Self::CmdGetRogueShopMiracleInfoScRsp)
            }
            "CmdBuyRogueShopBuffScRsp" => Some(Self::CmdBuyRogueShopBuffScRsp),
            "CmdTakeRogueEventHandbookRewardCsReq" => {
                Some(Self::CmdTakeRogueEventHandbookRewardCsReq)
            }
            "CmdSyncRogueCommonPendingActionScNotify" => {
                Some(Self::CmdSyncRogueCommonPendingActionScNotify)
            }
            "CmdRogueWorkbenchGetInfoScRsp" => Some(Self::CmdRogueWorkbenchGetInfoScRsp),
            "CmdGetRogueAdventureRoomInfoCsReq" => {
                Some(Self::CmdGetRogueAdventureRoomInfoCsReq)
            }
            "CmdGetEnhanceCommonRogueBuffInfoCsReq" => {
                Some(Self::CmdGetEnhanceCommonRogueBuffInfoCsReq)
            }
            "CmdSyncRogueHandbookDataUpdateScNotify" => {
                Some(Self::CmdSyncRogueHandbookDataUpdateScNotify)
            }
            "CmdGetRogueExhibitionCsReq" => Some(Self::CmdGetRogueExhibitionCsReq),
            "CmdSyncRogueCommonDialogueOptionFinishScNotify" => {
                Some(Self::CmdSyncRogueCommonDialogueOptionFinishScNotify)
            }
            "CmdSyncRogueAdventureRoomInfoScNotify" => {
                Some(Self::CmdSyncRogueAdventureRoomInfoScNotify)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Jaocjomenin {
    RogueAdventureRoomStatusNone = 0,
    RogueAdventureRoomStatusPrepare = 1,
    RogueAdventureRoomStatusStarted = 2,
    RogueAdventureRoomStatusStopped = 3,
}
impl Jaocjomenin {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueAdventureRoomStatusNone => "ROGUE_ADVENTURE_ROOM_STATUS_NONE",
            Self::RogueAdventureRoomStatusPrepare => {
                "ROGUE_ADVENTURE_ROOM_STATUS_PREPARE"
            }
            Self::RogueAdventureRoomStatusStarted => {
                "ROGUE_ADVENTURE_ROOM_STATUS_STARTED"
            }
            Self::RogueAdventureRoomStatusStopped => {
                "ROGUE_ADVENTURE_ROOM_STATUS_STOPPED"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_ADVENTURE_ROOM_STATUS_NONE" => {
                Some(Self::RogueAdventureRoomStatusNone)
            }
            "ROGUE_ADVENTURE_ROOM_STATUS_PREPARE" => {
                Some(Self::RogueAdventureRoomStatusPrepare)
            }
            "ROGUE_ADVENTURE_ROOM_STATUS_STARTED" => {
                Some(Self::RogueAdventureRoomStatusStarted)
            }
            "ROGUE_ADVENTURE_ROOM_STATUS_STOPPED" => {
                Some(Self::RogueAdventureRoomStatusStopped)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Nniohhmjghg {
    RogueCommonBuffSelectSourceTypeNone = 0,
    RogueCommonBuffSelectSourceTypeDiceRoll = 1,
    RogueCommonBuffSelectSourceTypeAeon = 2,
    RogueCommonBuffSelectSourceTypeBoardEvent = 3,
    RogueCommonBuffSelectSourceTypeLevelMechanism = 4,
}
impl Nniohhmjghg {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueCommonBuffSelectSourceTypeNone => {
                "ROGUE_COMMON_BUFF_SELECT_SOURCE_TYPE_NONE"
            }
            Self::RogueCommonBuffSelectSourceTypeDiceRoll => {
                "ROGUE_COMMON_BUFF_SELECT_SOURCE_TYPE_DICE_ROLL"
            }
            Self::RogueCommonBuffSelectSourceTypeAeon => {
                "ROGUE_COMMON_BUFF_SELECT_SOURCE_TYPE_AEON"
            }
            Self::RogueCommonBuffSelectSourceTypeBoardEvent => {
                "ROGUE_COMMON_BUFF_SELECT_SOURCE_TYPE_BOARD_EVENT"
            }
            Self::RogueCommonBuffSelectSourceTypeLevelMechanism => {
                "ROGUE_COMMON_BUFF_SELECT_SOURCE_TYPE_LEVEL_MECHANISM"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_COMMON_BUFF_SELECT_SOURCE_TYPE_NONE" => {
                Some(Self::RogueCommonBuffSelectSourceTypeNone)
            }
            "ROGUE_COMMON_BUFF_SELECT_SOURCE_TYPE_DICE_ROLL" => {
                Some(Self::RogueCommonBuffSelectSourceTypeDiceRoll)
            }
            "ROGUE_COMMON_BUFF_SELECT_SOURCE_TYPE_AEON" => {
                Some(Self::RogueCommonBuffSelectSourceTypeAeon)
            }
            "ROGUE_COMMON_BUFF_SELECT_SOURCE_TYPE_BOARD_EVENT" => {
                Some(Self::RogueCommonBuffSelectSourceTypeBoardEvent)
            }
            "ROGUE_COMMON_BUFF_SELECT_SOURCE_TYPE_LEVEL_MECHANISM" => {
                Some(Self::RogueCommonBuffSelectSourceTypeLevelMechanism)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Odopdkelaeb {
    RogueUnlockFunctionTypeMiracle = 0,
    RogueUnlockFunctionTypeShowHint = 1,
    RogueUnlockFunctionTypeCosmosBanAeon = 2,
    RogueUnlockFuntionTypeExhibition = 3,
    RogueUnlockFuntionTypeCollection = 4,
    RogueUnlockFuntionTypeTournGodMode = 5,
}
impl Odopdkelaeb {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueUnlockFunctionTypeMiracle => "ROGUE_UNLOCK_FUNCTION_TYPE_MIRACLE",
            Self::RogueUnlockFunctionTypeShowHint => {
                "ROGUE_UNLOCK_FUNCTION_TYPE_SHOW_HINT"
            }
            Self::RogueUnlockFunctionTypeCosmosBanAeon => {
                "ROGUE_UNLOCK_FUNCTION_TYPE_COSMOS_BAN_AEON"
            }
            Self::RogueUnlockFuntionTypeExhibition => {
                "ROGUE_UNLOCK_FUNTION_TYPE_EXHIBITION"
            }
            Self::RogueUnlockFuntionTypeCollection => {
                "ROGUE_UNLOCK_FUNTION_TYPE_COLLECTION"
            }
            Self::RogueUnlockFuntionTypeTournGodMode => {
                "ROGUE_UNLOCK_FUNTION_TYPE_TOURN_GOD_MODE"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_UNLOCK_FUNCTION_TYPE_MIRACLE" => {
                Some(Self::RogueUnlockFunctionTypeMiracle)
            }
            "ROGUE_UNLOCK_FUNCTION_TYPE_SHOW_HINT" => {
                Some(Self::RogueUnlockFunctionTypeShowHint)
            }
            "ROGUE_UNLOCK_FUNCTION_TYPE_COSMOS_BAN_AEON" => {
                Some(Self::RogueUnlockFunctionTypeCosmosBanAeon)
            }
            "ROGUE_UNLOCK_FUNTION_TYPE_EXHIBITION" => {
                Some(Self::RogueUnlockFuntionTypeExhibition)
            }
            "ROGUE_UNLOCK_FUNTION_TYPE_COLLECTION" => {
                Some(Self::RogueUnlockFuntionTypeCollection)
            }
            "ROGUE_UNLOCK_FUNTION_TYPE_TOURN_GOD_MODE" => {
                Some(Self::RogueUnlockFuntionTypeTournGodMode)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Pmpcbalmneo {
    RogueCommonMiracleSelectSourceTypeNone = 0,
    RogueCommonMiracleSelectSourceTypeDiceRoll = 1,
    RogueCommonMiracleSelectSourceTypeAeon = 2,
    RogueCommonMiracleSelectSourceTypeBoardEvent = 3,
    RogueCommonMiracleSelectSourceTypeLevelMechanism = 4,
}
impl Pmpcbalmneo {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueCommonMiracleSelectSourceTypeNone => {
                "ROGUE_COMMON_MIRACLE_SELECT_SOURCE_TYPE_NONE"
            }
            Self::RogueCommonMiracleSelectSourceTypeDiceRoll => {
                "ROGUE_COMMON_MIRACLE_SELECT_SOURCE_TYPE_DICE_ROLL"
            }
            Self::RogueCommonMiracleSelectSourceTypeAeon => {
                "ROGUE_COMMON_MIRACLE_SELECT_SOURCE_TYPE_AEON"
            }
            Self::RogueCommonMiracleSelectSourceTypeBoardEvent => {
                "ROGUE_COMMON_MIRACLE_SELECT_SOURCE_TYPE_BOARD_EVENT"
            }
            Self::RogueCommonMiracleSelectSourceTypeLevelMechanism => {
                "ROGUE_COMMON_MIRACLE_SELECT_SOURCE_TYPE_LEVEL_MECHANISM"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_COMMON_MIRACLE_SELECT_SOURCE_TYPE_NONE" => {
                Some(Self::RogueCommonMiracleSelectSourceTypeNone)
            }
            "ROGUE_COMMON_MIRACLE_SELECT_SOURCE_TYPE_DICE_ROLL" => {
                Some(Self::RogueCommonMiracleSelectSourceTypeDiceRoll)
            }
            "ROGUE_COMMON_MIRACLE_SELECT_SOURCE_TYPE_AEON" => {
                Some(Self::RogueCommonMiracleSelectSourceTypeAeon)
            }
            "ROGUE_COMMON_MIRACLE_SELECT_SOURCE_TYPE_BOARD_EVENT" => {
                Some(Self::RogueCommonMiracleSelectSourceTypeBoardEvent)
            }
            "ROGUE_COMMON_MIRACLE_SELECT_SOURCE_TYPE_LEVEL_MECHANISM" => {
                Some(Self::RogueCommonMiracleSelectSourceTypeLevelMechanism)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Ojeigiekjeh {
    RogueCommonBuffDisplayTypeNone = 0,
    RogueCommonBuffDisplayTypeAdd = 1,
    RogueCommonBuffDisplayTypeRemove = 2,
}
impl Ojeigiekjeh {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueCommonBuffDisplayTypeNone => "ROGUE_COMMON_BUFF_DISPLAY_TYPE_NONE",
            Self::RogueCommonBuffDisplayTypeAdd => "ROGUE_COMMON_BUFF_DISPLAY_TYPE_ADD",
            Self::RogueCommonBuffDisplayTypeRemove => {
                "ROGUE_COMMON_BUFF_DISPLAY_TYPE_REMOVE"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_COMMON_BUFF_DISPLAY_TYPE_NONE" => {
                Some(Self::RogueCommonBuffDisplayTypeNone)
            }
            "ROGUE_COMMON_BUFF_DISPLAY_TYPE_ADD" => {
                Some(Self::RogueCommonBuffDisplayTypeAdd)
            }
            "ROGUE_COMMON_BUFF_DISPLAY_TYPE_REMOVE" => {
                Some(Self::RogueCommonBuffDisplayTypeRemove)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Laiapkndbph {
    RogueCommonMiracleDisplayTypeNone = 0,
    RogueCommonMiracleDisplayTypeAdd = 1,
    RogueCommonMiracleDisplayTypeRemove = 2,
    RogueCommonMiracleDisplayTypeRepair = 3,
}
impl Laiapkndbph {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueCommonMiracleDisplayTypeNone => {
                "ROGUE_COMMON_MIRACLE_DISPLAY_TYPE_NONE"
            }
            Self::RogueCommonMiracleDisplayTypeAdd => {
                "ROGUE_COMMON_MIRACLE_DISPLAY_TYPE_ADD"
            }
            Self::RogueCommonMiracleDisplayTypeRemove => {
                "ROGUE_COMMON_MIRACLE_DISPLAY_TYPE_REMOVE"
            }
            Self::RogueCommonMiracleDisplayTypeRepair => {
                "ROGUE_COMMON_MIRACLE_DISPLAY_TYPE_REPAIR"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_COMMON_MIRACLE_DISPLAY_TYPE_NONE" => {
                Some(Self::RogueCommonMiracleDisplayTypeNone)
            }
            "ROGUE_COMMON_MIRACLE_DISPLAY_TYPE_ADD" => {
                Some(Self::RogueCommonMiracleDisplayTypeAdd)
            }
            "ROGUE_COMMON_MIRACLE_DISPLAY_TYPE_REMOVE" => {
                Some(Self::RogueCommonMiracleDisplayTypeRemove)
            }
            "ROGUE_COMMON_MIRACLE_DISPLAY_TYPE_REPAIR" => {
                Some(Self::RogueCommonMiracleDisplayTypeRepair)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Paickpmogdg {
    RogueCommonItemDisplayTypeNone = 0,
    RogueCommonItemDisplayTypeAdd = 1,
    RogueCommonItemDisplayTypeRemove = 2,
}
impl Paickpmogdg {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueCommonItemDisplayTypeNone => "ROGUE_COMMON_ITEM_DISPLAY_TYPE_NONE",
            Self::RogueCommonItemDisplayTypeAdd => "ROGUE_COMMON_ITEM_DISPLAY_TYPE_ADD",
            Self::RogueCommonItemDisplayTypeRemove => {
                "ROGUE_COMMON_ITEM_DISPLAY_TYPE_REMOVE"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_COMMON_ITEM_DISPLAY_TYPE_NONE" => {
                Some(Self::RogueCommonItemDisplayTypeNone)
            }
            "ROGUE_COMMON_ITEM_DISPLAY_TYPE_ADD" => {
                Some(Self::RogueCommonItemDisplayTypeAdd)
            }
            "ROGUE_COMMON_ITEM_DISPLAY_TYPE_REMOVE" => {
                Some(Self::RogueCommonItemDisplayTypeRemove)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Nemklkdbeap {
    RogueCommonActionResultDisplayTypeNone = 0,
    RogueCommonActionResultDisplayTypeSingle = 1,
    RogueCommonActionResultDisplayTypeMulti = 2,
}
impl Nemklkdbeap {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueCommonActionResultDisplayTypeNone => {
                "ROGUE_COMMON_ACTION_RESULT_DISPLAY_TYPE_NONE"
            }
            Self::RogueCommonActionResultDisplayTypeSingle => {
                "ROGUE_COMMON_ACTION_RESULT_DISPLAY_TYPE_SINGLE"
            }
            Self::RogueCommonActionResultDisplayTypeMulti => {
                "ROGUE_COMMON_ACTION_RESULT_DISPLAY_TYPE_MULTI"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_COMMON_ACTION_RESULT_DISPLAY_TYPE_NONE" => {
                Some(Self::RogueCommonActionResultDisplayTypeNone)
            }
            "ROGUE_COMMON_ACTION_RESULT_DISPLAY_TYPE_SINGLE" => {
                Some(Self::RogueCommonActionResultDisplayTypeSingle)
            }
            "ROGUE_COMMON_ACTION_RESULT_DISPLAY_TYPE_MULTI" => {
                Some(Self::RogueCommonActionResultDisplayTypeMulti)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Cfjgpifiool {
    RogueCommonActionResultSourceTypeNone = 0,
    RogueCommonActionResultSourceTypeSelect = 1,
    RogueCommonActionResultSourceTypeEnhance = 2,
    RogueCommonActionResultSourceTypeMiracle = 3,
    RogueCommonActionResultSourceTypeDialogue = 4,
    RogueCommonActionResultSourceTypeBonus = 5,
    RogueCommonActionResultSourceTypeShop = 6,
    RogueCommonActionResultSourceTypeDice = 7,
    RogueCommonActionResultSourceTypeAeon = 8,
    RogueCommonActionResultSourceTypeBoardEvent = 9,
    RogueCommonActionResultSourceTypeMazeSkill = 10,
    RogueCommonActionResultSourceTypeLevelMechanism = 11,
    RogueCommonActionResultSourceTypeBuff = 12,
    RogueCommonActionResultSourceTypeReforge = 13,
    RogueCommonActionResultSourceTypeMagicUnitCompose = 14,
    RogueCommonActionResultSourceTypeMagicUnitReforge = 15,
}
impl Cfjgpifiool {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueCommonActionResultSourceTypeNone => {
                "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_NONE"
            }
            Self::RogueCommonActionResultSourceTypeSelect => {
                "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_SELECT"
            }
            Self::RogueCommonActionResultSourceTypeEnhance => {
                "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_ENHANCE"
            }
            Self::RogueCommonActionResultSourceTypeMiracle => {
                "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MIRACLE"
            }
            Self::RogueCommonActionResultSourceTypeDialogue => {
                "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_DIALOGUE"
            }
            Self::RogueCommonActionResultSourceTypeBonus => {
                "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_BONUS"
            }
            Self::RogueCommonActionResultSourceTypeShop => {
                "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_SHOP"
            }
            Self::RogueCommonActionResultSourceTypeDice => {
                "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_DICE"
            }
            Self::RogueCommonActionResultSourceTypeAeon => {
                "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_AEON"
            }
            Self::RogueCommonActionResultSourceTypeBoardEvent => {
                "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_BOARD_EVENT"
            }
            Self::RogueCommonActionResultSourceTypeMazeSkill => {
                "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MAZE_SKILL"
            }
            Self::RogueCommonActionResultSourceTypeLevelMechanism => {
                "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_LEVEL_MECHANISM"
            }
            Self::RogueCommonActionResultSourceTypeBuff => {
                "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_BUFF"
            }
            Self::RogueCommonActionResultSourceTypeReforge => {
                "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_REFORGE"
            }
            Self::RogueCommonActionResultSourceTypeMagicUnitCompose => {
                "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MAGIC_UNIT_COMPOSE"
            }
            Self::RogueCommonActionResultSourceTypeMagicUnitReforge => {
                "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MAGIC_UNIT_REFORGE"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_NONE" => {
                Some(Self::RogueCommonActionResultSourceTypeNone)
            }
            "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_SELECT" => {
                Some(Self::RogueCommonActionResultSourceTypeSelect)
            }
            "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_ENHANCE" => {
                Some(Self::RogueCommonActionResultSourceTypeEnhance)
            }
            "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MIRACLE" => {
                Some(Self::RogueCommonActionResultSourceTypeMiracle)
            }
            "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_DIALOGUE" => {
                Some(Self::RogueCommonActionResultSourceTypeDialogue)
            }
            "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_BONUS" => {
                Some(Self::RogueCommonActionResultSourceTypeBonus)
            }
            "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_SHOP" => {
                Some(Self::RogueCommonActionResultSourceTypeShop)
            }
            "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_DICE" => {
                Some(Self::RogueCommonActionResultSourceTypeDice)
            }
            "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_AEON" => {
                Some(Self::RogueCommonActionResultSourceTypeAeon)
            }
            "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_BOARD_EVENT" => {
                Some(Self::RogueCommonActionResultSourceTypeBoardEvent)
            }
            "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MAZE_SKILL" => {
                Some(Self::RogueCommonActionResultSourceTypeMazeSkill)
            }
            "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_LEVEL_MECHANISM" => {
                Some(Self::RogueCommonActionResultSourceTypeLevelMechanism)
            }
            "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_BUFF" => {
                Some(Self::RogueCommonActionResultSourceTypeBuff)
            }
            "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_REFORGE" => {
                Some(Self::RogueCommonActionResultSourceTypeReforge)
            }
            "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MAGIC_UNIT_COMPOSE" => {
                Some(Self::RogueCommonActionResultSourceTypeMagicUnitCompose)
            }
            "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MAGIC_UNIT_REFORGE" => {
                Some(Self::RogueCommonActionResultSourceTypeMagicUnitReforge)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Ndkljjiimgm {
    KTitanBlessSelectNone = 0,
    KSelectTitanBlessType = 1,
    KSelectTitanBlessEnhance = 2,
}
impl Ndkljjiimgm {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::KTitanBlessSelectNone => "kTitanBlessSelectNone",
            Self::KSelectTitanBlessType => "kSelectTitanBlessType",
            Self::KSelectTitanBlessEnhance => "kSelectTitanBlessEnhance",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "kTitanBlessSelectNone" => Some(Self::KTitanBlessSelectNone),
            "kSelectTitanBlessType" => Some(Self::KSelectTitanBlessType),
            "kSelectTitanBlessEnhance" => Some(Self::KSelectTitanBlessEnhance),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Kpabffanjbk {
    RogueTalentStatusLock = 0,
    RogueTalentStatusUnlock = 1,
    RogueTalentStatusEnable = 2,
}
impl Kpabffanjbk {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueTalentStatusLock => "ROGUE_TALENT_STATUS_LOCK",
            Self::RogueTalentStatusUnlock => "ROGUE_TALENT_STATUS_UNLOCK",
            Self::RogueTalentStatusEnable => "ROGUE_TALENT_STATUS_ENABLE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_TALENT_STATUS_LOCK" => Some(Self::RogueTalentStatusLock),
            "ROGUE_TALENT_STATUS_UNLOCK" => Some(Self::RogueTalentStatusUnlock),
            "ROGUE_TALENT_STATUS_ENABLE" => Some(Self::RogueTalentStatusEnable),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Mhkmpgabbpl {
    RogueCollectionOperateNone = 0,
    RogueCollectionOperateSet = 1,
    RogueCollectionOperateUnset = 2,
}
impl Mhkmpgabbpl {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueCollectionOperateNone => "ROGUE_COLLECTION_OPERATE_NONE",
            Self::RogueCollectionOperateSet => "ROGUE_COLLECTION_OPERATE_SET",
            Self::RogueCollectionOperateUnset => "ROGUE_COLLECTION_OPERATE_UNSET",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_COLLECTION_OPERATE_NONE" => Some(Self::RogueCollectionOperateNone),
            "ROGUE_COLLECTION_OPERATE_SET" => Some(Self::RogueCollectionOperateSet),
            "ROGUE_COLLECTION_OPERATE_UNSET" => Some(Self::RogueCollectionOperateUnset),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Hhiclpljnco {
    RogueBoothNone = 0,
    RogueBoothEmpty = 1,
    RogueBoothDisplay = 2,
}
impl Hhiclpljnco {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueBoothNone => "ROGUE_BOOTH_NONE",
            Self::RogueBoothEmpty => "ROGUE_BOOTH_EMPTY",
            Self::RogueBoothDisplay => "ROGUE_BOOTH_DISPLAY",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_BOOTH_NONE" => Some(Self::RogueBoothNone),
            "ROGUE_BOOTH_EMPTY" => Some(Self::RogueBoothEmpty),
            "ROGUE_BOOTH_DISPLAY" => Some(Self::RogueBoothDisplay),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Hgpokmdgknn {
    RogueCollectionNone = 0,
    RogueCollectionUnlocked = 1,
    RogueCollectionDisplay = 2,
}
impl Hgpokmdgknn {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueCollectionNone => "ROGUE_COLLECTION_NONE",
            Self::RogueCollectionUnlocked => "ROGUE_COLLECTION_UNLOCKED",
            Self::RogueCollectionDisplay => "ROGUE_COLLECTION_DISPLAY",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_COLLECTION_NONE" => Some(Self::RogueCollectionNone),
            "ROGUE_COLLECTION_UNLOCKED" => Some(Self::RogueCollectionUnlocked),
            "ROGUE_COLLECTION_DISPLAY" => Some(Self::RogueCollectionDisplay),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Ehcobodeeje {
    RogueExhibitionNone = 0,
    RogueExhibitionUnlocked = 1,
    RogueExhibitionDisplay = 2,
}
impl Ehcobodeeje {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueExhibitionNone => "ROGUE_EXHIBITION_NONE",
            Self::RogueExhibitionUnlocked => "ROGUE_EXHIBITION_UNLOCKED",
            Self::RogueExhibitionDisplay => "ROGUE_EXHIBITION_DISPLAY",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_EXHIBITION_NONE" => Some(Self::RogueExhibitionNone),
            "ROGUE_EXHIBITION_UNLOCKED" => Some(Self::RogueExhibitionUnlocked),
            "ROGUE_EXHIBITION_DISPLAY" => Some(Self::RogueExhibitionDisplay),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Kcoalennljb {
    RogueDebugMessageTypeNone = 0,
    RogueDebugMessageTypeDebug = 1,
    RogueDebugMessageTypeInfo = 2,
    RogueDebugMessageTypeWarn = 3,
    RogueDebugMessageTypeError = 4,
}
impl Kcoalennljb {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueDebugMessageTypeNone => "ROGUE_DEBUG_MESSAGE_TYPE_NONE",
            Self::RogueDebugMessageTypeDebug => "ROGUE_DEBUG_MESSAGE_TYPE_DEBUG",
            Self::RogueDebugMessageTypeInfo => "ROGUE_DEBUG_MESSAGE_TYPE_INFO",
            Self::RogueDebugMessageTypeWarn => "ROGUE_DEBUG_MESSAGE_TYPE_WARN",
            Self::RogueDebugMessageTypeError => "ROGUE_DEBUG_MESSAGE_TYPE_ERROR",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_DEBUG_MESSAGE_TYPE_NONE" => Some(Self::RogueDebugMessageTypeNone),
            "ROGUE_DEBUG_MESSAGE_TYPE_DEBUG" => Some(Self::RogueDebugMessageTypeDebug),
            "ROGUE_DEBUG_MESSAGE_TYPE_INFO" => Some(Self::RogueDebugMessageTypeInfo),
            "ROGUE_DEBUG_MESSAGE_TYPE_WARN" => Some(Self::RogueDebugMessageTypeWarn),
            "ROGUE_DEBUG_MESSAGE_TYPE_ERROR" => Some(Self::RogueDebugMessageTypeError),
            _ => None,
        }
    }
}
/// JEBNNIFNKCA
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdRogueEndless {
    None = 0,
    CmdTakeRogueEndlessActivityPointRewardScRsp = 6003,
    CmdTakeRogueEndlessActivityAllBonusRewardCsReq = 6002,
    CmdEnterRogueEndlessActivityStageCsReq = 6001,
    ActivityBattleEndScNotify = 6005,
    CmdGetRogueEndlessActivityDataCsReq = 6009,
    CmdTakeRogueEndlessActivityAllBonusRewardScRsp = 6010,
    CmdEnterRogueEndlessActivityStageScRsp = 6006,
    CmdGetRogueEndlessActivityDataScRsp = 6008,
    CmdTakeRogueEndlessActivityPointRewardCsReq = 6007,
}
impl CmdRogueEndless {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdRogueEndlessNone",
            Self::CmdTakeRogueEndlessActivityPointRewardScRsp => {
                "CmdTakeRogueEndlessActivityPointRewardScRsp"
            }
            Self::CmdTakeRogueEndlessActivityAllBonusRewardCsReq => {
                "CmdTakeRogueEndlessActivityAllBonusRewardCsReq"
            }
            Self::CmdEnterRogueEndlessActivityStageCsReq => {
                "CmdEnterRogueEndlessActivityStageCsReq"
            }
            Self::ActivityBattleEndScNotify => "CmdRogueEndlessActivityBattleEndScNotify",
            Self::CmdGetRogueEndlessActivityDataCsReq => {
                "CmdGetRogueEndlessActivityDataCsReq"
            }
            Self::CmdTakeRogueEndlessActivityAllBonusRewardScRsp => {
                "CmdTakeRogueEndlessActivityAllBonusRewardScRsp"
            }
            Self::CmdEnterRogueEndlessActivityStageScRsp => {
                "CmdEnterRogueEndlessActivityStageScRsp"
            }
            Self::CmdGetRogueEndlessActivityDataScRsp => {
                "CmdGetRogueEndlessActivityDataScRsp"
            }
            Self::CmdTakeRogueEndlessActivityPointRewardCsReq => {
                "CmdTakeRogueEndlessActivityPointRewardCsReq"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdRogueEndlessNone" => Some(Self::None),
            "CmdTakeRogueEndlessActivityPointRewardScRsp" => {
                Some(Self::CmdTakeRogueEndlessActivityPointRewardScRsp)
            }
            "CmdTakeRogueEndlessActivityAllBonusRewardCsReq" => {
                Some(Self::CmdTakeRogueEndlessActivityAllBonusRewardCsReq)
            }
            "CmdEnterRogueEndlessActivityStageCsReq" => {
                Some(Self::CmdEnterRogueEndlessActivityStageCsReq)
            }
            "CmdRogueEndlessActivityBattleEndScNotify" => {
                Some(Self::ActivityBattleEndScNotify)
            }
            "CmdGetRogueEndlessActivityDataCsReq" => {
                Some(Self::CmdGetRogueEndlessActivityDataCsReq)
            }
            "CmdTakeRogueEndlessActivityAllBonusRewardScRsp" => {
                Some(Self::CmdTakeRogueEndlessActivityAllBonusRewardScRsp)
            }
            "CmdEnterRogueEndlessActivityStageScRsp" => {
                Some(Self::CmdEnterRogueEndlessActivityStageScRsp)
            }
            "CmdGetRogueEndlessActivityDataScRsp" => {
                Some(Self::CmdGetRogueEndlessActivityDataScRsp)
            }
            "CmdTakeRogueEndlessActivityPointRewardCsReq" => {
                Some(Self::CmdTakeRogueEndlessActivityPointRewardCsReq)
            }
            _ => None,
        }
    }
}
/// HBDODAGAFMP
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdRogueMagic {
    None = 0,
    EnterLayerCsReq = 7705,
    StartScRsp = 7768,
    SetAutoDressInMagicUnitCsReq = 7773,
    GetMiscRealTimeDataScRsp = 7757,
    SetAutoDressInMagicUnitScRsp = 7740,
    EnterScRsp = 7724,
    SettleScRsp = 7776,
    UnitReforgeScRsp = 7738,
    ReviveAvatarCsReq = 7712,
    ScepterDressInUnitScRsp = 7748,
    EnterLayerScRsp = 7714,
    AutoDressInUnitCsReq = 7713,
    GetMiscRealTimeDataCsReq = 7703,
    GetTalentInfoScRsp = 7782,
    SettleCsReq = 7797,
    GetTalentInfoCsReq = 7719,
    AutoDressInMagicUnitChangeScNotify = 7767,
    EnterRoomCsReq = 7728,
    UnitComposeCsReq = 7792,
    UnitReforgeCsReq = 7781,
    UnitComposeScRsp = 7770,
    LevelInfoUpdateScNotify = 7749,
    EnterRoomScRsp = 7711,
    BattleFailSettleInfoScNotify = 7796,
    StoryInfoUpdateScNotify = 7778,
    StartCsReq = 7701,
    EnterCsReq = 7758,
    EnableTalentCsReq = 7759,
    AutoDressInUnitScRsp = 7708,
    ScepterTakeOffUnitScRsp = 7720,
    QueryScRsp = 7718,
    AreaUpdateScNotify = 7722,
    LeaveScRsp = 7756,
    EnableTalentScRsp = 7741,
    QueryCsReq = 7791,
    ReviveCostUpdateScNotify = 7723,
    ScepterTakeOffUnitCsReq = 7769,
    ScepterDressInUnitCsReq = 7750,
    LeaveCsReq = 7730,
    ReviveAvatarScRsp = 7717,
}
impl CmdRogueMagic {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdRogueMagicNone",
            Self::EnterLayerCsReq => "CmdRogueMagicEnterLayerCsReq",
            Self::StartScRsp => "CmdRogueMagicStartScRsp",
            Self::SetAutoDressInMagicUnitCsReq => {
                "CmdRogueMagicSetAutoDressInMagicUnitCsReq"
            }
            Self::GetMiscRealTimeDataScRsp => "CmdRogueMagicGetMiscRealTimeDataScRsp",
            Self::SetAutoDressInMagicUnitScRsp => {
                "CmdRogueMagicSetAutoDressInMagicUnitScRsp"
            }
            Self::EnterScRsp => "CmdRogueMagicEnterScRsp",
            Self::SettleScRsp => "CmdRogueMagicSettleScRsp",
            Self::UnitReforgeScRsp => "CmdRogueMagicUnitReforgeScRsp",
            Self::ReviveAvatarCsReq => "CmdRogueMagicReviveAvatarCsReq",
            Self::ScepterDressInUnitScRsp => "CmdRogueMagicScepterDressInUnitScRsp",
            Self::EnterLayerScRsp => "CmdRogueMagicEnterLayerScRsp",
            Self::AutoDressInUnitCsReq => "CmdRogueMagicAutoDressInUnitCsReq",
            Self::GetMiscRealTimeDataCsReq => "CmdRogueMagicGetMiscRealTimeDataCsReq",
            Self::GetTalentInfoScRsp => "CmdRogueMagicGetTalentInfoScRsp",
            Self::SettleCsReq => "CmdRogueMagicSettleCsReq",
            Self::GetTalentInfoCsReq => "CmdRogueMagicGetTalentInfoCsReq",
            Self::AutoDressInMagicUnitChangeScNotify => {
                "CmdRogueMagicAutoDressInMagicUnitChangeScNotify"
            }
            Self::EnterRoomCsReq => "CmdRogueMagicEnterRoomCsReq",
            Self::UnitComposeCsReq => "CmdRogueMagicUnitComposeCsReq",
            Self::UnitReforgeCsReq => "CmdRogueMagicUnitReforgeCsReq",
            Self::UnitComposeScRsp => "CmdRogueMagicUnitComposeScRsp",
            Self::LevelInfoUpdateScNotify => "CmdRogueMagicLevelInfoUpdateScNotify",
            Self::EnterRoomScRsp => "CmdRogueMagicEnterRoomScRsp",
            Self::BattleFailSettleInfoScNotify => {
                "CmdRogueMagicBattleFailSettleInfoScNotify"
            }
            Self::StoryInfoUpdateScNotify => "CmdRogueMagicStoryInfoUpdateScNotify",
            Self::StartCsReq => "CmdRogueMagicStartCsReq",
            Self::EnterCsReq => "CmdRogueMagicEnterCsReq",
            Self::EnableTalentCsReq => "CmdRogueMagicEnableTalentCsReq",
            Self::AutoDressInUnitScRsp => "CmdRogueMagicAutoDressInUnitScRsp",
            Self::ScepterTakeOffUnitScRsp => "CmdRogueMagicScepterTakeOffUnitScRsp",
            Self::QueryScRsp => "CmdRogueMagicQueryScRsp",
            Self::AreaUpdateScNotify => "CmdRogueMagicAreaUpdateScNotify",
            Self::LeaveScRsp => "CmdRogueMagicLeaveScRsp",
            Self::EnableTalentScRsp => "CmdRogueMagicEnableTalentScRsp",
            Self::QueryCsReq => "CmdRogueMagicQueryCsReq",
            Self::ReviveCostUpdateScNotify => "CmdRogueMagicReviveCostUpdateScNotify",
            Self::ScepterTakeOffUnitCsReq => "CmdRogueMagicScepterTakeOffUnitCsReq",
            Self::ScepterDressInUnitCsReq => "CmdRogueMagicScepterDressInUnitCsReq",
            Self::LeaveCsReq => "CmdRogueMagicLeaveCsReq",
            Self::ReviveAvatarScRsp => "CmdRogueMagicReviveAvatarScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdRogueMagicNone" => Some(Self::None),
            "CmdRogueMagicEnterLayerCsReq" => Some(Self::EnterLayerCsReq),
            "CmdRogueMagicStartScRsp" => Some(Self::StartScRsp),
            "CmdRogueMagicSetAutoDressInMagicUnitCsReq" => {
                Some(Self::SetAutoDressInMagicUnitCsReq)
            }
            "CmdRogueMagicGetMiscRealTimeDataScRsp" => {
                Some(Self::GetMiscRealTimeDataScRsp)
            }
            "CmdRogueMagicSetAutoDressInMagicUnitScRsp" => {
                Some(Self::SetAutoDressInMagicUnitScRsp)
            }
            "CmdRogueMagicEnterScRsp" => Some(Self::EnterScRsp),
            "CmdRogueMagicSettleScRsp" => Some(Self::SettleScRsp),
            "CmdRogueMagicUnitReforgeScRsp" => Some(Self::UnitReforgeScRsp),
            "CmdRogueMagicReviveAvatarCsReq" => Some(Self::ReviveAvatarCsReq),
            "CmdRogueMagicScepterDressInUnitScRsp" => Some(Self::ScepterDressInUnitScRsp),
            "CmdRogueMagicEnterLayerScRsp" => Some(Self::EnterLayerScRsp),
            "CmdRogueMagicAutoDressInUnitCsReq" => Some(Self::AutoDressInUnitCsReq),
            "CmdRogueMagicGetMiscRealTimeDataCsReq" => {
                Some(Self::GetMiscRealTimeDataCsReq)
            }
            "CmdRogueMagicGetTalentInfoScRsp" => Some(Self::GetTalentInfoScRsp),
            "CmdRogueMagicSettleCsReq" => Some(Self::SettleCsReq),
            "CmdRogueMagicGetTalentInfoCsReq" => Some(Self::GetTalentInfoCsReq),
            "CmdRogueMagicAutoDressInMagicUnitChangeScNotify" => {
                Some(Self::AutoDressInMagicUnitChangeScNotify)
            }
            "CmdRogueMagicEnterRoomCsReq" => Some(Self::EnterRoomCsReq),
            "CmdRogueMagicUnitComposeCsReq" => Some(Self::UnitComposeCsReq),
            "CmdRogueMagicUnitReforgeCsReq" => Some(Self::UnitReforgeCsReq),
            "CmdRogueMagicUnitComposeScRsp" => Some(Self::UnitComposeScRsp),
            "CmdRogueMagicLevelInfoUpdateScNotify" => Some(Self::LevelInfoUpdateScNotify),
            "CmdRogueMagicEnterRoomScRsp" => Some(Self::EnterRoomScRsp),
            "CmdRogueMagicBattleFailSettleInfoScNotify" => {
                Some(Self::BattleFailSettleInfoScNotify)
            }
            "CmdRogueMagicStoryInfoUpdateScNotify" => Some(Self::StoryInfoUpdateScNotify),
            "CmdRogueMagicStartCsReq" => Some(Self::StartCsReq),
            "CmdRogueMagicEnterCsReq" => Some(Self::EnterCsReq),
            "CmdRogueMagicEnableTalentCsReq" => Some(Self::EnableTalentCsReq),
            "CmdRogueMagicAutoDressInUnitScRsp" => Some(Self::AutoDressInUnitScRsp),
            "CmdRogueMagicScepterTakeOffUnitScRsp" => Some(Self::ScepterTakeOffUnitScRsp),
            "CmdRogueMagicQueryScRsp" => Some(Self::QueryScRsp),
            "CmdRogueMagicAreaUpdateScNotify" => Some(Self::AreaUpdateScNotify),
            "CmdRogueMagicLeaveScRsp" => Some(Self::LeaveScRsp),
            "CmdRogueMagicEnableTalentScRsp" => Some(Self::EnableTalentScRsp),
            "CmdRogueMagicQueryCsReq" => Some(Self::QueryCsReq),
            "CmdRogueMagicReviveCostUpdateScNotify" => {
                Some(Self::ReviveCostUpdateScNotify)
            }
            "CmdRogueMagicScepterTakeOffUnitCsReq" => Some(Self::ScepterTakeOffUnitCsReq),
            "CmdRogueMagicScepterDressInUnitCsReq" => Some(Self::ScepterDressInUnitCsReq),
            "CmdRogueMagicLeaveCsReq" => Some(Self::LeaveCsReq),
            "CmdRogueMagicReviveAvatarScRsp" => Some(Self::ReviveAvatarScRsp),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Behfnmkdomk {
    RogueMagicLevelStatusNone = 0,
    RogueMagicLevelStatusProcessing = 1,
    RogueMagicLevelStatusFinished = 2,
    RogueMagicLevelStatusSettled = 3,
}
impl Behfnmkdomk {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueMagicLevelStatusNone => "ROGUE_MAGIC_LEVEL_STATUS_NONE",
            Self::RogueMagicLevelStatusProcessing => {
                "ROGUE_MAGIC_LEVEL_STATUS_PROCESSING"
            }
            Self::RogueMagicLevelStatusFinished => "ROGUE_MAGIC_LEVEL_STATUS_FINISHED",
            Self::RogueMagicLevelStatusSettled => "ROGUE_MAGIC_LEVEL_STATUS_SETTLED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_MAGIC_LEVEL_STATUS_NONE" => Some(Self::RogueMagicLevelStatusNone),
            "ROGUE_MAGIC_LEVEL_STATUS_PROCESSING" => {
                Some(Self::RogueMagicLevelStatusProcessing)
            }
            "ROGUE_MAGIC_LEVEL_STATUS_FINISHED" => {
                Some(Self::RogueMagicLevelStatusFinished)
            }
            "ROGUE_MAGIC_LEVEL_STATUS_SETTLED" => {
                Some(Self::RogueMagicLevelStatusSettled)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Jlcbbkkgoej {
    RogueMagicLayerStatusNone = 0,
    RogueMagicLayerStatusProcessing = 1,
    RogueMagicLayerStatusFinish = 2,
}
impl Jlcbbkkgoej {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueMagicLayerStatusNone => "ROGUE_MAGIC_LAYER_STATUS_NONE",
            Self::RogueMagicLayerStatusProcessing => {
                "ROGUE_MAGIC_LAYER_STATUS_PROCESSING"
            }
            Self::RogueMagicLayerStatusFinish => "ROGUE_MAGIC_LAYER_STATUS_FINISH",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_MAGIC_LAYER_STATUS_NONE" => Some(Self::RogueMagicLayerStatusNone),
            "ROGUE_MAGIC_LAYER_STATUS_PROCESSING" => {
                Some(Self::RogueMagicLayerStatusProcessing)
            }
            "ROGUE_MAGIC_LAYER_STATUS_FINISH" => Some(Self::RogueMagicLayerStatusFinish),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Jiokhlhgeod {
    RogueMagicRoomStatusNone = 0,
    RogueMagicRoomStatusInited = 1,
    RogueMagicRoomStatusProcessing = 2,
    RogueMagicRoomStatusFinish = 3,
}
impl Jiokhlhgeod {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueMagicRoomStatusNone => "ROGUE_MAGIC_ROOM_STATUS_NONE",
            Self::RogueMagicRoomStatusInited => "ROGUE_MAGIC_ROOM_STATUS_INITED",
            Self::RogueMagicRoomStatusProcessing => "ROGUE_MAGIC_ROOM_STATUS_PROCESSING",
            Self::RogueMagicRoomStatusFinish => "ROGUE_MAGIC_ROOM_STATUS_FINISH",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_MAGIC_ROOM_STATUS_NONE" => Some(Self::RogueMagicRoomStatusNone),
            "ROGUE_MAGIC_ROOM_STATUS_INITED" => Some(Self::RogueMagicRoomStatusInited),
            "ROGUE_MAGIC_ROOM_STATUS_PROCESSING" => {
                Some(Self::RogueMagicRoomStatusProcessing)
            }
            "ROGUE_MAGIC_ROOM_STATUS_FINISH" => Some(Self::RogueMagicRoomStatusFinish),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Jmpphgigffi {
    RogueMagicSettleReasonNone = 0,
    RogueMagicSettleReasonWin = 1,
    RogueMagicSettleReasonFail = 2,
    RogueMagicSettleReasonInterrupt = 3,
}
impl Jmpphgigffi {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueMagicSettleReasonNone => "ROGUE_MAGIC_SETTLE_REASON_NONE",
            Self::RogueMagicSettleReasonWin => "ROGUE_MAGIC_SETTLE_REASON_WIN",
            Self::RogueMagicSettleReasonFail => "ROGUE_MAGIC_SETTLE_REASON_FAIL",
            Self::RogueMagicSettleReasonInterrupt => {
                "ROGUE_MAGIC_SETTLE_REASON_INTERRUPT"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_MAGIC_SETTLE_REASON_NONE" => Some(Self::RogueMagicSettleReasonNone),
            "ROGUE_MAGIC_SETTLE_REASON_WIN" => Some(Self::RogueMagicSettleReasonWin),
            "ROGUE_MAGIC_SETTLE_REASON_FAIL" => Some(Self::RogueMagicSettleReasonFail),
            "ROGUE_MAGIC_SETTLE_REASON_INTERRUPT" => {
                Some(Self::RogueMagicSettleReasonInterrupt)
            }
            _ => None,
        }
    }
}
/// LCNMLGCGDJC
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdRogueModifierType {
    None = 0,
    CmdRogueModifierAddNotify = 5358,
    CmdRogueModifierUpdateNotify = 5376,
    CmdRogueModifierSelectCellScRsp = 5330,
    CmdRogueModifierSelectCellCsReq = 5324,
    CmdRogueModifierStageStartNotify = 5311,
    CmdRogueModifierDelNotify = 5328,
}
impl CmdRogueModifierType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdRogueModifierTypeNone",
            Self::CmdRogueModifierAddNotify => "CmdRogueModifierAddNotify",
            Self::CmdRogueModifierUpdateNotify => "CmdRogueModifierUpdateNotify",
            Self::CmdRogueModifierSelectCellScRsp => "CmdRogueModifierSelectCellScRsp",
            Self::CmdRogueModifierSelectCellCsReq => "CmdRogueModifierSelectCellCsReq",
            Self::CmdRogueModifierStageStartNotify => "CmdRogueModifierStageStartNotify",
            Self::CmdRogueModifierDelNotify => "CmdRogueModifierDelNotify",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdRogueModifierTypeNone" => Some(Self::None),
            "CmdRogueModifierAddNotify" => Some(Self::CmdRogueModifierAddNotify),
            "CmdRogueModifierUpdateNotify" => Some(Self::CmdRogueModifierUpdateNotify),
            "CmdRogueModifierSelectCellScRsp" => {
                Some(Self::CmdRogueModifierSelectCellScRsp)
            }
            "CmdRogueModifierSelectCellCsReq" => {
                Some(Self::CmdRogueModifierSelectCellCsReq)
            }
            "CmdRogueModifierStageStartNotify" => {
                Some(Self::CmdRogueModifierStageStartNotify)
            }
            "CmdRogueModifierDelNotify" => Some(Self::CmdRogueModifierDelNotify),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Lgmdbcffjof {
    RogueModifierSourceNone = 0,
    RogueModifierSourceDiceRoll = 1,
    RogueModifierSourceAeon = 2,
    RogueModifierSourceBoardEvent = 3,
    RogueModifierSourceDialogEvent = 4,
    RogueModifierSourceMiracle = 5,
    RogueModifierSourceCellMark = 6,
    RogueModifierSourceAeonTalent = 7,
    RogueModifierSourceBossDecay = 8,
    RogueModifierSourceDiceBranch = 9,
}
impl Lgmdbcffjof {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueModifierSourceNone => "ROGUE_MODIFIER_SOURCE_NONE",
            Self::RogueModifierSourceDiceRoll => "ROGUE_MODIFIER_SOURCE_DICE_ROLL",
            Self::RogueModifierSourceAeon => "ROGUE_MODIFIER_SOURCE_AEON",
            Self::RogueModifierSourceBoardEvent => "ROGUE_MODIFIER_SOURCE_BOARD_EVENT",
            Self::RogueModifierSourceDialogEvent => "ROGUE_MODIFIER_SOURCE_DIALOG_EVENT",
            Self::RogueModifierSourceMiracle => "ROGUE_MODIFIER_SOURCE_MIRACLE",
            Self::RogueModifierSourceCellMark => "ROGUE_MODIFIER_SOURCE_CELL_MARK",
            Self::RogueModifierSourceAeonTalent => "ROGUE_MODIFIER_SOURCE_AEON_TALENT",
            Self::RogueModifierSourceBossDecay => "ROGUE_MODIFIER_SOURCE_BOSS_DECAY",
            Self::RogueModifierSourceDiceBranch => "ROGUE_MODIFIER_SOURCE_DICE_BRANCH",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_MODIFIER_SOURCE_NONE" => Some(Self::RogueModifierSourceNone),
            "ROGUE_MODIFIER_SOURCE_DICE_ROLL" => Some(Self::RogueModifierSourceDiceRoll),
            "ROGUE_MODIFIER_SOURCE_AEON" => Some(Self::RogueModifierSourceAeon),
            "ROGUE_MODIFIER_SOURCE_BOARD_EVENT" => {
                Some(Self::RogueModifierSourceBoardEvent)
            }
            "ROGUE_MODIFIER_SOURCE_DIALOG_EVENT" => {
                Some(Self::RogueModifierSourceDialogEvent)
            }
            "ROGUE_MODIFIER_SOURCE_MIRACLE" => Some(Self::RogueModifierSourceMiracle),
            "ROGUE_MODIFIER_SOURCE_CELL_MARK" => Some(Self::RogueModifierSourceCellMark),
            "ROGUE_MODIFIER_SOURCE_AEON_TALENT" => {
                Some(Self::RogueModifierSourceAeonTalent)
            }
            "ROGUE_MODIFIER_SOURCE_BOSS_DECAY" => {
                Some(Self::RogueModifierSourceBossDecay)
            }
            "ROGUE_MODIFIER_SOURCE_DICE_BRANCH" => {
                Some(Self::RogueModifierSourceDiceBranch)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Njchljfiodm {
    RogueModifierContentDefinite = 0,
    RogueModifierContentRandom = 1,
}
impl Njchljfiodm {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueModifierContentDefinite => "ROGUE_MODIFIER_CONTENT_DEFINITE",
            Self::RogueModifierContentRandom => "ROGUE_MODIFIER_CONTENT_RANDOM",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_MODIFIER_CONTENT_DEFINITE" => Some(Self::RogueModifierContentDefinite),
            "ROGUE_MODIFIER_CONTENT_RANDOM" => Some(Self::RogueModifierContentRandom),
            _ => None,
        }
    }
}
/// FCENFMADHJG
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdRogueTournType {
    None = 0,
    CmdRogueTournSettleScRsp = 6092,
    CmdRogueTournConfirmSettleCsReq = 6086,
    CmdRogueTournDeleteArchiveCsReq = 6032,
    CmdRogueTournGetArchiveRepositoryCsReq = 6075,
    CmdRogueTournGetMiscRealTimeDataScRsp = 6095,
    CmdRogueTournExpNotify = 6078,
    CmdRogueTournGetSeasonTalentInfoScRsp = 6079,
    CmdRogueTournGetSeasonTalentInfoCsReq = 6028,
    CmdRogueTournGetAllArchiveCsReq = 6029,
    CmdRogueTournQueryScRsp = 6082,
    CmdRogueTournStartCsReq = 6011,
    CmdRogueTournTitanUpdateTitanBlessProgressScNotify = 6024,
    CmdRogueTournReviveAvatarCsReq = 6050,
    CmdRogueTournLeaveScRsp = 6064,
    CmdRogueTournReEnterRogueCocoonStageCsReq = 6020,
    CmdRogueTournRenameArchiveScRsp = 6013,
    CmdRogueTournDifficultyCompNotify = 6014,
    CmdRogueTournLevelInfoUpdateScNotify = 6061,
    CmdRogueTournClearArchiveNameScNotify = 6080,
    CmdRogueTournEnablePermanentTalentScRsp = 6088,
    CmdRogueTournGetAllArchiveScRsp = 6040,
    CmdRogueTournResetPermanentTalentScRsp = 6058,
    CmdRogueTournEnterScRsp = 6022,
    CmdRogueTournTakeExpRewardScRsp = 6071,
    CmdRogueTournConfirmSettleScRsp = 6073,
    CmdRogueTournGetCurRogueCocoonInfoScRsp = 6067,
    CmdRogueTournLeaveRogueCocoonSceneCsReq = 6018,
    CmdRogueTournGetArchiveRepositoryScRsp = 6062,
    CmdRogueTournEnterRogueCocoonSceneCsReq = 6048,
    CmdRogueTournSettleCsReq = 6070,
    CmdRogueTournDeleteArchiveScRsp = 6033,
    CmdRogueTournRenameArchiveCsReq = 6077,
    CmdRogueTournBattleFailSettleInfoScNotify = 6087,
    CmdRogueTournWeekChallengeUpdateScNotify = 6017,
    CmdRogueTournEnterCsReq = 6021,
    CmdRogueTournGetSettleInfoScRsp = 6091,
    CmdRogueTournGetPermanentTalentInfoCsReq = 6096,
    CmdRogueTournGetMiscRealTimeDataCsReq = 6089,
    CmdRogueTournReviveAvatarScRsp = 6038,
    CmdRogueTournEnterRogueCocoonSceneScRsp = 6023,
    CmdRogueTournEnterLayerCsReq = 6030,
    CmdRogueTournHandBookNotify = 6025,
    CmdRogueTournReviveCostUpdateScNotify = 6066,
    CmdRogueTournGetSettleInfoCsReq = 6060,
    CmdRogueTournTakeExpRewardCsReq = 6034,
    CmdRogueTournReEnterRogueCocoonStageScRsp = 6039,
    CmdRogueTournResetPermanentTalentCsReq = 6065,
    CmdRogueTournEnableSeasonTalentScRsp = 6027,
    CmdRogueTournAreaUpdateScNotify = 6051,
    CmdRogueTournLeaveRogueCocoonSceneScRsp = 6049,
    CmdRogueTournQueryCsReq = 6069,
    CmdRogueTournEnterLayerScRsp = 6090,
    CmdRogueTournEnterRoomCsReq = 6059,
    CmdRogueTournEnterRoomScRsp = 6044,
    CmdRogueTournLeaveCsReq = 6083,
    CmdRogueTournGetPermanentTalentInfoScRsp = 6057,
    CmdRogueTournEnableSeasonTalentCsReq = 6015,
    CmdRogueTournStartScRsp = 6068,
    CmdRogueTournEnablePermanentTalentCsReq = 6074,
    CmdRogueTournGetCurRogueCocoonInfoCsReq = 6016,
}
impl CmdRogueTournType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdRogueTournTypeNone",
            Self::CmdRogueTournSettleScRsp => "CmdRogueTournSettleScRsp",
            Self::CmdRogueTournConfirmSettleCsReq => "CmdRogueTournConfirmSettleCsReq",
            Self::CmdRogueTournDeleteArchiveCsReq => "CmdRogueTournDeleteArchiveCsReq",
            Self::CmdRogueTournGetArchiveRepositoryCsReq => {
                "CmdRogueTournGetArchiveRepositoryCsReq"
            }
            Self::CmdRogueTournGetMiscRealTimeDataScRsp => {
                "CmdRogueTournGetMiscRealTimeDataScRsp"
            }
            Self::CmdRogueTournExpNotify => "CmdRogueTournExpNotify",
            Self::CmdRogueTournGetSeasonTalentInfoScRsp => {
                "CmdRogueTournGetSeasonTalentInfoScRsp"
            }
            Self::CmdRogueTournGetSeasonTalentInfoCsReq => {
                "CmdRogueTournGetSeasonTalentInfoCsReq"
            }
            Self::CmdRogueTournGetAllArchiveCsReq => "CmdRogueTournGetAllArchiveCsReq",
            Self::CmdRogueTournQueryScRsp => "CmdRogueTournQueryScRsp",
            Self::CmdRogueTournStartCsReq => "CmdRogueTournStartCsReq",
            Self::CmdRogueTournTitanUpdateTitanBlessProgressScNotify => {
                "CmdRogueTournTitanUpdateTitanBlessProgressScNotify"
            }
            Self::CmdRogueTournReviveAvatarCsReq => "CmdRogueTournReviveAvatarCsReq",
            Self::CmdRogueTournLeaveScRsp => "CmdRogueTournLeaveScRsp",
            Self::CmdRogueTournReEnterRogueCocoonStageCsReq => {
                "CmdRogueTournReEnterRogueCocoonStageCsReq"
            }
            Self::CmdRogueTournRenameArchiveScRsp => "CmdRogueTournRenameArchiveScRsp",
            Self::CmdRogueTournDifficultyCompNotify => {
                "CmdRogueTournDifficultyCompNotify"
            }
            Self::CmdRogueTournLevelInfoUpdateScNotify => {
                "CmdRogueTournLevelInfoUpdateScNotify"
            }
            Self::CmdRogueTournClearArchiveNameScNotify => {
                "CmdRogueTournClearArchiveNameScNotify"
            }
            Self::CmdRogueTournEnablePermanentTalentScRsp => {
                "CmdRogueTournEnablePermanentTalentScRsp"
            }
            Self::CmdRogueTournGetAllArchiveScRsp => "CmdRogueTournGetAllArchiveScRsp",
            Self::CmdRogueTournResetPermanentTalentScRsp => {
                "CmdRogueTournResetPermanentTalentScRsp"
            }
            Self::CmdRogueTournEnterScRsp => "CmdRogueTournEnterScRsp",
            Self::CmdRogueTournTakeExpRewardScRsp => "CmdRogueTournTakeExpRewardScRsp",
            Self::CmdRogueTournConfirmSettleScRsp => "CmdRogueTournConfirmSettleScRsp",
            Self::CmdRogueTournGetCurRogueCocoonInfoScRsp => {
                "CmdRogueTournGetCurRogueCocoonInfoScRsp"
            }
            Self::CmdRogueTournLeaveRogueCocoonSceneCsReq => {
                "CmdRogueTournLeaveRogueCocoonSceneCsReq"
            }
            Self::CmdRogueTournGetArchiveRepositoryScRsp => {
                "CmdRogueTournGetArchiveRepositoryScRsp"
            }
            Self::CmdRogueTournEnterRogueCocoonSceneCsReq => {
                "CmdRogueTournEnterRogueCocoonSceneCsReq"
            }
            Self::CmdRogueTournSettleCsReq => "CmdRogueTournSettleCsReq",
            Self::CmdRogueTournDeleteArchiveScRsp => "CmdRogueTournDeleteArchiveScRsp",
            Self::CmdRogueTournRenameArchiveCsReq => "CmdRogueTournRenameArchiveCsReq",
            Self::CmdRogueTournBattleFailSettleInfoScNotify => {
                "CmdRogueTournBattleFailSettleInfoScNotify"
            }
            Self::CmdRogueTournWeekChallengeUpdateScNotify => {
                "CmdRogueTournWeekChallengeUpdateScNotify"
            }
            Self::CmdRogueTournEnterCsReq => "CmdRogueTournEnterCsReq",
            Self::CmdRogueTournGetSettleInfoScRsp => "CmdRogueTournGetSettleInfoScRsp",
            Self::CmdRogueTournGetPermanentTalentInfoCsReq => {
                "CmdRogueTournGetPermanentTalentInfoCsReq"
            }
            Self::CmdRogueTournGetMiscRealTimeDataCsReq => {
                "CmdRogueTournGetMiscRealTimeDataCsReq"
            }
            Self::CmdRogueTournReviveAvatarScRsp => "CmdRogueTournReviveAvatarScRsp",
            Self::CmdRogueTournEnterRogueCocoonSceneScRsp => {
                "CmdRogueTournEnterRogueCocoonSceneScRsp"
            }
            Self::CmdRogueTournEnterLayerCsReq => "CmdRogueTournEnterLayerCsReq",
            Self::CmdRogueTournHandBookNotify => "CmdRogueTournHandBookNotify",
            Self::CmdRogueTournReviveCostUpdateScNotify => {
                "CmdRogueTournReviveCostUpdateScNotify"
            }
            Self::CmdRogueTournGetSettleInfoCsReq => "CmdRogueTournGetSettleInfoCsReq",
            Self::CmdRogueTournTakeExpRewardCsReq => "CmdRogueTournTakeExpRewardCsReq",
            Self::CmdRogueTournReEnterRogueCocoonStageScRsp => {
                "CmdRogueTournReEnterRogueCocoonStageScRsp"
            }
            Self::CmdRogueTournResetPermanentTalentCsReq => {
                "CmdRogueTournResetPermanentTalentCsReq"
            }
            Self::CmdRogueTournEnableSeasonTalentScRsp => {
                "CmdRogueTournEnableSeasonTalentScRsp"
            }
            Self::CmdRogueTournAreaUpdateScNotify => "CmdRogueTournAreaUpdateScNotify",
            Self::CmdRogueTournLeaveRogueCocoonSceneScRsp => {
                "CmdRogueTournLeaveRogueCocoonSceneScRsp"
            }
            Self::CmdRogueTournQueryCsReq => "CmdRogueTournQueryCsReq",
            Self::CmdRogueTournEnterLayerScRsp => "CmdRogueTournEnterLayerScRsp",
            Self::CmdRogueTournEnterRoomCsReq => "CmdRogueTournEnterRoomCsReq",
            Self::CmdRogueTournEnterRoomScRsp => "CmdRogueTournEnterRoomScRsp",
            Self::CmdRogueTournLeaveCsReq => "CmdRogueTournLeaveCsReq",
            Self::CmdRogueTournGetPermanentTalentInfoScRsp => {
                "CmdRogueTournGetPermanentTalentInfoScRsp"
            }
            Self::CmdRogueTournEnableSeasonTalentCsReq => {
                "CmdRogueTournEnableSeasonTalentCsReq"
            }
            Self::CmdRogueTournStartScRsp => "CmdRogueTournStartScRsp",
            Self::CmdRogueTournEnablePermanentTalentCsReq => {
                "CmdRogueTournEnablePermanentTalentCsReq"
            }
            Self::CmdRogueTournGetCurRogueCocoonInfoCsReq => {
                "CmdRogueTournGetCurRogueCocoonInfoCsReq"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdRogueTournTypeNone" => Some(Self::None),
            "CmdRogueTournSettleScRsp" => Some(Self::CmdRogueTournSettleScRsp),
            "CmdRogueTournConfirmSettleCsReq" => {
                Some(Self::CmdRogueTournConfirmSettleCsReq)
            }
            "CmdRogueTournDeleteArchiveCsReq" => {
                Some(Self::CmdRogueTournDeleteArchiveCsReq)
            }
            "CmdRogueTournGetArchiveRepositoryCsReq" => {
                Some(Self::CmdRogueTournGetArchiveRepositoryCsReq)
            }
            "CmdRogueTournGetMiscRealTimeDataScRsp" => {
                Some(Self::CmdRogueTournGetMiscRealTimeDataScRsp)
            }
            "CmdRogueTournExpNotify" => Some(Self::CmdRogueTournExpNotify),
            "CmdRogueTournGetSeasonTalentInfoScRsp" => {
                Some(Self::CmdRogueTournGetSeasonTalentInfoScRsp)
            }
            "CmdRogueTournGetSeasonTalentInfoCsReq" => {
                Some(Self::CmdRogueTournGetSeasonTalentInfoCsReq)
            }
            "CmdRogueTournGetAllArchiveCsReq" => {
                Some(Self::CmdRogueTournGetAllArchiveCsReq)
            }
            "CmdRogueTournQueryScRsp" => Some(Self::CmdRogueTournQueryScRsp),
            "CmdRogueTournStartCsReq" => Some(Self::CmdRogueTournStartCsReq),
            "CmdRogueTournTitanUpdateTitanBlessProgressScNotify" => {
                Some(Self::CmdRogueTournTitanUpdateTitanBlessProgressScNotify)
            }
            "CmdRogueTournReviveAvatarCsReq" => {
                Some(Self::CmdRogueTournReviveAvatarCsReq)
            }
            "CmdRogueTournLeaveScRsp" => Some(Self::CmdRogueTournLeaveScRsp),
            "CmdRogueTournReEnterRogueCocoonStageCsReq" => {
                Some(Self::CmdRogueTournReEnterRogueCocoonStageCsReq)
            }
            "CmdRogueTournRenameArchiveScRsp" => {
                Some(Self::CmdRogueTournRenameArchiveScRsp)
            }
            "CmdRogueTournDifficultyCompNotify" => {
                Some(Self::CmdRogueTournDifficultyCompNotify)
            }
            "CmdRogueTournLevelInfoUpdateScNotify" => {
                Some(Self::CmdRogueTournLevelInfoUpdateScNotify)
            }
            "CmdRogueTournClearArchiveNameScNotify" => {
                Some(Self::CmdRogueTournClearArchiveNameScNotify)
            }
            "CmdRogueTournEnablePermanentTalentScRsp" => {
                Some(Self::CmdRogueTournEnablePermanentTalentScRsp)
            }
            "CmdRogueTournGetAllArchiveScRsp" => {
                Some(Self::CmdRogueTournGetAllArchiveScRsp)
            }
            "CmdRogueTournResetPermanentTalentScRsp" => {
                Some(Self::CmdRogueTournResetPermanentTalentScRsp)
            }
            "CmdRogueTournEnterScRsp" => Some(Self::CmdRogueTournEnterScRsp),
            "CmdRogueTournTakeExpRewardScRsp" => {
                Some(Self::CmdRogueTournTakeExpRewardScRsp)
            }
            "CmdRogueTournConfirmSettleScRsp" => {
                Some(Self::CmdRogueTournConfirmSettleScRsp)
            }
            "CmdRogueTournGetCurRogueCocoonInfoScRsp" => {
                Some(Self::CmdRogueTournGetCurRogueCocoonInfoScRsp)
            }
            "CmdRogueTournLeaveRogueCocoonSceneCsReq" => {
                Some(Self::CmdRogueTournLeaveRogueCocoonSceneCsReq)
            }
            "CmdRogueTournGetArchiveRepositoryScRsp" => {
                Some(Self::CmdRogueTournGetArchiveRepositoryScRsp)
            }
            "CmdRogueTournEnterRogueCocoonSceneCsReq" => {
                Some(Self::CmdRogueTournEnterRogueCocoonSceneCsReq)
            }
            "CmdRogueTournSettleCsReq" => Some(Self::CmdRogueTournSettleCsReq),
            "CmdRogueTournDeleteArchiveScRsp" => {
                Some(Self::CmdRogueTournDeleteArchiveScRsp)
            }
            "CmdRogueTournRenameArchiveCsReq" => {
                Some(Self::CmdRogueTournRenameArchiveCsReq)
            }
            "CmdRogueTournBattleFailSettleInfoScNotify" => {
                Some(Self::CmdRogueTournBattleFailSettleInfoScNotify)
            }
            "CmdRogueTournWeekChallengeUpdateScNotify" => {
                Some(Self::CmdRogueTournWeekChallengeUpdateScNotify)
            }
            "CmdRogueTournEnterCsReq" => Some(Self::CmdRogueTournEnterCsReq),
            "CmdRogueTournGetSettleInfoScRsp" => {
                Some(Self::CmdRogueTournGetSettleInfoScRsp)
            }
            "CmdRogueTournGetPermanentTalentInfoCsReq" => {
                Some(Self::CmdRogueTournGetPermanentTalentInfoCsReq)
            }
            "CmdRogueTournGetMiscRealTimeDataCsReq" => {
                Some(Self::CmdRogueTournGetMiscRealTimeDataCsReq)
            }
            "CmdRogueTournReviveAvatarScRsp" => {
                Some(Self::CmdRogueTournReviveAvatarScRsp)
            }
            "CmdRogueTournEnterRogueCocoonSceneScRsp" => {
                Some(Self::CmdRogueTournEnterRogueCocoonSceneScRsp)
            }
            "CmdRogueTournEnterLayerCsReq" => Some(Self::CmdRogueTournEnterLayerCsReq),
            "CmdRogueTournHandBookNotify" => Some(Self::CmdRogueTournHandBookNotify),
            "CmdRogueTournReviveCostUpdateScNotify" => {
                Some(Self::CmdRogueTournReviveCostUpdateScNotify)
            }
            "CmdRogueTournGetSettleInfoCsReq" => {
                Some(Self::CmdRogueTournGetSettleInfoCsReq)
            }
            "CmdRogueTournTakeExpRewardCsReq" => {
                Some(Self::CmdRogueTournTakeExpRewardCsReq)
            }
            "CmdRogueTournReEnterRogueCocoonStageScRsp" => {
                Some(Self::CmdRogueTournReEnterRogueCocoonStageScRsp)
            }
            "CmdRogueTournResetPermanentTalentCsReq" => {
                Some(Self::CmdRogueTournResetPermanentTalentCsReq)
            }
            "CmdRogueTournEnableSeasonTalentScRsp" => {
                Some(Self::CmdRogueTournEnableSeasonTalentScRsp)
            }
            "CmdRogueTournAreaUpdateScNotify" => {
                Some(Self::CmdRogueTournAreaUpdateScNotify)
            }
            "CmdRogueTournLeaveRogueCocoonSceneScRsp" => {
                Some(Self::CmdRogueTournLeaveRogueCocoonSceneScRsp)
            }
            "CmdRogueTournQueryCsReq" => Some(Self::CmdRogueTournQueryCsReq),
            "CmdRogueTournEnterLayerScRsp" => Some(Self::CmdRogueTournEnterLayerScRsp),
            "CmdRogueTournEnterRoomCsReq" => Some(Self::CmdRogueTournEnterRoomCsReq),
            "CmdRogueTournEnterRoomScRsp" => Some(Self::CmdRogueTournEnterRoomScRsp),
            "CmdRogueTournLeaveCsReq" => Some(Self::CmdRogueTournLeaveCsReq),
            "CmdRogueTournGetPermanentTalentInfoScRsp" => {
                Some(Self::CmdRogueTournGetPermanentTalentInfoScRsp)
            }
            "CmdRogueTournEnableSeasonTalentCsReq" => {
                Some(Self::CmdRogueTournEnableSeasonTalentCsReq)
            }
            "CmdRogueTournStartScRsp" => Some(Self::CmdRogueTournStartScRsp),
            "CmdRogueTournEnablePermanentTalentCsReq" => {
                Some(Self::CmdRogueTournEnablePermanentTalentCsReq)
            }
            "CmdRogueTournGetCurRogueCocoonInfoCsReq" => {
                Some(Self::CmdRogueTournGetCurRogueCocoonInfoCsReq)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Ogadimmljhn {
    RogueTournLevelStatusNone = 0,
    RogueTournLevelStatusProcessing = 1,
    RogueTournLevelStatusFinished = 2,
    RogueTournLevelStatusSettled = 3,
}
impl Ogadimmljhn {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueTournLevelStatusNone => "ROGUE_TOURN_LEVEL_STATUS_NONE",
            Self::RogueTournLevelStatusProcessing => {
                "ROGUE_TOURN_LEVEL_STATUS_PROCESSING"
            }
            Self::RogueTournLevelStatusFinished => "ROGUE_TOURN_LEVEL_STATUS_FINISHED",
            Self::RogueTournLevelStatusSettled => "ROGUE_TOURN_LEVEL_STATUS_SETTLED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_TOURN_LEVEL_STATUS_NONE" => Some(Self::RogueTournLevelStatusNone),
            "ROGUE_TOURN_LEVEL_STATUS_PROCESSING" => {
                Some(Self::RogueTournLevelStatusProcessing)
            }
            "ROGUE_TOURN_LEVEL_STATUS_FINISHED" => {
                Some(Self::RogueTournLevelStatusFinished)
            }
            "ROGUE_TOURN_LEVEL_STATUS_SETTLED" => {
                Some(Self::RogueTournLevelStatusSettled)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Odbnigdlncf {
    RogueTournLayerStatusNone = 0,
    RogueTournLayerStatusProcessing = 1,
    RogueTournLayerStatusFinish = 2,
}
impl Odbnigdlncf {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueTournLayerStatusNone => "ROGUE_TOURN_LAYER_STATUS_NONE",
            Self::RogueTournLayerStatusProcessing => {
                "ROGUE_TOURN_LAYER_STATUS_PROCESSING"
            }
            Self::RogueTournLayerStatusFinish => "ROGUE_TOURN_LAYER_STATUS_FINISH",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_TOURN_LAYER_STATUS_NONE" => Some(Self::RogueTournLayerStatusNone),
            "ROGUE_TOURN_LAYER_STATUS_PROCESSING" => {
                Some(Self::RogueTournLayerStatusProcessing)
            }
            "ROGUE_TOURN_LAYER_STATUS_FINISH" => Some(Self::RogueTournLayerStatusFinish),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Lmiknfdlffo {
    RogueTournRoomStatusNone = 0,
    RogueTournRoomStatusInited = 1,
    RogueTournRoomStatusProcessing = 2,
    RogueTournRoomStatusFinish = 3,
}
impl Lmiknfdlffo {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueTournRoomStatusNone => "ROGUE_TOURN_ROOM_STATUS_NONE",
            Self::RogueTournRoomStatusInited => "ROGUE_TOURN_ROOM_STATUS_INITED",
            Self::RogueTournRoomStatusProcessing => "ROGUE_TOURN_ROOM_STATUS_PROCESSING",
            Self::RogueTournRoomStatusFinish => "ROGUE_TOURN_ROOM_STATUS_FINISH",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_TOURN_ROOM_STATUS_NONE" => Some(Self::RogueTournRoomStatusNone),
            "ROGUE_TOURN_ROOM_STATUS_INITED" => Some(Self::RogueTournRoomStatusInited),
            "ROGUE_TOURN_ROOM_STATUS_PROCESSING" => {
                Some(Self::RogueTournRoomStatusProcessing)
            }
            "ROGUE_TOURN_ROOM_STATUS_FINISH" => Some(Self::RogueTournRoomStatusFinish),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Akkhkmecafl {
    RogueTournSettleReasonNone = 0,
    RogueTournSettleReasonWin = 1,
    RogueTournSettleReasonFail = 2,
    RogueTournSettleReasonInterrupt = 3,
}
impl Akkhkmecafl {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueTournSettleReasonNone => "ROGUE_TOURN_SETTLE_REASON_NONE",
            Self::RogueTournSettleReasonWin => "ROGUE_TOURN_SETTLE_REASON_WIN",
            Self::RogueTournSettleReasonFail => "ROGUE_TOURN_SETTLE_REASON_FAIL",
            Self::RogueTournSettleReasonInterrupt => {
                "ROGUE_TOURN_SETTLE_REASON_INTERRUPT"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_TOURN_SETTLE_REASON_NONE" => Some(Self::RogueTournSettleReasonNone),
            "ROGUE_TOURN_SETTLE_REASON_WIN" => Some(Self::RogueTournSettleReasonWin),
            "ROGUE_TOURN_SETTLE_REASON_FAIL" => Some(Self::RogueTournSettleReasonFail),
            "ROGUE_TOURN_SETTLE_REASON_INTERRUPT" => {
                Some(Self::RogueTournSettleReasonInterrupt)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Ollchpfkhaa {
    RogueTournHandbookNone = 0,
    RogueTournHandbookSimpleMiracle = 1,
    RogueTournHandbookHexMiracle = 2,
    RogueTournHandbookBuff = 3,
    RogueTournHandbookEvent = 4,
    RogueTournHandbookFormula = 5,
    RogueTournHandbookTitanBless = 6,
}
impl Ollchpfkhaa {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueTournHandbookNone => "ROGUE_TOURN_HANDBOOK_NONE",
            Self::RogueTournHandbookSimpleMiracle => {
                "ROGUE_TOURN_HANDBOOK_SIMPLE_MIRACLE"
            }
            Self::RogueTournHandbookHexMiracle => "ROGUE_TOURN_HANDBOOK_HEX_MIRACLE",
            Self::RogueTournHandbookBuff => "ROGUE_TOURN_HANDBOOK_BUFF",
            Self::RogueTournHandbookEvent => "ROGUE_TOURN_HANDBOOK_EVENT",
            Self::RogueTournHandbookFormula => "ROGUE_TOURN_HANDBOOK_FORMULA",
            Self::RogueTournHandbookTitanBless => "ROGUE_TOURN_HANDBOOK_TITAN_BLESS",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_TOURN_HANDBOOK_NONE" => Some(Self::RogueTournHandbookNone),
            "ROGUE_TOURN_HANDBOOK_SIMPLE_MIRACLE" => {
                Some(Self::RogueTournHandbookSimpleMiracle)
            }
            "ROGUE_TOURN_HANDBOOK_HEX_MIRACLE" => {
                Some(Self::RogueTournHandbookHexMiracle)
            }
            "ROGUE_TOURN_HANDBOOK_BUFF" => Some(Self::RogueTournHandbookBuff),
            "ROGUE_TOURN_HANDBOOK_EVENT" => Some(Self::RogueTournHandbookEvent),
            "ROGUE_TOURN_HANDBOOK_FORMULA" => Some(Self::RogueTournHandbookFormula),
            "ROGUE_TOURN_HANDBOOK_TITAN_BLESS" => {
                Some(Self::RogueTournHandbookTitanBless)
            }
            _ => None,
        }
    }
}
/// FHAAABCILAM
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdRollShopType {
    None = 0,
    CmdGetRollShopInfoScRsp = 6908,
    CmdTakeRollShopRewardScRsp = 6901,
    CmdTakeRollShopRewardCsReq = 6904,
    CmdDoGachaInRollShopCsReq = 6912,
    CmdDoGachaInRollShopScRsp = 6902,
    CmdGetRollShopInfoCsReq = 6917,
}
impl CmdRollShopType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdRollShopTypeNone",
            Self::CmdGetRollShopInfoScRsp => "CmdGetRollShopInfoScRsp",
            Self::CmdTakeRollShopRewardScRsp => "CmdTakeRollShopRewardScRsp",
            Self::CmdTakeRollShopRewardCsReq => "CmdTakeRollShopRewardCsReq",
            Self::CmdDoGachaInRollShopCsReq => "CmdDoGachaInRollShopCsReq",
            Self::CmdDoGachaInRollShopScRsp => "CmdDoGachaInRollShopScRsp",
            Self::CmdGetRollShopInfoCsReq => "CmdGetRollShopInfoCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdRollShopTypeNone" => Some(Self::None),
            "CmdGetRollShopInfoScRsp" => Some(Self::CmdGetRollShopInfoScRsp),
            "CmdTakeRollShopRewardScRsp" => Some(Self::CmdTakeRollShopRewardScRsp),
            "CmdTakeRollShopRewardCsReq" => Some(Self::CmdTakeRollShopRewardCsReq),
            "CmdDoGachaInRollShopCsReq" => Some(Self::CmdDoGachaInRollShopCsReq),
            "CmdDoGachaInRollShopScRsp" => Some(Self::CmdDoGachaInRollShopScRsp),
            "CmdGetRollShopInfoCsReq" => Some(Self::CmdGetRollShopInfoCsReq),
            _ => None,
        }
    }
}
/// MOIHHHKOJLG
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdSceneType {
    None = 0,
    CmdRefreshTriggerByClientScNotify = 1445,
    CmdSetCurInteractEntityScRsp = 1438,
    CmdReEnterLastElementStageCsReq = 1465,
    CmdSceneReviveAfterRebattleScRsp = 1448,
    CmdEnterSceneScRsp = 1484,
    CmdDeactivateFarmElementScRsp = 1467,
    CmdSceneEntityMoveCsReq = 1401,
    CmdReturnLastTownScRsp = 1491,
    CmdEnterSectionScRsp = 1420,
    CmdSceneEntityMoveScRsp = 1468,
    CmdSceneEnterStageCsReq = 1418,
    CmdSetGroupCustomSaveDataScRsp = 1407,
    CmdSceneReviveAfterRebattleCsReq = 1450,
    CmdUnlockTeleportNotify = 1409,
    CmdChangePropTimelineInfoScRsp = 1411,
    CmdInteractPropCsReq = 1458,
    CmdSceneCastSkillCostMpScRsp = 1447,
    CmdSpringRefreshScRsp = 1423,
    CmdActivateFarmElementScRsp = 1464,
    CmdUpdateFloorSavedValueNotify = 1402,
    CmdSavePointsInfoNotify = 1459,
    CmdUpdateGroupPropertyScRsp = 1425,
    CmdSetCurInteractEntityCsReq = 1481,
    CmdEnterSectionCsReq = 1469,
    CmdDeactivateFarmElementCsReq = 1478,
    CmdGameplayCounterCountDownScRsp = 1498,
    CmdEntityBindPropScRsp = 1403,
    CmdSceneUpdatePositionVersionNotify = 1414,
    CmdSyncServerSceneChangeNotify = 1451,
    CmdGameplayCounterUpdateScNotify = 1446,
    CmdSpringRefreshCsReq = 1496,
    CmdUpdateMechanismBarScNotify = 1426,
    CmdSetClientPausedCsReq = 1457,
    CmdActivateFarmElementCsReq = 1429,
    CmdSceneCastSkillCsReq = 1430,
    CmdSceneEntityTeleportScRsp = 1404,
    CmdGetCurSceneInfoScRsp = 1476,
    CmdInteractPropScRsp = 1424,
    CmdGroupStateChangeScNotify = 1435,
    CmdOpenChestScNotify = 1433,
    CmdEnterSceneByServerScNotify = 1410,
    CmdSceneEntityTeleportCsReq = 1452,
    CmdUpdateGroupPropertyCsReq = 1500,
    CmdChangePropTimelineInfoCsReq = 1428,
    CmdSetGroupCustomSaveDataCsReq = 1463,
    CmdReturnLastTownCsReq = 1417,
    CmdSceneGroupRefreshScNotify = 1466,
    CmdGetUnlockTeleportScRsp = 1472,
    CmdGetEnteredSceneCsReq = 1499,
    CmdDeleteSummonUnitScRsp = 1421,
    CmdDeleteSummonUnitCsReq = 1487,
    CmdSyncEntityBuffChangeListScNotify = 1449,
    CmdRefreshTriggerByClientCsReq = 1443,
    CmdStartCocoonStageScRsp = 1473,
    CmdEntityBindPropCsReq = 1440,
    CmdSceneCastSkillMpUpdateScNotify = 1480,
    CmdStartCocoonStageCsReq = 1441,
    CmdSceneEnterStageScRsp = 1495,
    CmdLastSpringRefreshTimeNotify = 1412,
    CmdGetEnteredSceneScRsp = 1453,
    CmdGetSceneMapInfoScRsp = 1486,
    CmdSceneCastSkillCostMpCsReq = 1422,
    CmdSceneCastSkillScRsp = 1456,
    CmdEnterSceneCsReq = 1479,
    CmdGetCurSceneInfoCsReq = 1497,
    CmdRecoverAllLineupCsReq = 1419,
    CmdScenePlaneEventScNotify = 1434,
    CmdSceneEntityMoveScNotify = 1405,
    CmdGroupStateChangeCsReq = 1483,
    CmdGameplayCounterRecoverCsReq = 1442,
    CmdGameplayCounterCountDownCsReq = 1431,
    CmdRecoverAllLineupScRsp = 1482,
    CmdReEnterLastElementStageScRsp = 1474,
    CmdGetSceneMapInfoCsReq = 1427,
    CmdSetClientPausedScRsp = 1413,
    CmdGroupStateChangeScRsp = 1432,
    CmdRefreshTriggerByClientScRsp = 1494,
    CmdGameplayCounterRecoverScRsp = 1462,
    CmdEnteredSceneChangeScNotify = 1416,
    CmdUnlockedAreaMapScNotify = 1437,
    CmdGetUnlockTeleportCsReq = 1493,
}
impl CmdSceneType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdSceneTypeNone",
            Self::CmdRefreshTriggerByClientScNotify => {
                "CmdRefreshTriggerByClientScNotify"
            }
            Self::CmdSetCurInteractEntityScRsp => "CmdSetCurInteractEntityScRsp",
            Self::CmdReEnterLastElementStageCsReq => "CmdReEnterLastElementStageCsReq",
            Self::CmdSceneReviveAfterRebattleScRsp => "CmdSceneReviveAfterRebattleScRsp",
            Self::CmdEnterSceneScRsp => "CmdEnterSceneScRsp",
            Self::CmdDeactivateFarmElementScRsp => "CmdDeactivateFarmElementScRsp",
            Self::CmdSceneEntityMoveCsReq => "CmdSceneEntityMoveCsReq",
            Self::CmdReturnLastTownScRsp => "CmdReturnLastTownScRsp",
            Self::CmdEnterSectionScRsp => "CmdEnterSectionScRsp",
            Self::CmdSceneEntityMoveScRsp => "CmdSceneEntityMoveScRsp",
            Self::CmdSceneEnterStageCsReq => "CmdSceneEnterStageCsReq",
            Self::CmdSetGroupCustomSaveDataScRsp => "CmdSetGroupCustomSaveDataScRsp",
            Self::CmdSceneReviveAfterRebattleCsReq => "CmdSceneReviveAfterRebattleCsReq",
            Self::CmdUnlockTeleportNotify => "CmdUnlockTeleportNotify",
            Self::CmdChangePropTimelineInfoScRsp => "CmdChangePropTimelineInfoScRsp",
            Self::CmdInteractPropCsReq => "CmdInteractPropCsReq",
            Self::CmdSceneCastSkillCostMpScRsp => "CmdSceneCastSkillCostMpScRsp",
            Self::CmdSpringRefreshScRsp => "CmdSpringRefreshScRsp",
            Self::CmdActivateFarmElementScRsp => "CmdActivateFarmElementScRsp",
            Self::CmdUpdateFloorSavedValueNotify => "CmdUpdateFloorSavedValueNotify",
            Self::CmdSavePointsInfoNotify => "CmdSavePointsInfoNotify",
            Self::CmdUpdateGroupPropertyScRsp => "CmdUpdateGroupPropertyScRsp",
            Self::CmdSetCurInteractEntityCsReq => "CmdSetCurInteractEntityCsReq",
            Self::CmdEnterSectionCsReq => "CmdEnterSectionCsReq",
            Self::CmdDeactivateFarmElementCsReq => "CmdDeactivateFarmElementCsReq",
            Self::CmdGameplayCounterCountDownScRsp => "CmdGameplayCounterCountDownScRsp",
            Self::CmdEntityBindPropScRsp => "CmdEntityBindPropScRsp",
            Self::CmdSceneUpdatePositionVersionNotify => {
                "CmdSceneUpdatePositionVersionNotify"
            }
            Self::CmdSyncServerSceneChangeNotify => "CmdSyncServerSceneChangeNotify",
            Self::CmdGameplayCounterUpdateScNotify => "CmdGameplayCounterUpdateScNotify",
            Self::CmdSpringRefreshCsReq => "CmdSpringRefreshCsReq",
            Self::CmdUpdateMechanismBarScNotify => "CmdUpdateMechanismBarScNotify",
            Self::CmdSetClientPausedCsReq => "CmdSetClientPausedCsReq",
            Self::CmdActivateFarmElementCsReq => "CmdActivateFarmElementCsReq",
            Self::CmdSceneCastSkillCsReq => "CmdSceneCastSkillCsReq",
            Self::CmdSceneEntityTeleportScRsp => "CmdSceneEntityTeleportScRsp",
            Self::CmdGetCurSceneInfoScRsp => "CmdGetCurSceneInfoScRsp",
            Self::CmdInteractPropScRsp => "CmdInteractPropScRsp",
            Self::CmdGroupStateChangeScNotify => "CmdGroupStateChangeScNotify",
            Self::CmdOpenChestScNotify => "CmdOpenChestScNotify",
            Self::CmdEnterSceneByServerScNotify => "CmdEnterSceneByServerScNotify",
            Self::CmdSceneEntityTeleportCsReq => "CmdSceneEntityTeleportCsReq",
            Self::CmdUpdateGroupPropertyCsReq => "CmdUpdateGroupPropertyCsReq",
            Self::CmdChangePropTimelineInfoCsReq => "CmdChangePropTimelineInfoCsReq",
            Self::CmdSetGroupCustomSaveDataCsReq => "CmdSetGroupCustomSaveDataCsReq",
            Self::CmdReturnLastTownCsReq => "CmdReturnLastTownCsReq",
            Self::CmdSceneGroupRefreshScNotify => "CmdSceneGroupRefreshScNotify",
            Self::CmdGetUnlockTeleportScRsp => "CmdGetUnlockTeleportScRsp",
            Self::CmdGetEnteredSceneCsReq => "CmdGetEnteredSceneCsReq",
            Self::CmdDeleteSummonUnitScRsp => "CmdDeleteSummonUnitScRsp",
            Self::CmdDeleteSummonUnitCsReq => "CmdDeleteSummonUnitCsReq",
            Self::CmdSyncEntityBuffChangeListScNotify => {
                "CmdSyncEntityBuffChangeListScNotify"
            }
            Self::CmdRefreshTriggerByClientCsReq => "CmdRefreshTriggerByClientCsReq",
            Self::CmdStartCocoonStageScRsp => "CmdStartCocoonStageScRsp",
            Self::CmdEntityBindPropCsReq => "CmdEntityBindPropCsReq",
            Self::CmdSceneCastSkillMpUpdateScNotify => {
                "CmdSceneCastSkillMpUpdateScNotify"
            }
            Self::CmdStartCocoonStageCsReq => "CmdStartCocoonStageCsReq",
            Self::CmdSceneEnterStageScRsp => "CmdSceneEnterStageScRsp",
            Self::CmdLastSpringRefreshTimeNotify => "CmdLastSpringRefreshTimeNotify",
            Self::CmdGetEnteredSceneScRsp => "CmdGetEnteredSceneScRsp",
            Self::CmdGetSceneMapInfoScRsp => "CmdGetSceneMapInfoScRsp",
            Self::CmdSceneCastSkillCostMpCsReq => "CmdSceneCastSkillCostMpCsReq",
            Self::CmdSceneCastSkillScRsp => "CmdSceneCastSkillScRsp",
            Self::CmdEnterSceneCsReq => "CmdEnterSceneCsReq",
            Self::CmdGetCurSceneInfoCsReq => "CmdGetCurSceneInfoCsReq",
            Self::CmdRecoverAllLineupCsReq => "CmdRecoverAllLineupCsReq",
            Self::CmdScenePlaneEventScNotify => "CmdScenePlaneEventScNotify",
            Self::CmdSceneEntityMoveScNotify => "CmdSceneEntityMoveScNotify",
            Self::CmdGroupStateChangeCsReq => "CmdGroupStateChangeCsReq",
            Self::CmdGameplayCounterRecoverCsReq => "CmdGameplayCounterRecoverCsReq",
            Self::CmdGameplayCounterCountDownCsReq => "CmdGameplayCounterCountDownCsReq",
            Self::CmdRecoverAllLineupScRsp => "CmdRecoverAllLineupScRsp",
            Self::CmdReEnterLastElementStageScRsp => "CmdReEnterLastElementStageScRsp",
            Self::CmdGetSceneMapInfoCsReq => "CmdGetSceneMapInfoCsReq",
            Self::CmdSetClientPausedScRsp => "CmdSetClientPausedScRsp",
            Self::CmdGroupStateChangeScRsp => "CmdGroupStateChangeScRsp",
            Self::CmdRefreshTriggerByClientScRsp => "CmdRefreshTriggerByClientScRsp",
            Self::CmdGameplayCounterRecoverScRsp => "CmdGameplayCounterRecoverScRsp",
            Self::CmdEnteredSceneChangeScNotify => "CmdEnteredSceneChangeScNotify",
            Self::CmdUnlockedAreaMapScNotify => "CmdUnlockedAreaMapScNotify",
            Self::CmdGetUnlockTeleportCsReq => "CmdGetUnlockTeleportCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdSceneTypeNone" => Some(Self::None),
            "CmdRefreshTriggerByClientScNotify" => {
                Some(Self::CmdRefreshTriggerByClientScNotify)
            }
            "CmdSetCurInteractEntityScRsp" => Some(Self::CmdSetCurInteractEntityScRsp),
            "CmdReEnterLastElementStageCsReq" => {
                Some(Self::CmdReEnterLastElementStageCsReq)
            }
            "CmdSceneReviveAfterRebattleScRsp" => {
                Some(Self::CmdSceneReviveAfterRebattleScRsp)
            }
            "CmdEnterSceneScRsp" => Some(Self::CmdEnterSceneScRsp),
            "CmdDeactivateFarmElementScRsp" => Some(Self::CmdDeactivateFarmElementScRsp),
            "CmdSceneEntityMoveCsReq" => Some(Self::CmdSceneEntityMoveCsReq),
            "CmdReturnLastTownScRsp" => Some(Self::CmdReturnLastTownScRsp),
            "CmdEnterSectionScRsp" => Some(Self::CmdEnterSectionScRsp),
            "CmdSceneEntityMoveScRsp" => Some(Self::CmdSceneEntityMoveScRsp),
            "CmdSceneEnterStageCsReq" => Some(Self::CmdSceneEnterStageCsReq),
            "CmdSetGroupCustomSaveDataScRsp" => {
                Some(Self::CmdSetGroupCustomSaveDataScRsp)
            }
            "CmdSceneReviveAfterRebattleCsReq" => {
                Some(Self::CmdSceneReviveAfterRebattleCsReq)
            }
            "CmdUnlockTeleportNotify" => Some(Self::CmdUnlockTeleportNotify),
            "CmdChangePropTimelineInfoScRsp" => {
                Some(Self::CmdChangePropTimelineInfoScRsp)
            }
            "CmdInteractPropCsReq" => Some(Self::CmdInteractPropCsReq),
            "CmdSceneCastSkillCostMpScRsp" => Some(Self::CmdSceneCastSkillCostMpScRsp),
            "CmdSpringRefreshScRsp" => Some(Self::CmdSpringRefreshScRsp),
            "CmdActivateFarmElementScRsp" => Some(Self::CmdActivateFarmElementScRsp),
            "CmdUpdateFloorSavedValueNotify" => {
                Some(Self::CmdUpdateFloorSavedValueNotify)
            }
            "CmdSavePointsInfoNotify" => Some(Self::CmdSavePointsInfoNotify),
            "CmdUpdateGroupPropertyScRsp" => Some(Self::CmdUpdateGroupPropertyScRsp),
            "CmdSetCurInteractEntityCsReq" => Some(Self::CmdSetCurInteractEntityCsReq),
            "CmdEnterSectionCsReq" => Some(Self::CmdEnterSectionCsReq),
            "CmdDeactivateFarmElementCsReq" => Some(Self::CmdDeactivateFarmElementCsReq),
            "CmdGameplayCounterCountDownScRsp" => {
                Some(Self::CmdGameplayCounterCountDownScRsp)
            }
            "CmdEntityBindPropScRsp" => Some(Self::CmdEntityBindPropScRsp),
            "CmdSceneUpdatePositionVersionNotify" => {
                Some(Self::CmdSceneUpdatePositionVersionNotify)
            }
            "CmdSyncServerSceneChangeNotify" => {
                Some(Self::CmdSyncServerSceneChangeNotify)
            }
            "CmdGameplayCounterUpdateScNotify" => {
                Some(Self::CmdGameplayCounterUpdateScNotify)
            }
            "CmdSpringRefreshCsReq" => Some(Self::CmdSpringRefreshCsReq),
            "CmdUpdateMechanismBarScNotify" => Some(Self::CmdUpdateMechanismBarScNotify),
            "CmdSetClientPausedCsReq" => Some(Self::CmdSetClientPausedCsReq),
            "CmdActivateFarmElementCsReq" => Some(Self::CmdActivateFarmElementCsReq),
            "CmdSceneCastSkillCsReq" => Some(Self::CmdSceneCastSkillCsReq),
            "CmdSceneEntityTeleportScRsp" => Some(Self::CmdSceneEntityTeleportScRsp),
            "CmdGetCurSceneInfoScRsp" => Some(Self::CmdGetCurSceneInfoScRsp),
            "CmdInteractPropScRsp" => Some(Self::CmdInteractPropScRsp),
            "CmdGroupStateChangeScNotify" => Some(Self::CmdGroupStateChangeScNotify),
            "CmdOpenChestScNotify" => Some(Self::CmdOpenChestScNotify),
            "CmdEnterSceneByServerScNotify" => Some(Self::CmdEnterSceneByServerScNotify),
            "CmdSceneEntityTeleportCsReq" => Some(Self::CmdSceneEntityTeleportCsReq),
            "CmdUpdateGroupPropertyCsReq" => Some(Self::CmdUpdateGroupPropertyCsReq),
            "CmdChangePropTimelineInfoCsReq" => {
                Some(Self::CmdChangePropTimelineInfoCsReq)
            }
            "CmdSetGroupCustomSaveDataCsReq" => {
                Some(Self::CmdSetGroupCustomSaveDataCsReq)
            }
            "CmdReturnLastTownCsReq" => Some(Self::CmdReturnLastTownCsReq),
            "CmdSceneGroupRefreshScNotify" => Some(Self::CmdSceneGroupRefreshScNotify),
            "CmdGetUnlockTeleportScRsp" => Some(Self::CmdGetUnlockTeleportScRsp),
            "CmdGetEnteredSceneCsReq" => Some(Self::CmdGetEnteredSceneCsReq),
            "CmdDeleteSummonUnitScRsp" => Some(Self::CmdDeleteSummonUnitScRsp),
            "CmdDeleteSummonUnitCsReq" => Some(Self::CmdDeleteSummonUnitCsReq),
            "CmdSyncEntityBuffChangeListScNotify" => {
                Some(Self::CmdSyncEntityBuffChangeListScNotify)
            }
            "CmdRefreshTriggerByClientCsReq" => {
                Some(Self::CmdRefreshTriggerByClientCsReq)
            }
            "CmdStartCocoonStageScRsp" => Some(Self::CmdStartCocoonStageScRsp),
            "CmdEntityBindPropCsReq" => Some(Self::CmdEntityBindPropCsReq),
            "CmdSceneCastSkillMpUpdateScNotify" => {
                Some(Self::CmdSceneCastSkillMpUpdateScNotify)
            }
            "CmdStartCocoonStageCsReq" => Some(Self::CmdStartCocoonStageCsReq),
            "CmdSceneEnterStageScRsp" => Some(Self::CmdSceneEnterStageScRsp),
            "CmdLastSpringRefreshTimeNotify" => {
                Some(Self::CmdLastSpringRefreshTimeNotify)
            }
            "CmdGetEnteredSceneScRsp" => Some(Self::CmdGetEnteredSceneScRsp),
            "CmdGetSceneMapInfoScRsp" => Some(Self::CmdGetSceneMapInfoScRsp),
            "CmdSceneCastSkillCostMpCsReq" => Some(Self::CmdSceneCastSkillCostMpCsReq),
            "CmdSceneCastSkillScRsp" => Some(Self::CmdSceneCastSkillScRsp),
            "CmdEnterSceneCsReq" => Some(Self::CmdEnterSceneCsReq),
            "CmdGetCurSceneInfoCsReq" => Some(Self::CmdGetCurSceneInfoCsReq),
            "CmdRecoverAllLineupCsReq" => Some(Self::CmdRecoverAllLineupCsReq),
            "CmdScenePlaneEventScNotify" => Some(Self::CmdScenePlaneEventScNotify),
            "CmdSceneEntityMoveScNotify" => Some(Self::CmdSceneEntityMoveScNotify),
            "CmdGroupStateChangeCsReq" => Some(Self::CmdGroupStateChangeCsReq),
            "CmdGameplayCounterRecoverCsReq" => {
                Some(Self::CmdGameplayCounterRecoverCsReq)
            }
            "CmdGameplayCounterCountDownCsReq" => {
                Some(Self::CmdGameplayCounterCountDownCsReq)
            }
            "CmdRecoverAllLineupScRsp" => Some(Self::CmdRecoverAllLineupScRsp),
            "CmdReEnterLastElementStageScRsp" => {
                Some(Self::CmdReEnterLastElementStageScRsp)
            }
            "CmdGetSceneMapInfoCsReq" => Some(Self::CmdGetSceneMapInfoCsReq),
            "CmdSetClientPausedScRsp" => Some(Self::CmdSetClientPausedScRsp),
            "CmdGroupStateChangeScRsp" => Some(Self::CmdGroupStateChangeScRsp),
            "CmdRefreshTriggerByClientScRsp" => {
                Some(Self::CmdRefreshTriggerByClientScRsp)
            }
            "CmdGameplayCounterRecoverScRsp" => {
                Some(Self::CmdGameplayCounterRecoverScRsp)
            }
            "CmdEnteredSceneChangeScNotify" => Some(Self::CmdEnteredSceneChangeScNotify),
            "CmdUnlockedAreaMapScNotify" => Some(Self::CmdUnlockedAreaMapScNotify),
            "CmdGetUnlockTeleportCsReq" => Some(Self::CmdGetUnlockTeleportCsReq),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum SkillExtraTag {
    SceneCastSkillNone = 0,
    SceneCastSkillProjectileHit = 1,
    SceneCastSkillProjectileLifetimeFinish = 2,
}
impl SkillExtraTag {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::SceneCastSkillNone => "SCENE_CAST_SKILL_NONE",
            Self::SceneCastSkillProjectileHit => "SCENE_CAST_SKILL_PROJECTILE_HIT",
            Self::SceneCastSkillProjectileLifetimeFinish => {
                "SCENE_CAST_SKILL_PROJECTILE_LIFETIME_FINISH"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SCENE_CAST_SKILL_NONE" => Some(Self::SceneCastSkillNone),
            "SCENE_CAST_SKILL_PROJECTILE_HIT" => Some(Self::SceneCastSkillProjectileHit),
            "SCENE_CAST_SKILL_PROJECTILE_LIFETIME_FINISH" => {
                Some(Self::SceneCastSkillProjectileLifetimeFinish)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum MonsterBattleType {
    None = 0,
    TriggerBattle = 1,
    DirectDieSimulateBattle = 2,
    DirectDieSkipBattle = 3,
    NoBattle = 4,
}
impl MonsterBattleType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "MONSTER_BATTLE_TYPE_NONE",
            Self::TriggerBattle => "MONSTER_BATTLE_TYPE_TRIGGER_BATTLE",
            Self::DirectDieSimulateBattle => {
                "MONSTER_BATTLE_TYPE_DIRECT_DIE_SIMULATE_BATTLE"
            }
            Self::DirectDieSkipBattle => "MONSTER_BATTLE_TYPE_DIRECT_DIE_SKIP_BATTLE",
            Self::NoBattle => "MONSTER_BATTLE_TYPE_NO_BATTLE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MONSTER_BATTLE_TYPE_NONE" => Some(Self::None),
            "MONSTER_BATTLE_TYPE_TRIGGER_BATTLE" => Some(Self::TriggerBattle),
            "MONSTER_BATTLE_TYPE_DIRECT_DIE_SIMULATE_BATTLE" => {
                Some(Self::DirectDieSimulateBattle)
            }
            "MONSTER_BATTLE_TYPE_DIRECT_DIE_SKIP_BATTLE" => {
                Some(Self::DirectDieSkipBattle)
            }
            "MONSTER_BATTLE_TYPE_NO_BATTLE" => Some(Self::NoBattle),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum SceneEntityBuffChangeType {
    Default = 0,
    AddMazebuff = 1,
    AddAdvModifier = 2,
}
impl SceneEntityBuffChangeType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Default => "SCENE_ENTITY_BUFF_CHANGE_TYPE_DEFAULT",
            Self::AddMazebuff => "SCENE_ENTITY_BUFF_CHANGE_TYPE_ADD_MAZEBUFF",
            Self::AddAdvModifier => "SCENE_ENTITY_BUFF_CHANGE_TYPE_ADD_ADV_MODIFIER",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SCENE_ENTITY_BUFF_CHANGE_TYPE_DEFAULT" => Some(Self::Default),
            "SCENE_ENTITY_BUFF_CHANGE_TYPE_ADD_MAZEBUFF" => Some(Self::AddMazebuff),
            "SCENE_ENTITY_BUFF_CHANGE_TYPE_ADD_ADV_MODIFIER" => {
                Some(Self::AddAdvModifier)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum EnterSceneReason {
    None = 0,
    ChallengeTimeout = 1,
    RogueTimeout = 2,
    ChangeStoryline = 3,
    DimensionMerge = 4,
}
impl EnterSceneReason {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "ENTER_SCENE_REASON_NONE",
            Self::ChallengeTimeout => "ENTER_SCENE_REASON_CHALLENGE_TIMEOUT",
            Self::RogueTimeout => "ENTER_SCENE_REASON_ROGUE_TIMEOUT",
            Self::ChangeStoryline => "ENTER_SCENE_REASON_CHANGE_STORYLINE",
            Self::DimensionMerge => "ENTER_SCENE_REASON_DIMENSION_MERGE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ENTER_SCENE_REASON_NONE" => Some(Self::None),
            "ENTER_SCENE_REASON_CHALLENGE_TIMEOUT" => Some(Self::ChallengeTimeout),
            "ENTER_SCENE_REASON_ROGUE_TIMEOUT" => Some(Self::RogueTimeout),
            "ENTER_SCENE_REASON_CHANGE_STORYLINE" => Some(Self::ChangeStoryline),
            "ENTER_SCENE_REASON_DIMENSION_MERGE" => Some(Self::DimensionMerge),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ChestType {
    MapInfoChestTypeNone = 0,
    MapInfoChestTypeNormal = 101,
    MapInfoChestTypeChallenge = 102,
    MapInfoChestTypePuzzle = 104,
}
impl ChestType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::MapInfoChestTypeNone => "MAP_INFO_CHEST_TYPE_NONE",
            Self::MapInfoChestTypeNormal => "MAP_INFO_CHEST_TYPE_NORMAL",
            Self::MapInfoChestTypeChallenge => "MAP_INFO_CHEST_TYPE_CHALLENGE",
            Self::MapInfoChestTypePuzzle => "MAP_INFO_CHEST_TYPE_PUZZLE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MAP_INFO_CHEST_TYPE_NONE" => Some(Self::MapInfoChestTypeNone),
            "MAP_INFO_CHEST_TYPE_NORMAL" => Some(Self::MapInfoChestTypeNormal),
            "MAP_INFO_CHEST_TYPE_CHALLENGE" => Some(Self::MapInfoChestTypeChallenge),
            "MAP_INFO_CHEST_TYPE_PUZZLE" => Some(Self::MapInfoChestTypePuzzle),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum GameplayCounterUpdateReason {
    None = 0,
    Activate = 1,
    Deactivate = 2,
    Change = 3,
}
impl GameplayCounterUpdateReason {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "GAMEPLAY_COUNTER_UPDATE_REASON_NONE",
            Self::Activate => "GAMEPLAY_COUNTER_UPDATE_REASON_ACTIVATE",
            Self::Deactivate => "GAMEPLAY_COUNTER_UPDATE_REASON_DEACTIVATE",
            Self::Change => "GAMEPLAY_COUNTER_UPDATE_REASON_CHANGE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "GAMEPLAY_COUNTER_UPDATE_REASON_NONE" => Some(Self::None),
            "GAMEPLAY_COUNTER_UPDATE_REASON_ACTIVATE" => Some(Self::Activate),
            "GAMEPLAY_COUNTER_UPDATE_REASON_DEACTIVATE" => Some(Self::Deactivate),
            "GAMEPLAY_COUNTER_UPDATE_REASON_CHANGE" => Some(Self::Change),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum SceneGroupRefreshType {
    None = 0,
    Loaded = 1,
    Unload = 2,
}
impl SceneGroupRefreshType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "SCENE_GROUP_REFRESH_TYPE_NONE",
            Self::Loaded => "SCENE_GROUP_REFRESH_TYPE_LOADED",
            Self::Unload => "SCENE_GROUP_REFRESH_TYPE_UNLOAD",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SCENE_GROUP_REFRESH_TYPE_NONE" => Some(Self::None),
            "SCENE_GROUP_REFRESH_TYPE_LOADED" => Some(Self::Loaded),
            "SCENE_GROUP_REFRESH_TYPE_UNLOAD" => Some(Self::Unload),
            _ => None,
        }
    }
}
/// JKNIDMLKEON
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdServerPrefsType {
    None = 0,
    CmdUpdateServerPrefsDataScRsp = 6156,
    CmdGetAllServerPrefsDataCsReq = 6101,
    CmdGetAllServerPrefsDataScRsp = 6168,
    CmdUpdateServerPrefsDataCsReq = 6130,
    CmdGetServerPrefsDataScRsp = 6124,
    CmdGetServerPrefsDataCsReq = 6158,
}
impl CmdServerPrefsType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdServerPrefsTypeNone",
            Self::CmdUpdateServerPrefsDataScRsp => "CmdUpdateServerPrefsDataScRsp",
            Self::CmdGetAllServerPrefsDataCsReq => "CmdGetAllServerPrefsDataCsReq",
            Self::CmdGetAllServerPrefsDataScRsp => "CmdGetAllServerPrefsDataScRsp",
            Self::CmdUpdateServerPrefsDataCsReq => "CmdUpdateServerPrefsDataCsReq",
            Self::CmdGetServerPrefsDataScRsp => "CmdGetServerPrefsDataScRsp",
            Self::CmdGetServerPrefsDataCsReq => "CmdGetServerPrefsDataCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdServerPrefsTypeNone" => Some(Self::None),
            "CmdUpdateServerPrefsDataScRsp" => Some(Self::CmdUpdateServerPrefsDataScRsp),
            "CmdGetAllServerPrefsDataCsReq" => Some(Self::CmdGetAllServerPrefsDataCsReq),
            "CmdGetAllServerPrefsDataScRsp" => Some(Self::CmdGetAllServerPrefsDataScRsp),
            "CmdUpdateServerPrefsDataCsReq" => Some(Self::CmdUpdateServerPrefsDataCsReq),
            "CmdGetServerPrefsDataScRsp" => Some(Self::CmdGetServerPrefsDataScRsp),
            "CmdGetServerPrefsDataCsReq" => Some(Self::CmdGetServerPrefsDataCsReq),
            _ => None,
        }
    }
}
/// ANDPHHBFPNA
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdShopType {
    None = 0,
    CmdBuyGoodsScRsp = 1524,
    CmdCityShopInfoScNotify = 1597,
    CmdBuyGoodsCsReq = 1558,
    CmdGetShopListCsReq = 1501,
    CmdTakeCityShopRewardCsReq = 1530,
    CmdGetShopListScRsp = 1568,
    CmdTakeCityShopRewardScRsp = 1556,
}
impl CmdShopType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdShopTypeNone",
            Self::CmdBuyGoodsScRsp => "CmdBuyGoodsScRsp",
            Self::CmdCityShopInfoScNotify => "CmdCityShopInfoScNotify",
            Self::CmdBuyGoodsCsReq => "CmdBuyGoodsCsReq",
            Self::CmdGetShopListCsReq => "CmdGetShopListCsReq",
            Self::CmdTakeCityShopRewardCsReq => "CmdTakeCityShopRewardCsReq",
            Self::CmdGetShopListScRsp => "CmdGetShopListScRsp",
            Self::CmdTakeCityShopRewardScRsp => "CmdTakeCityShopRewardScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdShopTypeNone" => Some(Self::None),
            "CmdBuyGoodsScRsp" => Some(Self::CmdBuyGoodsScRsp),
            "CmdCityShopInfoScNotify" => Some(Self::CmdCityShopInfoScNotify),
            "CmdBuyGoodsCsReq" => Some(Self::CmdBuyGoodsCsReq),
            "CmdGetShopListCsReq" => Some(Self::CmdGetShopListCsReq),
            "CmdTakeCityShopRewardCsReq" => Some(Self::CmdTakeCityShopRewardCsReq),
            "CmdGetShopListScRsp" => Some(Self::CmdGetShopListScRsp),
            "CmdTakeCityShopRewardScRsp" => Some(Self::CmdTakeCityShopRewardScRsp),
            _ => None,
        }
    }
}
/// CFPFPILADFI
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdSpaceZooType {
    None = 0,
    CmdSpaceZooExchangeItemCsReq = 6714,
    CmdSpaceZooMutateCsReq = 6730,
    CmdSpaceZooDataCsReq = 6701,
    CmdSpaceZooCatUpdateNotify = 6705,
    CmdSpaceZooOpCatteryScRsp = 6776,
    CmdSpaceZooTakeCsReq = 6722,
    CmdSpaceZooMutateScRsp = 6756,
    CmdSpaceZooDeleteCatCsReq = 6728,
    CmdSpaceZooOpCatteryCsReq = 6797,
    CmdSpaceZooTakeScRsp = 6747,
    CmdSpaceZooBornCsReq = 6758,
    CmdSpaceZooBornScRsp = 6724,
    CmdSpaceZooExchangeItemScRsp = 6749,
    CmdSpaceZooDeleteCatScRsp = 6711,
    CmdSpaceZooDataScRsp = 6768,
}
impl CmdSpaceZooType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdSpaceZooTypeNone",
            Self::CmdSpaceZooExchangeItemCsReq => "CmdSpaceZooExchangeItemCsReq",
            Self::CmdSpaceZooMutateCsReq => "CmdSpaceZooMutateCsReq",
            Self::CmdSpaceZooDataCsReq => "CmdSpaceZooDataCsReq",
            Self::CmdSpaceZooCatUpdateNotify => "CmdSpaceZooCatUpdateNotify",
            Self::CmdSpaceZooOpCatteryScRsp => "CmdSpaceZooOpCatteryScRsp",
            Self::CmdSpaceZooTakeCsReq => "CmdSpaceZooTakeCsReq",
            Self::CmdSpaceZooMutateScRsp => "CmdSpaceZooMutateScRsp",
            Self::CmdSpaceZooDeleteCatCsReq => "CmdSpaceZooDeleteCatCsReq",
            Self::CmdSpaceZooOpCatteryCsReq => "CmdSpaceZooOpCatteryCsReq",
            Self::CmdSpaceZooTakeScRsp => "CmdSpaceZooTakeScRsp",
            Self::CmdSpaceZooBornCsReq => "CmdSpaceZooBornCsReq",
            Self::CmdSpaceZooBornScRsp => "CmdSpaceZooBornScRsp",
            Self::CmdSpaceZooExchangeItemScRsp => "CmdSpaceZooExchangeItemScRsp",
            Self::CmdSpaceZooDeleteCatScRsp => "CmdSpaceZooDeleteCatScRsp",
            Self::CmdSpaceZooDataScRsp => "CmdSpaceZooDataScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdSpaceZooTypeNone" => Some(Self::None),
            "CmdSpaceZooExchangeItemCsReq" => Some(Self::CmdSpaceZooExchangeItemCsReq),
            "CmdSpaceZooMutateCsReq" => Some(Self::CmdSpaceZooMutateCsReq),
            "CmdSpaceZooDataCsReq" => Some(Self::CmdSpaceZooDataCsReq),
            "CmdSpaceZooCatUpdateNotify" => Some(Self::CmdSpaceZooCatUpdateNotify),
            "CmdSpaceZooOpCatteryScRsp" => Some(Self::CmdSpaceZooOpCatteryScRsp),
            "CmdSpaceZooTakeCsReq" => Some(Self::CmdSpaceZooTakeCsReq),
            "CmdSpaceZooMutateScRsp" => Some(Self::CmdSpaceZooMutateScRsp),
            "CmdSpaceZooDeleteCatCsReq" => Some(Self::CmdSpaceZooDeleteCatCsReq),
            "CmdSpaceZooOpCatteryCsReq" => Some(Self::CmdSpaceZooOpCatteryCsReq),
            "CmdSpaceZooTakeScRsp" => Some(Self::CmdSpaceZooTakeScRsp),
            "CmdSpaceZooBornCsReq" => Some(Self::CmdSpaceZooBornCsReq),
            "CmdSpaceZooBornScRsp" => Some(Self::CmdSpaceZooBornScRsp),
            "CmdSpaceZooExchangeItemScRsp" => Some(Self::CmdSpaceZooExchangeItemScRsp),
            "CmdSpaceZooDeleteCatScRsp" => Some(Self::CmdSpaceZooDeleteCatScRsp),
            "CmdSpaceZooDataScRsp" => Some(Self::CmdSpaceZooDataScRsp),
            _ => None,
        }
    }
}
/// GAEDEIFBKEO
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdStarFightType {
    None = 0,
    CmdStartStarFightLevelCsReq = 7161,
    CmdGetStarFightDataCsReq = 7169,
    CmdStarFightDataChangeNotify = 7165,
    CmdStartStarFightLevelScRsp = 7166,
    CmdGetStarFightDataScRsp = 7168,
}
impl CmdStarFightType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdStarFightTypeNone",
            Self::CmdStartStarFightLevelCsReq => "CmdStartStarFightLevelCsReq",
            Self::CmdGetStarFightDataCsReq => "CmdGetStarFightDataCsReq",
            Self::CmdStarFightDataChangeNotify => "CmdStarFightDataChangeNotify",
            Self::CmdStartStarFightLevelScRsp => "CmdStartStarFightLevelScRsp",
            Self::CmdGetStarFightDataScRsp => "CmdGetStarFightDataScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdStarFightTypeNone" => Some(Self::None),
            "CmdStartStarFightLevelCsReq" => Some(Self::CmdStartStarFightLevelCsReq),
            "CmdGetStarFightDataCsReq" => Some(Self::CmdGetStarFightDataCsReq),
            "CmdStarFightDataChangeNotify" => Some(Self::CmdStarFightDataChangeNotify),
            "CmdStartStarFightLevelScRsp" => Some(Self::CmdStartStarFightLevelScRsp),
            "CmdGetStarFightDataScRsp" => Some(Self::CmdGetStarFightDataScRsp),
            _ => None,
        }
    }
}
/// FDCIAAKMGEC
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdStoryLineType {
    None = 0,
    CmdGetStoryLineInfoCsReq = 6201,
    CmdChangeStoryLineFinishScNotify = 6256,
    CmdStoryLineTrialAvatarChangeScNotify = 6297,
    CmdStoryLineInfoScNotify = 6258,
    CmdGetStoryLineInfoScRsp = 6268,
}
impl CmdStoryLineType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdStoryLineTypeNone",
            Self::CmdGetStoryLineInfoCsReq => "CmdGetStoryLineInfoCsReq",
            Self::CmdChangeStoryLineFinishScNotify => "CmdChangeStoryLineFinishScNotify",
            Self::CmdStoryLineTrialAvatarChangeScNotify => {
                "CmdStoryLineTrialAvatarChangeScNotify"
            }
            Self::CmdStoryLineInfoScNotify => "CmdStoryLineInfoScNotify",
            Self::CmdGetStoryLineInfoScRsp => "CmdGetStoryLineInfoScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdStoryLineTypeNone" => Some(Self::None),
            "CmdGetStoryLineInfoCsReq" => Some(Self::CmdGetStoryLineInfoCsReq),
            "CmdChangeStoryLineFinishScNotify" => {
                Some(Self::CmdChangeStoryLineFinishScNotify)
            }
            "CmdStoryLineTrialAvatarChangeScNotify" => {
                Some(Self::CmdStoryLineTrialAvatarChangeScNotify)
            }
            "CmdStoryLineInfoScNotify" => Some(Self::CmdStoryLineInfoScNotify),
            "CmdGetStoryLineInfoScRsp" => Some(Self::CmdGetStoryLineInfoScRsp),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Amjocdiaphf {
    ChangeStoryLineActionNone = 0,
    ChangeStoryLineActionFinishAction = 1,
    ChangeStoryLineActionClient = 2,
    ChangeStoryLineActionCustomOp = 3,
}
impl Amjocdiaphf {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::ChangeStoryLineActionNone => "ChangeStoryLineAction_None",
            Self::ChangeStoryLineActionFinishAction => {
                "ChangeStoryLineAction_FinishAction"
            }
            Self::ChangeStoryLineActionClient => "ChangeStoryLineAction_Client",
            Self::ChangeStoryLineActionCustomOp => "ChangeStoryLineAction_CustomOP",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ChangeStoryLineAction_None" => Some(Self::ChangeStoryLineActionNone),
            "ChangeStoryLineAction_FinishAction" => {
                Some(Self::ChangeStoryLineActionFinishAction)
            }
            "ChangeStoryLineAction_Client" => Some(Self::ChangeStoryLineActionClient),
            "ChangeStoryLineAction_CustomOP" => Some(Self::ChangeStoryLineActionCustomOp),
            _ => None,
        }
    }
}
/// ODBCOBHBAKL
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdStrongChallengeActivityType {
    None = 0,
    CmdEnterStrongChallengeActivityStageCsReq = 6658,
    CmdEnterStrongChallengeActivityStageScRsp = 6624,
    CmdGetStrongChallengeActivityDataCsReq = 6601,
    CmdGetStrongChallengeActivityDataScRsp = 6668,
    CmdStrongChallengeActivityBattleEndScNotify = 6630,
}
impl CmdStrongChallengeActivityType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdStrongChallengeActivityTypeNone",
            Self::CmdEnterStrongChallengeActivityStageCsReq => {
                "CmdEnterStrongChallengeActivityStageCsReq"
            }
            Self::CmdEnterStrongChallengeActivityStageScRsp => {
                "CmdEnterStrongChallengeActivityStageScRsp"
            }
            Self::CmdGetStrongChallengeActivityDataCsReq => {
                "CmdGetStrongChallengeActivityDataCsReq"
            }
            Self::CmdGetStrongChallengeActivityDataScRsp => {
                "CmdGetStrongChallengeActivityDataScRsp"
            }
            Self::CmdStrongChallengeActivityBattleEndScNotify => {
                "CmdStrongChallengeActivityBattleEndScNotify"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdStrongChallengeActivityTypeNone" => Some(Self::None),
            "CmdEnterStrongChallengeActivityStageCsReq" => {
                Some(Self::CmdEnterStrongChallengeActivityStageCsReq)
            }
            "CmdEnterStrongChallengeActivityStageScRsp" => {
                Some(Self::CmdEnterStrongChallengeActivityStageScRsp)
            }
            "CmdGetStrongChallengeActivityDataCsReq" => {
                Some(Self::CmdGetStrongChallengeActivityDataCsReq)
            }
            "CmdGetStrongChallengeActivityDataScRsp" => {
                Some(Self::CmdGetStrongChallengeActivityDataScRsp)
            }
            "CmdStrongChallengeActivityBattleEndScNotify" => {
                Some(Self::CmdStrongChallengeActivityBattleEndScNotify)
            }
            _ => None,
        }
    }
}
/// HCAOPLMAKDA
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdSummonActivityType {
    None = 0,
    CmdEnterSummonActivityStageCsReq = 7561,
    CmdGetSummonActivityDataCsReq = 7569,
    CmdSummonActivityBattleEndScNotify = 7565,
    CmdEnterSummonActivityStageScRsp = 7566,
    CmdGetSummonActivityDataScRsp = 7568,
}
impl CmdSummonActivityType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdSummonActivityTypeNone",
            Self::CmdEnterSummonActivityStageCsReq => "CmdEnterSummonActivityStageCsReq",
            Self::CmdGetSummonActivityDataCsReq => "CmdGetSummonActivityDataCsReq",
            Self::CmdSummonActivityBattleEndScNotify => {
                "CmdSummonActivityBattleEndScNotify"
            }
            Self::CmdEnterSummonActivityStageScRsp => "CmdEnterSummonActivityStageScRsp",
            Self::CmdGetSummonActivityDataScRsp => "CmdGetSummonActivityDataScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdSummonActivityTypeNone" => Some(Self::None),
            "CmdEnterSummonActivityStageCsReq" => {
                Some(Self::CmdEnterSummonActivityStageCsReq)
            }
            "CmdGetSummonActivityDataCsReq" => Some(Self::CmdGetSummonActivityDataCsReq),
            "CmdSummonActivityBattleEndScNotify" => {
                Some(Self::CmdSummonActivityBattleEndScNotify)
            }
            "CmdEnterSummonActivityStageScRsp" => {
                Some(Self::CmdEnterSummonActivityStageScRsp)
            }
            "CmdGetSummonActivityDataScRsp" => Some(Self::CmdGetSummonActivityDataScRsp),
            _ => None,
        }
    }
}
/// KIKAIPIJPJH
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdSwitchHandType {
    None = 0,
    CmdSwitchHandCoinUpdateCsReq = 8115,
    CmdSwitchHandDataScRsp = 8108,
    CmdSwitchHandUpdateScRsp = 8114,
    CmdSwitchHandFinishScRsp = 8101,
    CmdSwitchHandFinishCsReq = 8104,
    CmdSwitchHandStartCsReq = 8112,
    CmdSwitchHandCoinUpdateScRsp = 8106,
    CmdSwitchHandDataCsReq = 8117,
    CmdSwitchHandUpdateCsReq = 8119,
    CmdSwitchHandStartScRsp = 8102,
}
impl CmdSwitchHandType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdSwitchHandTypeNone",
            Self::CmdSwitchHandCoinUpdateCsReq => "CmdSwitchHandCoinUpdateCsReq",
            Self::CmdSwitchHandDataScRsp => "CmdSwitchHandDataScRsp",
            Self::CmdSwitchHandUpdateScRsp => "CmdSwitchHandUpdateScRsp",
            Self::CmdSwitchHandFinishScRsp => "CmdSwitchHandFinishScRsp",
            Self::CmdSwitchHandFinishCsReq => "CmdSwitchHandFinishCsReq",
            Self::CmdSwitchHandStartCsReq => "CmdSwitchHandStartCsReq",
            Self::CmdSwitchHandCoinUpdateScRsp => "CmdSwitchHandCoinUpdateScRsp",
            Self::CmdSwitchHandDataCsReq => "CmdSwitchHandDataCsReq",
            Self::CmdSwitchHandUpdateCsReq => "CmdSwitchHandUpdateCsReq",
            Self::CmdSwitchHandStartScRsp => "CmdSwitchHandStartScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdSwitchHandTypeNone" => Some(Self::None),
            "CmdSwitchHandCoinUpdateCsReq" => Some(Self::CmdSwitchHandCoinUpdateCsReq),
            "CmdSwitchHandDataScRsp" => Some(Self::CmdSwitchHandDataScRsp),
            "CmdSwitchHandUpdateScRsp" => Some(Self::CmdSwitchHandUpdateScRsp),
            "CmdSwitchHandFinishScRsp" => Some(Self::CmdSwitchHandFinishScRsp),
            "CmdSwitchHandFinishCsReq" => Some(Self::CmdSwitchHandFinishCsReq),
            "CmdSwitchHandStartCsReq" => Some(Self::CmdSwitchHandStartCsReq),
            "CmdSwitchHandCoinUpdateScRsp" => Some(Self::CmdSwitchHandCoinUpdateScRsp),
            "CmdSwitchHandDataCsReq" => Some(Self::CmdSwitchHandDataCsReq),
            "CmdSwitchHandUpdateCsReq" => Some(Self::CmdSwitchHandUpdateCsReq),
            "CmdSwitchHandStartScRsp" => Some(Self::CmdSwitchHandStartScRsp),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Leglgdjopkc {
    SwitchHandOpPropTypeNone = 0,
    SwitchHandOpPropTypeCatch = 1,
    SwitchHandOpPropTypeLift = 2,
}
impl Leglgdjopkc {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::SwitchHandOpPropTypeNone => "SWITCH_HAND_OP_PROP_TYPE_NONE",
            Self::SwitchHandOpPropTypeCatch => "SWITCH_HAND_OP_PROP_TYPE_CATCH",
            Self::SwitchHandOpPropTypeLift => "SWITCH_HAND_OP_PROP_TYPE_LIFT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SWITCH_HAND_OP_PROP_TYPE_NONE" => Some(Self::SwitchHandOpPropTypeNone),
            "SWITCH_HAND_OP_PROP_TYPE_CATCH" => Some(Self::SwitchHandOpPropTypeCatch),
            "SWITCH_HAND_OP_PROP_TYPE_LIFT" => Some(Self::SwitchHandOpPropTypeLift),
            _ => None,
        }
    }
}
/// BCOJADMPNJF
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdSwordTrainingType {
    None = 0,
    CmdSwordTrainingStartGameScRsp = 7485,
    CmdSwordTrainingMarkEndingViewedCsReq = 7455,
    CmdSwordTrainingLearnSkillCsReq = 7464,
    CmdSwordTrainingStoryBattleScRsp = 7473,
    CmdSwordTrainingSetSkillTraceScRsp = 7472,
    CmdSwordTrainingDialogueSelectOptionCsReq = 7479,
    CmdSwordTrainingStoryBattleCsReq = 7494,
    CmdSwordTrainingStoryConfirmCsReq = 7459,
    CmdSwordTrainingDailyPhaseConfirmCsReq = 7483,
    CmdSwordTrainingStoryConfirmScRsp = 7474,
    CmdEnterSwordTrainingExamScRsp = 7482,
    CmdSwordTrainingGameSyncChangeScNotify = 7476,
    CmdSwordTrainingTurnActionCsReq = 7493,
    CmdSwordTrainingDailyPhaseConfirmScRsp = 7457,
    CmdSwordTrainingGameSettleScNotify = 7489,
    CmdSwordTrainingSelectEndingScRsp = 7467,
    CmdSwordTrainingTurnActionScRsp = 7456,
    CmdSwordTrainingUnlockSyncScNotify = 7495,
    CmdEnterSwordTrainingExamCsReq = 7454,
    CmdSwordTrainingMarkEndingViewedScRsp = 7500,
    CmdSwordTrainingResumeGameScRsp = 7469,
    CmdSwordTrainingActionTurnSettleScNotify = 7496,
    CmdSwordTrainingExamResultConfirmScRsp = 7477,
    CmdGetSwordTrainingDataScRsp = 7491,
    CmdSwordTrainingLearnSkillScRsp = 7490,
    CmdSwordTrainingGiveUpGameCsReq = 7451,
    CmdSwordTrainingStartGameCsReq = 7460,
    CmdSwordTrainingExamResultConfirmCsReq = 7499,
    CmdSwordTrainingSetSkillTraceCsReq = 7468,
    CmdSwordTrainingDialogueSelectOptionScRsp = 7475,
    CmdGetSwordTrainingDataCsReq = 7487,
    CmdSwordTrainingSelectEndingCsReq = 7462,
    CmdSwordTrainingRestoreGameScRsp = 7466,
    CmdSwordTrainingGiveUpGameScRsp = 7471,
    CmdSwordTrainingResumeGameCsReq = 7461,
    CmdSwordTrainingRestoreGameCsReq = 7484,
}
impl CmdSwordTrainingType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdSwordTrainingTypeNone",
            Self::CmdSwordTrainingStartGameScRsp => "CmdSwordTrainingStartGameScRsp",
            Self::CmdSwordTrainingMarkEndingViewedCsReq => {
                "CmdSwordTrainingMarkEndingViewedCsReq"
            }
            Self::CmdSwordTrainingLearnSkillCsReq => "CmdSwordTrainingLearnSkillCsReq",
            Self::CmdSwordTrainingStoryBattleScRsp => "CmdSwordTrainingStoryBattleScRsp",
            Self::CmdSwordTrainingSetSkillTraceScRsp => {
                "CmdSwordTrainingSetSkillTraceScRsp"
            }
            Self::CmdSwordTrainingDialogueSelectOptionCsReq => {
                "CmdSwordTrainingDialogueSelectOptionCsReq"
            }
            Self::CmdSwordTrainingStoryBattleCsReq => "CmdSwordTrainingStoryBattleCsReq",
            Self::CmdSwordTrainingStoryConfirmCsReq => {
                "CmdSwordTrainingStoryConfirmCsReq"
            }
            Self::CmdSwordTrainingDailyPhaseConfirmCsReq => {
                "CmdSwordTrainingDailyPhaseConfirmCsReq"
            }
            Self::CmdSwordTrainingStoryConfirmScRsp => {
                "CmdSwordTrainingStoryConfirmScRsp"
            }
            Self::CmdEnterSwordTrainingExamScRsp => "CmdEnterSwordTrainingExamScRsp",
            Self::CmdSwordTrainingGameSyncChangeScNotify => {
                "CmdSwordTrainingGameSyncChangeScNotify"
            }
            Self::CmdSwordTrainingTurnActionCsReq => "CmdSwordTrainingTurnActionCsReq",
            Self::CmdSwordTrainingDailyPhaseConfirmScRsp => {
                "CmdSwordTrainingDailyPhaseConfirmScRsp"
            }
            Self::CmdSwordTrainingGameSettleScNotify => {
                "CmdSwordTrainingGameSettleScNotify"
            }
            Self::CmdSwordTrainingSelectEndingScRsp => {
                "CmdSwordTrainingSelectEndingScRsp"
            }
            Self::CmdSwordTrainingTurnActionScRsp => "CmdSwordTrainingTurnActionScRsp",
            Self::CmdSwordTrainingUnlockSyncScNotify => {
                "CmdSwordTrainingUnlockSyncScNotify"
            }
            Self::CmdEnterSwordTrainingExamCsReq => "CmdEnterSwordTrainingExamCsReq",
            Self::CmdSwordTrainingMarkEndingViewedScRsp => {
                "CmdSwordTrainingMarkEndingViewedScRsp"
            }
            Self::CmdSwordTrainingResumeGameScRsp => "CmdSwordTrainingResumeGameScRsp",
            Self::CmdSwordTrainingActionTurnSettleScNotify => {
                "CmdSwordTrainingActionTurnSettleScNotify"
            }
            Self::CmdSwordTrainingExamResultConfirmScRsp => {
                "CmdSwordTrainingExamResultConfirmScRsp"
            }
            Self::CmdGetSwordTrainingDataScRsp => "CmdGetSwordTrainingDataScRsp",
            Self::CmdSwordTrainingLearnSkillScRsp => "CmdSwordTrainingLearnSkillScRsp",
            Self::CmdSwordTrainingGiveUpGameCsReq => "CmdSwordTrainingGiveUpGameCsReq",
            Self::CmdSwordTrainingStartGameCsReq => "CmdSwordTrainingStartGameCsReq",
            Self::CmdSwordTrainingExamResultConfirmCsReq => {
                "CmdSwordTrainingExamResultConfirmCsReq"
            }
            Self::CmdSwordTrainingSetSkillTraceCsReq => {
                "CmdSwordTrainingSetSkillTraceCsReq"
            }
            Self::CmdSwordTrainingDialogueSelectOptionScRsp => {
                "CmdSwordTrainingDialogueSelectOptionScRsp"
            }
            Self::CmdGetSwordTrainingDataCsReq => "CmdGetSwordTrainingDataCsReq",
            Self::CmdSwordTrainingSelectEndingCsReq => {
                "CmdSwordTrainingSelectEndingCsReq"
            }
            Self::CmdSwordTrainingRestoreGameScRsp => "CmdSwordTrainingRestoreGameScRsp",
            Self::CmdSwordTrainingGiveUpGameScRsp => "CmdSwordTrainingGiveUpGameScRsp",
            Self::CmdSwordTrainingResumeGameCsReq => "CmdSwordTrainingResumeGameCsReq",
            Self::CmdSwordTrainingRestoreGameCsReq => "CmdSwordTrainingRestoreGameCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdSwordTrainingTypeNone" => Some(Self::None),
            "CmdSwordTrainingStartGameScRsp" => {
                Some(Self::CmdSwordTrainingStartGameScRsp)
            }
            "CmdSwordTrainingMarkEndingViewedCsReq" => {
                Some(Self::CmdSwordTrainingMarkEndingViewedCsReq)
            }
            "CmdSwordTrainingLearnSkillCsReq" => {
                Some(Self::CmdSwordTrainingLearnSkillCsReq)
            }
            "CmdSwordTrainingStoryBattleScRsp" => {
                Some(Self::CmdSwordTrainingStoryBattleScRsp)
            }
            "CmdSwordTrainingSetSkillTraceScRsp" => {
                Some(Self::CmdSwordTrainingSetSkillTraceScRsp)
            }
            "CmdSwordTrainingDialogueSelectOptionCsReq" => {
                Some(Self::CmdSwordTrainingDialogueSelectOptionCsReq)
            }
            "CmdSwordTrainingStoryBattleCsReq" => {
                Some(Self::CmdSwordTrainingStoryBattleCsReq)
            }
            "CmdSwordTrainingStoryConfirmCsReq" => {
                Some(Self::CmdSwordTrainingStoryConfirmCsReq)
            }
            "CmdSwordTrainingDailyPhaseConfirmCsReq" => {
                Some(Self::CmdSwordTrainingDailyPhaseConfirmCsReq)
            }
            "CmdSwordTrainingStoryConfirmScRsp" => {
                Some(Self::CmdSwordTrainingStoryConfirmScRsp)
            }
            "CmdEnterSwordTrainingExamScRsp" => {
                Some(Self::CmdEnterSwordTrainingExamScRsp)
            }
            "CmdSwordTrainingGameSyncChangeScNotify" => {
                Some(Self::CmdSwordTrainingGameSyncChangeScNotify)
            }
            "CmdSwordTrainingTurnActionCsReq" => {
                Some(Self::CmdSwordTrainingTurnActionCsReq)
            }
            "CmdSwordTrainingDailyPhaseConfirmScRsp" => {
                Some(Self::CmdSwordTrainingDailyPhaseConfirmScRsp)
            }
            "CmdSwordTrainingGameSettleScNotify" => {
                Some(Self::CmdSwordTrainingGameSettleScNotify)
            }
            "CmdSwordTrainingSelectEndingScRsp" => {
                Some(Self::CmdSwordTrainingSelectEndingScRsp)
            }
            "CmdSwordTrainingTurnActionScRsp" => {
                Some(Self::CmdSwordTrainingTurnActionScRsp)
            }
            "CmdSwordTrainingUnlockSyncScNotify" => {
                Some(Self::CmdSwordTrainingUnlockSyncScNotify)
            }
            "CmdEnterSwordTrainingExamCsReq" => {
                Some(Self::CmdEnterSwordTrainingExamCsReq)
            }
            "CmdSwordTrainingMarkEndingViewedScRsp" => {
                Some(Self::CmdSwordTrainingMarkEndingViewedScRsp)
            }
            "CmdSwordTrainingResumeGameScRsp" => {
                Some(Self::CmdSwordTrainingResumeGameScRsp)
            }
            "CmdSwordTrainingActionTurnSettleScNotify" => {
                Some(Self::CmdSwordTrainingActionTurnSettleScNotify)
            }
            "CmdSwordTrainingExamResultConfirmScRsp" => {
                Some(Self::CmdSwordTrainingExamResultConfirmScRsp)
            }
            "CmdGetSwordTrainingDataScRsp" => Some(Self::CmdGetSwordTrainingDataScRsp),
            "CmdSwordTrainingLearnSkillScRsp" => {
                Some(Self::CmdSwordTrainingLearnSkillScRsp)
            }
            "CmdSwordTrainingGiveUpGameCsReq" => {
                Some(Self::CmdSwordTrainingGiveUpGameCsReq)
            }
            "CmdSwordTrainingStartGameCsReq" => {
                Some(Self::CmdSwordTrainingStartGameCsReq)
            }
            "CmdSwordTrainingExamResultConfirmCsReq" => {
                Some(Self::CmdSwordTrainingExamResultConfirmCsReq)
            }
            "CmdSwordTrainingSetSkillTraceCsReq" => {
                Some(Self::CmdSwordTrainingSetSkillTraceCsReq)
            }
            "CmdSwordTrainingDialogueSelectOptionScRsp" => {
                Some(Self::CmdSwordTrainingDialogueSelectOptionScRsp)
            }
            "CmdGetSwordTrainingDataCsReq" => Some(Self::CmdGetSwordTrainingDataCsReq),
            "CmdSwordTrainingSelectEndingCsReq" => {
                Some(Self::CmdSwordTrainingSelectEndingCsReq)
            }
            "CmdSwordTrainingRestoreGameScRsp" => {
                Some(Self::CmdSwordTrainingRestoreGameScRsp)
            }
            "CmdSwordTrainingGiveUpGameScRsp" => {
                Some(Self::CmdSwordTrainingGiveUpGameScRsp)
            }
            "CmdSwordTrainingResumeGameCsReq" => {
                Some(Self::CmdSwordTrainingResumeGameCsReq)
            }
            "CmdSwordTrainingRestoreGameCsReq" => {
                Some(Self::CmdSwordTrainingRestoreGameCsReq)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Pkhjbpmibba {
    SwordTrainGameSourceTypeNone = 0,
    SwordTrainGameSourceTypeTurnSettle = 1,
    SwordTrainGameSourceTypeStatusUpgrade = 2,
    SwordTrainGameSourceTypeAction = 3,
    SwordTrainGameSourceTypeActionHint = 4,
    SwordTrainGameSourceTypeStory = 5,
    SwordTrainGameSourceTypeExamBonus = 6,
    SwordTrainGameSourceTypeDialogue = 7,
}
impl Pkhjbpmibba {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::SwordTrainGameSourceTypeNone => "SWORD_TRAIN_GAME_SOURCE_TYPE_NONE",
            Self::SwordTrainGameSourceTypeTurnSettle => {
                "SWORD_TRAIN_GAME_SOURCE_TYPE_TURN_SETTLE"
            }
            Self::SwordTrainGameSourceTypeStatusUpgrade => {
                "SWORD_TRAIN_GAME_SOURCE_TYPE_STATUS_UPGRADE"
            }
            Self::SwordTrainGameSourceTypeAction => "SWORD_TRAIN_GAME_SOURCE_TYPE_ACTION",
            Self::SwordTrainGameSourceTypeActionHint => {
                "SWORD_TRAIN_GAME_SOURCE_TYPE_ACTION_HINT"
            }
            Self::SwordTrainGameSourceTypeStory => "SWORD_TRAIN_GAME_SOURCE_TYPE_STORY",
            Self::SwordTrainGameSourceTypeExamBonus => {
                "SWORD_TRAIN_GAME_SOURCE_TYPE_EXAM_BONUS"
            }
            Self::SwordTrainGameSourceTypeDialogue => {
                "SWORD_TRAIN_GAME_SOURCE_TYPE_DIALOGUE"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SWORD_TRAIN_GAME_SOURCE_TYPE_NONE" => {
                Some(Self::SwordTrainGameSourceTypeNone)
            }
            "SWORD_TRAIN_GAME_SOURCE_TYPE_TURN_SETTLE" => {
                Some(Self::SwordTrainGameSourceTypeTurnSettle)
            }
            "SWORD_TRAIN_GAME_SOURCE_TYPE_STATUS_UPGRADE" => {
                Some(Self::SwordTrainGameSourceTypeStatusUpgrade)
            }
            "SWORD_TRAIN_GAME_SOURCE_TYPE_ACTION" => {
                Some(Self::SwordTrainGameSourceTypeAction)
            }
            "SWORD_TRAIN_GAME_SOURCE_TYPE_ACTION_HINT" => {
                Some(Self::SwordTrainGameSourceTypeActionHint)
            }
            "SWORD_TRAIN_GAME_SOURCE_TYPE_STORY" => {
                Some(Self::SwordTrainGameSourceTypeStory)
            }
            "SWORD_TRAIN_GAME_SOURCE_TYPE_EXAM_BONUS" => {
                Some(Self::SwordTrainGameSourceTypeExamBonus)
            }
            "SWORD_TRAIN_GAME_SOURCE_TYPE_DIALOGUE" => {
                Some(Self::SwordTrainGameSourceTypeDialogue)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Bjncdefeeji {
    SwordTrainingDailyPhaseTypeNone = 0,
    SwordTrainingDailyPhaseTypeMorning = 1,
    SwordTrainingDailyPhaseTypeNoon = 2,
    SwordTrainingDailyPhaseTypeAfternoon = 3,
    SwordTrainingDailyPhaseTypeEvening = 4,
}
impl Bjncdefeeji {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::SwordTrainingDailyPhaseTypeNone => {
                "SWORD_TRAINING_DAILY_PHASE_TYPE_NONE"
            }
            Self::SwordTrainingDailyPhaseTypeMorning => {
                "SWORD_TRAINING_DAILY_PHASE_TYPE_MORNING"
            }
            Self::SwordTrainingDailyPhaseTypeNoon => {
                "SWORD_TRAINING_DAILY_PHASE_TYPE_NOON"
            }
            Self::SwordTrainingDailyPhaseTypeAfternoon => {
                "SWORD_TRAINING_DAILY_PHASE_TYPE_AFTERNOON"
            }
            Self::SwordTrainingDailyPhaseTypeEvening => {
                "SWORD_TRAINING_DAILY_PHASE_TYPE_EVENING"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SWORD_TRAINING_DAILY_PHASE_TYPE_NONE" => {
                Some(Self::SwordTrainingDailyPhaseTypeNone)
            }
            "SWORD_TRAINING_DAILY_PHASE_TYPE_MORNING" => {
                Some(Self::SwordTrainingDailyPhaseTypeMorning)
            }
            "SWORD_TRAINING_DAILY_PHASE_TYPE_NOON" => {
                Some(Self::SwordTrainingDailyPhaseTypeNoon)
            }
            "SWORD_TRAINING_DAILY_PHASE_TYPE_AFTERNOON" => {
                Some(Self::SwordTrainingDailyPhaseTypeAfternoon)
            }
            "SWORD_TRAINING_DAILY_PHASE_TYPE_EVENING" => {
                Some(Self::SwordTrainingDailyPhaseTypeEvening)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Hdijjmdpile {
    SwordTrainingStatusTypeNone = 0,
    SwordTrainingStatusTypePower = 1,
    SwordTrainingStatusTypeAgility = 2,
    SwordTrainingStatusTypeToughness = 3,
    SwordTrainingStatusTypePerception = 4,
    SwordTrainingStatusTypeMax = 5,
}
impl Hdijjmdpile {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::SwordTrainingStatusTypeNone => "SWORD_TRAINING_STATUS_TYPE_NONE",
            Self::SwordTrainingStatusTypePower => "SWORD_TRAINING_STATUS_TYPE_POWER",
            Self::SwordTrainingStatusTypeAgility => "SWORD_TRAINING_STATUS_TYPE_AGILITY",
            Self::SwordTrainingStatusTypeToughness => {
                "SWORD_TRAINING_STATUS_TYPE_TOUGHNESS"
            }
            Self::SwordTrainingStatusTypePerception => {
                "SWORD_TRAINING_STATUS_TYPE_PERCEPTION"
            }
            Self::SwordTrainingStatusTypeMax => "_SWORD_TRAINING_STATUS_TYPE_MAX",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SWORD_TRAINING_STATUS_TYPE_NONE" => Some(Self::SwordTrainingStatusTypeNone),
            "SWORD_TRAINING_STATUS_TYPE_POWER" => {
                Some(Self::SwordTrainingStatusTypePower)
            }
            "SWORD_TRAINING_STATUS_TYPE_AGILITY" => {
                Some(Self::SwordTrainingStatusTypeAgility)
            }
            "SWORD_TRAINING_STATUS_TYPE_TOUGHNESS" => {
                Some(Self::SwordTrainingStatusTypeToughness)
            }
            "SWORD_TRAINING_STATUS_TYPE_PERCEPTION" => {
                Some(Self::SwordTrainingStatusTypePerception)
            }
            "_SWORD_TRAINING_STATUS_TYPE_MAX" => Some(Self::SwordTrainingStatusTypeMax),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Hdmkphalalg {
    SwordTrainingGameSettleNone = 0,
    SwordTrainingGameSettleFinish = 1,
    SwordTrainingGameSettleGiveUp = 2,
    SwordTrainingGameSettleBattleFailed = 3,
    SwordTrainingGameSettleForce = 4,
    SwordTrainingGameSettleByRestore = 5,
}
impl Hdmkphalalg {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::SwordTrainingGameSettleNone => "SWORD_TRAINING_GAME_SETTLE_NONE",
            Self::SwordTrainingGameSettleFinish => "SWORD_TRAINING_GAME_SETTLE_FINISH",
            Self::SwordTrainingGameSettleGiveUp => "SWORD_TRAINING_GAME_SETTLE_GIVE_UP",
            Self::SwordTrainingGameSettleBattleFailed => {
                "SWORD_TRAINING_GAME_SETTLE_BATTLE_FAILED"
            }
            Self::SwordTrainingGameSettleForce => "SWORD_TRAINING_GAME_SETTLE_FORCE",
            Self::SwordTrainingGameSettleByRestore => {
                "SWORD_TRAINING_GAME_SETTLE_BY_RESTORE"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SWORD_TRAINING_GAME_SETTLE_NONE" => Some(Self::SwordTrainingGameSettleNone),
            "SWORD_TRAINING_GAME_SETTLE_FINISH" => {
                Some(Self::SwordTrainingGameSettleFinish)
            }
            "SWORD_TRAINING_GAME_SETTLE_GIVE_UP" => {
                Some(Self::SwordTrainingGameSettleGiveUp)
            }
            "SWORD_TRAINING_GAME_SETTLE_BATTLE_FAILED" => {
                Some(Self::SwordTrainingGameSettleBattleFailed)
            }
            "SWORD_TRAINING_GAME_SETTLE_FORCE" => {
                Some(Self::SwordTrainingGameSettleForce)
            }
            "SWORD_TRAINING_GAME_SETTLE_BY_RESTORE" => {
                Some(Self::SwordTrainingGameSettleByRestore)
            }
            _ => None,
        }
    }
}
/// HEOOONFIPAF
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdPlayerSync {
    None = 0,
    ScNotify = 601,
}
impl CmdPlayerSync {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdPlayerSyncNone",
            Self::ScNotify => "CmdPlayerSyncScNotify",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdPlayerSyncNone" => Some(Self::None),
            "CmdPlayerSyncScNotify" => Some(Self::ScNotify),
            _ => None,
        }
    }
}
/// DFHNNKHAEJJ
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdTalkRewardType {
    None = 0,
    CmdGetNpcTakenRewardCsReq = 2101,
    CmdGetNpcTakenRewardScRsp = 2168,
    CmdGetFirstTalkNpcCsReq = 2130,
    CmdGetFirstTalkByPerformanceNpcScRsp = 2114,
    CmdFinishFirstTalkByPerformanceNpcScRsp = 2122,
    CmdGetFirstTalkNpcScRsp = 2156,
    CmdFinishFirstTalkByPerformanceNpcCsReq = 2149,
    CmdFinishFirstTalkNpcScRsp = 2176,
    CmdTakeTalkRewardScRsp = 2124,
    CmdSelectInclinationTextCsReq = 2128,
    CmdSelectInclinationTextScRsp = 2111,
    CmdGetFirstTalkByPerformanceNpcCsReq = 2105,
    CmdTakeTalkRewardCsReq = 2158,
    CmdFinishFirstTalkNpcCsReq = 2197,
}
impl CmdTalkRewardType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdTalkRewardTypeNone",
            Self::CmdGetNpcTakenRewardCsReq => "CmdGetNpcTakenRewardCsReq",
            Self::CmdGetNpcTakenRewardScRsp => "CmdGetNpcTakenRewardScRsp",
            Self::CmdGetFirstTalkNpcCsReq => "CmdGetFirstTalkNpcCsReq",
            Self::CmdGetFirstTalkByPerformanceNpcScRsp => {
                "CmdGetFirstTalkByPerformanceNpcScRsp"
            }
            Self::CmdFinishFirstTalkByPerformanceNpcScRsp => {
                "CmdFinishFirstTalkByPerformanceNpcScRsp"
            }
            Self::CmdGetFirstTalkNpcScRsp => "CmdGetFirstTalkNpcScRsp",
            Self::CmdFinishFirstTalkByPerformanceNpcCsReq => {
                "CmdFinishFirstTalkByPerformanceNpcCsReq"
            }
            Self::CmdFinishFirstTalkNpcScRsp => "CmdFinishFirstTalkNpcScRsp",
            Self::CmdTakeTalkRewardScRsp => "CmdTakeTalkRewardScRsp",
            Self::CmdSelectInclinationTextCsReq => "CmdSelectInclinationTextCsReq",
            Self::CmdSelectInclinationTextScRsp => "CmdSelectInclinationTextScRsp",
            Self::CmdGetFirstTalkByPerformanceNpcCsReq => {
                "CmdGetFirstTalkByPerformanceNpcCsReq"
            }
            Self::CmdTakeTalkRewardCsReq => "CmdTakeTalkRewardCsReq",
            Self::CmdFinishFirstTalkNpcCsReq => "CmdFinishFirstTalkNpcCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdTalkRewardTypeNone" => Some(Self::None),
            "CmdGetNpcTakenRewardCsReq" => Some(Self::CmdGetNpcTakenRewardCsReq),
            "CmdGetNpcTakenRewardScRsp" => Some(Self::CmdGetNpcTakenRewardScRsp),
            "CmdGetFirstTalkNpcCsReq" => Some(Self::CmdGetFirstTalkNpcCsReq),
            "CmdGetFirstTalkByPerformanceNpcScRsp" => {
                Some(Self::CmdGetFirstTalkByPerformanceNpcScRsp)
            }
            "CmdFinishFirstTalkByPerformanceNpcScRsp" => {
                Some(Self::CmdFinishFirstTalkByPerformanceNpcScRsp)
            }
            "CmdGetFirstTalkNpcScRsp" => Some(Self::CmdGetFirstTalkNpcScRsp),
            "CmdFinishFirstTalkByPerformanceNpcCsReq" => {
                Some(Self::CmdFinishFirstTalkByPerformanceNpcCsReq)
            }
            "CmdFinishFirstTalkNpcScRsp" => Some(Self::CmdFinishFirstTalkNpcScRsp),
            "CmdTakeTalkRewardScRsp" => Some(Self::CmdTakeTalkRewardScRsp),
            "CmdSelectInclinationTextCsReq" => Some(Self::CmdSelectInclinationTextCsReq),
            "CmdSelectInclinationTextScRsp" => Some(Self::CmdSelectInclinationTextScRsp),
            "CmdGetFirstTalkByPerformanceNpcCsReq" => {
                Some(Self::CmdGetFirstTalkByPerformanceNpcCsReq)
            }
            "CmdTakeTalkRewardCsReq" => Some(Self::CmdTakeTalkRewardCsReq),
            "CmdFinishFirstTalkNpcCsReq" => Some(Self::CmdFinishFirstTalkNpcCsReq),
            _ => None,
        }
    }
}
/// EMKDDECEIAP
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdTarotBookType {
    None = 0,
    CmdTarotBookFinishInteractionScRsp = 8158,
    CmdTarotBookGetDataCsReq = 8157,
    CmdTarotBookUnlockStoryCsReq = 8144,
    CmdTarotBookFinishStoryScRsp = 8154,
    CmdTarotBookUnlockStoryScRsp = 8141,
    CmdTarotBookGetDataScRsp = 8148,
    CmdTarotBookOpenPackCsReq = 8152,
    CmdTarotBookFinishInteractionCsReq = 8146,
    CmdTarotBookModifyEnergyScNotify = 8155,
    CmdTarotBookFinishStoryCsReq = 8159,
    CmdTarotBookOpenPackScRsp = 8142,
}
impl CmdTarotBookType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdTarotBookTypeNone",
            Self::CmdTarotBookFinishInteractionScRsp => {
                "CmdTarotBookFinishInteractionScRsp"
            }
            Self::CmdTarotBookGetDataCsReq => "CmdTarotBookGetDataCsReq",
            Self::CmdTarotBookUnlockStoryCsReq => "CmdTarotBookUnlockStoryCsReq",
            Self::CmdTarotBookFinishStoryScRsp => "CmdTarotBookFinishStoryScRsp",
            Self::CmdTarotBookUnlockStoryScRsp => "CmdTarotBookUnlockStoryScRsp",
            Self::CmdTarotBookGetDataScRsp => "CmdTarotBookGetDataScRsp",
            Self::CmdTarotBookOpenPackCsReq => "CmdTarotBookOpenPackCsReq",
            Self::CmdTarotBookFinishInteractionCsReq => {
                "CmdTarotBookFinishInteractionCsReq"
            }
            Self::CmdTarotBookModifyEnergyScNotify => "CmdTarotBookModifyEnergyScNotify",
            Self::CmdTarotBookFinishStoryCsReq => "CmdTarotBookFinishStoryCsReq",
            Self::CmdTarotBookOpenPackScRsp => "CmdTarotBookOpenPackScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdTarotBookTypeNone" => Some(Self::None),
            "CmdTarotBookFinishInteractionScRsp" => {
                Some(Self::CmdTarotBookFinishInteractionScRsp)
            }
            "CmdTarotBookGetDataCsReq" => Some(Self::CmdTarotBookGetDataCsReq),
            "CmdTarotBookUnlockStoryCsReq" => Some(Self::CmdTarotBookUnlockStoryCsReq),
            "CmdTarotBookFinishStoryScRsp" => Some(Self::CmdTarotBookFinishStoryScRsp),
            "CmdTarotBookUnlockStoryScRsp" => Some(Self::CmdTarotBookUnlockStoryScRsp),
            "CmdTarotBookGetDataScRsp" => Some(Self::CmdTarotBookGetDataScRsp),
            "CmdTarotBookOpenPackCsReq" => Some(Self::CmdTarotBookOpenPackCsReq),
            "CmdTarotBookFinishInteractionCsReq" => {
                Some(Self::CmdTarotBookFinishInteractionCsReq)
            }
            "CmdTarotBookModifyEnergyScNotify" => {
                Some(Self::CmdTarotBookModifyEnergyScNotify)
            }
            "CmdTarotBookFinishStoryCsReq" => Some(Self::CmdTarotBookFinishStoryCsReq),
            "CmdTarotBookOpenPackScRsp" => Some(Self::CmdTarotBookOpenPackScRsp),
            _ => None,
        }
    }
}
/// KPGHFGNNBHG
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdTelevisionActivityType {
    None = 0,
    CmdEnterTelevisionActivityStageScRsp = 6964,
    CmdGetTelevisionActivityDataCsReq = 6977,
    CmdEnterTelevisionActivityStageCsReq = 6962,
    CmdTelevisionActivityBattleEndScNotify = 6961,
    CmdGetTelevisionActivityDataScRsp = 6968,
    CmdTelevisionActivityDataChangeScNotify = 6972,
}
impl CmdTelevisionActivityType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdTelevisionActivityTypeNone",
            Self::CmdEnterTelevisionActivityStageScRsp => {
                "CmdEnterTelevisionActivityStageScRsp"
            }
            Self::CmdGetTelevisionActivityDataCsReq => {
                "CmdGetTelevisionActivityDataCsReq"
            }
            Self::CmdEnterTelevisionActivityStageCsReq => {
                "CmdEnterTelevisionActivityStageCsReq"
            }
            Self::CmdTelevisionActivityBattleEndScNotify => {
                "CmdTelevisionActivityBattleEndScNotify"
            }
            Self::CmdGetTelevisionActivityDataScRsp => {
                "CmdGetTelevisionActivityDataScRsp"
            }
            Self::CmdTelevisionActivityDataChangeScNotify => {
                "CmdTelevisionActivityDataChangeScNotify"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdTelevisionActivityTypeNone" => Some(Self::None),
            "CmdEnterTelevisionActivityStageScRsp" => {
                Some(Self::CmdEnterTelevisionActivityStageScRsp)
            }
            "CmdGetTelevisionActivityDataCsReq" => {
                Some(Self::CmdGetTelevisionActivityDataCsReq)
            }
            "CmdEnterTelevisionActivityStageCsReq" => {
                Some(Self::CmdEnterTelevisionActivityStageCsReq)
            }
            "CmdTelevisionActivityBattleEndScNotify" => {
                Some(Self::CmdTelevisionActivityBattleEndScNotify)
            }
            "CmdGetTelevisionActivityDataScRsp" => {
                Some(Self::CmdGetTelevisionActivityDataScRsp)
            }
            "CmdTelevisionActivityDataChangeScNotify" => {
                Some(Self::CmdTelevisionActivityDataChangeScNotify)
            }
            _ => None,
        }
    }
}
/// KGIHCDABHLC
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdTextJoinType {
    None = 0,
    CmdTextJoinSaveCsReq = 3801,
    CmdTextJoinQueryCsReq = 3858,
    CmdTextJoinSaveScRsp = 3868,
    CmdTextJoinQueryScRsp = 3824,
    CmdTextJoinBatchSaveCsReq = 3830,
    CmdTextJoinBatchSaveScRsp = 3856,
}
impl CmdTextJoinType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdTextJoinTypeNone",
            Self::CmdTextJoinSaveCsReq => "CmdTextJoinSaveCsReq",
            Self::CmdTextJoinQueryCsReq => "CmdTextJoinQueryCsReq",
            Self::CmdTextJoinSaveScRsp => "CmdTextJoinSaveScRsp",
            Self::CmdTextJoinQueryScRsp => "CmdTextJoinQueryScRsp",
            Self::CmdTextJoinBatchSaveCsReq => "CmdTextJoinBatchSaveCsReq",
            Self::CmdTextJoinBatchSaveScRsp => "CmdTextJoinBatchSaveScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdTextJoinTypeNone" => Some(Self::None),
            "CmdTextJoinSaveCsReq" => Some(Self::CmdTextJoinSaveCsReq),
            "CmdTextJoinQueryCsReq" => Some(Self::CmdTextJoinQueryCsReq),
            "CmdTextJoinSaveScRsp" => Some(Self::CmdTextJoinSaveScRsp),
            "CmdTextJoinQueryScRsp" => Some(Self::CmdTextJoinQueryScRsp),
            "CmdTextJoinBatchSaveCsReq" => Some(Self::CmdTextJoinBatchSaveCsReq),
            "CmdTextJoinBatchSaveScRsp" => Some(Self::CmdTextJoinBatchSaveScRsp),
            _ => None,
        }
    }
}
/// EEHBBCBGCGH
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdTrackPhotoActivityType {
    None = 0,
    CmdSettleTrackPhotoStageCsReq = 7551,
    CmdQuitTrackPhotoStageCsReq = 7553,
    CmdStartTrackPhotoStageScRsp = 7557,
    CmdQuitTrackPhotoStageScRsp = 7552,
    CmdSettleTrackPhotoStageScRsp = 7556,
    CmdGetTrackPhotoActivityDataScRsp = 7558,
    CmdGetTrackPhotoActivityDataCsReq = 7559,
    CmdStartTrackPhotoStageCsReq = 7555,
}
impl CmdTrackPhotoActivityType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdTrackPhotoActivityTypeNone",
            Self::CmdSettleTrackPhotoStageCsReq => "CmdSettleTrackPhotoStageCsReq",
            Self::CmdQuitTrackPhotoStageCsReq => "CmdQuitTrackPhotoStageCsReq",
            Self::CmdStartTrackPhotoStageScRsp => "CmdStartTrackPhotoStageScRsp",
            Self::CmdQuitTrackPhotoStageScRsp => "CmdQuitTrackPhotoStageScRsp",
            Self::CmdSettleTrackPhotoStageScRsp => "CmdSettleTrackPhotoStageScRsp",
            Self::CmdGetTrackPhotoActivityDataScRsp => {
                "CmdGetTrackPhotoActivityDataScRsp"
            }
            Self::CmdGetTrackPhotoActivityDataCsReq => {
                "CmdGetTrackPhotoActivityDataCsReq"
            }
            Self::CmdStartTrackPhotoStageCsReq => "CmdStartTrackPhotoStageCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdTrackPhotoActivityTypeNone" => Some(Self::None),
            "CmdSettleTrackPhotoStageCsReq" => Some(Self::CmdSettleTrackPhotoStageCsReq),
            "CmdQuitTrackPhotoStageCsReq" => Some(Self::CmdQuitTrackPhotoStageCsReq),
            "CmdStartTrackPhotoStageScRsp" => Some(Self::CmdStartTrackPhotoStageScRsp),
            "CmdQuitTrackPhotoStageScRsp" => Some(Self::CmdQuitTrackPhotoStageScRsp),
            "CmdSettleTrackPhotoStageScRsp" => Some(Self::CmdSettleTrackPhotoStageScRsp),
            "CmdGetTrackPhotoActivityDataScRsp" => {
                Some(Self::CmdGetTrackPhotoActivityDataScRsp)
            }
            "CmdGetTrackPhotoActivityDataCsReq" => {
                Some(Self::CmdGetTrackPhotoActivityDataCsReq)
            }
            "CmdStartTrackPhotoStageCsReq" => Some(Self::CmdStartTrackPhotoStageCsReq),
            _ => None,
        }
    }
}
/// MHIAKDMOFAO
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdTrainPartyType {
    None = 0,
    CmdTrainPartyTakeBuildLevelAwardCsReq = 8019,
    CmdTrainPartyBuildingUpdateNotify = 8039,
    CmdTrainPartyAddBuildDynamicBuffCsReq = 8059,
    CmdTrainPartyLeaveScRsp = 8091,
    CmdTrainPartyUseCardCsReq = 8058,
    CmdTrainPartyUseCardScRsp = 8024,
    CmdTrainPartyEnterScRsp = 8012,
    CmdTrainPartySettleNotify = 8097,
    CmdTrainPartyGamePlaySettleNotify = 8092,
    CmdTrainPartyGamePlayStartCsReq = 8069,
    CmdTrainPartyTakeBuildLevelAwardScRsp = 8082,
    CmdTrainPartyMoveScNotify = 8030,
    CmdTrainPartyUpdatePosEnvScRsp = 8038,
    CmdTrainPartyEnterCsReq = 8023,
    CmdTrainPartyGamePlayStartScRsp = 8020,
    CmdTrainPartyHandlePendingActionScRsp = 8014,
    CmdTrainPartyGetDataCsReq = 8001,
    CmdTrainPartyBuildStartStepScRsp = 8022,
    CmdTrainPartyHandlePendingActionCsReq = 8005,
    CmdTrainPartyBuildDiyCsReq = 8047,
    CmdTrainPartyGetDataScRsp = 8068,
    CmdTrainPartyUpdatePosEnvCsReq = 8081,
    CmdTrainPartyBuildDiyScRsp = 8080,
    CmdTrainPartyLeaveCsReq = 8017,
    CmdTrainPartyAddBuildDynamicBuffScRsp = 8041,
    CmdTrainPartyBuildStartStepCsReq = 8049,
    CmdTrainPartySyncUpdateScNotify = 8028,
}
impl CmdTrainPartyType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdTrainPartyTypeNone",
            Self::CmdTrainPartyTakeBuildLevelAwardCsReq => {
                "CmdTrainPartyTakeBuildLevelAwardCsReq"
            }
            Self::CmdTrainPartyBuildingUpdateNotify => {
                "CmdTrainPartyBuildingUpdateNotify"
            }
            Self::CmdTrainPartyAddBuildDynamicBuffCsReq => {
                "CmdTrainPartyAddBuildDynamicBuffCsReq"
            }
            Self::CmdTrainPartyLeaveScRsp => "CmdTrainPartyLeaveScRsp",
            Self::CmdTrainPartyUseCardCsReq => "CmdTrainPartyUseCardCsReq",
            Self::CmdTrainPartyUseCardScRsp => "CmdTrainPartyUseCardScRsp",
            Self::CmdTrainPartyEnterScRsp => "CmdTrainPartyEnterScRsp",
            Self::CmdTrainPartySettleNotify => "CmdTrainPartySettleNotify",
            Self::CmdTrainPartyGamePlaySettleNotify => {
                "CmdTrainPartyGamePlaySettleNotify"
            }
            Self::CmdTrainPartyGamePlayStartCsReq => "CmdTrainPartyGamePlayStartCsReq",
            Self::CmdTrainPartyTakeBuildLevelAwardScRsp => {
                "CmdTrainPartyTakeBuildLevelAwardScRsp"
            }
            Self::CmdTrainPartyMoveScNotify => "CmdTrainPartyMoveScNotify",
            Self::CmdTrainPartyUpdatePosEnvScRsp => "CmdTrainPartyUpdatePosEnvScRsp",
            Self::CmdTrainPartyEnterCsReq => "CmdTrainPartyEnterCsReq",
            Self::CmdTrainPartyGamePlayStartScRsp => "CmdTrainPartyGamePlayStartScRsp",
            Self::CmdTrainPartyHandlePendingActionScRsp => {
                "CmdTrainPartyHandlePendingActionScRsp"
            }
            Self::CmdTrainPartyGetDataCsReq => "CmdTrainPartyGetDataCsReq",
            Self::CmdTrainPartyBuildStartStepScRsp => "CmdTrainPartyBuildStartStepScRsp",
            Self::CmdTrainPartyHandlePendingActionCsReq => {
                "CmdTrainPartyHandlePendingActionCsReq"
            }
            Self::CmdTrainPartyBuildDiyCsReq => "CmdTrainPartyBuildDiyCsReq",
            Self::CmdTrainPartyGetDataScRsp => "CmdTrainPartyGetDataScRsp",
            Self::CmdTrainPartyUpdatePosEnvCsReq => "CmdTrainPartyUpdatePosEnvCsReq",
            Self::CmdTrainPartyBuildDiyScRsp => "CmdTrainPartyBuildDiyScRsp",
            Self::CmdTrainPartyLeaveCsReq => "CmdTrainPartyLeaveCsReq",
            Self::CmdTrainPartyAddBuildDynamicBuffScRsp => {
                "CmdTrainPartyAddBuildDynamicBuffScRsp"
            }
            Self::CmdTrainPartyBuildStartStepCsReq => "CmdTrainPartyBuildStartStepCsReq",
            Self::CmdTrainPartySyncUpdateScNotify => "CmdTrainPartySyncUpdateScNotify",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdTrainPartyTypeNone" => Some(Self::None),
            "CmdTrainPartyTakeBuildLevelAwardCsReq" => {
                Some(Self::CmdTrainPartyTakeBuildLevelAwardCsReq)
            }
            "CmdTrainPartyBuildingUpdateNotify" => {
                Some(Self::CmdTrainPartyBuildingUpdateNotify)
            }
            "CmdTrainPartyAddBuildDynamicBuffCsReq" => {
                Some(Self::CmdTrainPartyAddBuildDynamicBuffCsReq)
            }
            "CmdTrainPartyLeaveScRsp" => Some(Self::CmdTrainPartyLeaveScRsp),
            "CmdTrainPartyUseCardCsReq" => Some(Self::CmdTrainPartyUseCardCsReq),
            "CmdTrainPartyUseCardScRsp" => Some(Self::CmdTrainPartyUseCardScRsp),
            "CmdTrainPartyEnterScRsp" => Some(Self::CmdTrainPartyEnterScRsp),
            "CmdTrainPartySettleNotify" => Some(Self::CmdTrainPartySettleNotify),
            "CmdTrainPartyGamePlaySettleNotify" => {
                Some(Self::CmdTrainPartyGamePlaySettleNotify)
            }
            "CmdTrainPartyGamePlayStartCsReq" => {
                Some(Self::CmdTrainPartyGamePlayStartCsReq)
            }
            "CmdTrainPartyTakeBuildLevelAwardScRsp" => {
                Some(Self::CmdTrainPartyTakeBuildLevelAwardScRsp)
            }
            "CmdTrainPartyMoveScNotify" => Some(Self::CmdTrainPartyMoveScNotify),
            "CmdTrainPartyUpdatePosEnvScRsp" => {
                Some(Self::CmdTrainPartyUpdatePosEnvScRsp)
            }
            "CmdTrainPartyEnterCsReq" => Some(Self::CmdTrainPartyEnterCsReq),
            "CmdTrainPartyGamePlayStartScRsp" => {
                Some(Self::CmdTrainPartyGamePlayStartScRsp)
            }
            "CmdTrainPartyHandlePendingActionScRsp" => {
                Some(Self::CmdTrainPartyHandlePendingActionScRsp)
            }
            "CmdTrainPartyGetDataCsReq" => Some(Self::CmdTrainPartyGetDataCsReq),
            "CmdTrainPartyBuildStartStepScRsp" => {
                Some(Self::CmdTrainPartyBuildStartStepScRsp)
            }
            "CmdTrainPartyHandlePendingActionCsReq" => {
                Some(Self::CmdTrainPartyHandlePendingActionCsReq)
            }
            "CmdTrainPartyBuildDiyCsReq" => Some(Self::CmdTrainPartyBuildDiyCsReq),
            "CmdTrainPartyGetDataScRsp" => Some(Self::CmdTrainPartyGetDataScRsp),
            "CmdTrainPartyUpdatePosEnvCsReq" => {
                Some(Self::CmdTrainPartyUpdatePosEnvCsReq)
            }
            "CmdTrainPartyBuildDiyScRsp" => Some(Self::CmdTrainPartyBuildDiyScRsp),
            "CmdTrainPartyLeaveCsReq" => Some(Self::CmdTrainPartyLeaveCsReq),
            "CmdTrainPartyAddBuildDynamicBuffScRsp" => {
                Some(Self::CmdTrainPartyAddBuildDynamicBuffScRsp)
            }
            "CmdTrainPartyBuildStartStepCsReq" => {
                Some(Self::CmdTrainPartyBuildStartStepCsReq)
            }
            "CmdTrainPartySyncUpdateScNotify" => {
                Some(Self::CmdTrainPartySyncUpdateScNotify)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Knoococanam {
    BuildGoalStepNone = 0,
    BuildGoalStepIdle = 1,
    BuildGoalStepStart = 2,
    BuildGoalStepFinish = 3,
}
impl Knoococanam {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::BuildGoalStepNone => "BuildGoalStepNone",
            Self::BuildGoalStepIdle => "BuildGoalStepIdle",
            Self::BuildGoalStepStart => "BuildGoalStepStart",
            Self::BuildGoalStepFinish => "BuildGoalStepFinish",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "BuildGoalStepNone" => Some(Self::BuildGoalStepNone),
            "BuildGoalStepIdle" => Some(Self::BuildGoalStepIdle),
            "BuildGoalStepStart" => Some(Self::BuildGoalStepStart),
            "BuildGoalStepFinish" => Some(Self::BuildGoalStepFinish),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Cbejajenohj {
    KTrainPartySrcNone = 0,
    KTrainPartySrcCard = 1,
    KTrainPartySrcGrid = 2,
    KTrainPartySrcPam = 3,
    KTrainPartySrcPassenger = 4,
    KTrainPartySrcBuilding = 5,
}
impl Cbejajenohj {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::KTrainPartySrcNone => "kTrainPartySrcNone",
            Self::KTrainPartySrcCard => "kTrainPartySrcCard",
            Self::KTrainPartySrcGrid => "kTrainPartySrcGrid",
            Self::KTrainPartySrcPam => "kTrainPartySrcPam",
            Self::KTrainPartySrcPassenger => "kTrainPartySrcPassenger",
            Self::KTrainPartySrcBuilding => "kTrainPartySrcBuilding",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "kTrainPartySrcNone" => Some(Self::KTrainPartySrcNone),
            "kTrainPartySrcCard" => Some(Self::KTrainPartySrcCard),
            "kTrainPartySrcGrid" => Some(Self::KTrainPartySrcGrid),
            "kTrainPartySrcPam" => Some(Self::KTrainPartySrcPam),
            "kTrainPartySrcPassenger" => Some(Self::KTrainPartySrcPassenger),
            "kTrainPartySrcBuilding" => Some(Self::KTrainPartySrcBuilding),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Ijdnojemian {
    KDialogueEventNone = 0,
    KGamePlayStartDialogueEvent = 1,
    KGridDialogueEvent = 2,
    KAfterMeetingDialogueEvent = 3,
}
impl Ijdnojemian {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::KDialogueEventNone => "kDialogueEventNone",
            Self::KGamePlayStartDialogueEvent => "kGamePlayStartDialogueEvent",
            Self::KGridDialogueEvent => "kGridDialogueEvent",
            Self::KAfterMeetingDialogueEvent => "kAfterMeetingDialogueEvent",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "kDialogueEventNone" => Some(Self::KDialogueEventNone),
            "kGamePlayStartDialogueEvent" => Some(Self::KGamePlayStartDialogueEvent),
            "kGridDialogueEvent" => Some(Self::KGridDialogueEvent),
            "kAfterMeetingDialogueEvent" => Some(Self::KAfterMeetingDialogueEvent),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Lcdemgacekd {
    KMtSkillNone = 0,
    KMtSkillModifyBase = 1,
    KMtSkillModifyRatio = 2,
    KMtSkillMultiplyRatio = 3,
    KMtSkillSelfDestroy = 4,
}
impl Lcdemgacekd {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::KMtSkillNone => "kMtSkillNone",
            Self::KMtSkillModifyBase => "kMtSkillModifyBase",
            Self::KMtSkillModifyRatio => "kMtSkillModifyRatio",
            Self::KMtSkillMultiplyRatio => "kMtSkillMultiplyRatio",
            Self::KMtSkillSelfDestroy => "kMtSkillSelfDestroy",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "kMtSkillNone" => Some(Self::KMtSkillNone),
            "kMtSkillModifyBase" => Some(Self::KMtSkillModifyBase),
            "kMtSkillModifyRatio" => Some(Self::KMtSkillModifyRatio),
            "kMtSkillMultiplyRatio" => Some(Self::KMtSkillMultiplyRatio),
            "kMtSkillSelfDestroy" => Some(Self::KMtSkillSelfDestroy),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Dmlcpakdblj {
    TrainPartyMtCategoryNone = 0,
    TrainPartyMtCategoryS = 1,
    TrainPartyMtCategoryA = 2,
    TrainPartyMtCategoryB = 3,
    TrainPartyMtCategoryC = 4,
    TrainPartyMtCategoryD = 5,
    TrainPartyMtCategoryE = 6,
    TrainPartyMtCategoryF = 7,
    TrainPartyMtCategoryG = 8,
}
impl Dmlcpakdblj {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::TrainPartyMtCategoryNone => "TRAIN_PARTY_MT_CATEGORY_NONE",
            Self::TrainPartyMtCategoryS => "TRAIN_PARTY_MT_CATEGORY_S",
            Self::TrainPartyMtCategoryA => "TRAIN_PARTY_MT_CATEGORY_A",
            Self::TrainPartyMtCategoryB => "TRAIN_PARTY_MT_CATEGORY_B",
            Self::TrainPartyMtCategoryC => "TRAIN_PARTY_MT_CATEGORY_C",
            Self::TrainPartyMtCategoryD => "TRAIN_PARTY_MT_CATEGORY_D",
            Self::TrainPartyMtCategoryE => "TRAIN_PARTY_MT_CATEGORY_E",
            Self::TrainPartyMtCategoryF => "TRAIN_PARTY_MT_CATEGORY_F",
            Self::TrainPartyMtCategoryG => "TRAIN_PARTY_MT_CATEGORY_G",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "TRAIN_PARTY_MT_CATEGORY_NONE" => Some(Self::TrainPartyMtCategoryNone),
            "TRAIN_PARTY_MT_CATEGORY_S" => Some(Self::TrainPartyMtCategoryS),
            "TRAIN_PARTY_MT_CATEGORY_A" => Some(Self::TrainPartyMtCategoryA),
            "TRAIN_PARTY_MT_CATEGORY_B" => Some(Self::TrainPartyMtCategoryB),
            "TRAIN_PARTY_MT_CATEGORY_C" => Some(Self::TrainPartyMtCategoryC),
            "TRAIN_PARTY_MT_CATEGORY_D" => Some(Self::TrainPartyMtCategoryD),
            "TRAIN_PARTY_MT_CATEGORY_E" => Some(Self::TrainPartyMtCategoryE),
            "TRAIN_PARTY_MT_CATEGORY_F" => Some(Self::TrainPartyMtCategoryF),
            "TRAIN_PARTY_MT_CATEGORY_G" => Some(Self::TrainPartyMtCategoryG),
            _ => None,
        }
    }
}
/// OIAGEBFDEKH
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdTrainVisitorType {
    None = 0,
    CmdTrainVisitorBehaviorFinishCsReq = 3701,
    CmdTrainVisitorRewardSendNotify = 3756,
    CmdTrainRefreshTimeNotify = 3730,
    CmdGetTrainVisitorBehaviorScRsp = 3724,
    CmdGetTrainVisitorRegisterScRsp = 3776,
    CmdTakeTrainVisitorUntakenBehaviorRewardScRsp = 3711,
    CmdShowNewSupplementVisitorScRsp = 3714,
    CmdTakeTrainVisitorUntakenBehaviorRewardCsReq = 3728,
    CmdShowNewSupplementVisitorCsReq = 3705,
    CmdGetTrainVisitorRegisterCsReq = 3797,
    CmdGetTrainVisitorBehaviorCsReq = 3758,
    CmdTrainVisitorBehaviorFinishScRsp = 3768,
}
impl CmdTrainVisitorType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdTrainVisitorTypeNone",
            Self::CmdTrainVisitorBehaviorFinishCsReq => {
                "CmdTrainVisitorBehaviorFinishCsReq"
            }
            Self::CmdTrainVisitorRewardSendNotify => "CmdTrainVisitorRewardSendNotify",
            Self::CmdTrainRefreshTimeNotify => "CmdTrainRefreshTimeNotify",
            Self::CmdGetTrainVisitorBehaviorScRsp => "CmdGetTrainVisitorBehaviorScRsp",
            Self::CmdGetTrainVisitorRegisterScRsp => "CmdGetTrainVisitorRegisterScRsp",
            Self::CmdTakeTrainVisitorUntakenBehaviorRewardScRsp => {
                "CmdTakeTrainVisitorUntakenBehaviorRewardScRsp"
            }
            Self::CmdShowNewSupplementVisitorScRsp => "CmdShowNewSupplementVisitorScRsp",
            Self::CmdTakeTrainVisitorUntakenBehaviorRewardCsReq => {
                "CmdTakeTrainVisitorUntakenBehaviorRewardCsReq"
            }
            Self::CmdShowNewSupplementVisitorCsReq => "CmdShowNewSupplementVisitorCsReq",
            Self::CmdGetTrainVisitorRegisterCsReq => "CmdGetTrainVisitorRegisterCsReq",
            Self::CmdGetTrainVisitorBehaviorCsReq => "CmdGetTrainVisitorBehaviorCsReq",
            Self::CmdTrainVisitorBehaviorFinishScRsp => {
                "CmdTrainVisitorBehaviorFinishScRsp"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdTrainVisitorTypeNone" => Some(Self::None),
            "CmdTrainVisitorBehaviorFinishCsReq" => {
                Some(Self::CmdTrainVisitorBehaviorFinishCsReq)
            }
            "CmdTrainVisitorRewardSendNotify" => {
                Some(Self::CmdTrainVisitorRewardSendNotify)
            }
            "CmdTrainRefreshTimeNotify" => Some(Self::CmdTrainRefreshTimeNotify),
            "CmdGetTrainVisitorBehaviorScRsp" => {
                Some(Self::CmdGetTrainVisitorBehaviorScRsp)
            }
            "CmdGetTrainVisitorRegisterScRsp" => {
                Some(Self::CmdGetTrainVisitorRegisterScRsp)
            }
            "CmdTakeTrainVisitorUntakenBehaviorRewardScRsp" => {
                Some(Self::CmdTakeTrainVisitorUntakenBehaviorRewardScRsp)
            }
            "CmdShowNewSupplementVisitorScRsp" => {
                Some(Self::CmdShowNewSupplementVisitorScRsp)
            }
            "CmdTakeTrainVisitorUntakenBehaviorRewardCsReq" => {
                Some(Self::CmdTakeTrainVisitorUntakenBehaviorRewardCsReq)
            }
            "CmdShowNewSupplementVisitorCsReq" => {
                Some(Self::CmdShowNewSupplementVisitorCsReq)
            }
            "CmdGetTrainVisitorRegisterCsReq" => {
                Some(Self::CmdGetTrainVisitorRegisterCsReq)
            }
            "CmdGetTrainVisitorBehaviorCsReq" => {
                Some(Self::CmdGetTrainVisitorBehaviorCsReq)
            }
            "CmdTrainVisitorBehaviorFinishScRsp" => {
                Some(Self::CmdTrainVisitorBehaviorFinishScRsp)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Iippjkhmpch {
    TrainVisitorRewardSendNone = 0,
    TrainVisitorRewardSendRegister = 1,
    TrainVisitorRewardSendMission = 2,
}
impl Iippjkhmpch {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::TrainVisitorRewardSendNone => "TRAIN_VISITOR_REWARD_SEND_NONE",
            Self::TrainVisitorRewardSendRegister => "TRAIN_VISITOR_REWARD_SEND_REGISTER",
            Self::TrainVisitorRewardSendMission => "TRAIN_VISITOR_REWARD_SEND_MISSION",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "TRAIN_VISITOR_REWARD_SEND_NONE" => Some(Self::TrainVisitorRewardSendNone),
            "TRAIN_VISITOR_REWARD_SEND_REGISTER" => {
                Some(Self::TrainVisitorRewardSendRegister)
            }
            "TRAIN_VISITOR_REWARD_SEND_MISSION" => {
                Some(Self::TrainVisitorRewardSendMission)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Llmibdpfjnd {
    TrainVisitorStatusNone = 0,
    TrainVisitorStatusInit = 1,
    TrainVisitorStatusGetOn = 2,
    TrainVisitorStatusGetOff = 3,
    TrainVisitorStatusBeTrainMember = 4,
}
impl Llmibdpfjnd {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::TrainVisitorStatusNone => "TRAIN_VISITOR_STATUS_NONE",
            Self::TrainVisitorStatusInit => "TRAIN_VISITOR_STATUS_INIT",
            Self::TrainVisitorStatusGetOn => "TRAIN_VISITOR_STATUS_GET_ON",
            Self::TrainVisitorStatusGetOff => "TRAIN_VISITOR_STATUS_GET_OFF",
            Self::TrainVisitorStatusBeTrainMember => {
                "TRAIN_VISITOR_STATUS_BE_TRAIN_MEMBER"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "TRAIN_VISITOR_STATUS_NONE" => Some(Self::TrainVisitorStatusNone),
            "TRAIN_VISITOR_STATUS_INIT" => Some(Self::TrainVisitorStatusInit),
            "TRAIN_VISITOR_STATUS_GET_ON" => Some(Self::TrainVisitorStatusGetOn),
            "TRAIN_VISITOR_STATUS_GET_OFF" => Some(Self::TrainVisitorStatusGetOff),
            "TRAIN_VISITOR_STATUS_BE_TRAIN_MEMBER" => {
                Some(Self::TrainVisitorStatusBeTrainMember)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Jfjjfgaeoab {
    TrainVisitorRegisterGetTypeNone = 0,
    TrainVisitorRegisterGetTypeAuto = 1,
    TrainVisitorRegisterGetTypeManual = 2,
}
impl Jfjjfgaeoab {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::TrainVisitorRegisterGetTypeNone => {
                "TRAIN_VISITOR_REGISTER_GET_TYPE_NONE"
            }
            Self::TrainVisitorRegisterGetTypeAuto => {
                "TRAIN_VISITOR_REGISTER_GET_TYPE_AUTO"
            }
            Self::TrainVisitorRegisterGetTypeManual => {
                "TRAIN_VISITOR_REGISTER_GET_TYPE_MANUAL"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "TRAIN_VISITOR_REGISTER_GET_TYPE_NONE" => {
                Some(Self::TrainVisitorRegisterGetTypeNone)
            }
            "TRAIN_VISITOR_REGISTER_GET_TYPE_AUTO" => {
                Some(Self::TrainVisitorRegisterGetTypeAuto)
            }
            "TRAIN_VISITOR_REGISTER_GET_TYPE_MANUAL" => {
                Some(Self::TrainVisitorRegisterGetTypeManual)
            }
            _ => None,
        }
    }
}
/// JOABLEACIAD
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdTravelBrochureType {
    CmdTravelBrochureNone = 0,
    CmdTravelBrochureApplyPasterCsReq = 6497,
    CmdTravelBrochureGetDataCsReq = 6401,
    CmdTravelBrochurePageResetCsReq = 6423,
    CmdTravelBrochureSetCustomValueCsReq = 6447,
    CmdTravelBrochureRemovePasterCsReq = 6428,
    CmdTravelBrochureApplyPasterListCsReq = 6417,
    CmdTravelBrochureRemovePasterScRsp = 6411,
    CmdTravelBrochurePageUnlockScNotify = 6458,
    CmdTravelBrochureApplyPasterListScRsp = 6491,
    CmdTravelBrochureSelectMessageScRsp = 6456,
    CmdTravelBrochureApplyPasterScRsp = 6476,
    CmdTravelBrochurePageResetScRsp = 6412,
    CmdTravelBrochureSetCustomValueScRsp = 6480,
    CmdTravelBrochureUpdatePasterPosScRsp = 6414,
    CmdTravelBrochureGetPasterScNotify = 6449,
    CmdTravelBrochureSelectMessageCsReq = 6430,
    CmdTravelBrochureSetPageDescStatusCsReq = 6439,
    CmdTravelBrochureUpdatePasterPosCsReq = 6405,
    CmdTravelBrochureGetDataScRsp = 6468,
    CmdTravelBrochureSetPageDescStatusScRsp = 6496,
}
impl CmdTravelBrochureType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::CmdTravelBrochureNone => "CmdTravelBrochureNone",
            Self::CmdTravelBrochureApplyPasterCsReq => {
                "CmdTravelBrochureApplyPasterCsReq"
            }
            Self::CmdTravelBrochureGetDataCsReq => "CmdTravelBrochureGetDataCsReq",
            Self::CmdTravelBrochurePageResetCsReq => "CmdTravelBrochurePageResetCsReq",
            Self::CmdTravelBrochureSetCustomValueCsReq => {
                "CmdTravelBrochureSetCustomValueCsReq"
            }
            Self::CmdTravelBrochureRemovePasterCsReq => {
                "CmdTravelBrochureRemovePasterCsReq"
            }
            Self::CmdTravelBrochureApplyPasterListCsReq => {
                "CmdTravelBrochureApplyPasterListCsReq"
            }
            Self::CmdTravelBrochureRemovePasterScRsp => {
                "CmdTravelBrochureRemovePasterScRsp"
            }
            Self::CmdTravelBrochurePageUnlockScNotify => {
                "CmdTravelBrochurePageUnlockScNotify"
            }
            Self::CmdTravelBrochureApplyPasterListScRsp => {
                "CmdTravelBrochureApplyPasterListScRsp"
            }
            Self::CmdTravelBrochureSelectMessageScRsp => {
                "CmdTravelBrochureSelectMessageScRsp"
            }
            Self::CmdTravelBrochureApplyPasterScRsp => {
                "CmdTravelBrochureApplyPasterScRsp"
            }
            Self::CmdTravelBrochurePageResetScRsp => "CmdTravelBrochurePageResetScRsp",
            Self::CmdTravelBrochureSetCustomValueScRsp => {
                "CmdTravelBrochureSetCustomValueScRsp"
            }
            Self::CmdTravelBrochureUpdatePasterPosScRsp => {
                "CmdTravelBrochureUpdatePasterPosScRsp"
            }
            Self::CmdTravelBrochureGetPasterScNotify => {
                "CmdTravelBrochureGetPasterScNotify"
            }
            Self::CmdTravelBrochureSelectMessageCsReq => {
                "CmdTravelBrochureSelectMessageCsReq"
            }
            Self::CmdTravelBrochureSetPageDescStatusCsReq => {
                "CmdTravelBrochureSetPageDescStatusCsReq"
            }
            Self::CmdTravelBrochureUpdatePasterPosCsReq => {
                "CmdTravelBrochureUpdatePasterPosCsReq"
            }
            Self::CmdTravelBrochureGetDataScRsp => "CmdTravelBrochureGetDataScRsp",
            Self::CmdTravelBrochureSetPageDescStatusScRsp => {
                "CmdTravelBrochureSetPageDescStatusScRsp"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdTravelBrochureNone" => Some(Self::CmdTravelBrochureNone),
            "CmdTravelBrochureApplyPasterCsReq" => {
                Some(Self::CmdTravelBrochureApplyPasterCsReq)
            }
            "CmdTravelBrochureGetDataCsReq" => Some(Self::CmdTravelBrochureGetDataCsReq),
            "CmdTravelBrochurePageResetCsReq" => {
                Some(Self::CmdTravelBrochurePageResetCsReq)
            }
            "CmdTravelBrochureSetCustomValueCsReq" => {
                Some(Self::CmdTravelBrochureSetCustomValueCsReq)
            }
            "CmdTravelBrochureRemovePasterCsReq" => {
                Some(Self::CmdTravelBrochureRemovePasterCsReq)
            }
            "CmdTravelBrochureApplyPasterListCsReq" => {
                Some(Self::CmdTravelBrochureApplyPasterListCsReq)
            }
            "CmdTravelBrochureRemovePasterScRsp" => {
                Some(Self::CmdTravelBrochureRemovePasterScRsp)
            }
            "CmdTravelBrochurePageUnlockScNotify" => {
                Some(Self::CmdTravelBrochurePageUnlockScNotify)
            }
            "CmdTravelBrochureApplyPasterListScRsp" => {
                Some(Self::CmdTravelBrochureApplyPasterListScRsp)
            }
            "CmdTravelBrochureSelectMessageScRsp" => {
                Some(Self::CmdTravelBrochureSelectMessageScRsp)
            }
            "CmdTravelBrochureApplyPasterScRsp" => {
                Some(Self::CmdTravelBrochureApplyPasterScRsp)
            }
            "CmdTravelBrochurePageResetScRsp" => {
                Some(Self::CmdTravelBrochurePageResetScRsp)
            }
            "CmdTravelBrochureSetCustomValueScRsp" => {
                Some(Self::CmdTravelBrochureSetCustomValueScRsp)
            }
            "CmdTravelBrochureUpdatePasterPosScRsp" => {
                Some(Self::CmdTravelBrochureUpdatePasterPosScRsp)
            }
            "CmdTravelBrochureGetPasterScNotify" => {
                Some(Self::CmdTravelBrochureGetPasterScNotify)
            }
            "CmdTravelBrochureSelectMessageCsReq" => {
                Some(Self::CmdTravelBrochureSelectMessageCsReq)
            }
            "CmdTravelBrochureSetPageDescStatusCsReq" => {
                Some(Self::CmdTravelBrochureSetPageDescStatusCsReq)
            }
            "CmdTravelBrochureUpdatePasterPosCsReq" => {
                Some(Self::CmdTravelBrochureUpdatePasterPosCsReq)
            }
            "CmdTravelBrochureGetDataScRsp" => Some(Self::CmdTravelBrochureGetDataScRsp),
            "CmdTravelBrochureSetPageDescStatusScRsp" => {
                Some(Self::CmdTravelBrochureSetPageDescStatusScRsp)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Hgkkppljboi {
    PageNone = 0,
    PageUnlocked = 1,
    PageInteracted = 2,
}
impl Hgkkppljboi {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::PageNone => "PAGE_NONE",
            Self::PageUnlocked => "PAGE_UNLOCKED",
            Self::PageInteracted => "PAGE_INTERACTED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PAGE_NONE" => Some(Self::PageNone),
            "PAGE_UNLOCKED" => Some(Self::PageUnlocked),
            "PAGE_INTERACTED" => Some(Self::PageInteracted),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Dcjaopdinoi {
    PageDescNone = 0,
    PageDescShowDetail = 1,
    PageDescCollapse = 2,
}
impl Dcjaopdinoi {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::PageDescNone => "PAGE_DESC_NONE",
            Self::PageDescShowDetail => "PAGE_DESC_SHOW_DETAIL",
            Self::PageDescCollapse => "PAGE_DESC_COLLAPSE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PAGE_DESC_NONE" => Some(Self::PageDescNone),
            "PAGE_DESC_SHOW_DETAIL" => Some(Self::PageDescShowDetail),
            "PAGE_DESC_COLLAPSE" => Some(Self::PageDescCollapse),
            _ => None,
        }
    }
}
/// MCPHEHAOLOJ
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdTreasureDungeonType {
    None = 0,
    CmdUseTreasureDungeonItemCsReq = 4417,
    CmdInteractTreasureDungeonGridCsReq = 4423,
    CmdGetTreasureDungeonActivityDataCsReq = 4405,
    CmdOpenTreasureDungeonGridScRsp = 4480,
    CmdGetTreasureDungeonActivityDataScRsp = 4414,
    CmdQuitTreasureDungeonScRsp = 4495,
    CmdTreasureDungeonFinishScNotify = 4468,
    CmdEnterTreasureDungeonCsReq = 4449,
    CmdInteractTreasureDungeonGridScRsp = 4412,
    CmdQuitTreasureDungeonCsReq = 4418,
    CmdOpenTreasureDungeonGridCsReq = 4447,
    CmdUseTreasureDungeonItemScRsp = 4491,
    CmdEnterTreasureDungeonScRsp = 4422,
    CmdFightTreasureDungeonMonsterCsReq = 4439,
    CmdFightTreasureDungeonMonsterScRsp = 4496,
    CmdTreasureDungeonDataScNotify = 4401,
}
impl CmdTreasureDungeonType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdTreasureDungeonTypeNone",
            Self::CmdUseTreasureDungeonItemCsReq => "CmdUseTreasureDungeonItemCsReq",
            Self::CmdInteractTreasureDungeonGridCsReq => {
                "CmdInteractTreasureDungeonGridCsReq"
            }
            Self::CmdGetTreasureDungeonActivityDataCsReq => {
                "CmdGetTreasureDungeonActivityDataCsReq"
            }
            Self::CmdOpenTreasureDungeonGridScRsp => "CmdOpenTreasureDungeonGridScRsp",
            Self::CmdGetTreasureDungeonActivityDataScRsp => {
                "CmdGetTreasureDungeonActivityDataScRsp"
            }
            Self::CmdQuitTreasureDungeonScRsp => "CmdQuitTreasureDungeonScRsp",
            Self::CmdTreasureDungeonFinishScNotify => "CmdTreasureDungeonFinishScNotify",
            Self::CmdEnterTreasureDungeonCsReq => "CmdEnterTreasureDungeonCsReq",
            Self::CmdInteractTreasureDungeonGridScRsp => {
                "CmdInteractTreasureDungeonGridScRsp"
            }
            Self::CmdQuitTreasureDungeonCsReq => "CmdQuitTreasureDungeonCsReq",
            Self::CmdOpenTreasureDungeonGridCsReq => "CmdOpenTreasureDungeonGridCsReq",
            Self::CmdUseTreasureDungeonItemScRsp => "CmdUseTreasureDungeonItemScRsp",
            Self::CmdEnterTreasureDungeonScRsp => "CmdEnterTreasureDungeonScRsp",
            Self::CmdFightTreasureDungeonMonsterCsReq => {
                "CmdFightTreasureDungeonMonsterCsReq"
            }
            Self::CmdFightTreasureDungeonMonsterScRsp => {
                "CmdFightTreasureDungeonMonsterScRsp"
            }
            Self::CmdTreasureDungeonDataScNotify => "CmdTreasureDungeonDataScNotify",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdTreasureDungeonTypeNone" => Some(Self::None),
            "CmdUseTreasureDungeonItemCsReq" => {
                Some(Self::CmdUseTreasureDungeonItemCsReq)
            }
            "CmdInteractTreasureDungeonGridCsReq" => {
                Some(Self::CmdInteractTreasureDungeonGridCsReq)
            }
            "CmdGetTreasureDungeonActivityDataCsReq" => {
                Some(Self::CmdGetTreasureDungeonActivityDataCsReq)
            }
            "CmdOpenTreasureDungeonGridScRsp" => {
                Some(Self::CmdOpenTreasureDungeonGridScRsp)
            }
            "CmdGetTreasureDungeonActivityDataScRsp" => {
                Some(Self::CmdGetTreasureDungeonActivityDataScRsp)
            }
            "CmdQuitTreasureDungeonScRsp" => Some(Self::CmdQuitTreasureDungeonScRsp),
            "CmdTreasureDungeonFinishScNotify" => {
                Some(Self::CmdTreasureDungeonFinishScNotify)
            }
            "CmdEnterTreasureDungeonCsReq" => Some(Self::CmdEnterTreasureDungeonCsReq),
            "CmdInteractTreasureDungeonGridScRsp" => {
                Some(Self::CmdInteractTreasureDungeonGridScRsp)
            }
            "CmdQuitTreasureDungeonCsReq" => Some(Self::CmdQuitTreasureDungeonCsReq),
            "CmdOpenTreasureDungeonGridCsReq" => {
                Some(Self::CmdOpenTreasureDungeonGridCsReq)
            }
            "CmdUseTreasureDungeonItemScRsp" => {
                Some(Self::CmdUseTreasureDungeonItemScRsp)
            }
            "CmdEnterTreasureDungeonScRsp" => Some(Self::CmdEnterTreasureDungeonScRsp),
            "CmdFightTreasureDungeonMonsterCsReq" => {
                Some(Self::CmdFightTreasureDungeonMonsterCsReq)
            }
            "CmdFightTreasureDungeonMonsterScRsp" => {
                Some(Self::CmdFightTreasureDungeonMonsterScRsp)
            }
            "CmdTreasureDungeonDataScNotify" => {
                Some(Self::CmdTreasureDungeonDataScNotify)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Imknbjcoiop {
    TreasureDungeonRecordNone = 0,
    TreasureDungeonRecordAddHp = 1,
    TreasureDungeonRecordSubHp = 2,
    TreasureDungeonRecordSubHpNoExplore = 3,
    TreasureDungeonRecordAddAttack = 5,
    TreasureDungeonRecordAddDefence = 6,
    TreasureDungeonRecordAddExplore = 9,
    TreasureDungeonRecordSubExplore = 10,
    TreasureDungeonRecordAddExploreOverflow = 11,
    TreasureDungeonRecordSummon = 15,
    TreasureDungeonRecordKill = 16,
    TreasureDungeonRecordAddTrialAvatar = 20,
    TreasureDungeonRecordAddBuff = 24,
    TreasureDungeonRecordUnlockDoor = 25,
    TreasureDungeonRecordEnemyEnhance = 27,
    TreasureDungeonRecordEnemyWeaken = 28,
    TreasureDungeonRecordEnemyAuraRemove = 29,
    TreasureDungeonRecordSpecialMonsterRun = 30,
    TreasureDungeonRecordSpecialMonsterKill = 31,
    TreasureDungeonRecordBattleBuffTriggerSuccess = 33,
    TreasureDungeonRecordBattleBuffTriggerFail = 34,
    TreasureDungeonRecordBattleBuffAddExplore = 35,
    TreasureDungeonRecordBattleBuffOpenGrid = 36,
    TreasureDungeonRecordBattleBuffAddItem = 37,
    TreasureDungeonRecordAvatarDead = 40,
    TreasureDungeonRecordTrialAvatarDead = 41,
    TreasureDungeonRecordAllAvatarDead = 42,
    TreasureDungeonRecordOpenItemChest = 43,
}
impl Imknbjcoiop {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::TreasureDungeonRecordNone => "TREASURE_DUNGEON_RECORD_NONE",
            Self::TreasureDungeonRecordAddHp => "TREASURE_DUNGEON_RECORD_ADD_HP",
            Self::TreasureDungeonRecordSubHp => "TREASURE_DUNGEON_RECORD_SUB_HP",
            Self::TreasureDungeonRecordSubHpNoExplore => {
                "TREASURE_DUNGEON_RECORD_SUB_HP_NO_EXPLORE"
            }
            Self::TreasureDungeonRecordAddAttack => "TREASURE_DUNGEON_RECORD_ADD_ATTACK",
            Self::TreasureDungeonRecordAddDefence => {
                "TREASURE_DUNGEON_RECORD_ADD_DEFENCE"
            }
            Self::TreasureDungeonRecordAddExplore => {
                "TREASURE_DUNGEON_RECORD_ADD_EXPLORE"
            }
            Self::TreasureDungeonRecordSubExplore => {
                "TREASURE_DUNGEON_RECORD_SUB_EXPLORE"
            }
            Self::TreasureDungeonRecordAddExploreOverflow => {
                "TREASURE_DUNGEON_RECORD_ADD_EXPLORE_OVERFLOW"
            }
            Self::TreasureDungeonRecordSummon => "TREASURE_DUNGEON_RECORD_SUMMON",
            Self::TreasureDungeonRecordKill => "TREASURE_DUNGEON_RECORD_KILL",
            Self::TreasureDungeonRecordAddTrialAvatar => {
                "TREASURE_DUNGEON_RECORD_ADD_TRIAL_AVATAR"
            }
            Self::TreasureDungeonRecordAddBuff => "TREASURE_DUNGEON_RECORD_ADD_BUFF",
            Self::TreasureDungeonRecordUnlockDoor => {
                "TREASURE_DUNGEON_RECORD_UNLOCK_DOOR"
            }
            Self::TreasureDungeonRecordEnemyEnhance => {
                "TREASURE_DUNGEON_RECORD_ENEMY_ENHANCE"
            }
            Self::TreasureDungeonRecordEnemyWeaken => {
                "TREASURE_DUNGEON_RECORD_ENEMY_WEAKEN"
            }
            Self::TreasureDungeonRecordEnemyAuraRemove => {
                "TREASURE_DUNGEON_RECORD_ENEMY_AURA_REMOVE"
            }
            Self::TreasureDungeonRecordSpecialMonsterRun => {
                "TREASURE_DUNGEON_RECORD_SPECIAL_MONSTER_RUN"
            }
            Self::TreasureDungeonRecordSpecialMonsterKill => {
                "TREASURE_DUNGEON_RECORD_SPECIAL_MONSTER_KILL"
            }
            Self::TreasureDungeonRecordBattleBuffTriggerSuccess => {
                "TREASURE_DUNGEON_RECORD_BATTLE_BUFF_TRIGGER_SUCCESS"
            }
            Self::TreasureDungeonRecordBattleBuffTriggerFail => {
                "TREASURE_DUNGEON_RECORD_BATTLE_BUFF_TRIGGER_FAIL"
            }
            Self::TreasureDungeonRecordBattleBuffAddExplore => {
                "TREASURE_DUNGEON_RECORD_BATTLE_BUFF_ADD_EXPLORE"
            }
            Self::TreasureDungeonRecordBattleBuffOpenGrid => {
                "TREASURE_DUNGEON_RECORD_BATTLE_BUFF_OPEN_GRID"
            }
            Self::TreasureDungeonRecordBattleBuffAddItem => {
                "TREASURE_DUNGEON_RECORD_BATTLE_BUFF_ADD_ITEM"
            }
            Self::TreasureDungeonRecordAvatarDead => {
                "TREASURE_DUNGEON_RECORD_AVATAR_DEAD"
            }
            Self::TreasureDungeonRecordTrialAvatarDead => {
                "TREASURE_DUNGEON_RECORD_TRIAL_AVATAR_DEAD"
            }
            Self::TreasureDungeonRecordAllAvatarDead => {
                "TREASURE_DUNGEON_RECORD_ALL_AVATAR_DEAD"
            }
            Self::TreasureDungeonRecordOpenItemChest => {
                "TREASURE_DUNGEON_RECORD_OPEN_ITEM_CHEST"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "TREASURE_DUNGEON_RECORD_NONE" => Some(Self::TreasureDungeonRecordNone),
            "TREASURE_DUNGEON_RECORD_ADD_HP" => Some(Self::TreasureDungeonRecordAddHp),
            "TREASURE_DUNGEON_RECORD_SUB_HP" => Some(Self::TreasureDungeonRecordSubHp),
            "TREASURE_DUNGEON_RECORD_SUB_HP_NO_EXPLORE" => {
                Some(Self::TreasureDungeonRecordSubHpNoExplore)
            }
            "TREASURE_DUNGEON_RECORD_ADD_ATTACK" => {
                Some(Self::TreasureDungeonRecordAddAttack)
            }
            "TREASURE_DUNGEON_RECORD_ADD_DEFENCE" => {
                Some(Self::TreasureDungeonRecordAddDefence)
            }
            "TREASURE_DUNGEON_RECORD_ADD_EXPLORE" => {
                Some(Self::TreasureDungeonRecordAddExplore)
            }
            "TREASURE_DUNGEON_RECORD_SUB_EXPLORE" => {
                Some(Self::TreasureDungeonRecordSubExplore)
            }
            "TREASURE_DUNGEON_RECORD_ADD_EXPLORE_OVERFLOW" => {
                Some(Self::TreasureDungeonRecordAddExploreOverflow)
            }
            "TREASURE_DUNGEON_RECORD_SUMMON" => Some(Self::TreasureDungeonRecordSummon),
            "TREASURE_DUNGEON_RECORD_KILL" => Some(Self::TreasureDungeonRecordKill),
            "TREASURE_DUNGEON_RECORD_ADD_TRIAL_AVATAR" => {
                Some(Self::TreasureDungeonRecordAddTrialAvatar)
            }
            "TREASURE_DUNGEON_RECORD_ADD_BUFF" => {
                Some(Self::TreasureDungeonRecordAddBuff)
            }
            "TREASURE_DUNGEON_RECORD_UNLOCK_DOOR" => {
                Some(Self::TreasureDungeonRecordUnlockDoor)
            }
            "TREASURE_DUNGEON_RECORD_ENEMY_ENHANCE" => {
                Some(Self::TreasureDungeonRecordEnemyEnhance)
            }
            "TREASURE_DUNGEON_RECORD_ENEMY_WEAKEN" => {
                Some(Self::TreasureDungeonRecordEnemyWeaken)
            }
            "TREASURE_DUNGEON_RECORD_ENEMY_AURA_REMOVE" => {
                Some(Self::TreasureDungeonRecordEnemyAuraRemove)
            }
            "TREASURE_DUNGEON_RECORD_SPECIAL_MONSTER_RUN" => {
                Some(Self::TreasureDungeonRecordSpecialMonsterRun)
            }
            "TREASURE_DUNGEON_RECORD_SPECIAL_MONSTER_KILL" => {
                Some(Self::TreasureDungeonRecordSpecialMonsterKill)
            }
            "TREASURE_DUNGEON_RECORD_BATTLE_BUFF_TRIGGER_SUCCESS" => {
                Some(Self::TreasureDungeonRecordBattleBuffTriggerSuccess)
            }
            "TREASURE_DUNGEON_RECORD_BATTLE_BUFF_TRIGGER_FAIL" => {
                Some(Self::TreasureDungeonRecordBattleBuffTriggerFail)
            }
            "TREASURE_DUNGEON_RECORD_BATTLE_BUFF_ADD_EXPLORE" => {
                Some(Self::TreasureDungeonRecordBattleBuffAddExplore)
            }
            "TREASURE_DUNGEON_RECORD_BATTLE_BUFF_OPEN_GRID" => {
                Some(Self::TreasureDungeonRecordBattleBuffOpenGrid)
            }
            "TREASURE_DUNGEON_RECORD_BATTLE_BUFF_ADD_ITEM" => {
                Some(Self::TreasureDungeonRecordBattleBuffAddItem)
            }
            "TREASURE_DUNGEON_RECORD_AVATAR_DEAD" => {
                Some(Self::TreasureDungeonRecordAvatarDead)
            }
            "TREASURE_DUNGEON_RECORD_TRIAL_AVATAR_DEAD" => {
                Some(Self::TreasureDungeonRecordTrialAvatarDead)
            }
            "TREASURE_DUNGEON_RECORD_ALL_AVATAR_DEAD" => {
                Some(Self::TreasureDungeonRecordAllAvatarDead)
            }
            "TREASURE_DUNGEON_RECORD_OPEN_ITEM_CHEST" => {
                Some(Self::TreasureDungeonRecordOpenItemChest)
            }
            _ => None,
        }
    }
}
/// PEPFOMECOON
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdTutorialType {
    None = 0,
    CmdFinishTutorialScRsp = 1611,
    CmdGetTutorialScRsp = 1668,
    CmdFinishTutorialGuideScRsp = 1614,
    CmdGetTutorialGuideCsReq = 1658,
    CmdFinishTutorialCsReq = 1628,
    CmdFinishTutorialGuideCsReq = 1605,
    CmdUnlockTutorialCsReq = 1630,
    CmdGetTutorialCsReq = 1601,
    CmdUnlockTutorialGuideCsReq = 1697,
    CmdUnlockTutorialScRsp = 1656,
    CmdUnlockTutorialGuideScRsp = 1676,
    CmdGetTutorialGuideScRsp = 1624,
}
impl CmdTutorialType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdTutorialTypeNone",
            Self::CmdFinishTutorialScRsp => "CmdFinishTutorialScRsp",
            Self::CmdGetTutorialScRsp => "CmdGetTutorialScRsp",
            Self::CmdFinishTutorialGuideScRsp => "CmdFinishTutorialGuideScRsp",
            Self::CmdGetTutorialGuideCsReq => "CmdGetTutorialGuideCsReq",
            Self::CmdFinishTutorialCsReq => "CmdFinishTutorialCsReq",
            Self::CmdFinishTutorialGuideCsReq => "CmdFinishTutorialGuideCsReq",
            Self::CmdUnlockTutorialCsReq => "CmdUnlockTutorialCsReq",
            Self::CmdGetTutorialCsReq => "CmdGetTutorialCsReq",
            Self::CmdUnlockTutorialGuideCsReq => "CmdUnlockTutorialGuideCsReq",
            Self::CmdUnlockTutorialScRsp => "CmdUnlockTutorialScRsp",
            Self::CmdUnlockTutorialGuideScRsp => "CmdUnlockTutorialGuideScRsp",
            Self::CmdGetTutorialGuideScRsp => "CmdGetTutorialGuideScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdTutorialTypeNone" => Some(Self::None),
            "CmdFinishTutorialScRsp" => Some(Self::CmdFinishTutorialScRsp),
            "CmdGetTutorialScRsp" => Some(Self::CmdGetTutorialScRsp),
            "CmdFinishTutorialGuideScRsp" => Some(Self::CmdFinishTutorialGuideScRsp),
            "CmdGetTutorialGuideCsReq" => Some(Self::CmdGetTutorialGuideCsReq),
            "CmdFinishTutorialCsReq" => Some(Self::CmdFinishTutorialCsReq),
            "CmdFinishTutorialGuideCsReq" => Some(Self::CmdFinishTutorialGuideCsReq),
            "CmdUnlockTutorialCsReq" => Some(Self::CmdUnlockTutorialCsReq),
            "CmdGetTutorialCsReq" => Some(Self::CmdGetTutorialCsReq),
            "CmdUnlockTutorialGuideCsReq" => Some(Self::CmdUnlockTutorialGuideCsReq),
            "CmdUnlockTutorialScRsp" => Some(Self::CmdUnlockTutorialScRsp),
            "CmdUnlockTutorialGuideScRsp" => Some(Self::CmdUnlockTutorialGuideScRsp),
            "CmdGetTutorialGuideScRsp" => Some(Self::CmdGetTutorialGuideScRsp),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum TutorialStatus {
    TutorialNone = 0,
    TutorialUnlock = 1,
    TutorialFinish = 2,
}
impl TutorialStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::TutorialNone => "TUTORIAL_NONE",
            Self::TutorialUnlock => "TUTORIAL_UNLOCK",
            Self::TutorialFinish => "TUTORIAL_FINISH",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "TUTORIAL_NONE" => Some(Self::TutorialNone),
            "TUTORIAL_UNLOCK" => Some(Self::TutorialUnlock),
            "TUTORIAL_FINISH" => Some(Self::TutorialFinish),
            _ => None,
        }
    }
}
/// JEJBKHGLNCE
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdWaypointType {
    None = 0,
    CmdGetWaypointCsReq = 401,
    CmdGetChapterScRsp = 456,
    CmdWaypointShowNewCsNotify = 497,
    CmdSetCurWaypointScRsp = 424,
    CmdGetChapterCsReq = 430,
    CmdTakeChapterRewardScRsp = 428,
    CmdSetCurWaypointCsReq = 458,
    CmdTakeChapterRewardCsReq = 476,
    CmdGetWaypointScRsp = 468,
}
impl CmdWaypointType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdWaypointTypeNone",
            Self::CmdGetWaypointCsReq => "CmdGetWaypointCsReq",
            Self::CmdGetChapterScRsp => "CmdGetChapterScRsp",
            Self::CmdWaypointShowNewCsNotify => "CmdWaypointShowNewCsNotify",
            Self::CmdSetCurWaypointScRsp => "CmdSetCurWaypointScRsp",
            Self::CmdGetChapterCsReq => "CmdGetChapterCsReq",
            Self::CmdTakeChapterRewardScRsp => "CmdTakeChapterRewardScRsp",
            Self::CmdSetCurWaypointCsReq => "CmdSetCurWaypointCsReq",
            Self::CmdTakeChapterRewardCsReq => "CmdTakeChapterRewardCsReq",
            Self::CmdGetWaypointScRsp => "CmdGetWaypointScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdWaypointTypeNone" => Some(Self::None),
            "CmdGetWaypointCsReq" => Some(Self::CmdGetWaypointCsReq),
            "CmdGetChapterScRsp" => Some(Self::CmdGetChapterScRsp),
            "CmdWaypointShowNewCsNotify" => Some(Self::CmdWaypointShowNewCsNotify),
            "CmdSetCurWaypointScRsp" => Some(Self::CmdSetCurWaypointScRsp),
            "CmdGetChapterCsReq" => Some(Self::CmdGetChapterCsReq),
            "CmdTakeChapterRewardScRsp" => Some(Self::CmdTakeChapterRewardScRsp),
            "CmdSetCurWaypointCsReq" => Some(Self::CmdSetCurWaypointCsReq),
            "CmdTakeChapterRewardCsReq" => Some(Self::CmdTakeChapterRewardCsReq),
            "CmdGetWaypointScRsp" => Some(Self::CmdGetWaypointScRsp),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Mhhljfejgnm {
    WaypointTypeNone = 0,
    WaypointTypeStage = 1,
    WaypointTypePlot = 2,
}
impl Mhhljfejgnm {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::WaypointTypeNone => "WAYPOINT_TYPE_NONE",
            Self::WaypointTypeStage => "WAYPOINT_TYPE_STAGE",
            Self::WaypointTypePlot => "WAYPOINT_TYPE_PLOT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "WAYPOINT_TYPE_NONE" => Some(Self::WaypointTypeNone),
            "WAYPOINT_TYPE_STAGE" => Some(Self::WaypointTypeStage),
            "WAYPOINT_TYPE_PLOT" => Some(Self::WaypointTypePlot),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Obfaicfogmp {
    WaypointUnlockNone = 0,
    WaypointUnlockPre = 1,
    WaypointUnlockLevel = 2,
}
impl Obfaicfogmp {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::WaypointUnlockNone => "WAYPOINT_UNLOCK_NONE",
            Self::WaypointUnlockPre => "WAYPOINT_UNLOCK_PRE",
            Self::WaypointUnlockLevel => "WAYPOINT_UNLOCK_LEVEL",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "WAYPOINT_UNLOCK_NONE" => Some(Self::WaypointUnlockNone),
            "WAYPOINT_UNLOCK_PRE" => Some(Self::WaypointUnlockPre),
            "WAYPOINT_UNLOCK_LEVEL" => Some(Self::WaypointUnlockLevel),
            _ => None,
        }
    }
}
/// MGKCKDFFAOI
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdWolfBroType {
    None = 0,
    CmdGetWolfBroGameDataCsReq = 6525,
    CmdWolfBroGameActivateBulletCsReq = 6514,
    CmdRestoreWolfBroGameArchiveCsReq = 6506,
    CmdWolfBroGameDataChangeScNotify = 6530,
    CmdStartWolfBroGameScRsp = 6537,
    CmdRestoreWolfBroGameArchiveScRsp = 6533,
    CmdWolfBroGameUseBulletCsReq = 6502,
    CmdWolfBroGameActivateBulletScRsp = 6540,
    CmdWolfBroGamePickupBulletScRsp = 6532,
    CmdArchiveWolfBroGameScRsp = 6543,
    CmdWolfBroGameExplodeMonsterScRsp = 6535,
    CmdQuitWolfBroGameScRsp = 6529,
    CmdWolfBroGameExplodeMonsterCsReq = 6510,
    CmdWolfBroGamePickupBulletCsReq = 6504,
    CmdQuitWolfBroGameCsReq = 6507,
    CmdStartWolfBroGameCsReq = 6526,
    CmdWolfBroGameUseBulletScRsp = 6548,
    CmdGetWolfBroGameDataScRsp = 6515,
    CmdArchiveWolfBroGameCsReq = 6541,
}
impl CmdWolfBroType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdWolfBroTypeNone",
            Self::CmdGetWolfBroGameDataCsReq => "CmdGetWolfBroGameDataCsReq",
            Self::CmdWolfBroGameActivateBulletCsReq => {
                "CmdWolfBroGameActivateBulletCsReq"
            }
            Self::CmdRestoreWolfBroGameArchiveCsReq => {
                "CmdRestoreWolfBroGameArchiveCsReq"
            }
            Self::CmdWolfBroGameDataChangeScNotify => "CmdWolfBroGameDataChangeScNotify",
            Self::CmdStartWolfBroGameScRsp => "CmdStartWolfBroGameScRsp",
            Self::CmdRestoreWolfBroGameArchiveScRsp => {
                "CmdRestoreWolfBroGameArchiveScRsp"
            }
            Self::CmdWolfBroGameUseBulletCsReq => "CmdWolfBroGameUseBulletCsReq",
            Self::CmdWolfBroGameActivateBulletScRsp => {
                "CmdWolfBroGameActivateBulletScRsp"
            }
            Self::CmdWolfBroGamePickupBulletScRsp => "CmdWolfBroGamePickupBulletScRsp",
            Self::CmdArchiveWolfBroGameScRsp => "CmdArchiveWolfBroGameScRsp",
            Self::CmdWolfBroGameExplodeMonsterScRsp => {
                "CmdWolfBroGameExplodeMonsterScRsp"
            }
            Self::CmdQuitWolfBroGameScRsp => "CmdQuitWolfBroGameScRsp",
            Self::CmdWolfBroGameExplodeMonsterCsReq => {
                "CmdWolfBroGameExplodeMonsterCsReq"
            }
            Self::CmdWolfBroGamePickupBulletCsReq => "CmdWolfBroGamePickupBulletCsReq",
            Self::CmdQuitWolfBroGameCsReq => "CmdQuitWolfBroGameCsReq",
            Self::CmdStartWolfBroGameCsReq => "CmdStartWolfBroGameCsReq",
            Self::CmdWolfBroGameUseBulletScRsp => "CmdWolfBroGameUseBulletScRsp",
            Self::CmdGetWolfBroGameDataScRsp => "CmdGetWolfBroGameDataScRsp",
            Self::CmdArchiveWolfBroGameCsReq => "CmdArchiveWolfBroGameCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdWolfBroTypeNone" => Some(Self::None),
            "CmdGetWolfBroGameDataCsReq" => Some(Self::CmdGetWolfBroGameDataCsReq),
            "CmdWolfBroGameActivateBulletCsReq" => {
                Some(Self::CmdWolfBroGameActivateBulletCsReq)
            }
            "CmdRestoreWolfBroGameArchiveCsReq" => {
                Some(Self::CmdRestoreWolfBroGameArchiveCsReq)
            }
            "CmdWolfBroGameDataChangeScNotify" => {
                Some(Self::CmdWolfBroGameDataChangeScNotify)
            }
            "CmdStartWolfBroGameScRsp" => Some(Self::CmdStartWolfBroGameScRsp),
            "CmdRestoreWolfBroGameArchiveScRsp" => {
                Some(Self::CmdRestoreWolfBroGameArchiveScRsp)
            }
            "CmdWolfBroGameUseBulletCsReq" => Some(Self::CmdWolfBroGameUseBulletCsReq),
            "CmdWolfBroGameActivateBulletScRsp" => {
                Some(Self::CmdWolfBroGameActivateBulletScRsp)
            }
            "CmdWolfBroGamePickupBulletScRsp" => {
                Some(Self::CmdWolfBroGamePickupBulletScRsp)
            }
            "CmdArchiveWolfBroGameScRsp" => Some(Self::CmdArchiveWolfBroGameScRsp),
            "CmdWolfBroGameExplodeMonsterScRsp" => {
                Some(Self::CmdWolfBroGameExplodeMonsterScRsp)
            }
            "CmdQuitWolfBroGameScRsp" => Some(Self::CmdQuitWolfBroGameScRsp),
            "CmdWolfBroGameExplodeMonsterCsReq" => {
                Some(Self::CmdWolfBroGameExplodeMonsterCsReq)
            }
            "CmdWolfBroGamePickupBulletCsReq" => {
                Some(Self::CmdWolfBroGamePickupBulletCsReq)
            }
            "CmdQuitWolfBroGameCsReq" => Some(Self::CmdQuitWolfBroGameCsReq),
            "CmdStartWolfBroGameCsReq" => Some(Self::CmdStartWolfBroGameCsReq),
            "CmdWolfBroGameUseBulletScRsp" => Some(Self::CmdWolfBroGameUseBulletScRsp),
            "CmdGetWolfBroGameDataScRsp" => Some(Self::CmdGetWolfBroGameDataScRsp),
            "CmdArchiveWolfBroGameCsReq" => Some(Self::CmdArchiveWolfBroGameCsReq),
            _ => None,
        }
    }
}
/// OGEIDPAMDKL
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdWorldUnlockType {
    None = 0,
    CmdWorldUnlockCsReq = 7627,
    CmdWorldUnlockScRsp = 7626,
}
impl CmdWorldUnlockType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdWorldUnlockTypeNone",
            Self::CmdWorldUnlockCsReq => "CmdWorldUnlockCsReq",
            Self::CmdWorldUnlockScRsp => "CmdWorldUnlockScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdWorldUnlockTypeNone" => Some(Self::None),
            "CmdWorldUnlockCsReq" => Some(Self::CmdWorldUnlockCsReq),
            "CmdWorldUnlockScRsp" => Some(Self::CmdWorldUnlockScRsp),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Djebimhnpbm {
    DispatchTypeNone = 0,
    DispatchTypeByAddr = 1,
    DispatchTypeByMod = 2,
    DispatchTypeByRand = 3,
    DispatchTypeByChash = 4,
    DispatchTypeByStickySession = 5,
    DispatchTypeByObject = 6,
}
impl Djebimhnpbm {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::DispatchTypeNone => "DISPATCH_TYPE_NONE",
            Self::DispatchTypeByAddr => "DISPATCH_TYPE_BY_ADDR",
            Self::DispatchTypeByMod => "DISPATCH_TYPE_BY_MOD",
            Self::DispatchTypeByRand => "DISPATCH_TYPE_BY_RAND",
            Self::DispatchTypeByChash => "DISPATCH_TYPE_BY_CHASH",
            Self::DispatchTypeByStickySession => "DISPATCH_TYPE_BY_STICKY_SESSION",
            Self::DispatchTypeByObject => "DISPATCH_TYPE_BY_OBJECT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "DISPATCH_TYPE_NONE" => Some(Self::DispatchTypeNone),
            "DISPATCH_TYPE_BY_ADDR" => Some(Self::DispatchTypeByAddr),
            "DISPATCH_TYPE_BY_MOD" => Some(Self::DispatchTypeByMod),
            "DISPATCH_TYPE_BY_RAND" => Some(Self::DispatchTypeByRand),
            "DISPATCH_TYPE_BY_CHASH" => Some(Self::DispatchTypeByChash),
            "DISPATCH_TYPE_BY_STICKY_SESSION" => Some(Self::DispatchTypeByStickySession),
            "DISPATCH_TYPE_BY_OBJECT" => Some(Self::DispatchTypeByObject),
            _ => None,
        }
    }
}
