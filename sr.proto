syntax = "proto3"; // 3.1.5x
message MMMNFDNLJMD {
	oneof ILAAKOMCALI {
		int32 MarbleGameBegin = 101;
		int32 MarbleGameEnd = 102;
		int32 MarbleGameRound = 103;
		int32 MarbleGameTurn = 104;
	}
	uint32 queue_position = 1;
	uint32 GPJGGKNOAFD = 2;
}
message HCJJOOFKCJH {
	uint32 LPDBPKKADGG = 1;
	int32 HOMGCFJPBLK = 2;
	int32 CJJBLMKJAPA = 3;
}
message LNGMDMIPCKL {
	uint32 LPDBPKKADGG = 1;
	uint32 JOJAHIAFNLK = 2;
}
message CCCNHOECCMD {
	uint32 item_id = 1;
	uint32 BANELELNLKB = 2;
	uint32 skill_id = 3;
	int32 display_value = 4;
}
message NOOBBIHJKMA {
	int32 MFLEKHHPIEO = 1;
	int32 MAJLGJCFGJA = 2;
	int32 IOLCFLOFAGF = 3;
	int32 AMEIIMFKBFA = 4;
}
message LJNPGKDOJHO {
	uint32 monster_battle_type = 1;
	uint64 DBADLNFOPAO = 2;
	uint32 level_id = 3;
	uint32 NLIBKABFGCC = 4;
	repeated HCJJOOFKCJH BIECGFIMCFB = 5;
	uint32 rank = 6;
	uint64 EKLDPALNLDC = 7;
	repeated HCJJOOFKCJH FFFGFCPHBPN = 8;
	uint32 JBLMGNPMADM = 9;
}
message BPNMJCHEDNL {
	uint32 monster_battle_type = 1;
	uint64 DBADLNFOPAO = 2;
	uint32 level_id = 3;
	uint32 NLIBKABFGCC = 4;
	repeated HCJJOOFKCJH BIECGFIMCFB = 5;
	uint32 rank = 6;
	uint64 EKLDPALNLDC = 7;
	repeated HCJJOOFKCJH FFFGFCPHBPN = 8;
	uint32 JBLMGNPMADM = 9;
	uint32 IMBCLFCBODJ = 10;
	int32 score_id = 11;
	int32 NPJEECEDPOK = 12;
	repeated LNGMDMIPCKL PCEAECMKDEH = 13;
	uint32 IFNMBNGIFPH = 14;
	uint32 IEHJGOMBPBI = 15;
	uint32 IPHAFKFGNAO = 16;
	uint32 LBPFECLGEFC = 17;
}
message FOOPINGAFEG {
	uint32 monster_battle_type = 1;
	uint64 DBADLNFOPAO = 2;
	uint32 level_id = 3;
	uint32 NLIBKABFGCC = 4;
	uint32 IGHLABGGIJE = 5;
	uint32 LPDBPKKADGG = 6;
	bool HGBBKGNEPFB = 7;
	repeated HCJJOOFKCJH FEOPFHOLKBM = 8;
	uint32 rank = 9;
	repeated HCJJOOFKCJH CNDCKAKKMCG = 10;
	uint32 JBLMGNPMADM = 11;
	repeated CCCNHOECCMD skill_info = 12;
	repeated NOOBBIHJKMA KBGAJGEOMGL = 13;
	repeated HCJJOOFKCJH LELHCFOEOCO = 14;
	repeated HCJJOOFKCJH IMJEKFDHING = 15;
	uint32 DJNMHMPKKKB = 16;
}
message OFILKJCLEGI {
	uint32 monster_battle_type = 1;
	uint64 DBADLNFOPAO = 2;
	uint32 level_id = 3;
	uint32 NLIBKABFGCC = 4;
	bool NLEAIJHAPAP = 5;
	uint32 IGHLABGGIJE = 6;
	uint32 rank = 7;
	uint64 EKLDPALNLDC = 8;
	uint32 JBLMGNPMADM = 9;
	uint32 CBOIIACBAKF = 10;
	repeated uint32 buff_list = 11;
	uint32 DJNMHMPKKKB = 12;
}
message PlayerBasicInfo {
	string nickname = 1;
	uint32 level = 2;
	uint32 exp = 3;
	uint32 stamina = 4;
	uint32 mcoin = 5;
	uint32 hcoin = 6;
	uint32 scoin = 7;
	uint32 world_level = 8;
}
message SpBarInfo {
	uint32 cur_sp = 1;
	uint32 max_sp = 2;
}
message BlackInfo {
	int64 begin_time = 1;
	int64 end_time = 2;
	uint32 limit_level = 3;
	uint32 ban_type = 4;
}
message FeverTimeAvatar {
	AvatarType avatar_type = 1;
	uint32 id = 2;
}
message VersionCount {
	uint32 version = 1;
	uint32 count = 2;
}
message ClientDownloadData {
	uint32 version = 1;
	int64 time = 2;
	bytes data = 3;
	uint32 HAEHHCPOAPP = 4;
}
message ClientObjDownloadData {
	bytes BIDJPEIMLLF = 1;
	ClientDownloadData client_obj_download_data = 2;
	repeated ClientDownloadData JEDHNEJHGNP = 3;
}
message ClientUploadData {
	string tag = 1;
	string value = 2;
}
message FeatureSwitchParam {
	repeated uint32 switch_list = 1;
}
message FeatureSwitchInfo {
	FeatureSwitchType Type = 1;
	repeated FeatureSwitchParam SwitchList = 2;
	bool IsAllClosed = 3;
}
message JGFKICDCFLJ {
	string FDKGFDICMFD = 1;
	string MDJCAOAGCKO = 2;
	string GIOOHOOMJHO = 3;
	string FBMLLNKCFEN = 4;
	string DGOOHIBAOEE = 5;
	string FKBAMBOODKJ = 6;
	string MAC = 7;
}
message ReplayInfo {
	uint64 DKNPKJMAHCM = 1;
	ReplayType replay_type = 2;
	uint32 stage_id = 3;
	uint32 uid = 4;
	string nickname = 5;
	uint32 head_icon = 6;
	string replay_name = 7;
	uint64 create_time = 8;
	uint32 AFEHLMFIBMD = 9;
	uint32 CMPBKBBKAOA = 10;
}
message PunkLordBattleAvatar {
	uint32 AvatarId = 1;
	uint32 AvatarLevel = 2;
}
message PunkLordBattleRecord {
	uint32 Uid = 1;
	uint32 DamageHp = 2;
	bool IsFinalHit = 3;
	uint32 OverKillDamageHp = 4;
	string BattleReplayKey = 5;
	repeated PunkLordBattleAvatar AvatarList = 6;
	uint32 AssistScore = 7;
	uint32 DamageScore = 8;
	uint32 FinalHitScore = 9;
}
message PunkLordBattleRecordList {
	repeated PunkLordBattleRecord battle_record_list = 1;
}
message PunkLordMonsterKey {
	uint32 uid = 1;
	uint32 monster_id = 2;
}
message PunkLordMonsterBasicInfo {
	uint32 uid = 1;
	uint32 monster_id = 2;
	uint32 config_id = 3;
	uint32 world_level = 4;
	int64 create_time = 5;
	uint32 left_hp = 6;
	uint32 attacker_num = 7;
	PunkLordShareType share_type = 8;
	bool PPBOCECKCAH = 9;
}
message PunkLordBattleReplay {
	string BattleReplayKey = 1;
	ReplayInfo ReplayInfo = 2;
}
message ILDHFMHBKNC {
	uint64 INFHIKBLJLA = 1;
	uint32 NBDLPGBIDLC = 2;
	uint32 AHBEMDLGGEO = 3;
}
message LKAPFHAHNEM {
	uint32 panel_id = 1;
	uint32 modifier_content_type = 2;
}
message PEDLPHDBNAF {
	oneof GAHLGLNKAFC {
		ILDHFMHBKNC LFCPHAJCEKF = 101;
		LKAPFHAHNEM CELMKOLBJNN = 102;
	}
}
message RegionInfo {
	string name = 1;
	string title = 2;
	string dispatch_url = 3;
	string env_type = 4;
	string display_name = 5;
	string msg = 6;
}
message Dispatch {
	uint32 retcode = 1;
	string msg = 2;
	string top_sever_region_name = 3;
	repeated RegionInfo region_list = 4;
	string stop_desc = 5;
}
message RelicFilterPlanSettings {
	uint32 RarityBitset = 1;
	repeated uint32 RelicSetList = 2;
	repeated uint32 BodyMainPropertyList = 3;
	repeated uint32 FootMainPropertyList = 4;
	repeated uint32 SphereMainPropertyList = 5;
	repeated uint32 RopeMainPropertyList = 6;
	bool IsIncludeFilterSubProperty = 7;
	uint32 SubPropertyNum = 8;
	repeated uint32 SubPropertyList = 9;
	repeated uint32 HeadMainPropertyList = 10;
	repeated uint32 HandMainPropertyList = 11;
}
message BattleOp {
	uint32 turn_counter = 1;
	uint32 state = 2;
	uint32 action_entity_id = 3;
	uint32 target_entity_id = 4;
	uint32 op_type = 5;
	uint32 skill_index = 6;
	uint32 operation_counter = 7;
	string NPLIEIPHCBF = 8;
}
message BattleEquipment {
	uint32 id = 1;
	uint32 level = 2;
	uint32 promotion = 3;
	uint32 rank = 4;
}
message BattleRelic {
	uint32 id = 1;
	uint32 level = 2;
	uint32 main_affix_id = 3;
	repeated RelicAffix sub_affix_list = 4;
	uint32 unique_id = 5;
	uint32 set_id = 6;
	uint32 type = 7;
	uint32 rarity = 8;
}
message AvatarSkillTree {
	uint32 point_id = 1;
	uint32 level = 2;
}
message RelicAffix {
	uint32 affix_id = 1;
	uint32 cnt = 2;
	uint32 step = 3;
}
message BJHEBCCBANA {
	bool LJPADNCGLOC = 1;
	repeated uint32 DDDHNAKLMHF = 2;
	uint32 JGJCDMJIMNN = 3;
	uint32 POFMKDABEHD = 4;
}
message BattleAvatar {
	AvatarType avatar_type = 1;
	uint32 id = 2;
	uint32 level = 3;
	uint32 rank = 4;
	uint32 index = 5;
	repeated AvatarSkillTree skilltree_list = 6;
	repeated BattleEquipment equipment_list = 7;
	uint32 hp = 8;
	uint32 promotion = 10;
	repeated BattleRelic relic_list = 11;
	uint32 world_level = 12;
	uint32 assist_uid = 13;
	BJHEBCCBANA ECIFJLAKHCL = 15;
	SpBarInfo sp_bar = 16;
	uint32 GMOBAOCEFCE = 17;
	repeated AvatarSkillTree IMJJKBJOOHJ = 18;
}
message BattleMonsterParam {
	uint32 hard_level_group = 1;
	uint32 level = 2;
	uint32 elite_group = 3;
	uint32 DNEAMPLLFME = 4;
}
message BattleMonster {
	uint32 monster_id = 1;
	uint32 cur_hp = 2;
	uint32 max_hp = 3;
}
message BattleMonsterWave {
	repeated BattleMonster monster_list = 1;
	BattleMonsterParam monster_param = 2;
	uint32 battle_stage_id = 3;
	uint32 battle_wave_id = 4;
}
message BattleBuff {
	uint32 id = 1;
	uint32 level = 2;
	uint32 owner_index = 3;
	uint32 wave_flag = 4;
	repeated uint32 target_index_list = 5;
	map<string, float> dynamic_values = 6;
}
message ILLCDMOCLDO {
	uint32 id = 1;
	uint32 HFALJIHKECN = 2;
	uint32 LAEJDGHMKDB = 3;
}
message LJGIAGLFHHC {
	uint32 FENMMMKOOCF = 1;
}
message ENFLFBDAOIJ {
	uint32 id = 1;
	uint32 HFALJIHKECN = 2;
}
message GMGJCIHDFMA {
	uint32 id = 1;
	uint32 progress = 2;
}
message BattleTarget {
	uint32 Id = 1;
	uint32 Progress = 2;
	uint32 TotalProgress = 3;
}
message BattleTargetList {
	repeated BattleTarget battle_target_list = 1;
}
message BattleLineup {
	repeated BattleAvatar avatar_list = 1;
	repeated BattleMonsterWave monster_wave_list = 2;
	repeated BattleBuff buff_list = 3;
	uint32 world_level = 7;
	map<uint32, BattleTargetList> battle_target_info = 9;
	LJGIAGLFHHC AJGPJGLPMIO = 10;
	repeated BattleAvatar EJCLJLDENDM = 11;
	EvolveBuildBattleInfo JPGIFCHJDLK = 12;
	GIEIBEACBAO MFKJOKAJJMJ = 13;
	BattleRogueMagicInfo battle_rogue_magic_info = 14;
}
message GIEIBEACBAO {
	map<uint32, uint32> GCCJDHKHMNK = 1;
	uint32 FPBNIPMHANH = 2;
	uint32 AAGIANCIEEG = 3;
	uint32 ELPFOMLCOBM = 4;
}
message AetherAvatarInfo {
	uint32 id = 1;
	uint32 index = 2;
	uint32 promotion = 3;
	repeated uint32 passive_skill = 4;
	AetherdivideSpiritLineupType spirit_lineup_type = 5;
	SpBarInfo sp_bar = 6;
}
message PNDFMBJFGIM {
	repeated AetherAvatarInfo avatar_list = 1;
	repeated BattleMonsterWave monster_wave_list = 2;
	repeated BattleBuff buff_list = 3;
}
message ClientTurnSnapshot {
	uint32 turn_counter = 1;
	uint32 random_counter = 2;
	uint32 anim_event_counter = 3;
	repeated CharacterSnapshot snapshot_list = 4;
	repeated AnimEventSnapshot anim_event_list = 5;
	uint32 JEINBMLFCBP = 6;
}
message GamecoreConfig {
	bool is_skip_verify = 1;
	uint32 max_turn_cnt = 2;
	bool is_auto_fight = 3;
	string csv_path = 4;
	bool LKFDPDLDMIB = 5;
	bool MNALPNFNMIO = 6;
	uint32 GGFCOJFLKBP = 7;
}
message BattleBuffMsg {
	repeated uint32 buff_id_list = 1;
	repeated uint32 buff_index_list = 2;
	repeated uint32 buff_level_list = 3;
	repeated uint32 buff_flag_list = 4;
}
message DKFLALJDIFL {
	uint32 MBBCHGENGGL = 1;
	uint32 HFCDPHCHFGK = 2;
}
message MBMCFOLIOLO {
	bool CDNOJCACELJ = 1;
	map<string, DKFLALJDIFL> HANEGINLANI = 2;
	bytes CJKMGENOJBE = 3;
}
message MIAIDAILDKM {
	repeated ClientTurnSnapshot EEFLGHCOBML = 1;
	string KGBHEHHFMPI = 2;
	string debug_extra_info = 3;
	repeated BattleReplayStringHash HLAGIMENBJG = 4;
	uint32 plane_id = 5;
	uint32 floor_id = 6;
	uint32 EBHLFAEGLCD = 7;
	uint32 BNJMMLKOFCP = 8;
	MBMCFOLIOLO EDHBGDEICNC = 9;
}
message BattleReplay {
	uint32 version = 1;
	uint32 logic_random_seed = 2;
	uint32 stage_id = 3;
	BattleLineup lineup = 4;
	repeated BattleOp op_list = 5;
	bytes turn_snapshot_hash = 6;
	uint32 maze_plane_id = 7;
	repeated uint32 extra_ability_list = 8;
	bool is_ai_consider_ultra_skill = 9;
	BattleCheckStrategyType check_strategy = 10;
	BattleModuleType battle_module_type = 11;
	repeated BattleEventBattleInfo battle_event = 12;
	uint32 rounds_limit = 14;
	GamecoreConfig config = 15;
	bytes game_core_log_encode = 16;
	uint32 client_version = 17;
	uint32 DDOGJOKECCL = 18;
	PNDFMBJFGIM GMPCFGEDHKI = 19;
	MIAIDAILDKM BNMIIAHADJH = 100;
}
message BattleReplayStringHash {
	int32 hash = 1;
	string value = 2;
}
message AvatarProperty {
	double max_hp = 1;
	double attack = 2;
	double defence = 3;
	double speed = 4;
	double left_hp = 5;
	double left_sp = 6;
	double max_sp = 7;
}
message EquipmentProperty {
	uint32 id = 1;
	uint32 rank = 2;
	uint32 promotion = 3;
	uint32 level = 4;
}
message AttackDamageProperty {
	string attack_type = 1;
	double damage = 2;
}
message SkillUseProperty {
	uint32 skill_id = 1;
	string skill_type = 2;
	uint32 skill_level = 3;
	uint32 skill_use_count = 4;
	uint32 IFEJKALHOPI = 5;
	uint32 JHDHLCNCDNC = 6;
	uint32 HOAFNNIJOOM = 7;
	uint32 MDEADCLNJCJ = 8;
	uint32 OHNPPJEMKDE = 9;
}
message GAAGEHABINM {
	uint32 skill_id = 1;
	double HGFLPENKIII = 2;
	repeated uint32 battle_target_list = 3;
	double damage = 4;
}
message SpAddSource {
	string source = 1;
	uint32 sp_add = 2;
}
message AbilityUseStt {
	string FKHHOBBFMEH = 1;
	uint32 count = 2;
	double total_damage = 3;
}
message AvatarBattleInfo {
	AvatarType avatar_type = 1;
	uint32 id = 2;
	uint32 avatar_level = 3;
	uint32 avatar_rank = 4;
	uint32 avatar_promotion = 5;
	AvatarProperty avatar_status = 6;
	repeated AvatarSkillTree avatar_skill = 7;
	repeated EquipmentProperty avatar_equipment = 8;
	uint32 total_turns = 9;
	double total_damage = 10;
	double total_heal = 11;
	double total_damage_taken = 12;
	double total_hp_recover = 13;
	double total_sp_cost = 14;
	uint32 stage_id = 15;
	uint32 stage_type = 16;
	double total_break_damage = 17;
	repeated AttackDamageProperty attack_type_damage = 18;
	repeated AttackDamageProperty attack_type_break_damage = 19;
	repeated AttackDamageProperty attack_type_max_damage = 20;
	repeated SkillUseProperty skill_times = 21;
	double delay_cumulate = 22;
	uint32 total_sp_add = 23;
	repeated SpAddSource sp_add_source = 24;
	uint32 total_bp_cost = 25;
	uint32 die_times = 26;
	uint32 revive_times = 27;
	uint32 break_times = 28;
	uint32 extra_turns = 29;
	double total_shield = 30;
	double total_shield_taken = 31;
	double total_shield_damage = 32;
	AvatarProperty initial_status = 33;
	repeated BattleRelic relics = 34;
	uint32 assist_uid = 35;
	repeated AttackDamageProperty AADGFLPBPDF = 36;
	double FPFBMIMBBHJ = 37;
	double GGPJOHNOCPC = 38;
	double LACKCJHHIMK = 39;
	double FMODLGOBNPE = 40;
	repeated AbilityUseStt LHKABNICKJN = 41;
	uint32 NCJHDJJDJNL = 42;
	uint32 LKMGDIADOPB = 43;
	double IBLGMCIPCKM = 44;
	double HACJDJIGMGP = 45;
	double IMDJAHAJGCF = 46;
	double JDOLKDBICLJ = 47;
	double CACCODDCJHI = 48;
	uint32 LLDMLOHBFLO = 49;
	uint32 CHNIKKCIBEG = 50;
	uint32 LBNJHHHLPMO = 51;
	double PDLILFICHIL = 52;
	uint32 PMKLPHJIOHC = 53;
	uint32 MPFAENEKFDC = 54;
}
message MonsterProperty {
	double max_hp = 1;
	double attack = 2;
	double defence = 3;
	double shield = 4;
	double speed = 5;
	double left_hp = 6;
	double enter_battle_hp = 7;
}
message MonsterPhaseStt {
	uint32 NDBOJANDNJN = 1;
	double MMCPHLPECDJ = 2;
	uint32 DOIADGDBOHF = 3;
	uint32 break_times = 4;
}
message MonsterBattleInfo {
	uint32 entity_id = 1;
	uint32 monster_id = 2;
	uint32 OAKILFGDACJ = 3;
	uint32 BFPAOANBJON = 4;
	MonsterProperty NKCMCMHAFAF = 5;
	uint32 total_turns = 6;
	double total_damage = 7;
	double total_heal = 8;
	double total_damage_taken = 9;
	double AKGFCPFAOLP = 10;
	double total_hp_recover = 11;
	uint32 stage_id = 12;
	uint32 battle_id = 13;
	uint32 JBCDLFJJJDG = 14;
	repeated AttackDamageProperty attack_type_damage = 15;
	repeated SkillUseProperty skill_times = 16;
	uint32 stage_type = 17;
	double ACOFIPPJKBI = 18;
	double delay_cumulate = 19;
	DeathSource FIEDKNKIEBH = 20;
	uint32 wave = 21;
	int32 JHAOGJJDBHL = 22;
	uint32 phase = 23;
	uint32 DCMOHECBOLK = 24;
	BattleTag JEDAHLGBIEM = 25;
	repeated GAAGEHABINM skill_info = 26;
	uint32 LANFCLOLBOF = 27;
	repeated MonsterPhaseStt KFGJBILJGDP = 28;
	uint32 FPKONIKLICA = 29;
	uint32 JEEMGAEIFAE = 30;
	HEMBNDJAFDA HBOFDAJJJME = 31;
}
message BattleEventProperty {
	SpBarInfo sp_bar = 2;
}
message BattleEventBattleInfo {
	uint32 battle_event_id = 1;
	BattleEventProperty status = 2;
	repeated GAAGEHABINM skill_info = 3;
}
message ScoreInfo {
	uint32 FJJDFPKGOPC = 1;
	uint32 score_id = 2;
}
message IBFFAJOHKMO {
	uint32 avatar_id = 1;
	repeated uint32 LEICKPDIFOG = 2;
	uint32 source = 3;
	double damage = 4;
	repeated uint32 DIKKHPFKAPF = 5;
	int32 EOOFIMEGMFB = 6;
	double BKJEAMPNANK = 7;
	uint32 BLFHKGPMNDK = 8;
	uint32 wave = 9;
}
message KKMPKJPGGCL {
	uint32 avatar_id = 1;
	int32 ABAPDFGJNME = 2;
}
message CNPNNIJGLFI {
	uint32 DPDNNMBCPOI = 1;
	uint32 DBELJGBKBPA = 2;
	uint32 entity_id = 3;
}
message IIIPHJIMNID {
	uint32 NDBOJANDNJN = 1;
	uint32 monster_id = 2;
	repeated KKMPKJPGGCL NGLPBHMLEHN = 3;
	uint32 HGFLPENKIII = 4;
	repeated CNPNNIJGLFI AKKGGPADAOO = 5;
}
message MMNDJAMEBML {
	BattleStaticticEventType type = 1;
	uint32 OCPPPKDDIML = 2;
	uint32 display_value = 3;
}
message KPKKKJPJCPC {
	uint32 LIDGJNDGBKM = 1;
	uint32 OAABADFKCOA = 2;
}
message MEOIFIOAECF {
	uint32 JJCCJJINLFL = 1;
	bool HEMJHDOEEBL = 2;
	KPKKKJPJCPC KACALGIOEDB = 3;
}
message BHGBOOJEOPF {
	uint32 card_id = 1;
}
message EvolveBuildGearDamageInfo {
	uint32 GearId = 1;
	double Damage = 2;
	double HpDamage = 3;
}
message LGIFEDNKHON {
	repeated uint32 DAKIJNBFKOB = 1;
}
message MJKIBJLOBKD {
	uint32 wave = 1;
	uint32 score_id = 2;
	uint32 DCHIOLBFKJN = 3;
	repeated KPKKKJPJCPC BHJKMHMOEAK = 4;
	float HGFLPENKIII = 5;
}
message PMNHMAMHGAI {
	uint32 ICPHOOMNDKA = 1;
	repeated MJKIBJLOBKD ENBJCPKGCOL = 2;
}
message EvolveBuildBattleInfo {
	uint32 CurLevelId = 1;
	uint32 CurPeriod = 2;
	uint32 CurCoin = 3;
	repeated MEOIFIOAECF WeaponSlotList = 4;
	repeated MEOIFIOAECF AccessorySlotList = 5;
	repeated uint32 BanGearList = 6;
	LGIFEDNKHON Collection = 7;
	repeated uint32 AllowedGearList = 8;
	uint32 CurExp = 9;
	uint32 CurReroll = 10;
	uint32 CurTreasureMissCnt = 11;
	repeated uint32 PeriodIdList = 12;
	uint32 CurGearLostCnt = 13;
	uint32 CurWave = 14;
	bool IsUnlockGearReroll = 15;
	bool IsUnlockGearBan = 16;
	repeated BHGBOOJEOPF CardList = 17;
	repeated EvolveBuildGearDamageInfo GearDamageList = 18;
	repeated uint32 StatParams = 19;
	bool IsGiveup = 20;
	uint32 CurUnusedRoundCnt = 21;
	PMNHMAMHGAI StatLogInfo = 22;
	uint32 PeriodFirstRandomSeed = 23;
}
message PLPNLIBMNIO {
	string phase = 1;
	float DBDCNAFOGLF = 2;
	float HDALBIANCMF = 3;
	uint32 ADJBBABEHAH = 4;
	uint32 PJBIAEJECAE = 5;
	uint32 KPNACGHJALJ = 6;
	uint32 FPJADBGOHKM = 7;
	uint32 CJEJOFAMDCD = 8;
	repeated uint32 BGJCEDEAHGM = 9;
	repeated uint32 AAGJCJIOFPA = 10;
}
message CHDONIGOKNM {
	uint32 HEOCPAKCELM = 1;
	uint32 BGHKBMFHMOJ = 2;
	uint32 LOOLLAGMNLH = 3;
	uint32 HECJOOOBAHC = 4;
	uint32 FKEAAIPKPAA = 5;
	uint32 ICLEENHIPOH = 6;
	repeated uint32 boss_info = 7;
	repeated PLPNLIBMNIO ODBONKCMDMP = 8;
}
message JFFNDOBBNFB {
	uint32 wave = 1;
	double HFIHDDDILJB = 2;
	double KHGCLCLLECL = 3;
	uint32 FFPMJFHNCHO = 4;
	uint32 GMMBGAMHBKB = 5;
}
message EKBAGMOMECL {
	string key = 1;
	double value = 2;
}
message BattleRogueMagicModifierInfo {
	uint32 rogue_magic_battle_const = 1;
}
message BattleRogueMagicRoundCount {
	uint32 battle_standard_round_limit = 1;
	uint32 battle_extra_round_limit = 2;
}
message BattleRogueMagicUnit {
	uint32 magic_unit_id = 1;
	uint32 level = 2;
	bool HEMJHDOEEBL = 3;
	uint32 dice_slot_id = 4;
	map<uint32, uint32> IKDDALCBAFJ = 5;
}
message BattleRogueMagicScepter {
	uint32 scepter_id = 1;
	repeated BattleRogueMagicUnit rogue_magic_unit_info_list = 2;
	uint32 level = 3;
	map<uint32, uint32> trench_count = 4;
}
message BattleRogueMagicItemInfo {
	BattleRogueMagicRoundCount battle_round_count = 1;
	repeated BattleRogueMagicScepter battle_scepter_list = 2;
}
message FKOCBOOCDNL {
	uint32 POIIAIAKILF = 1;
}
message BattleRogueMagicDetailInfo {
	oneof content_case {
		BattleRogueMagicItemInfo battle_magic_item_info = 1;
		FKOCBOOCDNL ENNPJGLCBEM = 2;
	}
}
message BattleRogueMagicInfo {
	BattleRogueMagicModifierInfo modifier_content = 1;
	BattleRogueMagicDetailInfo detail_info = 2;
}
message CCCCGJABBPM {
	uint32 scepter_id = 1;
	uint32 level = 2;
	double total_damage = 3;
}
message AENPIJCDBMH {
	uint32 KLMCPPBBOOH = 1;
	uint32 KMOEADPMFLG = 2;
	repeated CCCCGJABBPM CICANOKPNBM = 3;
}
message GBNCGKDNMIL {
	uint32 AENKMAOABMP = 1;
	uint32 MCDPIABDIGI = 2;
	double JNIMLOIOHNH = 3;
	double IEJJJKFEDAH = 4;
}
message MBJHFPCJALN {
	GBNCGKDNMIL EHNNECGHJAL = 1;
}
message AIGKNHFANGA {
	AENPIJCDBMH EILAABLDPHM = 1;
	MBJHFPCJALN INPKGDFMPEA = 2;
}
message LHLBIANFOHK {
	uint32 monster_id = 1;
	uint32 GMLFMPJPEGG = 2;
	uint32 FFPMJFHNCHO = 3;
	uint32 GMMBGAMHBKB = 4;
}
message LLBMAPHBOGD {
	uint32 ACPBMMMCJIP = 1;
	double KKANCJALJPO = 2;
	double MFJKFLGPGKO = 3;
	uint32 wave = 4;
	uint32 GMLFMPJPEGG = 5;
	double ABMNLNNOKLO = 6;
	double IHBBEKCOEAE = 7;
}
message DPNDLHGEMEI {
	uint32 IMCPKLDFDOG = 1;
	uint32 AJGEOFIIDDH = 2;
	double OMOENBAKMHJ = 3;
	uint32 wave = 4;
	uint32 GMLFMPJPEGG = 5;
}
message CPFCBLADMBH {
	repeated LHLBIANFOHK HAAFHKIAGKM = 1;
	repeated LLBMAPHBOGD OEAGAMJDLMA = 2;
	repeated DPNDLHGEMEI PLENNPAGJLL = 3;
}
message BAAGNOHEHMA {
	CPFCBLADMBH OIMBGAEHDBI = 1;
}
message MKEECCHGIGH {
	uint32 NMIMBIOPEKI = 1;
	double KKANCJALJPO = 2;
	double MFJKFLGPGKO = 3;
	uint32 FGMLCKANIAN = 4;
	uint32 GOAEBJJPAJO = 5;
	uint32 NILAKIDFHEJ = 6;
	uint32 PIGNDAJGDGJ = 7;
	double ABMNLNNOKLO = 8;
	uint32 JBJMOPHGMFA = 9;
	uint32 POBIBILOANI = 10;
	double IHBBEKCOEAE = 11;
	uint32 LOOLLAGMNLH = 12;
	uint32 FKEAAIPKPAA = 13;
}
message BDMGOEJBFGL {
	uint32 LOOLLAGMNLH = 1;
	uint32 FKEAAIPKPAA = 2;
	uint32 AKPMNJCGGAI = 3;
	repeated MKEECCHGIGH OEAGAMJDLMA = 4;
}
message HANHNLNEICM {
	uint32 avatar_id = 1;
	uint32 DPDNNMBCPOI = 2;
	uint32 total_turns = 3;
	double FBCMJGMBJFC = 4;
	repeated SkillUseProperty skill_times = 5;
	double total_damage = 6;
	double total_break_damage = 7;
	repeated AttackDamageProperty attack_type_damage = 8;
	repeated AttackDamageProperty attack_type_break_damage = 9;
	repeated AttackDamageProperty attack_type_max_damage = 10;
	double total_damage_taken = 11;
	double total_heal = 12;
	double total_hp_recover = 13;
	double total_shield = 14;
	double total_shield_taken = 15;
	double total_shield_damage = 16;
	uint32 break_times = 17;
	uint32 JEPLCJKFOMB = 18;
	uint32 NCJHDJJDJNL = 19;
	uint32 LKMGDIADOPB = 20;
	double IBLGMCIPCKM = 21;
	uint32 entity_id = 22;
}
message PEDJNPJKOCK {
	uint32 avatar_id = 1;
	uint32 maze_buff_id = 2;
	uint32 IAGENFADHLP = 3;
}
message NMCMOHAHOPL {
	repeated HANHNLNEICM PCCDMDFNJPD = 1;
	uint32 HKPBEFFLFEO = 2;
	uint32 DFNKMIJEBLD = 3;
}
message BattleStatistics {
	uint32 total_battle_turns = 1;
	uint32 total_auto_turns = 2;
	repeated uint32 avatar_id_list = 3;
	uint32 ultra_cnt = 4;
	double total_delay_cumulate = 5;
	double cost_time = 6;
	repeated AvatarBattleInfo battle_avatar_list = 7;
	repeated MonsterBattleInfo monster_list = 8;
	uint32 round_cnt = 9;
	uint32 cocoon_dead_wave = 10;
	uint32 avatar_battle_turns = 11;
	uint32 monster_battle_turns = 12;
	map<string, float> custom_values = 13;
	uint32 challenge_score = 14;
	repeated BattleEventBattleInfo IJOLOFBJINB = 16;
	BattleEndReason end_reason = 19;
	repeated IBFFAJOHKMO GLOJPNLNHJH = 21;
	repeated int32 IICCEFCGPAK = 22;
	repeated IIIPHJIMNID LDGAANONMBK = 23;
	repeated MMNDJAMEBML ADBHGKPNIKP = 26;
	repeated GMKEPCOMHPN ECEFBCNOFKB = 27;
	map<uint32, BattleTargetList> battle_target_info = 28;
	repeated EAGOCAHFGAF NAJLKHFLLPG = 29;
	EvolveBuildBattleInfo JPGIFCHJDLK = 30;
	CHDONIGOKNM MNPHNJKGPKL = 31;
	bool LEDDODAMMNO = 32;
	repeated JFFNDOBBNFB ENBJCPKGCOL = 33;
	repeated EKBAGMOMECL NGOKNFDMHMF = 34;
	uint32 DKOEADNAMCJ = 35;
	AIGKNHFANGA IDCGPAKJFMD = 36;
	BAAGNOHEHMA BILLJJBFIOL = 37;
	BDMGOEJBFGL HMPGMILJAPB = 38;
	NMCMOHAHOPL NOCIGFLLIFG = 39;
	repeated PEDJNPJKOCK OKGCIPAHMEI = 42;
}
message EAGOCAHFGAF {
	uint32 OEFEEFGLIEB = 1;
	uint32 PBHPHHMPAIH = 2;
}
message GMKEPCOMHPN {
	AetherdivideSpiritLineupType type = 1;
	uint32 id = 2;
	SpBarInfo sp_bar = 3;
}
message MultiPath {
	uint32 multi_path_type = 1;
	uint32 level = 2;
	uint32 exp = 3;
}
message EPHILIMKADK {
	BattleCheckResultType retcode = 1;
	BattleEndStatus end_status = 2;
	BattleStatistics stt = 3;
	bytes game_core_log_encode = 4;
	map<string, uint32> DGNMMINGACJ = 5;
	uint32 mismatch_turn_count = 6;
	uint32 MDLPCFCPHDK = 7;
}
message CharacterSnapshot {
	uint32 runtime_id = 1;
	repeated uint64 properties = 2;
}
message AnimEventSnapshot {
	string event_name = 1;
	uint32 count = 2;
}
message OODOCMDLOMF {
	uint32 uid = 1;
	uint32 level = 2;
	string nickname = 3;
	uint32 GFIDNAANAFH = 4;
	PlatformType platform = 5;
	string AKCEJFCFBAN = 6;
	string BJELLAPOGJN = 7;
	uint64 version = 8;
}
message IDDLKHHLECG {
	LobbyCharacterType NOIIAOIDGEO = 1;
	LobbyCharacterStatus status = 2;
}
message NJFGJPCANDI {
	uint32 BKMPFEOCFIB = 1;
	bool COCONGACIFJ = 2;
	uint32 JEJKIGABEEK = 3;
	uint32 MIAFPFPMACA = 4;
}
message LCMIFOBKNEN {
	uint32 MKFDPCCKFNF = 1;
	uint32 rank = 2;
	repeated uint32 GNIGOHIAFFI = 3;
	uint32 score_id = 4;
}
message EPEGHCGCMHP {
	oneof EMAHJGMLBNJ {
		NJFGJPCANDI DCHDJALLNEC = 1001;
		LCMIFOBKNEN EMBBHNCJDPK = 1002;
	}
	repeated string BHGGHFJMMBM = 1;
	bool FMOPBFKNLNI = 2;
}
message CBBDIOMIFHD {
	OODOCMDLOMF basic_info = 1;
	IDDLKHHLECG NCKCCOKDKOL = 2;
	EPEGHCGCMHP stage_info = 3;
}
message CDIMEMFJJFP {
	uint32 LMMGODPHJNE = 1;
	uint32 PGJCCGNBBPI = 2;
	uint32 NNBHKCJCPIO = 3;
	uint32 KHBNJGPPHOA = 4;
	uint32 AGDCEBLFGKH = 5;
	uint32 DNCPBBLIOPL = 6;
	uint32 LILIFGBAFKN = 7;
	uint32 MMIIJHOHOGE = 8;
	uint32 IOKFIKHHANG = 9;
	uint32 CILKFJBLEJG = 10;
}
message PPGGKMDAOEA {
	uint64 LOFAMEGPMBC = 1;
	FightGameMode GBAHCDLHACN = 2;
}
message BIPLKGDFAFJ {
	uint64 id = 1;
	FightGameMode PDMOLPLCFLG = 2;
	repeated CBBDIOMIFHD IIHPMLIBBEB = 3;
	MatchUnitType type = 4;
	uint64 INFHIKBLJLA = 5;
	uint64 MLELAJDLJNL = 6;
	uint32 JBNENLHCCBH = 7;
}
message LoginActivityData {
	uint32 login_days = 6;
	uint32 panel_id = 5;
	repeated uint32 JLHOGGDHMHG = 10;
	uint32 id = 7;
}
message GetLoginActivityCsReq {
}
message GetLoginActivityScRsp {
	uint32 retcode = 2;
	repeated LoginActivityData login_activity_list = 3;
}
message TakeLoginActivityRewardCsReq {
	uint32 id = 3;
	uint32 take_days = 13;
}
message TakeLoginActivityRewardScRsp {
	uint32 panel_id = 10;
	uint32 retcode = 12;
	ItemList reward = 14;
	uint32 id = 9;
	uint32 take_days = 8;
}
message ActivityScheduleData {
	int64 end_time = 4;
	int64 begin_time = 11;
	uint32 panel_id = 12;
	uint32 activity_id = 1;
}
message GetActivityScheduleConfigCsReq {
}
message GetActivityScheduleConfigScRsp {
	uint32 retcode = 14;
	repeated ActivityScheduleData schedule_data = 5;
}
message TrialActivityInfo {
	uint32 stage_id = 10;
	bool taken_reward = 7;
}
message GetTrialActivityDataCsReq {
}
message GetTrialActivityDataScRsp {
	uint32 retcode = 10;
	repeated TrialActivityInfo trial_activity_info_list = 12;
	uint32 activity_stage_id = 2;
}
message TrialActivityDataChangeScNotify {
	TrialActivityInfo trial_activity_info = 13;
}
message EnterTrialActivityStageCsReq {
	uint32 stage_id = 4;
}
message EnterTrialActivityStageScRsp {
	SceneBattleInfo battle_info = 9;
	uint32 retcode = 7;
}
message TakeTrialActivityRewardCsReq {
	uint32 stage_id = 11;
}
message TakeTrialActivityRewardScRsp {
	uint32 stage_id = 2;
	ItemList reward = 11;
	uint32 retcode = 1;
}
message StartTrialActivityCsReq {
	uint32 stage_id = 11;
}
message StartTrialActivityScRsp {
	uint32 retcode = 1;
	uint32 stage_id = 5;
}
message LeaveTrialActivityCsReq {
	uint32 stage_id = 11;
}
message LeaveTrialActivityScRsp {
	uint32 stage_id = 7;
	uint32 retcode = 1;
}
message CurTrialActivityScNotify {
	uint32 activity_stage_id = 6;
	TrialActivityStatus status = 9;
}
message BCEKBNMNHOO {
	bool is_taken_reward = 6;
	bool CBNFFEMDBKF = 14;
	uint32 PEHOFBBDNIC = 8;
	uint32 panel_id = 12;
}
message GetMaterialSubmitActivityDataCsReq {
}
message GetMaterialSubmitActivityDataScRsp {
	repeated BCEKBNMNHOO NBLHGEHLODN = 9;
	uint32 retcode = 12;
}
message SubmitMaterialSubmitActivityMaterialCsReq {
	uint32 PEHOFBBDNIC = 2;
}
message SubmitMaterialSubmitActivityMaterialScRsp {
	uint32 retcode = 7;
	BCEKBNMNHOO BLAAOIAEIAH = 6;
}
message TakeMaterialSubmitActivityRewardCsReq {
	uint32 PEHOFBBDNIC = 6;
}
message TakeMaterialSubmitActivityRewardScRsp {
	ItemList reward = 9;
	uint32 retcode = 3;
	uint32 PEHOFBBDNIC = 14;
}
message OHANJNJCEPG {
}
message GetAvatarDeliverRewardActivityDataScRsp {
	bool is_taken_reward = 5;
	uint32 avatar_id = 12;
	uint32 retcode = 11;
}
message EKNDBKPMEDA {
	uint32 avatar_id = 2;
}
message AvatarDeliverRewardChooseAvatarScRsp {
	uint32 retcode = 13;
	uint32 avatar_id = 5;
}
message ABMHBIAPENA {
}
message AvatarDeliverRewardTakeRewardScRsp {
	ItemList reward = 1;
	uint32 retcode = 4;
}
message EnterAdventureCsReq {
	uint32 map_id = 9;
}
message EnterAdventureScRsp {
	uint32 retcode = 8;
	SceneInfo scene = 14;
}
message FarmStageGachaInfo {
	uint32 gacha_id = 7;
	int64 begin_time = 3;
	int64 end_time = 10;
}
message GetFarmStageGachaInfoCsReq {
	repeated uint32 farm_stage_gacha_id_list = 6;
}
message GetFarmStageGachaInfoScRsp {
	repeated FarmStageGachaInfo farm_stage_gacha_info_list = 12;
	uint32 retcode = 5;
}
message QuickStartCocoonStageCsReq {
	uint32 cocoon_id = 7;
	uint32 world_level = 15;
	uint32 wave = 10;
}
message QuickStartCocoonStageScRsp {
	SceneBattleInfo battle_info = 13;
	uint32 wave = 7;
	uint32 retcode = 10;
	uint32 cocoon_id = 15;
}
message QuickStartFarmElementCsReq {
	uint32 JDANOKNHNHL = 13;
	uint32 world_level = 6;
}
message QuickStartFarmElementScRsp {
	uint32 retcode = 1;
	SceneBattleInfo battle_info = 5;
	uint32 world_level = 6;
	uint32 JDANOKNHNHL = 14;
}
message LAEAAHOIMHE {
	uint32 cocoon_id = 15;
	uint32 world_level = 7;
}
message CocoonSweepScRsp {
	uint32 cocoon_id = 3;
	ItemList multiple_drop_data = 12;
	ItemList drop_data = 6;
	uint32 retcode = 4;
}
message BDNEKEEAGHG {
	uint32 world_level = 4;
	uint32 JDANOKNHNHL = 6;
}
message FarmElementSweepScRsp {
	ItemList multiple_drop_data = 10;
	uint32 JDANOKNHNHL = 9;
	uint32 retcode = 5;
}
message EnterAetherDivideSceneCsReq {
	uint32 BDKNGDOCPGP = 11;
}
message EnterAetherDivideSceneScRsp {
	uint32 retcode = 5;
	uint32 BDKNGDOCPGP = 15;
}
message LeaveAetherDivideSceneCsReq {
}
message LeaveAetherDivideSceneScRsp {
	uint32 retcode = 10;
}
message StartAetherDivideSceneBattleCsReq {
	repeated uint32 assist_monster_entity_id_list = 1;
	repeated AssistMonsterEntityInfo assist_monster_entity_info = 14;
	uint32 attacked_by_entity_id = 4;
	uint32 skill_index = 10;
	uint32 cast_entity_id = 9;
}
message StartAetherDivideSceneBattleScRsp {
	AetherDivideBattleInfo battle_info = 13;
	uint32 retcode = 2;
	uint32 cast_entity_id = 4;
}
message StartAetherDivideChallengeBattleCsReq {
	uint32 lineup_index = 5;
	uint32 challenge_id = 8;
}
message StartAetherDivideChallengeBattleScRsp {
	AetherDivideBattleInfo battle_info = 6;
	uint32 retcode = 12;
}
message PassiveSkillItem {
	uint32 item_id = 9;
	uint32 slot = 3;
}
message AetherDivideSpiritInfo {
	uint32 exp = 8;
	uint32 aether_avatar_id = 12;
	SpBarInfo sp_bar = 10;
	uint32 JDHCHABCLCC = 5;
	uint32 promotion = 14;
	repeated PassiveSkillItem passive_skill = 2;
}
message AetherDivideLineupInfo {
	uint32 slot = 3;
	repeated uint32 aether_avatar_list = 1;
}
message AetherSkillInfo {
	uint32 item_id = 6;
	uint32 num = 10;
	uint32 skill_dress_avatar_id = 11;
}
message GetAetherDivideInfoCsReq {
}
message GetAetherDivideInfoScRsp {
	uint32 retcode = 2;
	uint32 EGEMNDNEDIP = 8;
	uint32 JDHLMHJBOJM = 7;
	repeated AetherDivideSpiritInfo NLFIHKICDDO = 10;
	repeated AetherDivideLineupInfo lineup_list = 4;
	uint32 IBCIPIIDCOL = 1;
	repeated AetherSkillInfo skill_list = 11;
	uint32 PHLKDNGHOOA = 13;
	uint32 PFLJGGDAOFM = 5;
}
message SetAetherDivideLineUpCsReq {
	AetherDivideLineupInfo lineup = 8;
}
message SetAetherDivideLineUpScRsp {
	AetherDivideLineupInfo lineup = 4;
	uint32 retcode = 1;
}
message EquipAetherDividePassiveSkillCsReq {
	uint32 aether_avatar_id = 4;
	uint32 slot = 6;
	uint32 item_id = 7;
}
message EquipAetherDividePassiveSkillScRsp {
	AetherSkillInfo aether_skill_info = 10;
	uint32 retcode = 11;
	AetherDivideSpiritInfo aether_info = 7;
}
message ClearAetherDividePassiveSkillCsReq {
	uint32 slot = 8;
	uint32 aether_avatar_id = 6;
}
message ClearAetherDividePassiveSkillScRsp {
	uint32 retcode = 12;
	AetherSkillInfo aether_skill_info = 3;
	AetherDivideSpiritInfo aether_info = 2;
}
message AetherDivideSpiritExpUpCsReq {
	uint32 KBMLAJOAANE = 9;
	uint32 aether_avatar_id = 11;
	uint32 JDHLMHJBOJM = 14;
}
message AetherDivideSpiritExpUpScRsp {
	uint32 retcode = 7;
	uint32 JDHLMHJBOJM = 8;
	AetherDivideSpiritInfo aether_info = 9;
}
message SwitchAetherDivideLineUpSlotCsReq {
	uint32 lineup_index = 2;
}
message SwitchAetherDivideLineUpSlotScRsp {
	uint32 retcode = 3;
	uint32 lineup_index = 2;
}
message StartAetherDivideStageBattleCsReq {
	uint32 event_id = 14;
}
message StartAetherDivideStageBattleScRsp {
	uint32 retcode = 11;
	AetherDivideBattleInfo battle_info = 12;
}
message AetherDivideLineupScNotify {
	AetherDivideLineupInfo lineup = 12;
}
message AetherDivideSpiritInfoScNotify {
	repeated AetherDivideSpiritInfo MGEGIMBBAJB = 12;
	AetherDivideSpiritInfo aether_info = 1;
	uint32 JDHLMHJBOJM = 3;
}
message GetAetherDivideChallengeInfoCsReq {
}
message GetAetherDivideChallengeInfoScRsp {
	repeated uint32 GKHJKFCCCGP = 4;
	uint32 PCNNMJBJIOC = 10;
	uint32 retcode = 13;
	repeated uint32 BFDIPGBLMMO = 8;
}
message AetherDivideFinishChallengeScNotify {
	uint32 challenge_id = 8;
}
message AetherDivideTainerInfoScNotify {
	uint32 EGEMNDNEDIP = 10;
}
message AetherDivideSkillItemScNotify {
	uint32 num = 2;
	uint32 item_id = 6;
}
message AetherDivideRefreshEndlessCsReq {
}
message AetherDivideRefreshEndlessScRsp {
	uint32 retcode = 4;
	uint32 IBCIPIIDCOL = 6;
}
message AetherDivideRefreshEndlessScNotify {
	uint32 IBCIPIIDCOL = 9;
}
message AetherDivideTakeChallengeRewardCsReq {
	uint32 challenge_id = 5;
}
message AetherDivideTakeChallengeRewardScRsp {
	uint32 challenge_id = 8;
	ItemList reward = 11;
	uint32 retcode = 5;
}
message GetAlleyInfoCsReq {
}
message ADOLEOFEGOK {
	uint32 POIIAIAKILF = 6;
	uint32 map_id = 15;
}
message OAJLGIONPGE {
	uint32 level = 2;
	uint32 shop_id = 6;
}
message AGADEMAJIMD {
	repeated uint32 OMNGCIJALFM = 4;
	repeated LogisticsScore FMJPLHOHBAB = 12;
	repeated NJAOIGGMEAL HNFOJBCJAMG = 7;
	repeated ADOLEOFEGOK IMMLPHDNMOL = 14;
}
message GetAlleyInfoScRsp {
	AGADEMAJIMD NJGAMCCGADC = 8;
	uint32 retcode = 10;
	repeated HEHAOMIAMGL BJCMPHLPKNF = 6;
	repeated uint32 GEFNDEEIKEF = 12;
	repeated uint32 OEDPOPCOHGB = 11;
	uint32 cur_fund = 9;
	uint32 level = 15;
	uint32 NOPODEIMFFB = 1;
	ECJMJJKJGOP BOKOLCPKEJM = 7;
	repeated uint32 GLBOEMJJAHD = 13;
	LAIEMCFACDK KLPNGFNMIPI = 2;
	map<uint32, uint32> NPLAKEOKEKB = 14;
}
message KFAIFHOPNHH {
	uint32 IFFPPGLAFNB = 7;
	uint32 BDDLDNEJFKN = 3;
}
message KGCANLJIKCP {
	repeated KFAIFHOPNHH KALFMCAGHDO = 7;
	uint32 goods_id = 14;
}
message AlleyPlacingShip {
	uint32 ShipId = 1;
	repeated KGCANLJIKCP GoodsList = 12;
}
message AlleyPlacingGameCsReq {
	uint32 HLOJKEKIPKF = 1;
	uint32 ENGDBIIMAFF = 10;
	uint32 INDEPLOFDEC = 5;
	AlleyPlacingShip EJJODHJHHAM = 11;
	uint32 FJDABPPANDC = 12;
	uint32 KEOKDNIKBDA = 14;
	uint32 cost_time = 8;
	uint32 BMNHHIDHODD = 15;
	uint32 DHHJLCHCLAF = 6;
}
message AlleyPlacingGameScRsp {
	uint32 ILEGFKGCMOM = 3;
	uint32 event_id = 13;
	uint32 PGLGBLKKIDA = 5;
	uint32 KFBOKLHDJDA = 4;
	uint32 retcode = 7;
	uint32 KHIBBGPHDMB = 10;
	uint32 KOFICKLLJNI = 15;
	uint32 ELBBANDDJCI = 11;
}
message ActivityRaidPlacingGameCsReq {
	oneof DGEPHKNEPBM {
		uint32 CJEMMDPICLJ = 13;
		uint32 FJDABPPANDC = 14;
	}
	AlleyPlacingShip EJJODHJHHAM = 5;
}
message ActivityRaidPlacingGameScRsp {
	oneof DGEPHKNEPBM {
		uint32 CJEMMDPICLJ = 5;
		uint32 FJDABPPANDC = 2;
	}
	uint32 retcode = 9;
}
message ECJMJJKJGOP {
	uint32 HDKDKJBDGCC = 8;
	uint32 CPGAJPCKCDG = 1;
	uint32 JALHNEIDHGJ = 7;
	bool IICHHOKOPGG = 3;
	repeated uint32 FBEILDAJEDE = 6;
	repeated uint32 JDJCNBGOGLP = 11;
}
message AlleyOrderChangedScNotify {
	ECJMJJKJGOP PPHIADNKGAF = 14;
}
message AlleyShipUnlockScNotify {
	uint32 EJDFKNMNALE = 12;
}
message LLLOMACPCGB {
	repeated uint32 PPIBBKHLMJC = 1;
	uint32 shop_id = 9;
	uint32 BEHPABEEODH = 11;
	uint32 LEPACDHLBIB = 4;
	repeated uint32 DGNKGDLILLB = 5;
	uint32 CAKCCBJOHOI = 13;
	repeated uint32 CADHPHLNOCH = 12;
}
message NJAOIGGMEAL {
	uint32 cost_time = 2;
	uint32 map_id = 1;
	repeated LLLOMACPCGB HOFDBFLCGKB = 14;
}
message LogisticsScore {
	uint32 LastMaxScore = 15;
	uint32 MapId = 6;
	ItemList Reward = 10;
	uint32 LastLevel = 2;
	uint32 MaxScore = 11;
	uint32 UnlockLevel = 1;
	uint32 CurScore = 3;
}
message LogisticsGameCsReq {
	repeated NJAOIGGMEAL APMCPHFMAEG = 7;
	bool BOBLNBJMKCA = 8;
}
message LogisticsScoreRewardSyncInfoScNotify {
	repeated LogisticsScore FMJPLHOHBAB = 6;
}
message LogisticsGameScRsp {
	uint32 retcode = 6;
	bool BOBLNBJMKCA = 3;
	uint32 event_id = 12;
	repeated LogisticsScore FMJPLHOHBAB = 9;
}
message HEHAOMIAMGL {
	AlleyEventState state = 1;
	uint32 event_id = 4;
	uint32 NINGBNBMKOP = 10;
}
message StartAlleyEventCsReq {
	uint32 event_id = 4;
}
message StartAlleyEventScRsp {
	uint32 event_id = 5;
	uint32 retcode = 7;
}
message AlleyEventChangeNotify {
	uint32 HCNLDIBEACA = 5;
	HEHAOMIAMGL NFLDODIABCL = 9;
}
message AlleyEventEffectNotify {
	uint32 LFILNMFDNIG = 1;
}
message TakePrestigeRewardCsReq {
	uint32 level = 8;
}
message TakePrestigeRewardScRsp {
	ItemList reward = 11;
	uint32 level = 2;
	uint32 retcode = 10;
}
message PrestigeLevelUpCsReq {
}
message PrestigeLevelUpScRsp {
	uint32 retcode = 13;
	uint32 level = 4;
}
message AlleyFundsScNotify {
	uint32 cur_fund = 12;
}
message SaveLogisticsCsReq {
	repeated NJAOIGGMEAL APMCPHFMAEG = 4;
}
message SaveLogisticsScRsp {
	uint32 retcode = 1;
	repeated NJAOIGGMEAL APMCPHFMAEG = 6;
}
message LogisticsInfoScNotify {
	AGADEMAJIMD NJGAMCCGADC = 4;
}
message LAIEMCFACDK {
	uint32 ALGHCNAJBMM = 9;
	map<uint32, uint32> AAHAPCBILHC = 1;
	uint32 PGHCKCPKGLL = 6;
}
message AlleyShipmentEventEffectsScNotify {
	LAIEMCFACDK LGJKPJOJBLF = 12;
}
message GetSaveLogisticsMapCsReq {
}
message GetSaveLogisticsMapScRsp {
	uint32 retcode = 6;
	repeated NJAOIGGMEAL HNFOJBCJAMG = 12;
}
message AlleyShipUsedCountScNotify {
	map<uint32, uint32> NPLAKEOKEKB = 6;
}
message AlleyGuaranteedFundsCsReq {
}
message AlleyGuaranteedFundsScRsp {
	uint32 CLIBOBEHNDM = 6;
	uint32 retcode = 12;
}
message AlleyTakeEventRewardCsReq {
	uint32 event_id = 5;
}
message AlleyTakeEventRewardScRsp {
	ItemList reward = 14;
	uint32 retcode = 8;
}
message LogisticsDetonateStarSkiffCsReq {
}
message LogisticsDetonateStarSkiffScRsp {
	uint32 retcode = 4;
}
message RelicList {
	uint32 type = 10;
	uint32 set_id = 7;
}
message MonsterList {
	uint32 monster_id = 4;
	uint32 num = 13;
}
message ArchiveData {
	repeated MonsterList kill_monster_list = 8;
	repeated uint32 archive_equipment_id_list = 13;
	repeated uint32 archive_avatar_id_list = 1;
	repeated RelicList relic_list = 9;
	repeated uint32 archive_missing_equipment_id_list = 10;
}
message GetArchiveDataCsReq {
}
message GetArchiveDataScRsp {
	ArchiveData archive_data = 8;
	uint32 retcode = 6;
}
message GetUpdatedArchiveDataCsReq {
}
message GetUpdatedArchiveDataScRsp {
	ArchiveData archive_data = 6;
	uint32 retcode = 8;
}
message GetAvatarDataCsReq {
	bool is_get_all = 14;
	repeated uint32 base_avatar_id_list = 12;
}
message EquipRelic {
	uint32 type = 3;
	uint32 relic_unique_id = 13;
}
message Avatar {
	bool is_marked = 3;
	uint32 base_avatar_id = 8;
	uint32 level = 10;
	repeated AvatarSkillTree skilltree_list = 2;
	uint32 dressed_skin_id = 11;
	repeated EquipRelic equip_relic_list = 6;
	uint32 equipment_unique_id = 13;
	uint64 first_met_time_stamp = 15;
	uint32 exp = 5;
	uint32 rank = 7;
	repeated uint32 has_taken_promotion_reward_list = 12;
	uint32 promotion = 1;
}
message GetAvatarDataScRsp {
	repeated GrowthTartgetFuncType PNKCFEALAMI = 7;
	repeated Avatar avatar_list = 5;
	uint32 retcode = 3;
	repeated uint32 skin_list = 9;
	uint32 JPNLPOPMKEJ = 8;
	bool is_get_all = 4;
}
message AvatarExpUpCsReq {
	uint32 base_avatar_id = 12;
	ItemCostData item_cost = 11;
}
message AvatarExpUpScRsp {
	repeated PileItem return_item_list = 11;
	uint32 retcode = 10;
}
message UnlockSkilltreeCsReq {
	uint32 point_id = 3;
	uint32 level = 9;
	repeated ItemCost item_list = 8;
}
message UnlockSkilltreeScRsp {
	uint32 level = 7;
	uint32 point_id = 1;
	uint32 retcode = 13;
}
message PromoteAvatarCsReq {
	repeated ItemCost item_list = 10;
	uint32 base_avatar_id = 12;
}
message PromoteAvatarScRsp {
	uint32 retcode = 2;
}
message DressAvatarCsReq {
	uint32 equipment_unique_id = 3;
	uint32 avatar_id = 6;
}
message DressAvatarScRsp {
	uint32 retcode = 4;
}
message TakeOffEquipmentCsReq {
	uint32 avatar_id = 12;
}
message TakeOffEquipmentScRsp {
	uint32 retcode = 12;
}
message AddAvatarScNotify {
	AddAvatarSrcState src = 3;
	bool is_new = 14;
	ItemList reward = 12;
	uint32 base_avatar_id = 6;
}
message AddMultiPathAvatarScNotify {
	ItemList reward = 14;
	bool is_new = 3;
	uint32 avatar_id = 10;
}
message RankUpAvatarCsReq {
	ItemCostData cost_data = 1;
	uint32 rank = 3;
	uint32 avatar_id = 9;
}
message RankUpAvatarScRsp {
	uint32 retcode = 15;
}
message DressRelicParam {
	uint32 relic_unique_id = 6;
	uint32 relic_type = 7;
}
message DressRelicAvatarCsReq {
	uint32 avatar_id = 1;
	repeated DressRelicParam switch_list = 11;
}
message DressRelicAvatarScRsp {
	uint32 retcode = 15;
}
message TakeOffRelicCsReq {
	uint32 avatar_id = 3;
	repeated uint32 relic_type_list = 1;
}
message TakeOffRelicScRsp {
	uint32 retcode = 12;
}
message TakePromotionRewardCsReq {
	uint32 base_avatar_id = 10;
	uint32 promotion = 11;
}
message TakePromotionRewardScRsp {
	uint32 retcode = 9;
	ItemList reward_list = 13;
}
message DressAvatarSkinCsReq {
	uint32 avatar_id = 1;
	uint32 skin_id = 2;
}
message DressAvatarSkinScRsp {
	uint32 retcode = 1;
}
message TakeOffAvatarSkinCsReq {
	uint32 avatar_id = 8;
}
message TakeOffAvatarSkinScRsp {
	uint32 retcode = 8;
}
message UnlockAvatarSkinScNotify {
	uint32 skin_id = 12;
}
message MarkAvatarCsReq {
	bool is_marked = 10;
	uint32 avatar_id = 13;
}
message MarkAvatarScRsp {
	bool is_marked = 13;
	uint32 retcode = 10;
	uint32 avatar_id = 1;
}
message SetGrowthTargetAvatarCsReq {
	repeated GrowthTartgetFuncType growth_target_type_list = 1;
	uint32 IDNMEKNHLPO = 14;
	GrowthTargetState source = 5;
	uint32 avatar_id = 3;
}
message SetGrowthTargetAvatarScRsp {
	uint32 NCBKPDNGOHJ = 4;
	repeated GrowthTartgetFuncType growth_target_type_list = 11;
	uint32 JPNLPOPMKEJ = 5;
	uint32 retcode = 13;
}
message GrowthTargetAvatarChangedScNotify {
	repeated GrowthTartgetFuncType growth_target_type_list = 8;
	uint32 JPNLPOPMKEJ = 7;
}
message GetPreAvatarGrowthInfoCsReq {
	uint32 KJAEOJBJOJD = 4;
}
message GetPreAvatarGrowthInfoScRsp {
	uint32 KIEJACMOGAN = 605;
	uint32 LKKAMLLAFAE = 4;
	uint32 DBIJFKOBKKH = 1;
	uint32 FOJCCKACDHH = 7;
	uint32 DLAPKBDDBBC = 5;
	string EBPPBPMHDHI = 62;
	uint32 KJAEOJBJOJD = 9;
	uint32 LIJCNGOHKHF = 13;
	uint32 EGDDNPEONKC = 11;
	uint32 retcode = 3;
	string MKHLDLFONKN = 803;
	uint32 IHOKHLFHOCC = 6;
	uint32 PMMCFGMPLBA = 12;
	uint32 HDNIKCBLKIL = 2;
	string OANPNFJJFHG = 1536;
	uint32 JJMKEADCIAG = 8;
	uint32 FLAAGNAPDHP = 10;
	string KPJHBEILAIP = 895;
	uint32 AEKFJKENPHN = 15;
	uint32 PHIBNKMIOGP = 14;
	uint32 DGGNNBCJOCC = 182;
}
message OPPGLJBHKLL {
	uint32 KJAEOJBJOJD = 11;
	uint32 type = 10;
	uint32 panel_id = 4;
}
message MMAJMOJIGGD {
}
message GetPreAvatarListScRsp {
	uint32 retcode = 8;
	repeated OPPGLJBHKLL JMJGMDHNPEN = 7;
}
message PVEBattleResultCsReq {
	uint32 client_res_version = 2;
	uint32 cost_time = 14;
	uint32 stage_id = 12;
	uint32 JCJFGOJFEGE = 15;
	bool GJGKAGFPAGM = 5;
	BattleStatistics stt = 3;
	map<string, uint32> HPEKEKIPJLF = 1;
	string debug_extra_info = 6;
	bool is_ai_consider_ultra_skill = 10;
	repeated BattleOp op_list = 4;
	bool is_auto_fight = 8;
	BattleEndStatus end_status = 9;
	uint32 battle_id = 13;
	bytes turn_snapshot_hash = 7;
	uint32 client_version = 11;
}
message PVEBattleResultScRsp {
	uint32 mismatch_turn_count = 6;
	uint32 KLODELECMCI = 13;
	uint32 stage_id = 4;
	ItemList drop_data = 11;
	ItemList multiple_drop_data = 1;
	string HKPGCAPIMAO = 14;
	uint32 event_id = 5;
	string APJKCAOHAFP = 12;
	ItemList item_list_unk1 = 10;
	ItemList item_list_unk2 = 1248;
	repeated BattleAvatar battle_avatar_list = 15;
	uint32 retcode = 9;
	MBKOCMMICPG KJCHGEHDLNO = 1423;
	bool check_identical = 8;
	uint32 battle_id = 3;
	uint32 GGMPFNKOFKD = 7;
	BattleEndStatus end_status = 2;
}
message QuitBattleCsReq {
	RebattleType rebattle_type = 8;
	BattleStatistics stt = 9;
}
message QuitBattleScRsp {
	uint32 retcode = 9;
}
message GetCurBattleInfoCsReq {
}
message GetCurBattleInfoScRsp {
	AetherDivideBattleInfo PBPHJBAFGBB = 6;
	BattleEndStatus last_end_status = 8;
	uint32 retcode = 12;
	uint32 IBPJKFFFLNG = 4;
	SceneBattleInfo battle_info = 2;
}
message SyncClientResVersionCsReq {
	uint32 client_res_version = 5;
}
message SyncClientResVersionScRsp {
	uint32 client_res_version = 7;
	uint32 retcode = 6;
}
message QuitBattleScNotify {
}
message BattleLogReportCsReq {
}
message BattleLogReportScRsp {
	bool is_battle_log_report = 2;
	uint32 retcode = 12;
}
message ServerSimulateBattleFinishScNotify {
}
message ReBattleAfterBattleLoseCsNotify {
	bool PMJAHILBLFL = 8;
}
message RebattleByClientCsNotify {
	RebattleType rebattle_type = 15;
	BattleStatistics stt = 14;
}
message GetBattleCollegeDataCsReq {
}
message GetBattleCollegeDataScRsp {
	repeated uint32 finished_college_id_list = 13;
	uint32 retcode = 2;
	uint32 MAMHOJMFJOF = 6;
}
message BattleCollegeDataChangeScNotify {
	ItemList reward = 2;
	uint32 MAMHOJMFJOF = 14;
	repeated uint32 finished_college_id_list = 12;
}
message StartBattleCollegeCsReq {
	uint32 id = 1;
}
message StartBattleCollegeScRsp {
	SceneBattleInfo battle_info = 7;
	uint32 id = 8;
	uint32 retcode = 5;
}
message BattlePassInfoNotify {
	uint64 CPHIIOCKHPI = 13;
	uint32 LJFLFLIMKAD = 10;
	uint64 INBOCKJGLBO = 7;
	uint64 FDKKIKGANCK = 14;
	BpTierType JLLHALOHJII = 5;
	uint64 HKEOAACCBPL = 9;
	uint64 EKGOPLDJOII = 8;
	uint64 NKAOKNMHOLH = 11;
	uint64 LJOEKEFKPKO = 15;
	uint64 CBJKLLEOHDC = 3;
	uint32 level = 12;
	uint32 EDBMNMDJBKO = 6;
	uint32 exp = 1;
}
message TakeBpRewardCsReq {
	BpRewardType type = 4;
	uint32 level = 6;
	uint32 optional_reward_id = 7;
}
message TakeBpRewardScRsp {
	uint32 retcode = 2;
	ItemList reward = 9;
}
message BuyBpLevelCsReq {
	uint32 LDNJEACFBJE = 10;
}
message BuyBpLevelScRsp {
	uint32 retcode = 3;
}
message OptionalReward {
	uint32 Level = 12;
	uint32 OptionalRewardId = 2;
}
message TakeAllRewardCsReq {
	repeated OptionalReward MODOOFJOIAO = 4;
}
message TakeAllRewardScRsp {
	ItemList reward = 13;
	uint32 retcode = 3;
}
message GetBenefitActivityInfoCsReq {
}
message LuckyKoiInfo {
	uint32 HeadIcon = 5;
	string NameStr = 1;
	string UidStr = 13;
}
message BenefitRewardItem {
	uint32 level = 7;
	ItemList item_list = 1;
}
message BenefitItemConfig {
	repeated BenefitRewardItem rogue_score_reward_info = 11;
	repeated LuckyKoiInfo lucky_koi_list = 5;
	uint64 end_time = 15;
	uint64 begin_time = 1;
	uint32 reveal_num_limit = 13;
	uint64 reveal_time = 3;
}
message BenefitData {
	BenefitItemConfig config = 14;
	uint32 level = 2;
	uint32 status = 13;
	uint32 daily_index = 3;
}
message GetBenefitActivityInfoScRsp {
	uint32 retcode = 14;
	repeated BenefitData benefit_data_list = 7;
	bool is_open = 8;
}
message SwitchItem {
	uint32 daily_index = 6;
	bool EINFBGKENDH = 4;
}
message TakeBenefitActivityRewardCsReq {
	bool BFBPCBNPFPH = 12;
	repeated SwitchItem switch_list = 15;
}
message RewardSwitchItem {
	ItemList item_list = 12;
	bool EINFBGKENDH = 2;
	uint32 daily_index = 13;
}
message TakeBenefitActivityRewardScRsp {
	ItemList CKEKCCONJGB = 12;
	repeated RewardSwitchItem switch_list = 1;
	uint32 retcode = 13;
}
message JoinBenefitActivityCsReq {
	uint32 daily_index = 11;
}
message JoinBenefitActivityScRsp {
	uint32 daily_index = 3;
	uint32 retcode = 1;
}
message IJKJJDHLKLB {
	uint32 avatar_id = 2;
	AvatarType avatar_type = 4;
}
message FCIHIJLOMGA {
	uint32 NAALCBMBPGC = 11;
	repeated uint32 avatar_list = 3;
	uint32 LLFOFPNDAFG = 13;
	uint32 HJMGLEMJHKG = 5;
	repeated IJKJJDHLKLB MDLACHDKMPH = 4;
	uint32 challenge_id = 10;
	repeated uint32 HLIBIJFHHPG = 7;
	uint32 CPGOIPICPJF = 12;
	bool APLKNJEGBKF = 2;
	uint32 HNPEAPPMGAA = 6;
}
message GetBoxingClubInfoCsReq {
}
message GetBoxingClubInfoScRsp {
	uint32 retcode = 1;
	repeated FCIHIJLOMGA challenge_list = 2;
}
message GNEIBBPOAAB {
	AvatarType avatar_type = 3;
	uint32 avatar_id = 1;
}
message MatchBoxingClubOpponentCsReq {
	repeated GNEIBBPOAAB MDLACHDKMPH = 9;
	uint32 challenge_id = 10;
	repeated uint32 avatar_list = 3;
}
message MatchBoxingClubOpponentScRsp {
	uint32 retcode = 5;
	FCIHIJLOMGA challenge = 4;
}
message ChooseBoxingClubResonanceCsReq {
	uint32 challenge_id = 10;
	uint32 LLFOFPNDAFG = 13;
}
message ChooseBoxingClubResonanceScRsp {
	uint32 retcode = 1;
	FCIHIJLOMGA challenge = 6;
}
message SetBoxingClubResonanceLineupCsReq {
	uint32 challenge_id = 13;
	repeated GNEIBBPOAAB MDLACHDKMPH = 6;
}
message SetBoxingClubResonanceLineupScRsp {
	FCIHIJLOMGA challenge = 15;
	uint32 retcode = 13;
}
message ChooseBoxingClubStageOptionalBuffCsReq {
	uint32 FMGMAIEGOFP = 15;
	uint32 challenge_id = 14;
}
message ChooseBoxingClubStageOptionalBuffScRsp {
	uint32 retcode = 1;
	FCIHIJLOMGA challenge = 6;
}
message StartBoxingClubBattleCsReq {
	uint32 challenge_id = 12;
}
message StartBoxingClubBattleScRsp {
	uint32 challenge_id = 4;
	SceneBattleInfo battle_info = 13;
	uint32 retcode = 15;
}
message GiveUpBoxingClubChallengeCsReq {
	uint32 challenge_id = 8;
	bool PCPDFJHDJCC = 6;
}
message GiveUpBoxingClubChallengeScRsp {
	FCIHIJLOMGA challenge = 6;
	uint32 retcode = 4;
}
message BoxingClubRewardScNotify {
	ItemList reward = 12;
	uint32 challenge_id = 6;
	bool is_win = 3;
	uint32 NAALCBMBPGC = 14;
}
message BoxingClubChallengeUpdateScNotify {
	FCIHIJLOMGA challenge = 4;
}
message Challenge {
	uint32 star = 13;
	uint32 challenge_id = 8;
	uint32 taken_reward = 7;
	bool KFDAICILNMB = 1;
	ChallengeStageInfo stage_info = 10;
	uint32 record_id = 11;
	uint32 score_two = 2;
	uint32 score_id = 6;
}
message ChallengeGroup {
	uint32 group_id = 11;
	uint64 taken_stars_count_reward = 15;
}
message CCLGLPABGHD {
	uint32 level = 7;
	uint32 reward_display_type = 2;
}
message GetChallengeCsReq {
}
message GetChallengeScRsp {
	repeated CCLGLPABGHD AMPKEOIFEEH = 13;
	uint32 LPLJMKPBLIF = 14;
	repeated ChallengeGroup challenge_group_list = 5;
	repeated Challenge challenge_list = 7;
	uint32 retcode = 15;
}
message ChallengeStoryBuffInfo {
	uint32 buff_two = 8;
	uint32 buff_one = 4;
}
message ChallengeBossBuffInfo {
	uint32 buff_one = 2;
	uint32 buff_two = 7;
}
message ChallengeBuffInfo {
	oneof info_case {
		ChallengeStoryBuffInfo story_info = 2;
		ChallengeBossBuffInfo boss_info = 1;
	}
}
message StartChallengeCsReq {
	uint32 challenge_id = 3;
	repeated uint32 first_lineup = 10;
	repeated uint32 second_lineup = 15;
	ChallengeBuffInfo stage_info = 14;
}
message StartChallengeScRsp {
	repeated LineupInfo lineup_list = 8;
	SceneInfo scene = 2;
	uint32 retcode = 1;
	ChallengeStageInfo stage_info = 11;
	CurChallenge cur_challenge = 12;
}
message StartPartialChallengeCsReq {
	bool is_first_half = 10;
	uint32 buff_id = 12;
	uint32 challenge_id = 5;
}
message StartPartialChallengeScRsp {
	LineupInfo lineup = 8;
	uint32 retcode = 9;
	CurChallenge cur_challenge = 4;
	SceneInfo scene = 7;
}
message LeaveChallengeCsReq {
}
message LeaveChallengeScRsp {
	uint32 retcode = 7;
}
message ChallengeSettleNotify {
	CurChallenge cur_challenge = 6;
	ItemList reward = 5;
	CCLGLPABGHD CCOAJGDEPJA = 9;
	uint32 challenge_id = 8;
	bool is_win = 12;
	uint32 star = 1;
	uint32 challenge_score = 10;
	repeated uint32 HAHAEIFMLBM = 2;
	uint32 score_two = 14;
	uint32 LPLJMKPBLIF = 7;
}
message KillMonster {
	uint32 monster_id = 13;
	uint32 kill_num = 1;
}
message ChallengeStoryBuffList {
	repeated uint32 buff_list = 10;
}
message ChallengeBossBuffList {
	repeated uint32 buff_list = 14;
	uint32 challenge_boss_const = 11;
}
message ChallengeCurBuffInfo {
	oneof info_case {
		ChallengeStoryBuffList cur_story_buffs = 14;
		ChallengeBossBuffList cur_boss_buffs = 4;
	}
}
message CurChallenge {
	ExtraLineupType extra_lineup_type = 8;
	uint32 dead_avatar_num = 3;
	repeated KillMonster kill_monster_list = 9;
	ChallengeStatus status = 12;
	uint32 round_count = 4;
	uint32 challenge_id = 11;
	uint32 score_two = 2;
	uint32 score_id = 1;
	ChallengeCurBuffInfo stage_info = 15;
}
message GetCurChallengeCsReq {
}
message GetCurChallengeScRsp {
	uint32 retcode = 5;
	repeated LineupInfo lineup_list = 8;
	CurChallenge cur_challenge = 4;
}
message ChallengeLineupNotify {
	ExtraLineupType extra_lineup_type = 4;
}
message TakeChallengeRewardCsReq {
	uint32 group_id = 10;
}
message TakeChallengeRewardScRsp {
	uint32 retcode = 1;
	uint32 group_id = 9;
	repeated TakenChallengeRewardInfo taken_reward_list = 6;
}
message TakenChallengeRewardInfo {
	ItemList reward = 12;
	uint32 star_count = 13;
}
message ChallengeStatistics {
	uint32 record_id = 12;
	ChallengeStageTertinggi stage_tertinggi = 8;
}
message ChallengeStoryStatistics {
	ChallengeStoryStageTertinggi stage_tertinggi = 13;
	uint32 record_id = 10;
}
message ChallengeBossStatistics {
	ChallengeBossStageTertinggi stage_tertinggi = 6;
	uint32 record_id = 9;
}
message ChallengeStageTertinggi {
	repeated ChallengeLineupList lineup_list = 7;
	uint32 INHDDNNPBDB = 2;
	uint32 round_count = 14;
	uint32 level = 10;
}
message ChallengeStoryStageTertinggi {
	uint32 INHDDNNPBDB = 1;
	uint32 buff_two = 9;
	uint32 buff_one = 11;
	uint32 level = 5;
	repeated ChallengeLineupList lineup_list = 10;
	uint32 score_id = 3;
}
message ChallengeBossStageTertinggi {
	repeated ChallengeLineupList lineup_list = 9;
	uint32 buff_one = 4;
	uint32 INHDDNNPBDB = 8;
	uint32 level = 7;
	uint32 buff_two = 1;
	uint32 score_id = 2;
}
message ChallengeLineupList {
	repeated ChallengeAvatarInfo avatar_list = 13;
}
message ChallengeAvatarInfo {
	uint32 GGDIIBCDOBB = 15;
	uint32 level = 9;
	uint32 id = 12;
	AvatarType avatar_type = 4;
	uint32 index = 8;
}
message GetChallengeGroupStatisticsCsReq {
	uint32 group_id = 8;
}
message GetChallengeGroupStatisticsScRsp {
	oneof challenge_stt_case {
		ChallengeStatistics challenge_default = 3;
		ChallengeStoryStatistics challenge_story = 15;
		ChallengeBossStatistics challenge_boss = 10;
	}
	uint32 retcode = 6;
	uint32 group_id = 11;
}
message ChallengeBossSingleNodeInfo {
	bool MEELGNDNOMN = 8;
	uint32 buff_id = 3;
	bool is_win = 12;
	uint32 max_score = 1;
}
message ChallengeBossEquipmentInfo {
	uint32 level = 6;
	uint32 rank = 15;
	uint32 unique_id = 9;
	uint32 tid = 12;
	uint32 promotion = 13;
}
message ChallengeBossRelicInfo {
	uint32 tid = 12;
	uint32 main_affix_id = 6;
	uint32 unique_id = 14;
	repeated RelicAffix sub_affix_list = 2;
	uint32 level = 7;
}
message ChallengeBossAvatarRelicInfo {
	map<uint32, ChallengeBossRelicInfo> avatar_relic_slot_map = 7;
}
message ChallengeBossInfo {
	map<uint32, ChallengeBossEquipmentInfo> challenge_avatar_equipment_map = 3;
	repeated uint32 second_lineup = 4;
	ChallengeBossSingleNodeInfo second_node = 13;
	ChallengeBossSingleNodeInfo first_node = 14;
	bool NCBDNPGPEAI = 6;
	map<uint32, ChallengeBossAvatarRelicInfo> challenge_avatar_relic_map = 2;
	repeated uint32 first_lineup = 15;
}
message ChallengeStageInfo {
	oneof info_case {
		ChallengeBossInfo boss_info = 7;
	}
}
message RestartChallengePhaseCsReq {
}
message RestartChallengePhaseScRsp {
	uint32 retcode = 13;
	SceneInfo scene = 2;
}
message EnterChallengeNextPhaseCsReq {
}
message EnterChallengeNextPhaseScRsp {
	SceneInfo scene = 12;
	uint32 retcode = 15;
}
message ChallengeBossPhaseSettleNotify {
	uint32 phase = 3;
	uint32 star = 1;
	bool is_win = 11;
	uint32 challenge_score = 2;
	uint32 score_two = 13;
	uint32 page_type = 7;
	repeated BattleTarget battle_target_list = 9;
	bool is_reward = 5;
	bool is_second_half = 8;
	uint32 challenge_id = 15;
}
message SendMsgCsReq {
	MsgType message_type = 4;
	uint32 extra_id = 6;
	string message_text = 1;
	repeated uint32 target_list = 15;
	ChatType chat_type = 10;
	PEDLPHDBNAF HNBEPABNBNG = 13;
}
message SendMsgScRsp {
	uint32 retcode = 8;
	uint64 end_time = 2;
}
message ChatMessageData {
	uint32 sender_id = 5;
	string content = 15;
	uint32 extra_id = 8;
	PEDLPHDBNAF HNBEPABNBNG = 12;
	uint64 create_time = 14;
	MsgType message_type = 10;
}
message RevcMsgScNotify {
	uint32 source_uid = 11;
	ChatType chat_type = 12;
	string message_text = 8;
	MsgType message_type = 7;
	uint32 extra_id = 6;
	uint32 target_uid = 9;
	PEDLPHDBNAF HNBEPABNBNG = 1;
}
message PrivateMsgOfflineUsersScNotify {
	repeated uint32 contact_id_list = 13;
}
message GetPrivateChatHistoryCsReq {
	uint32 contact_side = 5;
	uint32 target_side = 14;
}
message GetPrivateChatHistoryScRsp {
	uint32 contact_side = 2;
	uint32 target_side = 13;
	uint32 retcode = 5;
	repeated ChatMessageData chat_message_list = 8;
}
message FriendHistoryInfo {
	uint32 contact_side = 9;
	int64 last_send_time = 7;
}
message GetChatFriendHistoryCsReq {
}
message GetChatFriendHistoryScRsp {
	repeated FriendHistoryInfo friend_history_info = 9;
	uint32 retcode = 4;
}
message GetChatEmojiListCsReq {
}
message GetChatEmojiListScRsp {
	repeated uint32 chat_emoji_list = 3;
	uint32 retcode = 7;
}
message MarkChatEmojiCsReq {
	bool is_remove_id = 1;
	uint32 extra_id = 8;
}
message MarkChatEmojiScRsp {
	uint32 extra_id = 2;
	uint32 retcode = 8;
	bool is_remove_id = 4;
}
message BatchMarkChatEmojiCsReq {
	repeated uint32 marked_emoji_id_list = 9;
}
message BatchMarkChatEmojiScRsp {
	repeated uint32 marked_emoji_id_list = 4;
	uint32 retcode = 7;
}
message GetLoginChatInfoCsReq {
}
message GetLoginChatInfoScRsp {
	repeated uint32 contact_id_list = 6;
	uint32 retcode = 14;
}
message RogueAvatarReviveCost {
	ItemCostData rogue_revive_cost = 15;
}
message ChessRogueInfo {
	SceneInfo scene = 13;
	LineupInfo lineup = 6;
}
message LPNKMEMOOBE {
	uint32 id = 7;
	repeated uint32 AJKKNFKIJKH = 15;
}
message MFFKJDNDKIO {
	repeated LPNKMEMOOBE NGFFGBCBBON = 6;
}
message ChessRogueDiceInfo {
	uint32 display_id = 8;
	uint32 PAGPBLAFNEH = 15;
	uint32 cheat_times = 14;
	EENDHPKPFLP EDPHLDEGJLM = 1484;
	bool FNEIDJIMJPH = 1357;
	bool can_reroll_dice = 1;
	uint32 game_branch_id = 4;
	uint32 game_dice_branch_id = 11;
	ChessRogueDice dice = 895;
	uint32 reroll_times = 3;
	repeated uint32 NGDEDLKNGFG = 938;
	RogueModifier rogue_modifider = 1605;
	uint32 cur_surface_slot_id = 5;
	uint32 cur_surface_id = 6;
	int32 JFIPIIFPMMB = 586;
	ChessRogueDiceType dice_type = 10;
	ChessRogueDiceStatus dice_status = 7;
}
message ChessRogueRollDiceCsReq {
	uint32 KCHFJDAJECM = 3;
}
message ChessRogueRollDiceScRsp {
	uint32 DCIHKMFNHBM = 7;
	uint32 retcode = 8;
	ChessRogueDiceInfo rogue_dice_info = 14;
}
message ChessRogueGoAheadCsReq {
	uint32 cell_id = 3;
}
message ChessRogueGoAheadScRsp {
	uint32 retcode = 11;
	uint32 cell_id = 4;
}
message CellMonster {
	uint32 monster_id = 4;
	uint32 boss_decay_id = 2;
}
message CellMonsterInfo {
	bool confirm = 10;
	repeated CellMonster cell_monster_list = 6;
	uint32 select_boss_id = 4;
}
message CellMonsterSelectInfo {
	repeated uint32 select_decay_id = 7;
	repeated uint32 maze_buff_list = 13;
}
message CellFinalMonsterInfo {
	CellMonsterSelectInfo select_boss_info = 10;
	CellMonsterInfo cell_boss_info = 1;
}
message CellAdvanceInfo {
	oneof advance_case {
		CellMonsterInfo cell_boss_info = 2;
		CellMonsterSelectInfo select_boss_info = 3;
		CellFinalMonsterInfo final_boss_info = 9;
	}
}
message ChessRogueCell {
	bool is_unlocked = 9;
	uint32 block_type = 1;
	repeated uint32 MJAPLACIFJN = 11;
	uint32 room_id = 2;
	uint32 mark_type = 7;
	ChessRogueCellSpecialType special_type = 6;
	uint32 pos_x = 3;
	uint32 pos_y = 5;
	ChessRogueBoardCellStatus cell_status = 10;
	bool unlock = 8;
	CellAdvanceInfo stage_info = 14;
	uint32 id = 4;
}
message CellInfo {
	uint32 BMAJDILBPOB = 8;
	repeated ChessRogueCell cell_list = 1;
	uint32 HLAMICLGPEE = 11;
	uint32 HDHIONGOFID = 12;
	uint32 NGHPPEGBPAO = 7;
}
message ChessRogueHistoryCellInfo {
	uint32 cell_id = 9;
	uint32 room_id = 4;
}
message KKCKGEOJFKE {
	uint32 BDMLGEPNDFM = 4;
	EENDHPKPFLP BOHDMINEJNO = 13;
}
message ChessRogueAreaInfo {
	CellInfo cell = 11;
	repeated ChessRogueHistoryCellInfo history_cell = 2;
	uint32 cur_id = 10;
	ChessRogueBoardCellStatus layer_status = 5;
	repeated uint32 allow_select_cell_id_list = 14;
	uint32 cur_board_id = 1;
	KKCKGEOJFKE CFEKAOLKHJG = 13;
}
message ChessRogueLevelInfo {
	uint32 layer_id = 5;
	int32 action_point = 3;
	uint32 id = 15;
	ChessRogueAreaInfo area_info = 13;
	repeated uint32 area_id_list = 9;
	int32 OCDNMHNNKGM = 2;
	repeated uint32 explored_area_id_list = 12;
	uint32 level_status = 4;
	uint32 MHOIJAFGECP = 7;
}
message ChessRogueQueryAeon {
	uint32 aeon_id = 15;
	uint32 MAMHOJMFJOF = 2;
}
message ChessRogueQueryAeonInfo {
	repeated ChessRogueQueryAeon aeon_list = 9;
}
message ChessRogueAeonInfo {
	ChessRogueQueryAeonInfo chess_aeon_info = 11;
	repeated uint32 aeon_id_list = 10;
	int32 ICJABPGMACJ = 3;
	EENDHPKPFLP BOHDMINEJNO = 9;
	uint32 game_aeon_id = 2;
}
message ChessRogueLineupAvatarInfo {
	uint32 DLEFMLCOOKA = 10;
	uint32 avatar_id = 8;
}
message ChessRogueLineupInfo {
	RogueAvatarReviveCost revive_info = 10;
	repeated ChessRogueLineupAvatarInfo chess_avatar_list = 15;
}
message HKMLALBDPGO {
	uint32 LHCBBGIMMDG = 4;
	repeated uint32 BOONPDEOBLA = 2;
	uint32 FAHIHDJFOHM = 10;
	bool FJKGKAEKBKJ = 15;
}
message ChessRogueNousValueInfo {
	int32 nous_value = 10;
}
message ChessRogueCurrentDifficultyInfo {
	repeated uint32 difficulty_id_list = 6;
}
message ChessRogueGameInfo {
	AJCNDBHNLFL rogue_virtual_item_info = 2;
	ChessRogueCurrentDifficultyInfo rogue_difficulty_info = 1689;
	ChessRogueDiceInfo rogue_dice_info = 5;
	RogueCommonPendingAction pending_action = 15;
	ChessRogueNousValueInfo nous_value_info = 6;
	ChessRogueAeonInfo rogue_aeon_info = 14;
	ChessRogueMiracleInfo game_miracle_info = 7;
	RogueVirtualItem virtual_item_info = 10;
	ChessRogueLevelInfo level_info = 13;
	HKMLALBDPGO story_info = 11;
	ChessRogueBuffInfo rogue_buff_info = 9;
	IMNPEAJAJJO OPAKJJMAGPH = 8;
	ChessRogueLineupInfo rogue_lineup_info = 3;
	repeated RogueGameInfo rogue_current_game_info = 12;
	uint32 rogue_sub_mode = 4;
}
message ChessRogueQueryInfo {
	ChessRogueQueryAeonInfo chess_aeon_info = 6;
	AJCNDBHNLFL rogue_virtual_item_info = 2;
	ChessRogueQueryDiffcultyInfo rogue_difficulty_info = 8;
	repeated uint32 area_id_list = 9;
	ChessRogueQueryDiceInfo query_dice_info = 7;
	repeated uint32 explored_area_id_list = 3;
	ChessRogueTalentInfo talent_info_list = 11;
}
message ChessRogueCurrentInfo {
	uint32 rogue_sub_mode = 2;
	repeated RogueGameInfo rogue_current_game_info = 10;
}
message ChessRogueGetInfo {
	ChessRogueQueryAeonInfo chess_aeon_info = 5;
	repeated uint32 explored_area_id_list = 12;
	repeated uint32 area_id_list = 8;
	ChessRogueTalentInfo talent_info_list = 4;
	ChessRogueQueryDiceInfo query_dice_info = 6;
	ChessRogueQueryDiffcultyInfo rogue_difficulty_info = 2;
}
message ChessRogueFinishInfo {
	uint32 IPOJMMGOOPJ = 5;
	uint32 rogue_sub_mode = 1849;
	uint32 OPOIMHHAFJO = 1458;
	ChessRogueQuitReason quit_reason = 14;
	uint32 PLBCDIAADKD = 7;
	ChessRogueMiracle game_miracle_info = 3;
	repeated uint32 OJGGMOOPGIL = 8;
	bool is_finish = 6;
	uint32 score_id = 110;
	ChessRogueBuff rogue_buff_info = 12;
	uint32 EGPCIBJIAJD = 1607;
	ItemList BGPECKFDELD = 4;
	uint32 DMBDNAICPFB = 9;
	uint32 BLBBOKOGFDA = 1;
	uint32 ABEHKCJHCEH = 798;
	LineupInfo rogue_lineup = 10;
	IMNPEAJAJJO OPAKJJMAGPH = 978;
	uint32 difficulty_level = 11;
	uint32 chess_rogue_main_story_id = 15;
}
message ChessRogueLayerInitialEventInfo {
	repeated ChessRogueCell cell_list = 10;
	uint32 HBCMGIICJMK = 5;
}
message LAHJPFOOHEB {
	uint32 KENPCKFONOK = 13;
	uint32 chess_rogue_main_story_id = 1;
}
message DIPMFOMGCGL {
	uint32 FAHIHDJFOHM = 2;
	uint32 CFIBPMKAINO = 14;
}
message ChessRogueQueryCsReq {
}
message ChessRogueQueryScRsp {
	ChessRogueGetInfo rogue_get_info = 3;
	uint32 retcode = 12;
	ChessRogueCurrentInfo rogue_current_info = 4;
	ChessRogueQueryInfo query_info = 5;
	ChessRogueFinishInfo finish_info = 6;
	ChessRogueGameInfo info = 1;
}
message ChessRogueEnterCellCsReq {
	uint32 cell_id = 8;
	uint32 select_monster_id = 5;
}
message ChessRogueEnterCellScRsp {
	uint32 retcode = 3;
	uint32 cell_id = 8;
	ChessRogueCurrentInfo rogue_current_info = 13;
	ChessRogueInfo stage_info = 11;
	ChessRogueGameInfo info = 5;
}
message ChessRogueEnterCsReq {
	uint32 id = 8;
}
message ChessRogueEnterScRsp {
	ChessRogueGameInfo info = 3;
	uint32 retcode = 6;
	ChessRogueInfo stage_info = 14;
	uint32 id = 8;
	ChessRogueCurrentInfo rogue_current_info = 12;
}
message ChessRogueLeaveCsReq {
}
message ChessRogueLeaveScRsp {
	ChessRogueQueryInfo query_info = 7;
	ChessRogueGetInfo rogue_get_info = 8;
	ChessRogueInfo stage_info = 6;
	ChessRogueAeonInfo rogue_aeon_info = 10;
	uint32 retcode = 11;
}
message ChessRogueGiveUpCsReq {
}
message ChessRogueGiveUpScRsp {
	ChessRogueQueryInfo query_info = 15;
	ChessRogueFinishInfo finish_info = 5;
	ChessRogueAeonInfo rogue_aeon_info = 7;
	uint32 retcode = 11;
	ChessRogueGetInfo rogue_get_info = 1;
	ChessRogueInfo stage_info = 9;
}
message ChessRogueStartCsReq {
	repeated uint32 trial_avatar_id_list = 2;
	repeated uint32 base_avatar_id_list = 9;
	repeated uint32 disable_aeon_id_list = 12;
	uint32 aeon_id = 13;
	repeated uint32 start_difficulty_id_list = 3;
	uint32 branch_id = 14;
	uint32 id = 11;
}
message ChessRogueStartScRsp {
	LineupInfo lineup = 12;
	ChessRogueInfo stage_info = 1;
	SceneInfo scene = 10;
	ChessRogueCurrentInfo rogue_current_info = 15;
	ChessRogueGameInfo info = 11;
	ChessRogueLayerInitialEventInfo board_event_info = 2;
	uint32 retcode = 5;
}
message ChessRogueQueryAeonDimensionsCsReq {
}
message ChessRogueQueryAeonDimensionsScRsp {
	uint32 retcode = 13;
	ChessRogueQueryAeonInfo info = 5;
}
message ChessRogueChangeyAeonDimensionNotify {
	ChessRogueQueryAeon info = 8;
}
message ChessRogueSelectCellCsReq {
	uint32 cell_id = 13;
	uint32 select_monster_id = 12;
}
message ChessRogueSelectCellScRsp {
	uint32 cell_id = 9;
	uint32 retcode = 6;
	OIAOLBGOAAG KAJAFNPEKAJ = 12;
	uint32 select_monster_id = 10;
}
message ChessRogueQueryBpCsReq {
}
message ChessRogueQueryBpScRsp {
	uint32 retcode = 1;
	MFFKJDNDKIO info = 13;
}
message ChessRogueSelectBpCsReq {
	uint32 FBCEIFDKEGA = 4;
}
message ChessRogueSelectBpScRsp {
	uint32 retcode = 8;
	LPNKMEMOOBE INACDCEAICP = 14;
	uint32 FBCEIFDKEGA = 10;
}
message ChessRogueLayerAccountInfoNotify {
	uint32 layer_id = 8;
	repeated uint32 OJGGMOOPGIL = 7;
	ChessRogueLevelInfo level_info = 1;
	uint32 difficulty_level = 6;
	ChessRogueFinishInfo finish_info = 9;
}
message GetChessRogueBuffEnhanceInfoCsReq {
}
message GetChessRogueBuffEnhanceInfoScRsp {
	ChessRogueBuffEnhanceList buff_enhance_info = 14;
	uint32 retcode = 13;
}
message EnhanceChessRogueBuffCsReq {
	uint32 maze_buff_id = 2;
}
message EnhanceChessRogueBuffScRsp {
	ChessRogueBuffEnhanceList buff_enhance_info = 12;
	uint32 retcode = 1;
	RogueCommonBuff rogue_buff = 14;
	bool is_succ = 7;
}
message ChessRoguePickAvatarCsReq {
	uint32 prop_entity_id = 15;
	repeated uint32 base_avatar_id_list = 8;
}
message ChessRoguePickAvatarScRsp {
	uint32 retcode = 8;
	repeated uint32 base_avatar_id_list = 7;
	ChessRogueLineupInfo rogue_lineup_info = 1;
}
message ChessRogueReviveAvatarCsReq {
	uint32 interacted_prop_entity_id = 6;
	repeated uint32 base_avatar_id_list = 4;
}
message ChessRogueReviveAvatarScRsp {
	uint32 retcode = 2;
	RogueAvatarReviveCost revive_info = 8;
	repeated uint32 base_avatar_id_list = 11;
}
message ChessRogueUpdateReviveInfoScNotify {
	RogueAvatarReviveCost revive_info = 13;
}
message ChessRogueUpdateMoneyInfoScNotify {
	RogueVirtualItem virtual_item_info = 8;
}
message ChessRogueUpdateDiceInfoScNotify {
	ChessRogueDiceInfo rogue_dice_info = 9;
}
message ChessRogueUpdateLevelBaseInfoScNotify {
	ChessRogueLevelStatus level_status = 11;
	ChessRogueUpdateLevelStatus reason = 9;
}
message ChessRogueUpdateAllowedSelectCellScNotify {
	uint32 board_id = 5;
	repeated uint32 allow_select_cell_id_list = 1;
}
message ChessRogueUpdateBoardScNotify {
	CellInfo DHDKNMFMGBC = 14;
}
message ChessRogueUpdateAeonModifierValueScNotify {
	uint32 aeon_id = 7;
	int32 ICJABPGMACJ = 5;
}
message ChessRogueUpdateDicePassiveAccumulateValueScNotify {
	int32 passive_value = 3;
}
message ChessRogueSkipTeachingLevelCsReq {
}
message ChessRogueSkipTeachingLevelScRsp {
	uint32 Retcode = 8;
	ItemList SkipRewardList = 5;
}
message ChessRogueUpdateUnlockLevelScNotify {
	repeated uint32 area_id_list = 4;
}
message ChessRogueEnterNextLayerCsReq {
	uint32 prop_entity_id = 7;
}
message ChessRogueEnterNextLayerScRsp {
	ChessRogueCurrentInfo rogue_current_info = 5;
	uint32 retcode = 14;
	ChessRogueInfo stage_info = 7;
	ChessRogueLayerInitialEventInfo board_event_info = 11;
	ChessRogueGameInfo rogue_game_info = 12;
}
message ChessRogueReRollDiceCsReq {
	uint32 KCHFJDAJECM = 1;
}
message ChessRogueReRollDiceScRsp {
	ChessRogueDiceInfo rogue_dice_info = 8;
	uint32 retcode = 3;
}
message ChessRogueConfirmRollCsReq {
	uint32 KCHFJDAJECM = 13;
}
message ChessRogueConfirmRollScRsp {
	ChessRogueDiceInfo rogue_dice_info = 15;
	uint32 retcode = 3;
}
message ChessRogueCheatRollCsReq {
	uint32 KCHFJDAJECM = 4;
	uint32 dice_surface_id = 15;
}
message ChessRogueCheatRollScRsp {
	uint32 NLJOLDMCGAI = 5;
	uint32 dice_surface_id = 6;
	uint32 retcode = 10;
	ChessRogueDiceInfo rogue_dice_info = 2;
}
message ChessRogueGiveUpRollCsReq {
}
message ChessRogueGiveUpRollScRsp {
	uint32 retcode = 7;
	ItemList NKMJHEJCOLP = 4;
	ChessRogueDiceInfo rogue_dice_info = 5;
}
message ChessRogueQuitCsReq {
}
message ChessRogueQuitScRsp {
	ChessRogueGetInfo rogue_get_info = 9;
	ChessRogueGameInfo info = 6;
	ChessRogueAeonInfo rogue_aeon_info = 1;
	ChessRogueInfo stage_info = 8;
	ChessRogueQueryInfo query_info = 3;
	ChessRogueLevelInfo level_info = 11;
	ChessRogueFinishInfo finish_info = 2;
	ChessRogueCurrentInfo rogue_current_info = 4;
	uint32 retcode = 12;
}
message ChessRogueFinishCurRoomNotify {
	ChessRogueLevelInfo level_info = 12;
}
message ChessRogueMoveCellNotify {
	CellInfo cell = 7;
	uint32 CPBOHHBNCOD = 10;
	uint32 DNMJHGCGAHL = 6;
}
message ChessRogueCellUpdateNotify {
	repeated ChessRogueCell cell_list = 4;
	RogueModifierSourceType modifier_source = 2;
	uint32 board_id = 9;
	ChessRogueCellUpdateReason reason = 1;
}
message ChessRogueQuestFinishNotify {
	uint32 quest_id = 9;
	uint32 NNJCCFEINDO = 6;
}
message GetChessRogueStoryInfoCsReq {
}
message GetChessRogueStoryInfoScRsp {
	repeated DIPMFOMGCGL chess_rogue_sub_story_info = 1;
	uint32 retcode = 10;
	repeated LAHJPFOOHEB chess_rogue_main_story_info = 5;
}
message SelectChessRogueSubStoryCsReq {
	uint32 rogue_dialogue_event_id = 12;
	uint32 chess_rogue_sub_story_id = 5;
	uint32 FAHIHDJFOHM = 13;
	uint32 IFIIJGNGOGP = 8;
}
message SelectChessRogueSubStoryScRsp {
	uint32 FAHIHDJFOHM = 3;
	uint32 retcode = 7;
	uint32 chess_rogue_sub_story_id = 9;
	uint32 rogue_dialogue_event_id = 14;
	uint32 IFIIJGNGOGP = 13;
}
message FinishChessRogueSubStoryCsReq {
	uint32 FAHIHDJFOHM = 8;
	uint32 chess_rogue_sub_story_id = 2;
	uint32 IFIIJGNGOGP = 13;
}
message FinishChessRogueSubStoryScRsp {
	uint32 retcode = 14;
	uint32 IFIIJGNGOGP = 3;
	uint32 FAHIHDJFOHM = 10;
	uint32 chess_rogue_sub_story_id = 7;
	uint32 chess_rogue_main_story_id = 8;
}
message ChessRogueUpdateActionPointScNotify {
	int32 action_point = 11;
}
message EnterChessRogueAeonRoomCsReq {
}
message EnterChessRogueAeonRoomScRsp {
	uint32 retcode = 14;
	ChessRogueInfo stage_info = 7;
}
message GetChessRogueStoryAeonTalkInfoCsReq {
	uint32 talk_dialogue_id = 8;
}
message GetChessRogueStoryAeonTalkInfoScRsp {
	map<uint32, uint32> KJCBNEINDHL = 4;
	uint32 talk_dialogue_id = 3;
	uint32 retcode = 2;
}
message SyncChessRogueMainStoryFinishScNotify {
	uint32 KENPCKFONOK = 5;
	uint32 chess_rogue_main_story_id = 10;
}
message SyncChessRogueNousValueScNotify {
	ChessRogueNousValueInfo nous_value_info = 11;
}
message ChessRogueNousMainStoryInfo {
	ChessRogueNousMainStoryStatus status = 5;
	uint32 chess_rogue_main_story_id = 2;
}
message ChessRogueNousSubStoryInfo {
	uint32 chess_rogue_sub_story_id = 6;
}
message GetChessRogueNousStoryInfoCsReq {
}
message GetChessRogueNousStoryInfoScRsp {
	repeated ChessRogueNousSubStoryInfo chess_rogue_sub_story_info = 9;
	uint32 retcode = 8;
	repeated ChessRogueNousMainStoryInfo chess_rogue_main_story_info = 10;
}
message SelectChessRogueNousSubStoryCsReq {
	uint32 IFIIJGNGOGP = 2;
	uint32 rogue_dialogue_event_id = 15;
	uint32 chess_rogue_sub_story_id = 10;
}
message SelectChessRogueNousSubStoryScRsp {
	uint32 IFIIJGNGOGP = 4;
	uint32 chess_rogue_sub_story_id = 6;
	uint32 retcode = 14;
	uint32 rogue_dialogue_event_id = 1;
}
message FinishChessRogueNousSubStoryCsReq {
	uint32 chess_rogue_sub_story_id = 11;
	uint32 IFIIJGNGOGP = 13;
}
message FinishChessRogueNousSubStoryScRsp {
	uint32 chess_rogue_sub_story_id = 6;
	uint32 IFIIJGNGOGP = 12;
	uint32 retcode = 11;
}
message SyncChessRogueNousSubStoryScNotify {
	uint32 chess_rogue_sub_story_id = 12;
}
message SyncChessRogueNousMainStoryScNotify {
	repeated ChessRogueNousMainStoryInfo chess_rogue_main_story_info = 1;
}
message IMNPEAJAJJO {
	repeated uint32 EMLLECGEPCK = 2;
	repeated uint32 OBLHBOEOLAF = 4;
	uint32 chess_rogue_sub_story_id = 13;
	uint32 chess_rogue_main_story_id = 5;
	bool FJKGKAEKBKJ = 8;
	uint32 FFMDBDEHHEG = 11;
	repeated uint32 ILMOOKBJHHC = 7;
	bool FFHEEIDBHEA = 3;
}
message ChessRogueDiceSurfaceInfo {
	uint32 dice_slot_id = 14;
	uint32 dice_surface_id = 1;
}
message ChessRogueDice {
	repeated ChessRogueDiceSurfaceInfo surface_list = 14;
	uint32 slot_id = 15;
	uint32 branch_id = 5;
	uint32 surface_id = 12;
}
message ChessRogueQueryDiceInfo {
	ChessRogueNousDicePhase dice_phase = 4;
	repeated uint32 surface_id_list = 6;
	repeated ChessRogueDice dice_list = 11;
	map<uint32, bool> sus = 5;
}
message AJCNDBHNLFL {
	uint32 POFMJBLMBJI = 13;
}
message ChessRogueTalentInfo {
	RogueTalentInfoList rogue_talent_info_list = 13;
	uint32 POFMJBLMBJI = 2;
}
message ChessRogueQueryDiffcultyInfo {
	repeated uint32 query_difficulty_id_list = 8;
}
message ChessRogueNousEditDiceCsReq {
	ChessRogueDice query_dice_info = 6;
}
message ChessRogueNousEditDiceScRsp {
	uint32 retcode = 13;
	ChessRogueDice query_dice_info = 14;
}
message ChessRogueNousDiceUpdateNotify {
	ChessRogueQueryDiceInfo MBIBKHKKEFB = 12;
}
message ChessRogueNousDiceSurfaceUnlockNotify {
	uint32 CAPHIDDHLFG = 3;
}
message ChessRogueNousGetRogueTalentInfoCsReq {
}
message ChessRogueNousGetRogueTalentInfoScRsp {
	uint32 retcode = 6;
	RogueTalentInfoList talent_info_list = 13;
	uint32 POFMJBLMBJI = 8;
}
message ChessRogueNousEnableRogueTalentCsReq {
	uint32 talent_id = 12;
}
message ChessRogueNousEnableRogueTalentScRsp {
	uint32 retcode = 2;
	uint32 POFMJBLMBJI = 14;
	RogueTalentInfoList talent_info_list = 15;
}
message AACOFIKDCPL {
	uint32 IENPELBPHDP = 5;
	uint32 progress = 15;
}
message ODNNKBIMEFH {
	repeated AACOFIKDCPL KEEDPLPACLP = 8;
}
message EADGANMJIPK {
	repeated uint32 IBPFGEBMILB = 12;
}
message JCNJDFFCLDG {
	int32 hp = 11;
	int32 LKEBLPIJMGB = 1;
	repeated uint32 OOPKIKMBBHH = 6;
	uint32 id = 9;
	ODNNKBIMEFH KEEDPLPACLP = 12;
	bool JNBOONPDOCE = 10;
}
message MPJDIBCCOHF {
	repeated uint32 OBCPGOBAEDE = 1;
	uint32 MIAIOPGIPHH = 8;
}
message DIFPDPLCIGD {
	uint32 JFPNMOONLNJ = 14;
	uint32 GONEAKBDGEK = 4;
}
message JMAANMPANHM {
	uint32 NKOFFBMHAPI = 3;
	uint32 FPAIBLDAKLI = 14;
	uint32 index = 13;
	uint32 NHJALPDBOGN = 1;
	uint32 NOEIMMHCKPM = 10;
	int32 hp = 5;
	uint32 CLPMIBDFPJC = 9;
	int32 attack = 11;
}
message EGDGHFLLMGN {
	uint32 cost_time = 8;
	uint32 LCJHGDJDENG = 12;
	uint32 total_turns = 5;
	uint32 CFIJIPCHHGO = 7;
	uint32 total_auto_turns = 3;
	uint32 total_damage = 1;
}
message ChimeraGetDataCsReq {
}
message ChimeraGetDataScRsp {
	uint32 retcode = 3;
	uint32 LFKFOCJFNCJ = 11;
	uint32 CAGAPLNHABB = 345;
	uint32 JFPNMOONLNJ = 9;
	OAPDMKKKEOL BBMGIIMECEL = 14;
	uint32 GBEMDNCKKBA = 13;
	uint32 OLLDKAJOAJD = 1089;
	uint32 CPBDBAIDAEH = 1690;
	uint32 CJEKJHPIBJL = 6;
	uint32 BBBGKCHNOCK = 5;
	uint32 KILPNHJBPDB = 1024;
	repeated DIFPDPLCIGD NCDAOBLMHHP = 8;
	uint32 EAIOJCNLMNG = 15;
	uint32 CJKCNHCLMGD = 1;
	repeated JCNJDFFCLDG KIIMKAEAJAL = 2;
	repeated uint32 MFAFNNCJJNG = 4;
	uint32 IJEIOMMFPKA = 10;
	MPJDIBCCOHF lineup = 7;
}
message ChimeraSetLineupCsReq {
	MPJDIBCCOHF lineup = 8;
}
message ChimeraSetLineupScRsp {
	uint32 retcode = 10;
	MPJDIBCCOHF lineup = 1;
}
message ChimeraFinishRoundCsReq {
	uint32 HJOEAMDLBPL = 13;
	bool MOLIDIKIFGB = 12;
	EGDGHFLLMGN stt = 9;
	map<uint32, ODNNKBIMEFH> MLBALJKCMCG = 4;
	MPJDIBCCOHF lineup = 14;
	repeated JMAANMPANHM OPAMAEIJCOH = 8;
	map<uint32, uint32> BAHHNMLHALJ = 15;
	repeated uint32 HGODGDEAAJO = 6;
	BIAKDFELJFM end_reason = 11;
}
message ChimeraFinishRoundScRsp {
	map<uint32, EADGANMJIPK> GHKGCFCLABF = 7;
	repeated JCNJDFFCLDG GOIAKPGJLCB = 11;
	uint32 EAIOJCNLMNG = 10;
	BIAKDFELJFM end_reason = 1;
	uint32 IJEIOMMFPKA = 6;
	bool JIEIFDOCOHE = 14;
	uint32 CJKCNHCLMGD = 3;
	uint32 OLLDKAJOAJD = 5;
	bool MOLIDIKIFGB = 13;
	OAPDMKKKEOL BBMGIIMECEL = 12;
	uint32 retcode = 8;
	repeated DIFPDPLCIGD NCDAOBLMHHP = 15;
	uint32 JFPNMOONLNJ = 9;
	map<uint32, ODNNKBIMEFH> NAHPKPPMDKK = 4;
	repeated uint32 MFAFNNCJJNG = 2;
}
message ChimeraStartEndlessCsReq {
}
message ChimeraStartEndlessScRsp {
	uint32 retcode = 9;
}
message ChimeraFinishEndlessRoundCsReq {
	MPJDIBCCOHF lineup = 3;
	EGDGHFLLMGN stt = 1;
	repeated uint32 HGODGDEAAJO = 2;
	bool PAHMAGPFDDJ = 13;
	uint32 CPBDBAIDAEH = 12;
	repeated JMAANMPANHM OPAMAEIJCOH = 10;
}
message ChimeraFinishEndlessRoundScRsp {
	bool PAHMAGPFDDJ = 2;
	uint32 BBBGKCHNOCK = 3;
	uint32 GBEMDNCKKBA = 8;
	uint32 CPBDBAIDAEH = 15;
	uint32 LFKFOCJFNCJ = 5;
	uint32 retcode = 7;
	repeated JCNJDFFCLDG IGAGIBNELCK = 14;
	uint32 AEBJNGIMHCJ = 11;
}
message ChimeraQuitEndlessCsReq {
}
message ChimeraQuitEndlessScRsp {
	uint32 retcode = 1;
}
message ChimeraDoFinalRoundCsReq {
	bool PAHMAGPFDDJ = 15;
	repeated uint32 HGODGDEAAJO = 4;
	EGDGHFLLMGN stt = 14;
	MPJDIBCCOHF lineup = 8;
	repeated JMAANMPANHM OPAMAEIJCOH = 2;
	uint32 CPBDBAIDAEH = 1;
}
message ChimeraDoFinalRoundScRsp {
	uint32 retcode = 12;
	uint32 EAIOJCNLMNG = 2;
	uint32 JFPNMOONLNJ = 4;
	uint32 OLLDKAJOAJD = 3;
	uint32 index = 5;
	uint32 CPBDBAIDAEH = 10;
	uint32 CAGAPLNHABB = 9;
	bool PAHMAGPFDDJ = 13;
	repeated DIFPDPLCIGD NCDAOBLMHHP = 8;
	repeated JCNJDFFCLDG IGAGIBNELCK = 11;
}
message ChimeraRoundWorkStartCsReq {
	uint32 MDFEEKIKBMJ = 7;
	uint32 FLGJPHEOPAA = 6;
	repeated JMAANMPANHM OPAMAEIJCOH = 12;
	MPJDIBCCOHF lineup = 3;
}
message ChimeraRoundWorkStartScRsp {
	uint32 retcode = 9;
}
message ClockParkGetInfoCsReq {
}
message NLLJBBCJIAM {
	repeated uint32 ODOGFHENJEP = 1;
	uint32 script_id = 7;
}
message ClockParkGetInfoScRsp {
	uint32 GFADCAHLKFP = 10;
	uint32 retcode = 2;
	repeated uint32 IBJPCOFDLJI = 8;
	uint32 progress = 9;
	uint32 EDIAJGCBPFO = 12;
	repeated NLLJBBCJIAM BNFHFHEFMEM = 7;
}
message ClockParkUnlockTalentCsReq {
	uint32 talent_id = 9;
}
message ClockParkUnlockTalentScRsp {
	uint32 talent_id = 10;
	uint32 retcode = 14;
}
message ClockParkStartScriptCsReq {
	uint32 script_id = 14;
	repeated uint32 JMOJEOALCLO = 6;
}
message ClockParkStartScriptScRsp {
	uint32 retcode = 2;
	uint32 script_id = 12;
}
message ClockParkGetOngoingScriptInfoCsReq {
}
message LNIHJDAILDJ {
}
message ACCBIGFANOA {
	uint32 BJKHPADCLHI = 8;
	uint32 card_id = 2;
	repeated uint32 PNEOOLFLNLK = 14;
}
message HDCKCHPDMMI {
	repeated uint32 PNEOOLFLNLK = 10;
	repeated ACCBIGFANOA FODPDMPBAND = 13;
}
message NNCCFPOOCKH {
	HDCKCHPDMMI ANCPCPCLJED = 5;
}
message MACHNDHAMNM {
	HDCKCHPDMMI ANCPCPCLJED = 3;
}
message IFBDBDCCOPO {
	HDCKCHPDMMI ANCPCPCLJED = 13;
}
message GLIJKLOOAPA {
	HDCKCHPDMMI ANCPCPCLJED = 9;
	uint32 gacha_random = 12;
	uint32 ECFAGNKDAEF = 13;
}
message ANBANKMLCLH {
	HDCKCHPDMMI ANCPCPCLJED = 15;
}
message EPPNKGOLAAP {
	bool BGDOIJPHFDB = 4;
}
message LKBBKOJDDPD {
	oneof NKPNKGIAHIP {
		LNIHJDAILDJ PNIMPJFILGF = 9;
		NNCCFPOOCKH DHLEEJMIIMO = 8;
		MACHNDHAMNM OEOFNNBLJIK = 2;
		IFBDBDCCOPO GPBGDCMJHLN = 13;
		GLIJKLOOAPA LNKPGGGKMNK = 5;
		ANBANKMLCLH AENEFMCBFGM = 4;
		EPPNKGOLAAP BCIIGHIOAPL = 7;
		bool GNEOOAIFKIB = 12;
	}
	uint32 AHIDJBJGGPP = 1;
}
message BMLOFPCNGKN {
	int32 IHLHDPNAEKC = 15;
	int32 OFCNDEMAPPL = 3;
	int32 DJFHCDDIFMI = 1;
}
message IONCPPDEJEJ {
	uint32 buff_id = 3;
	uint32 FEONEHHCJJM = 15;
	uint64 unique_id = 2;
}
message ECMILHCKOMO {
	repeated IONCPPDEJEJ buff_list = 7;
}
message ClockParkGetOngoingScriptInfoScRsp {
	uint32 KIEKJEFFPHK = 2;
	uint32 script_id = 5;
	repeated uint32 EIDLLEOLFGM = 10;
	uint32 AIGEHHNHKPM = 7;
	uint32 CHOBAOGMLFN = 6;
	LKBBKOJDDPD IENPHEFANGL = 13;
	uint32 OBPFBLNBFKI = 15;
	uint32 BLHGBEDNFIB = 3;
	BMLOFPCNGKN MJDOGPBOJIP = 14;
	ECMILHCKOMO rogue_buff_info = 9;
	uint32 retcode = 11;
	string CMGKEOLCBIP = 1;
}
message OBNONMHMECK {
}
message FFOMIBNCFKI {
	HDCKCHPDMMI ANCPCPCLJED = 14;
}
message AJEHAMDABNA {
	uint32 OMDDFKMAAPE = 7;
	bool is_win = 6;
}
message AMGHDCABJMJ {
	repeated uint32 avatar_id_list = 9;
}
message INNNICFOLII {
	uint32 gacha_random = 4;
	bool JCNODAMFFFC = 11;
}
message CEOONFLONDJ {
	bool is_win = 13;
	uint32 OMDDFKMAAPE = 12;
}
message HELNOIHMDHA {
}
message ClockParkHandleWaitOperationCsReq {
	oneof NOMEMJFHDIB {
		OBNONMHMECK JFBCKCLPAKO = 5;
		FFOMIBNCFKI IPIKFLCEFLA = 9;
		AJEHAMDABNA MEGNBBFILNL = 7;
		AMGHDCABJMJ ABKKDHAPCHN = 1;
		INNNICFOLII LIHJMEINGIK = 6;
		CEOONFLONDJ LMGGLCNCDHF = 12;
		HELNOIHMDHA FNGFOAEPFJN = 2;
		uint32 OBPFBLNBFKI = 14;
	}
	uint32 script_id = 4;
	uint32 AHIDJBJGGPP = 11;
}
message MDJLOJFMEMC {
	bool KFDAICILNMB = 14;
	uint32 script_id = 6;
	ItemList reward = 12;
	uint32 KIEKJEFFPHK = 13;
	uint32 progress = 3;
	bool EEEHGHKOCJI = 9;
	uint32 AIGEHHNHKPM = 15;
}
message ClockParkHandleWaitOperationScRsp {
	ClockParkPlayStatus JFKDBMDOMNK = 4;
	SceneBattleInfo battle_info = 15;
	uint32 AHIDJBJGGPP = 10;
	uint32 FICFGDNHNGE = 9;
	uint32 retcode = 1;
	uint32 KOIJFOFFJNJ = 3;
}
message ClockParkQuitScriptCsReq {
	uint32 script_id = 15;
	bool KHNHPGDEIMM = 10;
}
message ClockParkQuitScriptScRsp {
	uint32 retcode = 13;
}
message ClockParkBattleEndScNotify {
	uint32 retcode = 13;
	uint32 AHIDJBJGGPP = 1;
}
message ClockParkUseBuffCsReq {
	uint64 unique_id = 13;
	uint32 script_id = 3;
	uint32 AHIDJBJGGPP = 9;
}
message ClockParkUseBuffScRsp {
	oneof IFLLBCFGBDM {
		HDCKCHPDMMI ANCPCPCLJED = 1605;
		BMLOFPCNGKN MJDOGPBOJIP = 916;
	}
	uint32 script_id = 11;
	uint32 AHIDJBJGGPP = 14;
	ECMILHCKOMO rogue_buff_info = 12;
	uint32 retcode = 2;
}
message ClockParkFinishScriptScNotify {
	MDJLOJFMEMC rogue_finish_info = 8;
}
message Item {
	uint32 UniqueId = 3;
	uint32 Rank = 7;
	uint32 Promotion = 13;
	uint32 MainAffixId = 12;
	uint32 Num = 5;
	uint32 Level = 15;
	uint32 ItemId = 10;
}
message ItemList {
	repeated Item ItemList_ = 7;
}
message PileItem {
	uint32 ItemNum = 11;
	uint32 ItemId = 12;
}
message ItemCost {
	oneof itemCase_ {
		PileItem PileItem = 10;
		uint32 EquipmentUniqueId = 8;
		uint32 RelicUniqueId = 6;
	}
}
message ItemCostData {
	repeated ItemCost item_list = 15;
}
message IEKHJDECAPE {
	uint32 item_id = 15;
	uint32 item_count = 8;
}
message AKCPALGEMOL {
	uint32 exp = 2;
	uint32 tid = 8;
	uint32 promotion = 14;
	uint32 rank = 10;
	uint32 level = 15;
}
message NHDBOFCFCJM {
	uint32 tid = 9;
	uint32 exp = 5;
	uint32 level = 8;
	repeated RelicAffix sub_affix_list = 14;
	uint32 main_affix_id = 13;
}
message NDHOPEDOFOC {
	oneof LAGNOBAOLIJ {
		IEKHJDECAPE OEKHNGFFGKB = 7;
		AKCPALGEMOL ADEOIGEBMDF = 8;
		NHDBOFCFCJM FHGAFCJCAOA = 9;
	}
}
message AODIDFNPICF {
	repeated NDHOPEDOFOC item_list = 4;
}
message Vector {
	sint32 z = 7;
	sint32 x = 5;
	sint32 y = 13;
}
message MotionInfo {
	Vector rot = 8;
	Vector pos = 2;
}
message Vector4 {
	float w = 9;
	float y = 1;
	float z = 15;
	float x = 8;
}
message SceneMonsterWaveParam {
	uint32 hard_level_group = 1;
	uint32 DNEAMPLLFME = 12;
	uint32 elite_group = 7;
	uint32 level = 6;
}
message SceneMonster {
	uint32 cur_hp = 14;
	uint32 max_hp = 13;
	uint32 monster_id = 8;
}
message SceneMonsterWave {
	repeated ItemList JCDLJGHHAOF = 14;
	uint32 battle_wave_id = 12;
	SceneMonsterWaveParam monster_param = 13;
	uint32 battle_stage_id = 7;
	repeated SceneMonster monster_list = 1;
}
message SceneBattleInfo {
	EvolveBuildBattleInfo JPGIFCHJDLK = 1337;
	map<uint32, BattleTargetList> battle_target_info = 978;
	BattleRogueMagicInfo battle_rogue_magic_info = 595;
	uint32 DDOGJOKECCL = 8;
	repeated BattleEventBattleInfo battle_event = 711;
	uint32 stage_id = 2;
	uint32 battle_id = 10;
	bool NBCKFDGMFDB = 5;
	uint32 rounds_limit = 11;
	GIEIBEACBAO MFKJOKAJJMJ = 630;
	uint32 logic_random_seed = 13;
	repeated SceneMonsterWave monster_wave_list = 14;
	repeated BattleBuff buff_list = 9;
	repeated BattleAvatar battle_avatar_list = 4;
	LJGIAGLFHHC AJGPJGLPMIO = 991;
	uint32 world_level = 3;
}
message AetherDivideBattleInfo {
	uint32 battle_id = 15;
	repeated AetherAvatarInfo battle_avatar_list = 8;
	repeated BattleBuff buff_list = 9;
	uint32 logic_random_seed = 1;
	uint32 stage_id = 14;
	bool NBCKFDGMFDB = 3;
	repeated SceneMonsterWave monster_wave_list = 6;
}
message PHHKOMBGPPK {
	uint32 assist_uid = 12;
	uint32 id = 4;
	AvatarType avatar_type = 11;
}
message MBKOCMMICPG {
	bool EBNKEIEHNHA = 9;
	ItemList return_item_list = 3;
	repeated uint32 relic_ids = 14;
}
message KHOCCHABNMN {
	uint32 value = 12;
	uint32 key = 13;
}
message ContentPackageGetDataCsReq {
}
message ContentPackageGetDataScRsp {
	uint32 retcode = 12;
	ContentPackageData data = 14;
}
message ContentPackageInfo {
	uint32 content_id = 8;
	ContentPackageStatus status = 6;
}
message ContentPackageData {
	uint32 cur_content_id = 14;
	repeated ContentPackageInfo content_package_list = 13;
}
message ContentPackageSyncDataScNotify {
	ContentPackageData data = 14;
}
message ContentPackageUnlockCsReq {
	uint32 content_id = 7;
}
message ContentPackageUnlockScRsp {
	uint32 content_id = 12;
	uint32 retcode = 11;
}
message ContentPackageTransferScNotify {
}
message DailyActivityInfo {
	uint32 IIMJCLBOPNC = 7;
	uint32 world_level = 10;
	bool NOPMENIAFJM = 12;
	uint32 level = 9;
}
message TakeApRewardCsReq {
	uint32 level = 8;
}
message TakeApRewardScRsp {
	uint32 level = 4;
	ItemList reward = 8;
	uint32 retcode = 2;
}
message GetDailyActiveInfoCsReq {
}
message GetDailyActiveInfoScRsp {
	uint32 IIMJCLBOPNC = 12;
	uint32 retcode = 13;
	repeated uint32 MBIBABKIANF = 3;
	repeated DailyActivityInfo IHOELLGBBKN = 2;
}
message DailyActiveInfoNotify {
	repeated uint32 MBIBABKIANF = 14;
	uint32 IIMJCLBOPNC = 5;
	repeated DailyActivityInfo IHOELLGBBKN = 7;
}
message TakeAllApRewardCsReq {
}
message TakeAllApRewardScRsp {
	uint32 retcode = 9;
	ItemList reward = 8;
	repeated uint32 take_reward_level_list = 13;
}
message ServerLogSettings {
	ServerLogLevel NotifyLevel = 13;
	repeated ServerLogTag NotifyTagList = 8;
}
message GetServerLogSettingsCsReq {
}
message GetServerLogSettingsScRsp {
	ServerLogSettings Settings = 13;
	uint32 Retcode = 12;
}
message UpdateServerLogSettingsCsReq {
	ServerLogSettings Settings = 5;
}
message UpdateServerLogSettingsScRsp {
	uint32 retcode = 10;
}
message ServerLogScNotify {
	ServerLogLevel level = 3;
	string HKLIGCHHIEG = 1;
	ServerLogTag tag = 14;
	string LCPLLGNJNAJ = 9;
}
message LCMJFEHMCNF {
	uint32 config_id = 4;
	uint32 group_id = 14;
}
message OEDDOIJLGFG {
	oneof info_case {
		uint32 FFBFCCLODKK = 7;
		uint32 KACELKGCNEI = 4;
		LCMJFEHMCNF FAOMFMMLMHD = 11;
	}
}
message CFCAJKFEPAO {
	OJIDJNDHDGA state = 4;
	string BENANABPPJN = 12;
	string msg = 9;
}
message KDOEJMHBBGI {
	OEDDOIJLGFG DBGFAODBEFC = 15;
	repeated CFCAJKFEPAO LOPBAJPAEMI = 10;
}
message HGBPELEILPA {
	repeated OEDDOIJLGFG EOFCIILDILF = 11;
}
message GetServerGraphDataScRsp {
	repeated KDOEJMHBBGI DCOIHAMJKHJ = 8;
	uint32 retcode = 14;
}
message DrinkMakerGuest {
	uint32 GuestId = 8;
	repeated uint32 UnlockedFavorTagList = 1;
	uint32 Faith = 6;
}
message EEKFECDIHJE {
	uint32 DGPPFFKIHOC = 6;
	uint32 JIBLNLHCNKD = 9;
	uint32 KIDBBFGHECN = 15;
	repeated uint32 DBPGEFGLFJJ = 7;
	uint32 ODMPHFANIEE = 3;
}
message MFLPAMAFJNC {
	bool is_succ = 8;
	uint32 KCFPIECMGBD = 5;
}
message GetDrinkMakerDataCsReq {
}
message GetDrinkMakerDataScRsp {
	uint32 EAOLMHOAAML = 8;
	uint32 AMEFGBICGDI = 1;
	repeated uint32 PCNNPEJEGEF = 14;
	uint32 retcode = 12;
	uint32 HEPALNIOJNP = 13;
	uint32 level = 5;
	uint32 DHAKOFAGDOF = 7;
	repeated DrinkMakerGuest PJKIBODPCKI = 10;
	uint32 exp = 11;
	EEKFECDIHJE BOINOMBHPCL = 9;
}
message MakeDrinkCsReq {
	EEKFECDIHJE LPMCGNJLBGD = 8;
	uint32 EAOLMHOAAML = 6;
}
message MakeDrinkScRsp {
	bool IsSucc = 1;
	uint32 NextChatId = 3;
	uint32 Retcode = 7;
}
message EndDrinkMakerSequenceCsReq {
}
message EndDrinkMakerSequenceScRsp {
	ItemList Reward = 15;
	uint32 Tips = 11;
	uint32 Level = 6;
	uint32 Exp = 14;
	DrinkMakerGuest Guest = 3;
	repeated MFLPAMAFJNC RequestList = 7;
	uint32 Retcode = 8;
	uint32 NextSequenceId = 4;
}
message MakeMissionDrinkCsReq {
	EEKFECDIHJE LPMCGNJLBGD = 10;
	uint32 KCFPIECMGBD = 6;
	bool is_save = 8;
}
message MakeMissionDrinkScRsp {
	EEKFECDIHJE CustomDrink = 8;
	bool IsSucc = 9;
	bool IsSave = 7;
	uint32 Retcode = 6;
}
message DrinkMakerDayEndScNotify {
	uint32 ECILICNOLFN = 11;
}
message DrinkMakerChallengeCsReq {
	EEKFECDIHJE LPMCGNJLBGD = 9;
	uint32 challenge_id = 15;
}
message DrinkMakerChallengeScRsp {
	ItemList reward = 5;
	uint32 retcode = 15;
	bool is_succ = 4;
	uint32 challenge_id = 10;
}
message DrinkMakerUpdateTipsNotify {
	uint32 AMEFGBICGDI = 11;
}
message EraFlipperData {
	uint32 era_flipper_region_id = 1;
	uint32 state = 7;
}
message EraFlipperDataList {
	repeated EraFlipperData era_flipper_data_list = 6;
}
message GetEraFlipperDataCsReq {
}
message GetEraFlipperDataScRsp {
	EraFlipperDataList data = 5;
	uint32 retcode = 1;
}
message ChangeEraFlipperDataCsReq {
	EraFlipperDataList data = 13;
}
message ChangeEraFlipperDataScRsp {
	EraFlipperDataList data = 7;
	uint32 retcode = 8;
}
message ResetEraFlipperDataCsReq {
	bool PAHMAGPFDDJ = 14;
}
message ResetEraFlipperDataScRsp {
	uint32 retcode = 2;
	EraFlipperDataList data = 14;
	bool PAHMAGPFDDJ = 7;
}
message EnterEraFlipperRegionCsReq {
	uint32 state = 10;
	uint32 era_flipper_region_id = 15;
}
message EnterEraFlipperRegionScRsp {
	uint32 retcode = 8;
	uint32 era_flipper_region_id = 12;
}
message EraFlipperDataChangeScNotify {
	uint32 floor_id = 15;
	EraFlipperDataList data = 10;
}
message EvolveBuildAvatar {
	uint32 AvatarId = 1;
	AvatarType AvatarType = 15;
	double Damage = 8;
}
message EvolveBuildLevelInfo {
	repeated uint32 PeriodIdList = 1;
	repeated EvolveBuildAvatar AvatarList = 2;
	uint32 CurGameExp = 7;
	repeated BattleTarget BattleTargetList = 13;
	uint32 RoundCnt = 15;
	EvolveBuildBattleInfo BattleInfo = 14;
}
message CEENLALPDMK {
	uint32 level_id = 2;
	uint32 max_score = 14;
	uint32 CEADMDAMHMO = 6;
}
message IMGJIEBFGPF {
	uint32 NECILJOJGAN = 13;
	uint32 level = 7;
}
message ECMMJLLHPMD {
	bool NAJOHIHMABC = 11;
	uint32 level_id = 10;
	bool CADMFGHALJG = 4;
	repeated uint32 LGDNIIGEPHH = 13;
}
message PDICNBBKFNP {
	uint32 EODGCNAFIAC = 13;
	uint32 exp = 3;
	repeated CEENLALPDMK KLGHECCBHCG = 7;
	repeated uint32 FJOCDKIFPPC = 11;
	uint32 item_value = 1;
	bool OOFHJAHFIDH = 12;
	bool DEHGHEDINIH = 4;
	repeated IMGJIEBFGPF COKDNPEEMAG = 5;
	repeated ECMMJLLHPMD LCJNNDGKIDP = 2;
	repeated uint32 LMELJCIFBDF = 10;
}
message EvolveBuildQueryInfoCsReq {
}
message EvolveBuildQueryInfoScRsp {
	uint32 retcode = 1;
	PDICNBBKFNP rogue_current_info = 11;
	EvolveBuildLevelInfo level_info = 14;
}
message EvolveBuildStartLevelCsReq {
	uint32 level_id = 5;
	KPKKKJPJCPC JIAPJHDLFBJ = 3;
	repeated EvolveBuildAvatar avatar_list = 1;
}
message EvolveBuildStartLevelScRsp {
	SceneBattleInfo NOPHEEHJHEK = 15;
	uint32 retcode = 5;
	EvolveBuildLevelInfo level_info = 9;
}
message EvolveBuildStartStageCsReq {
	uint32 level_id = 8;
}
message EvolveBuildStartStageScRsp {
	uint32 retcode = 7;
	EvolveBuildLevelInfo level_info = 15;
	SceneBattleInfo NOPHEEHJHEK = 10;
}
message EvolveBuildGiveupCsReq {
}
message EvolveBuildGiveupScRsp {
	EvolveBuildLevelInfo level_info = 7;
	uint32 retcode = 4;
}
message EvolveBuildLeaveCsReq {
}
message EvolveBuildLeaveScRsp {
	EvolveBuildLevelInfo level_info = 5;
	uint32 retcode = 1;
}
message EvolveBuildFinishScNotify {
	uint32 Score = 11;
	uint32 Exp = 5;
	DLHCMCNIHII BattleResultType = 2;
	uint32 Wave = 9;
	uint32 CurPeriodType = 8;
	bool IsLose = 7;
	uint32 LevelId = 12;
	uint32 Coin = 1;
	EvolveBuildLevelInfo LevelInfo = 15;
}
message EvolveBuildReRandomStageCsReq {
	uint32 level_id = 7;
}
message EvolveBuildReRandomStageScRsp {
	ECMMJLLHPMD JGPBFLCCIJP = 15;
	uint32 retcode = 6;
}
message EvolveBuildShopAbilityUpCsReq {
	uint32 level = 9;
	uint32 NECILJOJGAN = 3;
}
message EvolveBuildShopAbilityUpScRsp {
	uint32 NECILJOJGAN = 1;
	uint32 retcode = 5;
	uint32 level = 7;
}
message EvolveBuildShopAbilityDownCsReq {
	uint32 level = 5;
	uint32 NECILJOJGAN = 3;
}
message EvolveBuildShopAbilityDownScRsp {
	uint32 level = 10;
	uint32 NECILJOJGAN = 11;
	uint32 retcode = 2;
}
message EvolveBuildTakeExpRewardCsReq {
}
message EvolveBuildTakeExpRewardScRsp {
	uint32 EODGCNAFIAC = 8;
	uint32 retcode = 7;
	ItemList reward = 5;
}
message EvolveBuildShopAbilityResetCsReq {
}
message EvolveBuildShopAbilityResetScRsp {
	repeated IMGJIEBFGPF COKDNPEEMAG = 1;
	uint32 item_value = 9;
	uint32 retcode = 5;
}
message EvolveBuildCoinNotify {
	uint32 item_value = 6;
}
message EvolveBuildUnlockInfoNotify {
	bool OOFHJAHFIDH = 8;
	bool DEHGHEDINIH = 5;
}
message ExpeditionInfo {
	repeated uint32 avatar_id_list = 10;
	uint32 id = 5;
	uint32 total_duration = 11;
	int64 start_expedition_time = 14;
}
message ActivityExpedition {
	uint32 FNGGNBMOFAA = 11;
	uint32 OJFNLMHMLOF = 1;
	uint32 id = 9;
	int64 start_expedition_time = 15;
	repeated uint32 avatar_id_list = 13;
	uint32 IPGECLELHGJ = 2;
}
message GetExpeditionDataCsReq {
}
message GetExpeditionDataScRsp {
	repeated uint32 FJGIMKEPJOB = 14;
	uint32 total_expedition_count = 8;
	repeated uint32 JFJPADLALMD = 9;
	uint32 retcode = 5;
	repeated uint32 FNALLOLDGLM = 10;
	repeated ActivityExpedition activity_expedition_info = 7;
	repeated ExpeditionInfo expedition_info = 15;
}
message AcceptExpeditionCsReq {
	ExpeditionInfo accept_expedition = 12;
}
message AcceptExpeditionScRsp {
	uint32 retcode = 9;
	ExpeditionInfo accept_expedition = 5;
}
message AcceptMultipleExpeditionCsReq {
	repeated ExpeditionInfo expedition = 2;
}
message AcceptMultipleExpeditionScRsp {
	uint32 retcode = 1;
	repeated ExpeditionInfo accept_multi_expedition = 12;
}
message CancelExpeditionCsReq {
	uint32 expedition_id = 4;
}
message CancelExpeditionScRsp {
	uint32 retcode = 9;
	uint32 expedition_id = 5;
}
message TakeExpeditionRewardCsReq {
	uint32 expedition_id = 5;
}
message TakeExpeditionRewardScRsp {
	uint32 retcode = 13;
	uint32 expedition_id = 11;
	ItemList reward = 2;
	ItemList extra_reward = 8;
}
message TakeMultipleExpeditionRewardCsReq {
	repeated uint32 take_multi_expedition = 9;
}
message TakeMultipleExpeditionRewardScRsp {
	repeated ItemList reward_list = 6;
	repeated uint32 reward_expedition = 7;
	uint32 retcode = 14;
	ItemList extra_reward = 1;
	ItemList reward = 2;
	repeated ItemList extra_reward_list = 13;
}
message ExpeditionDataChangeScNotify {
	repeated uint32 JFJPADLALMD = 3;
	repeated ActivityExpedition activity_expedition_info = 14;
	repeated ExpeditionInfo expedition_info = 2;
	repeated uint32 FNALLOLDGLM = 9;
	uint32 total_expedition_count = 10;
}
message AcceptActivityExpeditionCsReq {
	ActivityExpedition LGKJLFJGOJE = 11;
}
message AcceptActivityExpeditionScRsp {
	ActivityExpedition LGKJLFJGOJE = 15;
	uint32 retcode = 2;
}
message CancelActivityExpeditionCsReq {
	uint32 MPGEMLGLHBH = 13;
}
message CancelActivityExpeditionScRsp {
	uint32 retcode = 12;
	uint32 MPGEMLGLHBH = 3;
}
message TakeActivityExpeditionRewardCsReq {
	uint32 MPGEMLGLHBH = 3;
}
message TakeActivityExpeditionRewardScRsp {
	ItemList extra_reward = 10;
	ItemList reward = 5;
	uint32 retcode = 12;
	uint32 MPGEMLGLHBH = 1;
	uint32 score_id = 3;
}
message TakeMultipleActivityExpeditionRewardCsReq {
	repeated uint32 GOMDMNHMMNH = 5;
}
message MMNJMINGAHJ {
	uint32 MPGEMLGLHBH = 3;
	ItemList extra_reward = 6;
	uint32 score_id = 10;
	ItemList reward = 15;
}
message TakeMultipleActivityExpeditionRewardScRsp {
	repeated MMNJMINGAHJ CDNDFCEEDCO = 7;
	repeated uint32 JIEEELIKIJM = 13;
	uint32 retcode = 14;
}
message GCAIEMMCPDH {
	repeated KJMFEOCKCML avatar_list = 10;
	repeated uint32 buff_list = 8;
}
message FHBLGMPMIIE {
	map<uint32, uint32> JGAJKOEFGPC = 8;
	repeated uint32 AMDHNCJJOPH = 13;
	repeated uint32 NJNGBPJEMCL = 3;
	uint32 BEJCALDILNC = 14;
	repeated uint32 HKMMNFGHFPB = 6;
	map<uint32, GCAIEMMCPDH> GBLOOEPPGDM = 2;
	repeated uint32 EDHNAKFOFGJ = 11;
}
message GetFantasticStoryActivityDataCsReq {
	uint32 BEJCALDILNC = 7;
}
message GetFantasticStoryActivityDataScRsp {
	FHBLGMPMIIE FPEPICFCFFM = 5;
	uint32 retcode = 13;
}
message FinishChapterScNotify {
	FHBLGMPMIIE FPEPICFCFFM = 7;
}
message KJMFEOCKCML {
	uint32 avatar_id = 8;
	AvatarType avatar_type = 2;
}
message EnterFantasticStoryActivityStageCsReq {
	repeated KJMFEOCKCML avatar_list = 3;
	repeated uint32 buff_list = 5;
	uint32 battle_id = 2;
	uint32 BEJCALDILNC = 1;
}
message EnterFantasticStoryActivityStageScRsp {
	uint32 battle_id = 8;
	uint32 retcode = 10;
	SceneBattleInfo battle_info = 5;
	uint32 BEJCALDILNC = 9;
}
message FantasticStoryActivityBattleEndScNotify {
	uint32 BEJCALDILNC = 5;
	uint32 battle_id = 10;
	uint32 PKKLPBBNNCE = 6;
}
message FeverTimeActivityData {
	FeverTimeBattleRank PLIKADKKLGD = 5;
	uint32 NLPKLPCCJPL = 3;
	uint32 JBOLAAFDKAN = 11;
}
message GetFeverTimeActivityDataCsReq {
}
message GetFeverTimeActivityDataScRsp {
	uint32 retcode = 4;
	repeated FeverTimeActivityData CAAEJFIJIDJ = 9;
}
message FeverTimeActivityBattleEndScNotify {
	FeverTimeBattleRank LFJKKFGPKDM = 7;
	uint32 id = 15;
	uint32 HOEHIOBIIEJ = 14;
	uint32 FHFMFMLLLGD = 6;
}
message EnterFeverTimeActivityStageCsReq {
	uint32 FFINMBACAHH = 3;
	repeated FeverTimeAvatar avatar_list = 11;
	uint32 id = 4;
	uint32 GCJEICIFJGI = 5;
}
message EnterFeverTimeActivityStageScRsp {
	SceneBattleInfo battle_info = 10;
	uint32 id = 12;
	uint32 retcode = 7;
}
message FightEnterCsReq {
	uint32 uid = 15;
	uint32 ICMFPNPIJJF = 5;
	uint32 FGOJLPAEJEC = 11;
	uint32 platform = 3;
	uint64 KPKDNMDAJGL = 8;
	string AOKCMMPFGBC = 1;
	uint32 MKINIOFGIAG = 6;
	uint32 client_res_version = 13;
}
message FightEnterScRsp {
	uint64 server_timestamp_ms = 4;
	uint64 secret_key_seed = 8;
	bool JLPKEOBINCP = 1;
	uint32 retcode = 3;
	uint32 MKINIOFGIAG = 7;
}
message FightLeaveScNotify {
	uint32 CAGJMMMFDLI = 3;
}
message FightKickOutScNotify {
	FightKickoutType kick_type = 10;
}
message FightHeartBeatCsReq {
	uint64 client_time_ms = 9;
}
message FightHeartBeatScRsp {
	uint64 client_time_ms = 4;
	uint64 server_time_ms = 7;
	uint32 retcode = 15;
}
message FightSessionStopScNotify {
	PPGGKMDAOEA PFFFJNGNPOM = 1;
}
message KCPBMCNDJKE {
	uint32 JJCMFKJHCFA = 15;
	bytes MBBDNLNCEJD = 3;
}
message FightGeneralScRsp {
	bytes MBBDNLNCEJD = 11;
	uint32 retcode = 9;
	uint32 JJCMFKJHCFA = 15;
}
message FightGeneralScNotify {
	uint32 JJCMFKJHCFA = 6;
	bytes MBBDNLNCEJD = 9;
}
message JHPKNHHNAPP {
	uint32 ELINMPKBEFL = 13;
	repeated uint32 JBLECMAPFDC = 11;
	//repeated GCBMBGNKHGF AHMDOBICECA = 12;
	bytes KBJFONAGBHK = 4;
	bytes LBGDLHKEEKC = 1;
}
message AIDOADPOOFG {
	repeated CBBDIOMIFHD LIPJDJPMOKB = 11;
}
message FightActivityGroup {
	uint32 GroupId = 3;
	uint32 PassedMaxDifficultyLevel = 5;
	repeated uint32 TakenDifficultyLevelRewardList = 9;
	uint32 EndlessMaxWave = 8;
}
message GetFightActivityDataCsReq {
}
message GetFightActivityDataScRsp {
	uint32 world_level = 5;
	repeated FightActivityGroup JKHIFDGHJDO = 1;
	uint32 retcode = 4;
	bool KAIOMPFBGKL = 3;
	map<uint32, uint32> DGNFCMDJOPA = 11;
}
message FightActivityDataChangeScNotify {
	map<uint32, uint32> DGNFCMDJOPA = 7;
	repeated FightActivityGroup JKHIFDGHJDO = 11;
}
message NPEDHHCKLIA {
	uint32 avatar_id = 13;
	AvatarType avatar_type = 9;
}
message EnterFightActivityStageCsReq {
	repeated uint32 avatar_list = 14;
	uint32 NEDFIBONLKB = 13;
	uint32 group_id = 9;
	repeated NPEDHHCKLIA FOPNLGBGAGH = 6;
	repeated uint32 item_list = 7;
}
message EnterFightActivityStageScRsp {
	SceneBattleInfo battle_info = 15;
	uint32 NEDFIBONLKB = 10;
	uint32 group_id = 7;
	uint32 retcode = 2;
}
message TakeFightActivityRewardCsReq {
	uint32 group_id = 1;
	uint32 NEDFIBONLKB = 13;
}
message TakeFightActivityRewardScRsp {
	uint32 retcode = 3;
	uint32 NEDFIBONLKB = 7;
	ItemList reward = 15;
	uint32 group_id = 13;
}
message IKLNILKPENA {
	HGDAPJPKFFB PLIKADKKLGD = 13;
	uint32 JBOLAAFDKAN = 8;
	uint32 challenge_id = 3;
	uint32 AEIEOJGCMMO = 7;
}
message GetFightFestDataCsReq {
}
message GetFightFestDataScRsp {
	repeated IKLNILKPENA challenge_list = 10;
	repeated uint32 MFGONHJGIPP = 9;
	uint32 retcode = 4;
	uint32 item_value = 15;
	uint32 score_id = 3;
}
message AFODMEJODLG {
	AvatarType avatar_type = 15;
	uint32 id = 3;
}
message StartFightFestCsReq {
	repeated AFODMEJODLG avatar_list = 6;
	APLOAGDIBKI type = 4;
	repeated uint32 MFGONHJGIPP = 11;
	uint32 event_id = 10;
	uint32 id = 7;
}
message StartFightFestScRsp {
	APLOAGDIBKI type = 8;
	uint32 event_id = 10;
	uint32 id = 11;
	SceneBattleInfo battle_info = 12;
	uint32 retcode = 5;
}
message FightFestScoreUpdateNotify {
	uint32 score_id = 3;
	uint32 GNPKPLJLABM = 10;
}
message FightFestUnlockSkillNotify {
	uint32 EJJEHJMMBGJ = 4;
}
message FightFestUpdateChallengeRecordNotify {
	HGDAPJPKFFB rank = 10;
	uint32 challenge_id = 13;
	uint32 HOEHIOBIIEJ = 12;
	uint32 JBOLAAFDKAN = 6;
	HGDAPJPKFFB FKPEPBMJHKN = 1;
}
message FightFestUpdateCoinNotify {
	uint32 item_value = 7;
}
message KPBFCKNEEIA {
	FFJPPNGGLFF OILPCHBIJNO = 8;
	uint64 LDNBEIDJBHI = 11;
	int32 BLGNMALBOLO = 13;
}
message GLDHEPJPMFM {
	repeated KPBFCKNEEIA action_result_list = 8;
}
message PFGAIEBGHCP {
	float y = 5;
	float x = 3;
}
message JEJDMMBDALP {
	uint32 item_id = 7;
	PFGAIEBGHCP KBCEJINFNNJ = 4;
}
message AKOKICDPFMP {
	oneof PEFGBHJABLK {
		LBAOGIBPJOP LGPIEMDLHJM = 1758;
		GLDNBPFCNHD PHMCJEJIDJA = 1568;
		ICAOOPPMJDJ rogue_finish_info = 173;
		MAOGFDKDCKM MEJDMJIKIMO = 870;
		GOCKGIGBDCG JHFGDIJPFCG = 1122;
	}
	uint32 AHEHKCILDFA = 10;
}
message GEMEBEBMIAH {
	repeated AKOKICDPFMP LNDIGHEIHLN = 10;
}
message LBAOGIBPJOP {
	uint32 BBDOPLEKIAC = 6;
	repeated uint32 PCMGAGAHBLK = 13;
	uint32 level_id = 2;
	bool LIKHCLPMHJK = 10;
	uint32 NLIBKABFGCC = 5;
	bool JIKEIGBCABB = 8;
	uint32 EIGABCKEDNP = 3;
	uint32 DKPNENBHELH = 15;
	uint32 MODDKLNDAMK = 12;
	JOMKPEGEFMP HJEFOLKGAEI = 14;
	repeated uint32 JJEFBPKPKBK = 1;
	uint32 JIJHAAIHNCN = 11;
	uint32 KHCMOFPFOAK = 7;
	JOMKPEGEFMP CEIFKJIEAJE = 4;
	uint32 PBFAIOJJGNL = 9;
}
message GKLOALDHNEF {
	uint32 item_id = 6;
	uint32 JOJAHIAFNLK = 11;
	int32 FALBKIMMPIH = 8;
	int32 JPHEDNECAGD = 7;
	int32 total_damage = 1;
}
message ICAOOPPMJDJ {
	repeated GKLOALDHNEF BPIPOBHCMFD = 3;
	uint32 BLKFGAJHMLK = 11;
	EEIBHJPNJCF KJPMOHFIILO = 15;
	uint32 CHLLMFJGPPA = 2;
	bool is_win = 1;
	int32 CLBNHPEABFK = 5;
}
message DCDNIAJCEHN {
	PFGAIEBGHCP FNIHJJJGOEE = 10;
	uint32 JLJIGEPLPMH = 7;
	int32 max_hp = 12;
	float GGBFKENAHOE = 958;
	bool PLFKOCCDBAG = 1751;
	LKKAJCACIJI KAMIHNEJMFG = 6;
	uint32 id = 1;
	uint32 IDABOFPKOKN = 478;
	int32 HDBLELEBKHO = 1464;
	uint32 PNLDLMNKJMK = 499;
	uint32 JLCIKBLNENH = 594;
	uint32 DHELBCIMLGA = 52;
	PFGAIEBGHCP IAAGGMKGODC = 13;
	uint32 DKPNENBHELH = 1807;
	uint32 CIPICLLLIJH = 5;
	PAJNHIAGODD DJOADECJPOB = 14;
	PFGAIEBGHCP GODNAALNOKL = 3;
	uint32 JIJHAAIHNCN = 1470;
	FIPPKLCOEGJ CCLMFABDENA = 1026;
	float MNBEMGNNFOD = 1346;
	uint32 text_id = 1650;
	uint32 level = 1790;
	int32 attack = 9;
	uint32 skill_id = 15;
	bool NBKELCHILGG = 1479;
	uint32 buff_id = 2034;
	int32 hp = 8;
	PFGAIEBGHCP FDNDMHJOHMO = 4;
	float time = 11;
	bool DMBBMFFEJGI = 817;
	PFGAIEBGHCP LKEFOLCGFGD = 2;
}
message GLDNBPFCNHD {
	uint32 NKHPCKEGPCL = 924;
	repeated DCDNIAJCEHN AINLMGDNHIB = 1140;
	uint32 DHELBCIMLGA = 2;
	uint32 HMFFHGBKOGL = 7;
	uint32 extra_id = 15;
	repeated uint32 KNCHEHIIJNN = 3;
	uint32 IEPGCLGKHEG = 1314;
	float EEFCBBKKFLC = 9;
	repeated uint32 JLDCFLKCBLD = 13;
	uint32 KJGDKNJFCPG = 14;
	uint32 FMKDIFNJAJC = 12;
	uint32 queue_position = 8;
	bool PMANBPLFLKL = 1;
	repeated DCDNIAJCEHN HLIEAMPLIPP = 4;
	repeated uint32 DPOOAPKPCHF = 6;
	uint32 EHCJCILCNOP = 11;
	bool FJKBAIMDPEP = 10;
	uint32 FOMBHJKDHGO = 1304;
	IMPKPKAMIAF DNDJKDFHEPE = 5;
}
message MAOGFDKDCKM {
	PPIFFKJEJJA phase = 14;
	uint32 IEHFHKMDAGC = 3;
	repeated HBGHAOPBKJP OLKMCBJFLEJ = 9;
	uint32 CHLLMFJGPPA = 5;
	LBAOGIBPJOP LGPIEMDLHJM = 2;
	repeated HBGHAOPBKJP DIBPGGOOGPK = 6;
	EOJLNGDDLNN KHCMOFPFOAK = 11;
	repeated uint32 KNCHEHIIJNN = 12;
	EOJLNGDDLNN BBDOPLEKIAC = 15;
	uint32 HMFFHGBKOGL = 7;
	float DPLGCEKJACK = 13;
}
message GOCKGIGBDCG {
	PFGAIEBGHCP KBCEJINFNNJ = 5;
	uint32 CHLLMFJGPPA = 9;
	uint32 item_id = 10;
}
message EOJLNGDDLNN {
	repeated JALLAPPCPFE MDBGGBLEGEM = 10;
	repeated uint32 JFEDJMKMLFO = 6;
	bool BLALJMMHIFP = 7;
	bool NBKELCHILGG = 2;
	uint32 CGNBHKBHICG = 3;
	repeated HBGHAOPBKJP NBKHPJHJMHO = 12;
	uint32 PANBCNICOHJ = 5;
}
message HBGHAOPBKJP {
	bool PLFKOCCDBAG = 1;
	uint32 id = 9;
	uint32 level = 4;
	uint32 buff_id = 15;
	bool PMANBPLFLKL = 2;
	int32 hp = 10;
	uint32 JLCIKBLNENH = 3;
	float MNBEMGNNFOD = 8;
	bool DMBBMFFEJGI = 5;
	bool BMNECPIOPDN = 14;
	PFGAIEBGHCP LKEFOLCGFGD = 13;
	int32 attack = 7;
	PFGAIEBGHCP FNIHJJJGOEE = 12;
	int32 max_hp = 6;
}
message JALLAPPCPFE {
	uint32 DHELBCIMLGA = 8;
	bool FHOKFDMFNKG = 11;
}
message MEKDNIKFDNA {
	uint32 hp = 12;
	uint32 OGNEPBFPILH = 2;
	bool HNJFFFJDGNE = 11;
	NPPNFPPENMC state = 5;
	uint32 score_id = 13;
	uint32 LDNBEIDJBHI = 8;
	uint32 NMLFFOGBPOC = 1;
	uint32 rank = 15;
}
message KLDMJEMIMCN {
	repeated uint32 HBANCCOKOFC = 8;
	repeated MEKDNIKFDNA CPKPINCCEIP = 14;
	uint64 MCOKHHFPBPJ = 2;
	int32 HCBBHCKJNJI = 4;
	DGFCBOFAOIA JGIBHFJMOBE = 12;
	MDOHAFBEEPK MEJDMJIKIMO = 11;
	uint32 DANCCAOJLJN = 5;
}
message JJAEPDIHCNL {
	uint32 HECKMDLOLAG = 11;
	uint32 FPBEDNCOCHO = 14;
}
message MDOHAFBEEPK {
	uint32 cur_hp = 12;
	uint32 MIDEJNJCAIA = 8;
	uint32 NAJLPNLNOJE = 1;
	CDIMEMFJJFP NIAEGHJLNMB = 3;
	uint32 energy_info = 14;
	uint32 GDFNDPMJDAF = 9;
	uint32 ANHFJKEPCGF = 5;
	repeated uint32 AIHMGHAJGKJ = 10;
	uint32 score_id = 11;
	uint32 PKDPIEMGIBE = 15;
	NPPNFPPENMC KJPMOHFIILO = 7;
}
message EGCDDLKHFEB {
	MDOHAFBEEPK MLPCFGDAFND = 7;
	BFILLIOBMFN OLKNDFJBDGJ = 2;
}
message FightMatch3DataCsReq {
	int32 player_data = 9;
}
message FightMatch3DataScRsp {
	repeated CBBDIOMIFHD LIPJDJPMOKB = 14;
	uint32 retcode = 10;
	KLDMJEMIMCN data = 11;
}
message FightMatch3StartCountDownScNotify {
	KLDMJEMIMCN data = 15;
}
message FightMatch3TurnStartScNotify {
	KLDMJEMIMCN HKPODFLGCDJ = 7;
}
message FightMatch3TurnEndScNotify {
	KLDMJEMIMCN CINLCMHHKKO = 2;
	KLDMJEMIMCN HIKLOBGICMP = 6;
}
message FightMatch3SwapCsReq {
	repeated EGCDDLKHFEB ECKKBLNELBM = 5;
	JJAEPDIHCNL PHNLDPOKBKL = 12;
	uint32 cur_index = 3;
	JJAEPDIHCNL FECLGLBFIDH = 9;
}
message FightMatch3SwapScRsp {
	MDOHAFBEEPK CHMAONMMEGM = 1;
	uint32 retcode = 12;
	bool PGMGMJDILCL = 10;
	uint32 cur_index = 8;
}
message FightMatch3OpponentDataScNotify {
	uint32 hp = 9;
	uint32 DANCCAOJLJN = 7;
	uint32 score_id = 5;
	NPPNFPPENMC state = 3;
	uint32 NMLFFOGBPOC = 1;
}
message FightMatch3ChatCsReq {
	uint32 HABDKBFMKEE = 8;
}
message FightMatch3ChatScRsp {
	uint32 retcode = 10;
	uint32 HABDKBFMKEE = 13;
}
message FightMatch3ChatScNotify {
	uint32 EGKPFGNJAHN = 4;
	uint32 HABDKBFMKEE = 12;
}
message FightMatch3ForceUpdateNotify {
	KLDMJEMIMCN data = 15;
}
message AssistSimpleInfo {
	uint32 Level = 14;
	uint32 AvatarId = 11;
	uint32 DressedSkinId = 6;
	uint32 Pos = 12;
}
message IHKGNJDNALJ {
	uint32 JGMIPMDPPIJ = 8;
	uint32 FCCDILGGOCI = 9;
	uint32 KHCNAJOKJHJ = 1;
	uint32 group_id = 4;
}
message KPIGLOPEMCF {
	uint32 IJHLOJEFCPM = 11;
}
message PHHLIOGFDEK {
	uint32 OFGBJCCCIKE = 10;
	uint32 IJHLOJEFCPM = 6;
	repeated uint32 CAPICCCIEBO = 14;
}
message BCPDFIPOMAP {
	PHHLIOGFDEK LBHJEHFJLNF = 6;
}
message OBIHNGMNKEK {
	oneof HNIOEHOHNJG {
		KPIGLOPEMCF LOONEHFNAPC = 2;
		BCPDFIPOMAP DAOPOHAMOMF = 4;
	}
}
message HIEJJBDNCNH {
	IHKGNJDNALJ EBOOMGDGNEP = 2;
	BattleRecordType display_type = 14;
	OBIHNGMNKEK JFPCPDCFLMD = 15;
}
message PlayerSimpleInfo {
	PlatformType platform = 9;
	uint32 ANPLLAOBFJI = 14;
	uint32 uid = 10;
	uint32 head_icon = 2;
	string nickname = 15;
	string signature = 6;
	bool is_banned = 7;
	string GMALCPNOHBF = 13;
	repeated AssistSimpleInfo assist_simple_info_list = 5;
	uint32 chat_bubble_id = 8;
	int64 last_active_time = 11;
	uint32 level = 3;
	FriendOnlineStatus online_status = 12;
	string AKCEJFCFBAN = 4;
}
message DisplayEquipmentInfo {
	uint32 tid = 2;
	uint32 level = 13;
	uint32 exp = 9;
	uint32 rank = 4;
	uint32 promotion = 6;
}
message DisplayRelicInfo {
	uint32 main_affix_id = 9;
	uint32 exp = 11;
	uint32 type = 8;
	uint32 tid = 1;
	uint32 level = 7;
	repeated RelicAffix sub_affix_list = 14;
}
message DisplayAvatarDetailInfo {
	uint32 DressedSkinId = 10;
	uint32 Exp = 14;
	uint32 Promotion = 12;
	repeated DisplayRelicInfo RelicList = 8;
	uint32 Rank = 15;
	uint32 Level = 1;
	DisplayEquipmentInfo Equipment = 6;
	repeated AvatarSkillTree SkilltreeList = 11;
	uint32 AvatarId = 5;
	uint32 Pos = 9;
}
message PlayerCollectionInfo {
	uint32 LJPEKEDICML = 1;
	uint32 PJCJNKBEIMK = 15;
	uint32 PGCDMMNNCJC = 8;
	uint32 NLJIFEKDPHN = 4;
	uint32 BDBMIKDJLKO = 11;
}
message PlayerRecordInfo {
	uint32 BHFEFEODNIM = 14;
	uint32 CFDFMGLLICO = 10;
	uint32 JFPGBKBPBNF = 11;
	uint32 FHKKMPDDMGO = 2;
	PlayerCollectionInfo collection_info = 9;
	uint32 HKNOAKGCJBK = 1;
	uint32 EMJDEBDMHLL = 4;
	uint32 GEKKNDONHLJ = 5;
	uint32 EHBDEIJJOHK = 3;
}
message PrivacySettings {
	bool APONEIDMPHL = 6;
	bool PBKBGLHHKPE = 12;
	bool AICNFAOBCPI = 4;
	bool KJNCCKHJFHE = 10;
	bool NJFMILJOFOK = 14;
}
message PlayerDisplaySettings {
	repeated IHKGNJDNALJ challenge_list = 4;
	OBIHNGMNKEK JFPCPDCFLMD = 9;
}
message PlayerDetailInfo {
	PlayerRecordInfo record_info = 6;
	string nickname = 11;
	uint32 ANPLLAOBFJI = 2045;
	string AKCEJFCFBAN = 3;
	uint32 head_icon = 5;
	uint32 OOOPBHIMNFD = 4;
	repeated DisplayAvatarDetailInfo assist_avatar_list = 1267;
	bool is_banned = 8;
	PlatformType platform = 13;
	string GMALCPNOHBF = 1;
	uint32 world_level = 12;
	uint32 KBMGBNINFBK = 15;
	bool EMOBIJBDKEI = 10;
	uint32 uid = 2;
	uint32 level = 14;
	PrivacySettings privacy_settings = 235;
	string signature = 9;
	repeated DisplayAvatarDetailInfo display_avatar_list = 7;
	PlayerDisplaySettings ONKHLHOJHGN = 1701;
}
message FriendSimpleInfo {
	PlayingState playing_state = 5;
	string remark_name = 11;
	HIEJJBDNCNH ILCHAJCFFBF = 10;
	PlayerSimpleInfo player_info = 9;
	bool is_marked = 8;
	int64 create_time = 2;
}
message FriendApplyInfo {
	int64 apply_time = 10;
	PlayerSimpleInfo player_info = 8;
}
message FriendRecommendInfo {
	bool JHOLBLPEGLJ = 11;
	PlayerSimpleInfo player_info = 10;
}
message PlayerAssistInfo {
	PlayerSimpleInfo player_info = 7;
	DisplayAvatarDetailInfo MDHFANLHNMA = 13;
}
message FLCMJAHGKFK {
	uint32 NPPPHGFENPH = 12;
	uint32 level = 8;
	string nickname = 11;
	string remark_name = 1;
	PlatformType platform = 4;
	uint32 uid = 6;
	string GMALCPNOHBF = 13;
	uint32 head_icon = 2;
}
message FCNOLLFGPCK {
	PlayerSimpleInfo player_info = 14;
	repeated ChallengeLineupList lineup_list = 12;
	uint32 buff_one = 15;
	uint32 INHDDNNPBDB = 4;
	uint32 buff_two = 2;
	uint32 score_id = 6;
	string remark_name = 8;
}
message CHKIICNAPHA {
	oneof challenge_stt_case {
		ChallengeStatistics challenge_default = 1613;
		ChallengeStoryStatistics challenge_story = 1182;
		ChallengeBossStatistics challenge_boss = 688;
	}
	uint32 group_id = 14;
	uint32 KHCNAJOKJHJ = 4;
}
message OGNLDADPJFO {
	uint32 map_id = 15;
	RogueFinishInfo rogue_finish_info = 11;
}
message EAIMKOMHKHD {
	uint32 GGDIIBCDOBB = 4;
	uint32 avatar_id = 2;
}
message ANGOAMADOMA {
	uint32 JBLOKLCPAFN = 10;
	uint32 IJHLOJEFCPM = 13;
	uint32 OFGBJCCCIKE = 9;
	RogueTournFinishInfo tourn_finish_info = 4;
}
message GGKBHALPIDK {
	uint32 LHBDONJIICC = 4;
	uint32 area_id = 7;
	uint32 IMLHFGEPCAN = 13;
}
message LFJPDDCNBKC {
	uint32 FNMGAOHMLIM = 5;
	uint32 FJHIGBBMJDM = 2;
	uint32 area_id = 10;
	uint32 EPLJMCAPMPC = 6;
}
message NHAGPMMCDCF {
	uint32 AGIJKFBCJOC = 9;
	uint32 ONAHHAMHFDB = 11;
	uint32 area_id = 5;
	uint32 OIAJANCBABP = 7;
}
message OKDBOGBABNI {
	oneof MBLAGJJOEFF {
		OGNLDADPJFO EDGFEDJBAHF = 1838;
		ANGOAMADOMA OPFPOLCGMED = 1290;
	}
	LFJPDDCNBKC APMJFGKIFON = 9;
	GGKBHALPIDK PLCCEHDNAFL = 14;
	NHAGPMMCDCF HDLJBADEKFI = 5;
}
message IOJHJAHIMHM {
	uint32 area_id = 8;
}
message JIENKFADCHE {
	uint32 NJOICIOPBNH = 4;
	uint32 area_id = 14;
}
message MEEHCBGDBEA {
	uint32 challenge_id = 1;
}
message DHAHAKMPNAF {
	oneof PAECDOKLPFG {
		IOJHJAHIMHM LIIBBGGEHFP = 261;
		MEEHCBGDBEA IKFFOBAMGHJ = 1266;
		uint32 avatar_id = 1078;
		uint32 MDMGKHLHIIN = 246;
		uint32 CKKNNHMDCOG = 140;
		JIENKFADCHE IELHLBFFAGK = 157;
		uint32 panel_id = 563;
	}
	DevelopmentType EJHMNKHEPFA = 7;
	int64 time = 4;
}
message GetFriendListInfoCsReq {
}
message GetFriendListInfoScRsp {
	repeated FriendSimpleInfo friend_list = 11;
	repeated PlayerSimpleInfo black_list = 13;
	uint32 retcode = 9;
}
message GetPlayerDetailInfoCsReq {
	uint32 uid = 10;
}
message GetPlayerDetailInfoScRsp {
	uint32 retcode = 14;
	PlayerDetailInfo detail_info = 10;
}
message GetFriendApplyListInfoCsReq {
}
message GetFriendApplyListInfoScRsp {
	repeated uint32 send_apply_list = 10;
	repeated FriendApplyInfo receive_apply_list = 4;
	uint32 retcode = 15;
}
message ApplyFriendCsReq {
	FriendApplySource source = 15;
	uint32 uid = 1;
}
message ApplyFriendScRsp {
	uint32 uid = 13;
	uint32 retcode = 4;
}
message SyncApplyFriendScNotify {
	FriendApplyInfo apply_info = 12;
}
message HandleFriendCsReq {
	bool is_accept = 8;
	uint32 uid = 3;
}
message HandleFriendScRsp {
	uint32 retcode = 6;
	bool is_accept = 5;
	FriendSimpleInfo friend_info = 15;
	uint32 uid = 13;
}
message SyncHandleFriendScNotify {
	FriendSimpleInfo friend_info = 7;
	bool is_accept = 10;
	uint32 uid = 8;
}
message DeleteFriendCsReq {
	uint32 uid = 11;
	uint32 FIOCDBIPCGB = 5;
}
message DeleteFriendScRsp {
	uint32 uid = 9;
	uint32 retcode = 10;
}
message SyncDeleteFriendScNotify {
	uint32 uid = 13;
}
message AddBlacklistCsReq {
	uint32 uid = 1;
}
message AddBlacklistScRsp {
	uint32 retcode = 13;
	PlayerSimpleInfo black_info = 6;
}
message SyncAddBlacklistScNotify {
	uint32 uid = 14;
}
message GetFriendRecommendListInfoCsReq {
	bool AHOILNFIIEG = 6;
}
message GetFriendRecommendListInfoScRsp {
	repeated FriendRecommendInfo player_info_list = 4;
	uint32 retcode = 5;
}
message SetFriendRemarkNameCsReq {
	uint32 uid = 9;
	uint32 reason = 14;
	string remark_name = 3;
}
message SetFriendRemarkNameScRsp {
	uint32 uid = 12;
	uint32 retcode = 5;
	string remark_name = 11;
}
message ReportPlayerCsReq {
	string MIMAKHAABAH = 12;
	uint32 uid = 13;
	uint32 EHBCLJFPOOE = 5;
}
message ReportPlayerScRsp {
	uint32 retcode = 5;
}
message DeleteBlacklistCsReq {
	uint32 uid = 11;
}
message DeleteBlacklistScRsp {
	uint32 retcode = 14;
	uint32 uid = 1;
}
message SearchPlayerCsReq {
	repeated uint32 uid_list = 2;
	bool AHOILNFIIEG = 7;
}
message SearchPlayerScRsp {
	repeated uint32 result_uid_list = 13;
	uint32 retcode = 4;
	repeated PlayerSimpleInfo simple_info_list = 9;
}
message GetAssistListCsReq {
	bool AHOILNFIIEG = 3;
	bool KIBOAGMOJCP = 2;
}
message GetAssistListScRsp {
	uint32 retcode = 10;
	repeated PlayerAssistInfo assist_list = 12;
}
message SetAssistCsReq {
	uint32 avatar_id = 12;
	uint32 uid = 11;
}
message SetAssistScRsp {
	uint32 uid = 13;
	uint32 retcode = 8;
	uint32 avatar_id = 2;
}
message GetCurAssistCsReq {
}
message GetCurAssistScRsp {
	PlayerAssistInfo assist_info = 11;
	uint32 retcode = 8;
}
message GetAssistHistoryCsReq {
}
message GetAssistHistoryScRsp {
	repeated uint32 today_use_uid_list = 10;
	uint32 retcode = 5;
	uint32 PBFNEIGOPMP = 7;
	uint32 NFJJAPNPPKP = 1;
	uint32 OMHCHJLLIIF = 15;
}
message NewAssistHistoryNotify {
	uint32 NFJJAPNPPKP = 11;
}
message TakeAssistRewardCsReq {
}
message TakeAssistRewardScRsp {
	uint32 retcode = 13;
	repeated FLCMJAHGKFK NLCNBIEHCOH = 11;
	ItemList reward = 7;
}
message CurAssistChangedNotify {
	PlayerAssistInfo assist_info = 8;
}
message GetPlatformPlayerInfoCsReq {
	repeated string DNENLCHJEKG = 12;
	PlatformType platform = 7;
}
message GetPlatformPlayerInfoScRsp {
	repeated PlayerSimpleInfo player_info_list = 5;
	uint32 retcode = 14;
}
message GetFriendLoginInfoCsReq {
}
message GetFriendLoginInfoScRsp {
	bool BOHNBJMMKBO = 12;
	bool LIFCEHLFDNM = 2;
	repeated uint32 friend_uid_list = 6;
	repeated uint32 IIHDBINOPMG = 7;
	uint32 retcode = 9;
}
message SetForbidOtherApplyFriendCsReq {
	bool MJPFLIKAFEJ = 5;
}
message SetForbidOtherApplyFriendScRsp {
	bool MJPFLIKAFEJ = 6;
	uint32 retcode = 9;
}
message SetFriendMarkCsReq {
	uint32 uid = 11;
	uint32 reason = 1;
	bool ADJGKCOKOLN = 13;
}
message SetFriendMarkScRsp {
	bool ADJGKCOKOLN = 12;
	uint32 uid = 14;
	uint32 retcode = 11;
}
message GetFriendAssistListCsReq {
	AssistAvatarType MLOOGABMIHP = 10;
	repeated uint32 KCPAODEBJDG = 3;
	bool AHOILNFIIEG = 1;
	uint32 target_side = 6;
	repeated uint32 BIJGJECJMHM = 9;
}
message GetFriendAssistListScRsp {
	uint32 retcode = 13;
	repeated PlayerAssistInfo assist_list = 15;
	uint32 target_side = 8;
}
message GetFriendChallengeLineupCsReq {
	uint32 challenge_id = 14;
}
message GetFriendChallengeLineupScRsp {
	uint32 retcode = 7;
	bool ONOCJEEBFCI = 9;
	repeated FCNOLLFGPCK challenge_recommend_list = 2;
}
message GetFriendChallengeDetailCsReq {
	uint32 challenge_id = 5;
	uint32 uid = 3;
}
message GetFriendChallengeDetailScRsp {
	uint32 retcode = 5;
	uint32 challenge_id = 8;
	uint32 uid = 9;
	repeated DisplayAvatarDetailInfo CCGDMOOLHHB = 6;
}
message GetFriendBattleRecordDetailCsReq {
	uint32 uid = 12;
}
message GetFriendBattleRecordDetailScRsp {
	uint32 uid = 3;
	repeated CHKIICNAPHA JDIDIHOBAOD = 4;
	uint32 retcode = 8;
	OKDBOGBABNI PGBBEPKAHBH = 7;
}
message GetFriendDevelopmentInfoCsReq {
	uint32 uid = 2;
}
message GetFriendDevelopmentInfoScRsp {
	uint32 retcode = 9;
	repeated DHAHAKMPNAF JBHBFBJGBPH = 4;
	uint32 uid = 11;
}
message GetGachaInfoCsReq {
}
message GachaCeilingAvatar {
	uint32 AvatarId = 14;
	uint32 RepeatedCnt = 11;
}
message GachaCeiling {
	uint32 ceiling_num = 9;
	bool is_claimed = 3;
	repeated GachaCeilingAvatar avatar_list = 15;
}
message LOPDJAHFPHN {
	repeated uint32 JIGONEALCPC = 4;
	repeated uint32 DLABDNPIHFF = 15;
	uint32 CHDOIBFEHLP = 6;
}
message GachaInfo {
	string detail_webview = 3;
	int64 end_time = 2;
	int64 begin_time = 12;
	repeated uint32 prize_item_list = 4;
	GachaCeiling gacha_ceiling = 7;
	string drop_history_webview = 9;
	uint32 gacha_id = 14;
	repeated uint32 item_detail_list = 15;
	LOPDJAHFPHN GDPOEEJNMHN = 1;
	uint32 KMNJNMJFGBG = 13;
	uint32 GDIFAAHIFBH = 11;
}
message GetGachaInfoScRsp {
	uint32 NOPBEBKHIKA = 1;
	uint32 DJNDMNPEBKA = 10;
	uint32 NBELNOIPOEK = 7;
	uint32 retcode = 15;
	uint32 gacha_random = 6;
	repeated GachaInfo gacha_info_list = 5;
}
message DoGachaCsReq {
	uint32 gacha_num = 15;
	uint32 simulate_magic = 6;
	uint32 gacha_id = 10;
	uint32 gacha_random = 7;
}
message GachaItem {
	ItemList token_item = 11;
	Item gacha_item = 15;
	bool is_new = 14;
	ItemList transfer_item_list = 12;
}
message DoGachaScRsp {
	uint32 KMNJNMJFGBG = 2;
	uint32 gacha_id = 14;
	uint32 GDIFAAHIFBH = 7;
	uint32 PENILHGLHHM = 3;
	uint32 gacha_num = 13;
	uint32 retcode = 5;
	uint32 ceiling_num = 9;
	repeated GachaItem gacha_item_list = 8;
	uint32 NOPBEBKHIKA = 6;
}
message GetGachaCeilingCsReq {
	uint32 gacha_type = 5;
}
message GetGachaCeilingScRsp {
	GachaCeiling gacha_ceiling = 1;
	uint32 retcode = 7;
	uint32 gacha_type = 13;
}
message ExchangeGachaCeilingCsReq {
	uint32 avatar_id = 6;
	uint32 gacha_type = 12;
}
message ExchangeGachaCeilingScRsp {
	ItemList transfer_item_list = 2;
	uint32 avatar_id = 9;
	uint32 gacha_type = 6;
	GachaCeiling gacha_ceiling = 14;
	uint32 retcode = 8;
}
message DFBBEFDPCII {
	uint32 CHDOIBFEHLP = 8;
	uint32 gacha_id = 13;
	repeated uint32 DLABDNPIHFF = 4;
}
message SetGachaDecideItemScRsp {
	uint32 retcode = 14;
	LOPDJAHFPHN GDPOEEJNMHN = 2;
	uint32 gacha_id = 9;
}
message GachaDecideItemChangeScNotify {
	LOPDJAHFPHN GDPOEEJNMHN = 7;
	repeated uint32 farm_stage_gacha_id_list = 14;
}
message HeartDialDialogueInfo {
	bool FBKEKCGELBE = 6;
	uint32 dialogue_id = 7;
}
message HeartDialScriptInfo {
	bool JMPEJFICKJO = 3;
	bool KKGFIGCHKIB = 2;
	uint32 script_id = 7;
	HeartDialStepType step = 8;
	HeartDialEmotionType cur_emotion_type = 13;
}
message MMEINFMDJFG {
	uint32 script_id = 1;
	uint32 KBMMMMCKJNI = 12;
}
message GetHeartDialInfoCsReq {
}
message GetHeartDialInfoScRsp {
	HeartDialUnlockStatus unlock_status = 1;
	repeated HeartDialScriptInfo script_info_list = 7;
	repeated MMEINFMDJFG OCMOEJIDLAM = 8;
	uint32 retcode = 9;
	repeated HeartDialDialogueInfo dialogue_info_list = 11;
}
message ChangeScriptEmotionCsReq {
	HeartDialEmotionType target_emotion_type = 1;
	uint32 FIHNCOABELA = 2;
	uint32 script_id = 7;
}
message ChangeScriptEmotionScRsp {
	HeartDialEmotionType emotion_type = 2;
	uint32 script_id = 14;
	uint32 retcode = 7;
}
message SubmitEmotionItemCsReq {
	ItemList item_list = 3;
	uint32 FIHNCOABELA = 11;
	uint32 script_id = 12;
}
message SubmitEmotionItemScRsp {
	uint32 script_id = 3;
	uint32 retcode = 13;
}
message FinishEmotionDialoguePerformanceCsReq {
	uint32 script_id = 7;
	uint32 FIHNCOABELA = 9;
	uint32 dialogue_id = 10;
}
message FinishEmotionDialoguePerformanceScRsp {
	uint32 script_id = 2;
	uint32 dialogue_id = 14;
	uint32 retcode = 1;
	ItemList reward_list = 3;
}
message HeartDialScriptChangeScNotify {
	repeated MMEINFMDJFG OCMOEJIDLAM = 6;
	HeartDialUnlockStatus unlock_status = 1;
	repeated HeartDialScriptInfo changed_script_info_list = 15;
	repeated HeartDialDialogueInfo changed_dialogue_info_list = 2;
}
message HeartDialTraceScriptCsReq {
	MMEINFMDJFG AGOIPFBDDPO = 7;
}
message HeartDialTraceScriptScRsp {
	MMEINFMDJFG AGOIPFBDDPO = 4;
	uint32 retcode = 10;
}
message DEJAKPOEPKN {
	repeated uint32 LFPMAOBGNEN = 5;
	uint32 CGFGFMGDPNJ = 1;
}
message JMIJJHKIBLB {
	bool GJIEAHDBNNI = 14;
	uint32 star = 9;
	uint32 challenge_id = 13;
}
message HeliobusChallengeLineup {
	uint32 GroupId = 9;
	repeated uint32 AvatarIdList = 6;
	uint32 SkillId = 12;
}
message HeliobusActivityDataCsReq {
}
message HeliobusActivityDataScRsp {
	repeated GBJKKFHPFFN NFDBMHPPFIP = 15;
	repeated HeliobusChallengeLineup GCLJENGJICM = 1;
	uint32 IBHAAEJEEHC = 7;
	DEJAKPOEPKN skill_info = 6;
	repeated JMIJJHKIBLB challenge_list = 10;
	uint32 level = 8;
	uint32 phase = 12;
	uint32 IPHKDELMOIH = 3;
	uint32 EENJBPMNDOL = 14;
	uint32 retcode = 13;
}
message repeated {
	uint32 KMAEMPMOCCC = 3;
	repeated repeated GOAMMAGCIJJ = 8;
	uint32 ELIADKDAECO = 13;
}
message GBJKKFHPFFN {
	uint32 CMHGBBHKNCI = 8;
	bool AJCIODKLLML = 3;
	uint32 AKNKPKPLJHF = 6;
	uint32 FCLNOOGEHMC = 7;
	uint32 JFMOFIIDCNP = 12;
	repeated repeated NDJFNHFPCGD = 10;
	bool DEKHDIBCFAB = 13;
	uint32 IHKEJEBCEIB = 11;
}
message HeliobusSnsReadCsReq {
	uint32 IHKEJEBCEIB = 9;
}
message HeliobusSnsReadScRsp {
	uint32 IHKEJEBCEIB = 1;
	uint32 retcode = 3;
}
message HeliobusSnsPostCsReq {
	uint32 JFMOFIIDCNP = 2;
	uint32 FCLNOOGEHMC = 4;
	uint32 IHKEJEBCEIB = 7;
}
message HeliobusSnsPostScRsp {
	uint32 retcode = 6;
	GBJKKFHPFFN EIMCNIFMLBL = 8;
}
message HeliobusSnsLikeCsReq {
	uint32 IHKEJEBCEIB = 12;
}
message HeliobusSnsLikeScRsp {
	uint32 retcode = 8;
	bool DEKHDIBCFAB = 13;
	uint32 IHKEJEBCEIB = 3;
}
message HeliobusSnsCommentCsReq {
	uint32 KALJKFKJFFA = 12;
	uint32 IHKEJEBCEIB = 1;
	uint32 KMAEMPMOCCC = 9;
}
message HeliobusSnsCommentScRsp {
	uint32 retcode = 15;
	GBJKKFHPFFN EIMCNIFMLBL = 11;
}
message HeliobusSnsUpdateScNotify {
	repeated GBJKKFHPFFN GKFHMGMBIKA = 11;
}
message HeliobusInfoChangedScNotify {
	uint32 EENJBPMNDOL = 1;
	uint32 IPHKDELMOIH = 10;
	repeated GBJKKFHPFFN GKFHMGMBIKA = 8;
	uint32 phase = 9;
}
message HeliobusUpgradeLevelCsReq {
}
message HeliobusUpgradeLevelScRsp {
	uint32 retcode = 7;
	uint32 level = 14;
}
message HeliobusUnlockSkillScNotify {
	uint32 CGFGFMGDPNJ = 2;
	uint32 skill_id = 15;
}
message HeliobusEnterBattleCsReq {
	uint32 skill_id = 9;
	repeated uint32 avatar_id_list = 10;
	uint32 event_id = 11;
}
message HeliobusEnterBattleScRsp {
	SceneBattleInfo battle_info = 4;
	uint32 event_id = 12;
	uint32 retcode = 6;
}
message HeliobusSelectSkillCsReq {
	uint32 skill_id = 9;
}
message HeliobusSelectSkillScRsp {
	uint32 retcode = 4;
	uint32 skill_id = 5;
}
message HeliobusChallengeUpdateScNotify {
	JMIJJHKIBLB challenge = 9;
}
message HeliobusLineupUpdateScNotify {
	HeliobusChallengeLineup lineup = 8;
}
message HeliobusStartRaidCsReq {
	uint32 raid_id = 3;
	uint32 ENLKNPIBLIO = 2;
	uint32 skill_id = 15;
	repeated uint32 avatar_list = 4;
	uint32 prop_entity_id = 9;
	bool is_save = 12;
}
message HeliobusStartRaidScRsp {
	FNLGPLNCPCL scene = 3;
	uint32 retcode = 11;
}
message GetBagCsReq {
}
message Equipment {
	uint32 level = 13;
	uint32 rank = 12;
	uint32 dress_avatar_id = 4;
	uint32 unique_id = 5;
	uint32 exp = 14;
	bool is_protected = 15;
	uint32 promotion = 9;
	uint32 tid = 2;
}
message Relic {
	bool is_protected = 3;
	uint32 tid = 14;
	uint32 dress_avatar_id = 5;
	repeated RelicAffix sub_affix_list = 1;
	bool is_discarded = 8;
	uint32 unique_id = 15;
	uint32 exp = 2;
	repeated RelicAffix reforge_sub_affix_list = 6;
	uint32 level = 7;
	uint32 main_affix_id = 4;
}
message Material {
	uint64 expire_time = 15;
	uint32 num = 8;
	uint32 tid = 12;
}
message WaitDelResource {
	uint32 tid = 3;
	uint32 num = 10;
}
message Material0 {
	uint32 tid = 14;
	uint32 num = 9;
	uint64 expire_time = 7;
}
message GetBagScRsp {
	repeated uint32 GEMCACJLPIJ = 3;
	repeated Material0 PHNGMELJKBE = 10;
	repeated WaitDelResource wait_del_resource_list = 7;
	repeated uint32 AOIIHCFMFPH = 6;
	uint32 AEPNIDPONKC = 13;
	repeated TurnFoodSwitch KMJEFMFBLLI = 4;
	repeated Equipment equipment_list = 15;
	repeated Material IFENMDPBNKG = 9;
	repeated PileItem BAFEBHDOBFJ = 1;
	repeated uint32 FDBJLGDHCDO = 14;
	uint32 retcode = 5;
	repeated Material0 FCOKFFEAPMI = 2;
	repeated Relic relic_list = 8;
	repeated Material material_list = 11;
}
message PromoteEquipmentCsReq {
	ItemCostData cost_data = 6;
	uint32 equipment_unique_id = 9;
}
message PromoteEquipmentScRsp {
	uint32 retcode = 3;
}
message LockEquipmentCsReq {
	bool is_locked = 11;
	repeated uint32 ODLDPKIOEOM = 10;
}
message LockEquipmentScRsp {
	uint32 retcode = 7;
}
message UseItemCsReq {
	bool FELCIEMKCGF = 14;
	uint32 use_item_count = 6;
	AvatarType use_avatar_type = 3;
	uint32 use_item_id = 11;
	uint32 base_avatar_id = 7;
	uint32 optional_reward_id = 4;
}
message UseItemScRsp {
	uint32 use_item_id = 10;
	ItemList return_data = 6;
	uint32 use_item_count = 11;
	uint32 retcode = 4;
	uint64 month_card_out_date_time = 8;
	uint32 formula_id = 13;
}
message RankUpEquipmentCsReq {
	uint32 equipment_unique_id = 10;
	ItemCostData cost_data = 14;
}
message RankUpEquipmentScRsp {
	uint32 retcode = 6;
}
message BEPAHBKLJNN {
	uint32 equipment_unique_id = 15;
	ItemCostData cost_data = 7;
}
message LNKLNJJDGKF {
	repeated BEPAHBKLJNN switch_list = 14;
}
message BatchRankUpEquipmentScRsp {
	uint32 retcode = 13;
}
message ExpUpEquipmentCsReq {
	ItemCostData cost_data = 4;
	uint32 equipment_unique_id = 1;
}
message ExpUpEquipmentScRsp {
	uint32 retcode = 15;
	repeated PileItem return_item_list = 10;
}
message ComposeItemCsReq {
	ItemCostData compose_item_list = 8;
	ItemCostData convert_item_list = 14;
	uint32 count = 3;
	uint32 compose_id = 2;
}
message ComposeItemScRsp {
	uint32 count = 9;
	uint32 compose_id = 6;
	uint32 retcode = 15;
	ItemList return_item_list = 13;
}
message ComposeSelectedRelicCsReq {
	uint32 compose_id = 8;
	ItemCostData compose_item_list = 9;
	ItemCostData wr_item_list = 5;
	uint32 count = 13;
	uint32 main_affix_id = 11;
	uint32 compose_relic_id = 6;
	repeated uint32 sub_affix_id_list = 1;
}
message ComposeSelectedRelicScRsp {
	uint32 compose_id = 4;
	ItemList return_item_list = 5;
	uint32 retcode = 2;
}
message ExpUpRelicCsReq {
	uint32 relic_unique_id = 4;
	ItemCostData cost_data = 11;
}
message ExpUpRelicScRsp {
	uint32 retcode = 3;
	repeated PileItem return_item_list = 1;
}
message LockRelicCsReq {
	bool is_locked = 1;
	repeated uint32 relic_ids = 10;
	bool IEMNPGOMJCO = 5;
}
message LockRelicScRsp {
	uint32 retcode = 4;
}
message DiscardRelicCsReq {
	bool JNKHGFILJPB = 13;
	ICPINEHOLML NLPCONNJONF = 12;
	uint64 HNHFDMDIBIO = 3;
	repeated uint32 relic_ids = 9;
}
message DiscardRelicScRsp {
	uint32 retcode = 1;
	bool JNKHGFILJPB = 2;
}
message SellItemCsReq {
	bool OLFKACKGOFK = 6;
	ItemCostData cost_data = 9;
}
message SellItemScRsp {
	ItemList return_item_list = 7;
	uint32 retcode = 2;
}
message RechargeSuccNotify {
	ItemList ItemList = 4;
	uint64 MonthCardOutdateTime = 12;
	string ProductId = 13;
	string ChannelOrderNo = 3;
}
message ExchangeHcoinCsReq {
	uint32 num = 11;
}
message ExchangeHcoinScRsp {
	uint32 Retcode = 5;
	uint32 Num = 6;
}
message AddEquipmentScNotify {
	uint32 MDMGKHLHIIN = 1;
}
message GetRecyleTimeCsReq {
	repeated uint32 CJLNDNILGMF = 13;
}
message GetRecyleTimeScRsp {
	repeated Material0 FCOKFFEAPMI = 15;
	uint32 retcode = 10;
}
message FNHMMMKJGPB {
	uint32 formula_id = 5;
	uint32 OJEMELHCMPJ = 7;
}
message ComposeLimitNumCompleteNotify {
	repeated FNHMMMKJGPB DCHNAEDINMM = 13;
}
message ComposeLimitNumUpdateNotify {
	FNHMMMKJGPB FGLFGJDPJPD = 2;
}
message DestroyItemCsReq {
	uint32 item_count = 7;
	uint32 cur_item_count = 11;
	uint32 item_id = 1;
}
message DestroyItemScRsp {
	uint32 cur_item_count = 9;
	uint32 retcode = 11;
}
message GetMarkItemListCsReq {
}
message GetMarkItemListScRsp {
	repeated uint32 PDBIHONOLFJ = 8;
	uint32 retcode = 1;
}
message MarkItemCsReq {
	bool NAEHPHHDGEK = 11;
	uint32 item_id = 9;
}
message MarkItemScRsp {
	uint32 item_id = 6;
	uint32 retcode = 11;
	bool NAEHPHHDGEK = 2;
}
message CancelMarkItemNotify {
	uint32 item_id = 12;
}
message SyncTurnFoodNotify {
	repeated TurnFoodSwitch KMJEFMFBLLI = 12;
	repeated uint32 FDBJLGDHCDO = 13;
}
message SetTurnFoodSwitchCsReq {
	TurnFoodSwitch JCAKHHKFDFN = 1;
	bool BNDLHJHALMB = 13;
}
message SetTurnFoodSwitchScRsp {
	uint32 retcode = 4;
	bool BNDLHJHALMB = 8;
	TurnFoodSwitch JCAKHHKFDFN = 15;
}
message GeneralVirtualItemDataNotify {
	bool PKBAHPFJGDB = 12;
	repeated PileItem FDJKCCGDNKA = 7;
}
message RelicFilterPlanIcon {
	uint32 IconId = 5;
	bool IsAvatarIcon = 11;
}
message RelicFilterPlan {
	RelicFilterPlanSettings Settings = 2;
	string Name = 11;
	uint32 AvatarIdOnCreate = 4;
	bool IsMarked = 8;
	uint32 SlotIndex = 9;
	RelicFilterPlanIcon Icon = 15;
	int64 UpdateTimestamp = 13;
}
message GetRelicFilterPlanCsReq {
}
message GetRelicFilterPlanScRsp {
	repeated RelicFilterPlan RelicFilterPlanList = 2;
	uint32 Retcode = 5;
}
message AddRelicFilterPlanCsReq {
	RelicFilterPlanIcon Icon = 7;
	bool IsMarked = 5;
	RelicFilterPlanSettings Settings = 12;
	uint32 AvatarIdOnCreate = 13;
	string Name = 10;
}
message AddRelicFilterPlanScRsp {
	uint32 Retcode = 15;
	RelicFilterPlan Plan = 13;
}
message ModifyRelicFilterPlanCsReq {
	oneof infoCase_ {
		string Name = 2;
		RelicFilterPlanIcon Icon = 9;
		RelicFilterPlanSettings Settings = 15;
	}
	uint32 SlotIndex = 10;
}
message ModifyRelicFilterPlanScRsp {
	oneof infoCase_ {
		string Name = 15;
		RelicFilterPlanIcon Icon = 2;
		RelicFilterPlanSettings Settings = 14;
	}
	int64 UpdateTimestamp = 10;
	uint32 SlotIndex = 7;
	uint32 Retcode = 11;
}
message DeleteRelicFilterPlanCsReq {
	bool IsBatchOp = 13;
	repeated uint32 SlotIndexList = 8;
}
message DeleteRelicFilterPlanScRsp {
	uint32 retcode = 4;
	bool IEMNPGOMJCO = 3;
	repeated uint32 NDOBMAJMLNK = 8;
}
message MarkRelicFilterPlanCsReq {
	bool IsMark = 3;
	repeated uint32 SlotIndexList = 11;
	bool IsBatchOp = 9;
}
message MarkRelicFilterPlanScRsp {
	bool IsMark = 4;
	repeated uint32 SlotIndexList = 13;
	bool IsBatchOp = 2;
	uint32 Retcode = 1;
}
message RelicFilterPlanClearNameScNotify {
	uint32 max_times = 15;
}
message RelicReforgeCsReq {
	uint32 relic_unique_id = 2;
}
message RelicReforgeScRsp {
	uint32 retcode = 7;
}
message RelicReforgeConfirmCsReq {
	bool is_cancel = 8;
	uint32 relic_unique_id = 7;
}
message RelicReforgeConfirmScRsp {
	uint32 retcode = 13;
}
message MusicData {
	uint32 id = 2;
	uint32 group_id = 10;
	bool is_played = 8;
}
message GetJukeboxDataCsReq {
}
message GetJukeboxDataScRsp {
	repeated MusicData unlocked_music_list = 11;
	uint32 current_music_id = 2;
	uint32 retcode = 8;
}
message PlayBackGroundMusicCsReq {
	uint32 play_music_id = 12;
}
message PlayBackGroundMusicScRsp {
	uint32 play_music_id = 1;
	uint32 retcode = 6;
	uint32 current_music_id = 9;
}
message UnlockBackGroundMusicCsReq {
	repeated uint32 unlock_ids = 5;
}
message UnlockBackGroundMusicScRsp {
	repeated MusicData unlocked_music_list = 15;
	repeated uint32 OGHDILHDLEB = 6;
	uint32 retcode = 14;
}
message TrialBackGroundMusicCsReq {
	uint32 PIGBBGCLAMJ = 8;
}
message TrialBackGroundMusicScRsp {
	uint32 PIGBBGCLAMJ = 9;
	uint32 retcode = 8;
}
message GetStageLineupCsReq {
}
message JLCHBKKFANL {
	uint32 DOGDACFLBOE = 7;
	uint32 stage_type = 10;
}
message GetStageLineupScRsp {
	uint32 retcode = 5;
	repeated JLCHBKKFANL NMKPEKMMNBP = 3;
}
message LineupAvatar {
	AvatarType avatar_type = 6;
	uint32 slot = 4;
	uint32 satiety = 1;
	uint32 id = 10;
	uint32 hp = 14;
	SpBarInfo sp_bar = 9;
}
message LineupInfo {
	bool BFNBKLMAMKB = 9;
	bool is_virtual = 5;
	uint32 max_mp = 11;
	ExtraLineupType extra_lineup_type = 2;
	repeated uint32 story_line_avatar_id_list = 15;
	uint32 leader_slot = 13;
	uint32 index = 3;
	repeated uint32 MANKKFPBFCB = 8;
	string name = 14;
	uint32 game_story_line_id = 1;
	repeated LineupAvatar avatar_list = 6;
	uint32 mp = 4;
	repeated uint32 KOMPCJPAPKM = 12;
	uint32 plane_id = 10;
}
message GetCurLineupDataCsReq {
}
message GetCurLineupDataScRsp {
	uint32 retcode = 10;
	LineupInfo lineup = 13;
}
message JoinLineupCsReq {
	uint32 base_avatar_id = 5;
	ExtraLineupType extra_lineup_type = 2;
	bool is_virtual = 9;
	uint32 plane_id = 6;
	AvatarType avatar_type = 3;
	uint32 slot = 10;
	uint32 index = 4;
}
message JoinLineupScRsp {
	uint32 retcode = 4;
}
message QuitLineupCsReq {
	AvatarType avatar_type = 9;
	ExtraLineupType extra_lineup_type = 10;
	uint32 index = 5;
	uint32 plane_id = 2;
	uint32 base_avatar_id = 3;
	bool is_virtual = 4;
}
message QuitLineupScRsp {
	uint32 retcode = 13;
	uint32 plane_id = 6;
	bool is_virtual = 14;
	uint32 base_avatar_id = 5;
	bool HIOFPDKDOFD = 2;
}
message SwapLineupCsReq {
	uint32 index = 11;
	uint32 ELLIDANJNOB = 6;
	ExtraLineupType extra_lineup_type = 2;
	uint32 NEDIKHNGMBH = 1;
	uint32 plane_id = 15;
	bool is_virtual = 12;
}
message SwapLineupScRsp {
	uint32 retcode = 1;
}
message SyncLineupNotify {
	LineupInfo Lineup = 15;
	repeated SyncLineupReason ReasonList = 1;
}
message GetLineupAvatarDataCsReq {
}
message LineupAvatarData {
	uint32 hp = 3;
	AvatarType avatar_type = 2;
	uint32 id = 9;
}
message GetLineupAvatarDataScRsp {
	uint32 retcode = 2;
	repeated LineupAvatarData avatar_data_list = 5;
}
message ChangeLineupLeaderCsReq {
	uint32 slot = 4;
}
message ChangeLineupLeaderScRsp {
	uint32 slot = 12;
	uint32 retcode = 2;
}
message SwitchLineupIndexCsReq {
	uint32 index = 3;
}
message SwitchLineupIndexScRsp {
	uint32 retcode = 2;
	uint32 index = 4;
}
message SetLineupNameCsReq {
	string name = 2;
	uint32 index = 11;
}
message SetLineupNameScRsp {
	string name = 13;
	uint32 retcode = 12;
	uint32 index = 11;
}
message GetAllLineupDataCsReq {
}
message GetAllLineupDataScRsp {
	repeated LineupInfo lineup_list = 13;
	uint32 cur_index = 1;
	uint32 retcode = 2;
}
message VirtualLineupDestroyNotify {
	uint32 plane_id = 4;
}
message LineupSlotData {
	AvatarType avatar_type = 1;
	uint32 slot = 11;
	uint32 id = 7;
}
message ReplaceLineupCsReq {
	ExtraLineupType extra_lineup_type = 3;
	uint32 leader_slot = 8;
	uint32 index = 4;
	repeated LineupSlotData lineup_slot_list = 12;
	uint32 plane_id = 11;
	bool is_virtual = 9;
	uint32 game_story_line_id = 5;
}
message ReplaceLineupScRsp {
	uint32 retcode = 3;
}
message ExtraLineupDestroyNotify {
	ExtraLineupType extra_lineup_type = 9;
}
message VirtualLineupTrialAvatarChangeScNotify {
	repeated uint32 KFMFFGGJMNE = 4;
	bool CLIIGMNMHNA = 1;
	uint32 plane_id = 3;
	repeated uint32 IBLBNIANPHD = 13;
}
message LobbyCreateCsReq {
	EPEGHCGCMHP EJOFCNAEDHK = 13;
	FightGameMode NBDLPGBIDLC = 12;
	uint32 NEPODDOJJFE = 11;
}
message LobbyCreateScRsp {
	uint64 room_id = 15;
	uint32 retcode = 14;
	uint32 NEPODDOJJFE = 9;
	FightGameMode NBDLPGBIDLC = 5;
	repeated CBBDIOMIFHD LIPJDJPMOKB = 4;
}
message LobbyInviteCsReq {
	repeated uint32 uid_list = 14;
}
message LobbyInviteScRsp {
	repeated uint32 uid_list = 2;
	uint32 retcode = 5;
}
message LobbyJoinCsReq {
	uint64 room_id = 11;
	EPEGHCGCMHP EJOFCNAEDHK = 4;
}
message LobbyJoinScRsp {
	uint32 NEPODDOJJFE = 7;
	repeated CBBDIOMIFHD LIPJDJPMOKB = 4;
	FightGameMode NBDLPGBIDLC = 10;
	uint64 room_id = 9;
	uint32 retcode = 6;
}
message LobbyQuitCsReq {
}
message LobbyQuitScRsp {
	uint32 retcode = 3;
}
message CLBJAADLIPM {
}
message LobbyStartFightScRsp {
	uint32 retcode = 5;
}
message LobbyModifyPlayerInfoCsReq {
	EPEGHCGCMHP EJOFCNAEDHK = 10;
	uint32 HFDJAELBNGA = 5;
	LobbyModifyType type = 9;
}
message LobbyModifyPlayerInfoScRsp {
	uint32 retcode = 9;
}
message LobbySyncInfoScNotify {
	uint32 uid = 1;
	repeated CBBDIOMIFHD LIPJDJPMOKB = 11;
	LobbyModifyType type = 9;
}
message LobbyKickOutCsReq {
	uint32 uid = 12;
}
message LobbyKickOutScRsp {
	uint32 retcode = 4;
}
message LobbyInviteScNotify {
	uint32 sender_id = 12;
	FightGameMode NBDLPGBIDLC = 15;
	uint32 room_id = 3;
}
message LobbyGetInfoCsReq {
}
message LobbyGetInfoScRsp {
	uint32 NEPODDOJJFE = 6;
	repeated CBBDIOMIFHD LIPJDJPMOKB = 5;
	uint32 retcode = 9;
	FightGameMode NBDLPGBIDLC = 7;
	uint64 room_id = 12;
	uint64 NOGFEEMNHPC = 11;
}
message ADODLHLIPMF {
	IMAONMHILNE IHCILNHKLMC = 5;
	uint32 CBEGNBKMHCD = 2;
}
message LobbyInteractScRsp {
	uint32 retcode = 4;
	uint32 CBEGNBKMHCD = 13;
}
message LobbyInteractScNotify {
	IMAONMHILNE IHCILNHKLMC = 14;
	uint32 sender_id = 2;
}
message GetMailCsReq {
	uint32 CIJEFNOOJJK = 9;
	uint32 DAPCDNELCMA = 15;
}
message ClientMail {
	int64 Time = 5;
	int64 ExpireTime = 10;
	string Sender = 6;
	repeated string ParaList = 13;
	string Title = 4;
	ItemList Attachment = 15;
	uint32 Id = 12;
	string Content = 8;
	uint32 TemplateId = 11;
	MailType MailType = 9;
	bool IsRead = 7;
}
message GetMailScRsp {
	uint32 TotalNum = 10;
	repeated ClientMail MailList = 8;
	bool IsEnd = 1;
	uint32 Retcode = 5;
	uint32 Start = 7;
	repeated ClientMail NoticeMailList = 2;
}
message MarkReadMailCsReq {
	uint32 id = 9;
}
message MarkReadMailScRsp {
	uint32 id = 3;
	uint32 retcode = 15;
}
message DelMailCsReq {
	repeated uint32 id_list = 8;
}
message DelMailScRsp {
	repeated uint32 IdList = 9;
	uint32 Retcode = 15;
}
message TakeMailAttachmentCsReq {
	repeated uint32 mail_id_list = 1;
	uint32 optional_reward_id = 7;
}
message ClientMailAttachmentItem {
	uint32 mail_id = 6;
	uint32 item_id = 2;
}
message TakeMailAttachmentScRsp {
	ItemList Attachment = 12;
	repeated uint32 SuccMailIdList = 9;
	repeated ClientMailAttachmentItem FailMailList = 1;
	uint32 Retcode = 6;
}
message NewMailScNotify {
	repeated uint32 MailIdList = 5;
}
message RogueMapRotateInfo {
	repeated RotaterData rotater_data_list = 3;
	uint32 NFLBONDJAIE = 7;
	bool is_rotate = 5;
	RotaterEnergyInfo energy_info = 13;
	repeated ChargerInfo charger_info = 11;
	ICIMAKBAJGB rogue_map = 10;
	int32 era_flipper_region_id = 15;
}
message RotaterEnergyInfo {
	uint32 cur_num = 4;
	uint32 max_num = 7;
}
message ICIMAKBAJGB {
	Vector OBDCGHJKPFE = 7;
	Vector4 JLMNBKHJHMN = 11;
}
message EnterMapRotationRegionCsReq {
	MotionInfo motion = 13;
	uint32 NFLBONDJAIE = 5;
	uint32 era_flipper_region_id = 15;
}
message EnterMapRotationRegionScRsp {
	uint32 NFLBONDJAIE = 7;
	uint32 era_flipper_region_id = 1;
	uint32 client_pos_version = 11;
	MotionInfo motion = 3;
	RotaterEnergyInfo energy_info = 4;
	uint32 retcode = 9;
}
message ChargerInfo {
	uint32 group_id = 1;
	uint32 GLHAGJGAEHE = 12;
}
message InteractChargerCsReq {
	ChargerInfo charger_info = 15;
}
message InteractChargerScRsp {
	RotaterEnergyInfo energy_info = 2;
	uint32 retcode = 5;
	ChargerInfo charger_info = 6;
}
message RotaterData {
	uint32 GLHAGJGAEHE = 4;
	uint32 group_id = 15;
	float LKEFOLCGFGD = 5;
}
message DeployRotaterCsReq {
	RotaterData rotater_data = 2;
}
message DeployRotaterScRsp {
	uint32 retcode = 4;
	RotaterEnergyInfo energy_info = 15;
	RotaterData rotater_data = 11;
}
message RotateMapCsReq {
	MotionInfo motion = 2;
	uint32 group_id = 5;
	ICIMAKBAJGB rogue_map = 4;
	uint32 GLHAGJGAEHE = 12;
}
message RotateMapScRsp {
	uint32 retcode = 6;
	MotionInfo motion = 10;
	uint32 client_pos_version = 4;
}
message LeaveMapRotationRegionCsReq {
	MotionInfo motion = 5;
}
message LeaveMapRotationRegionScRsp {
	uint32 retcode = 1;
	uint32 client_pos_version = 11;
	MotionInfo motion = 4;
}
message GetMapRotationDataCsReq {
}
message GetMapRotationDataScRsp {
	uint32 retcode = 6;
	ICIMAKBAJGB rogue_map = 5;
	RotaterEnergyInfo energy_info = 2;
	repeated RotaterData rotater_data_list = 11;
	uint32 NFLBONDJAIE = 12;
	int32 era_flipper_region_id = 1;
	bool OMEJLLMNPCN = 14;
	repeated ChargerInfo charger_info = 4;
}
message ResetMapRotationRegionCsReq {
	ICIMAKBAJGB rogue_map = 4;
	MotionInfo motion = 14;
}
message ResetMapRotationRegionScRsp {
	uint32 retcode = 2;
	uint32 client_pos_version = 1;
	MotionInfo motion = 15;
}
message LeaveMapRotationRegionScNotify {
}
message UpdateEnergyScNotify {
	RotaterEnergyInfo energy_info = 15;
}
message UpdateMapRotationDataScNotify {
	ICIMAKBAJGB rogue_map = 12;
	bool OMEJLLMNPCN = 4;
	repeated ChargerInfo charger_info = 13;
	repeated RotaterData rotater_data_list = 14;
	int32 era_flipper_region_id = 8;
	RotaterEnergyInfo energy_info = 5;
	uint32 NFLBONDJAIE = 9;
}
message RemoveRotaterCsReq {
	RotaterData rotater_data = 2;
}
message RemoveRotaterScRsp {
	uint32 retcode = 12;
	RotaterEnergyInfo energy_info = 15;
	RotaterData rotater_data = 8;
}
message UpdateRotaterScNotify {
	repeated RotaterData rotater_data_list = 9;
}
message GCFNLGIEEFA {
}
message MarbleGetDataScRsp {
	repeated uint32 IOGDKGFDFPC = 1;
	repeated uint32 OJNPGILJIEN = 4;
	uint32 retcode = 8;
	int32 score_id = 10;
	repeated uint32 MPBMPFFGIBO = 15;
}
message GDCEEEKKMHC {
	uint32 NLIBKABFGCC = 4;
	repeated uint32 PMKANGDFLKI = 12;
}
message MarbleLevelFinishScRsp {
	uint32 NLIBKABFGCC = 5;
	uint32 retcode = 1;
}
message ELMECJPPBJC {
	repeated uint32 PMKANGDFLKI = 10;
}
message MarbleShopBuyScRsp {
	repeated uint32 PMKANGDFLKI = 1;
	uint32 retcode = 14;
}
message MarbleUnlockSealScNotify {
	repeated uint32 PMKANGDFLKI = 4;
}
message MarblePvpDataUpdateScNotify {
	int32 score_id = 12;
}
message COAMELCLLIA {
	repeated uint32 EHENKPLCPCH = 1;
}
message MarbleUpdateShownSealScRsp {
	repeated uint32 EHENKPLCPCH = 10;
	uint32 retcode = 1;
}
message MarkChestInfo {
	uint32 floor_id = 5;
	uint32 plane_id = 12;
	uint32 config_id = 13;
	uint32 group_id = 1;
}
message MarkChestFuncInfo {
	int64 mark_time = 8;
	uint32 func_id = 11;
	repeated MarkChestInfo mark_chest_info_list = 3;
}
message GetMarkChestCsReq {
}
message GetMarkChestScRsp {
	repeated MarkChestFuncInfo mark_chest_func_info = 1;
	uint32 retcode = 5;
}
message UpdateMarkChestCsReq {
	uint32 func_id = 14;
	uint32 trigger_param_id = 7;
	repeated MarkChestInfo mark_chest_info_list = 6;
}
message UpdateMarkChestScRsp {
	uint32 retcode = 9;
	repeated MarkChestFuncInfo mark_chest_func_info = 12;
	uint32 func_id = 3;
	uint32 trigger_param_id = 14;
}
message MarkChestChangedScNotify {
	repeated MarkChestFuncInfo mark_chest_func_info = 12;
}
message StartMatchCsReq {
	EPEGHCGCMHP EJOFCNAEDHK = 12;
	FightGameMode NBDLPGBIDLC = 5;
}
message StartMatchScRsp {
	uint32 retcode = 10;
	EPEGHCGCMHP EJOFCNAEDHK = 6;
}
message CancelMatchCsReq {
}
message CancelMatchScRsp {
	uint32 retcode = 5;
}
message MatchResultScNotify {
	repeated CBBDIOMIFHD LIPJDJPMOKB = 11;
	uint32 retcode = 14;
}
message GetCrossInfoCsReq {
}
message GetCrossInfoScRsp {
	uint32 retcode = 5;
	uint64 NOGFEEMNHPC = 8;
	uint64 room_id = 10;
	FightGameMode NBDLPGBIDLC = 1;
}
message MatchThreeGetDataCsReq {
}
message LMPIECFMFOI {
	uint32 level_id = 5;
	uint32 EBGMBDMPEGM = 14;
}
message DHONNIHMACI {
	uint32 BKMPFEOCFIB = 15;
	uint32 pos = 9;
	uint32 count = 13;
	uint32 FMKKABMDINJ = 11;
}
message ABGEJNBCDJK {
	map<uint32, uint32> ILBHDLMLMCK = 11;
	repeated DHONNIHMACI BGAFCOBNLPM = 3;
	repeated LMPIECFMFOI JMBCICLCHKD = 15;
	map<uint32, uint32> BEGMFIAPHLM = 1;
}
message MatchThreeGetDataScRsp {
	ABGEJNBCDJK MFKJDOEBLIM = 7;
	uint32 retcode = 9;
}
message MatchThreeLevelEndCsReq {
	uint32 EBGMBDMPEGM = 3;
	uint32 FMKKABMDINJ = 8;
	repeated uint32 JEPPFDINBNB = 12;
	string uuid = 11;
	uint32 BKMPFEOCFIB = 4;
	map<uint32, uint32> ILBHDLMLMCK = 10;
	uint32 level_id = 14;
}
message MatchThreeLevelEndScRsp {
	uint32 retcode = 8;
	uint32 EBGMBDMPEGM = 14;
	uint32 level_id = 11;
}
message MatchThreeSyncDataScNotify {
	ABGEJNBCDJK MFKJDOEBLIM = 8;
}
message MatchThreeSetBirdPosCsReq {
	uint32 BKMPFEOCFIB = 2;
	uint32 pos = 15;
}
message MatchThreeSetBirdPosScRsp {
	uint32 retcode = 7;
	uint32 pos = 11;
	uint32 BKMPFEOCFIB = 1;
}
message GetNpcMessageGroupCsReq {
	repeated uint32 contact_id_list = 15;
}
message MessageItem {
	uint32 item_id = 10;
	uint32 text_id = 4;
}
message MessageSection {
	repeated MessageItem item_list = 11;
	MessageSectionStatus status = 12;
	uint32 frozen_item_id = 4;
	repeated uint32 message_item_list = 15;
	uint32 id = 14;
}
message MessageGroup {
	uint32 message_section_id = 10;
	uint32 id = 2;
	int64 refresh_time = 3;
	repeated MessageSection message_section_list = 1;
	MessageGroupStatus status = 11;
}
message GetNpcMessageGroupScRsp {
	uint32 retcode = 8;
	repeated MessageGroup message_group_list = 1;
}
message GetNpcStatusCsReq {
}
message NpcStatus {
	bool is_finish = 5;
	uint32 npc_id = 6;
}
message GroupStatus {
	MessageGroupStatus group_status = 9;
	int64 refresh_time = 3;
	uint32 group_id = 15;
}
message SectionStatus {
	MessageSectionStatus section_status = 7;
	uint32 section_id = 12;
}
message GetNpcStatusScRsp {
	uint32 retcode = 12;
	repeated NpcStatus npc_status_list = 6;
}
message FinishItemIdCsReq {
	uint32 text_id = 4;
	uint32 item_id = 6;
}
message FinishItemIdScRsp {
	uint32 text_id = 10;
	uint32 retcode = 14;
	uint32 item_id = 15;
}
message FinishSectionIdCsReq {
	uint32 section_id = 4;
}
message FinishSectionIdScRsp {
	uint32 retcode = 6;
	ItemList reward = 9;
	uint32 section_id = 3;
}
message FinishPerformSectionIdCsReq {
	uint32 section_id = 15;
	repeated MessageItem item_list = 12;
}
message FinishPerformSectionIdScRsp {
	uint32 retcode = 1;
	ItemList reward = 5;
	uint32 section_id = 11;
	repeated MessageItem item_list = 7;
}
message GetMissionMessageInfoCsReq {
}
message GetMissionMessageInfoScRsp {
	map<uint32, uint32> APOLDLGPKOP = 4;
	uint32 retcode = 11;
}
message ShareCsReq {
	uint32 ENFKGGNOMEO = 6;
}
message ADGNKECPOMA {
	uint32 ENFKGGNOMEO = 7;
	uint32 CCCDKGAMDLB = 5;
}
message ShareScRsp {
	ItemList reward = 10;
	ADGNKECPOMA FGPLILEBKGL = 9;
	uint32 retcode = 4;
}
message GetShareDataCsReq {
}
message GetShareDataScRsp {
	repeated ADGNKECPOMA MFKJJBPNDAM = 6;
	uint32 retcode = 3;
}
message TakePictureCsReq {
}
message TakePictureScRsp {
	uint32 retcode = 8;
}
message NLBMCGCAEIO {
	repeated uint32 PILDEFKPKLE = 3;
	uint32 AFLEAJIHNEB = 10;
	uint32 type = 5;
}
message TriggerVoiceCsReq {
	repeated NLBMCGCAEIO MNELHNHCKPJ = 12;
}
message TriggerVoiceScRsp {
	uint32 retcode = 5;
}
message CancelCacheNotifyCsReq {
	repeated string KCLJMCAKOJF = 3;
	repeated uint32 daily_index = 2;
	CancelCacheType type = 14;
}
message CancelCacheNotifyScRsp {
	uint32 retcode = 12;
}
message SecurityReportCsReq {
	string DGDLNIEFCPF = 14;
}
message SecurityReportScRsp {
	uint32 retcode = 7;
}
message RacingData {
	uint32 IFAIKOIOIDD = 7;
	uint32 level = 13;
	MovieRacingType type = 3;
	uint32 PDOMACFEMGG = 5;
}
message GetMovieRacingDataCsReq {
}
message GetMovieRacingDataScRsp {
	repeated RacingData ODJIGEBEHGC = 11;
	uint32 retcode = 5;
}
message UpdateMovieRacingDataCsReq {
	RacingData KIHCHDFFPOL = 4;
}
message UpdateMovieRacingDataScRsp {
	RacingData KIHCHDFFPOL = 4;
	uint32 retcode = 5;
}
message SubmitOrigamiItemCsReq {
	uint32 LCBOFMOPGKE = 1;
}
message SubmitOrigamiItemScRsp {
	uint32 LCBOFMOPGKE = 9;
	uint32 retcode = 4;
}
message KLBHFHJDBFI {
	uint32 BMCJHONBHJH = 13;
	uint32 level = 6;
	bool NCNAONIFPFM = 9;
	uint32 IFAIKOIOIDD = 8;
}
message GetGunPlayDataCsReq {
}
message GetGunPlayDataScRsp {
	repeated KLBHFHJDBFI LNBFDJMNACN = 1;
	uint32 retcode = 4;
}
message UpdateGunPlayDataCsReq {
	uint32 group_id = 1;
	uint64 uuid = 9;
	uint32 PNEIFBEGMDH = 7;
	KLBHFHJDBFI ODFHNCHIEJN = 12;
}
message UpdateGunPlayDataScRsp {
	KLBHFHJDBFI ODFHNCHIEJN = 2;
	uint32 retcode = 10;
}
message JCDNMBCKPLF {
	uint32 id = 4;
	DifficultyAdjustmentType KCMJKGADPIP = 15;
	GIILENMKCAH modifier_source_type = 5;
}
message DifficultyAdjustmentGetDataCsReq {
}
message DifficultyAdjustmentGetDataScRsp {
	repeated JCDNMBCKPLF content_package_list = 14;
	uint32 retcode = 4;
}
message DifficultyAdjustmentUpdateDataCsReq {
	JCDNMBCKPLF data = 8;
}
message DifficultyAdjustmentUpdateDataScRsp {
	uint32 retcode = 15;
	JCDNMBCKPLF data = 2;
	repeated JCDNMBCKPLF content_package_list = 9;
}
message MazeKillDirectCsReq {
	uint32 MMKOGOKNPKL = 6;
	MNIJHMEPGNN modifier_source_type = 12;
	repeated uint32 entity_list = 15;
}
message MazeKillDirectScRsp {
	repeated uint32 entity_list = 6;
	uint32 retcode = 3;
}
message GetMissionDataCsReq {
}
message IKAMMKLBOCO {
	MissionSyncRecord type = 6;
	uint32 display_value = 11;
	uint32 id = 13;
}
message Mission {
	uint32 progress = 2;
	MissionStatus status = 11;
	uint32 id = 7;
}
message MissionCustomValue {
	uint32 custom_value = 11;
	uint32 index = 9;
}
message MissionCustomValueList {
	repeated MissionCustomValue custom_value_list = 6;
}
message MainMission {
	repeated MissionCustomValue custom_value_list = 2;
	MissionStatus status = 8;
	uint32 id = 9;
}
message FHABEIKAFBO {
	oneof FJOOJNKCNAE {
		MissionCustomValueList custom_value_list = 1100;
	}
	uint32 id = 1;
}
message MainMissionCustomValue {
	MissionCustomValueList custom_value_list = 6;
	uint32 main_mission_id = 1;
}
message GetMissionDataScRsp {
	repeated Mission mission_list = 11;
	uint32 retcode = 14;
	repeated MainMission main_mission_list = 13;
	uint32 track_mission_id = 8;
	repeated uint32 OJOMOCGIAIC = 4;
}
message AcceptMainMissionCsReq {
	uint32 main_mission_id = 7;
}
message AcceptMainMissionScRsp {
	uint32 main_mission_id = 15;
	uint32 retcode = 6;
}
message FinishTalkMissionCsReq {
	string talk_str = 2;
	repeated MissionCustomValue custom_value_list = 3;
	uint32 sub_mission_id = 13;
}
message FinishTalkMissionScRsp {
	string talk_str = 7;
	uint32 retcode = 12;
	repeated MissionCustomValue custom_value_list = 11;
	uint32 sub_mission_id = 14;
}
message MissionRewardScNotify {
	uint32 sub_mission_id = 6;
	uint32 main_mission_id = 1;
	ItemList reward = 8;
}
message SubMissionRewardScNotify {
	uint32 sub_mission_id = 12;
	ItemList reward = 3;
}
message SyncTaskCsReq {
	string key = 6;
}
message SyncTaskScRsp {
	uint32 retcode = 8;
	string key = 13;
}
message MissionGroupWarnScNotify {
	repeated uint32 group_id_list = 4;
}
message FinishCosumeItemMissionCsReq {
	ItemList item_list = 6;
	uint32 sub_mission_id = 5;
}
message FinishCosumeItemMissionScRsp {
	uint32 sub_mission_id = 13;
	uint32 retcode = 12;
}
message GetMissionStatusCsReq {
	repeated uint32 sub_mission_id_list = 9;
	repeated uint32 main_mission_id_list = 8;
}
message GetMissionStatusScRsp {
	repeated uint32 FinishedMainMissionIdList = 3;
	repeated uint32 UnfinishedMainMissionIdList = 12;
	repeated uint32 CurversionFinishedMainMissionIdList = 1;
	repeated uint32 DisabledMainMissionIdList = 13;
	repeated Mission SubMissionStatusList = 7;
	repeated MainMissionCustomValue MainMissionMcvList = 6;
	uint32 Retcode = 5;
}
message TeleportToMissionResetPointCsReq {
}
message TeleportToMissionResetPointScRsp {
	uint32 client_pos_version = 2;
	uint32 retcode = 9;
	MotionInfo motion = 5;
}
message StartFinishSubMissionScNotify {
	uint32 sub_mission_id = 14;
}
message StartFinishMainMissionScNotify {
	uint32 main_mission_id = 7;
}
message GetMainMissionCustomValueCsReq {
	repeated uint32 main_mission_id_list = 9;
}
message GetMainMissionCustomValueScRsp {
	repeated MainMission main_mission_list = 7;
	uint32 retcode = 15;
}
message MissionAcceptScNotify {
	repeated uint32 sub_mission_id_list = 5;
}
message UpdateTrackMainMissionIdCsReq {
	uint32 LMBCEOPCIGC = 6;
	uint32 track_mission_id = 10;
	TrackMainMissionUpdateReasonId IJDJMNJBOBI = 15;
}
message UpdateTrackMainMissionIdScRsp {
	uint32 track_mission_id = 5;
	uint32 prev_track_mission_id = 2;
	uint32 retcode = 8;
}
message FinishedMissionScNotify {
	repeated uint32 finished_main_mission_id_list = 14;
}
message GetMonopolyInfoCsReq {
}
message ODAIJIGEAJL {
	uint32 FLJBJPAHJIF = 11;
	bool HGMMCHHBKPB = 4;
	uint32 EJHDCNEEGMI = 7;
	uint32 ENGJFICHDML = 9;
	uint32 item_value = 12;
	bool LJFGIFBDANC = 3;
}
message LLGNIKNMCKE {
	GOJOINDBKIK NMAMONLLALL = 6;
	repeated uint32 OFIODJNLBEA = 12;
}
message OOEMIBFNLLD {
	uint32 EKPNCLPOENK = 14;
	uint32 progress = 5;
}
message LAILNIGFPOO {
	uint64 KHGPFHBOELE = 10;
	bool AELPFEBGNOK = 6;
	bool is_taken_reward = 2;
}
message BCMOKFHJMPM {
	repeated LAILNIGFPOO EBABBEJIPJN = 7;
	string DDIBEFMILMP = 179;
	repeated OOEMIBFNLLD CJFMAIAKENL = 4;
	uint32 pool_id = 3;
	uint32 BNOLDNBMJHF = 15;
	uint32 JGNIHLJFJPP = 12;
	repeated OOEMIBFNLLD JCKNGFJEEGI = 5;
	uint32 LJJMLEIOIFE = 10;
	uint64 JOJNDGBEJEK = 13;
	uint64 EBOOLGNACJJ = 2;
	repeated OOEMIBFNLLD IFKFEPKHLGN = 8;
	string JLEGPNIHMJD = 25;
	string PJDFBPBMBBA = 765;
	uint32 DGEPMKFFOAB = 1;
	repeated OOEMIBFNLLD KGBEJKNCLFK = 6;
	uint64 OMGKJLJIHLH = 14;
	uint32 DGALCMFIDFP = 11;
	bool FHOLFDONOII = 9;
}
message EDKGOMNEHOH {
	repeated BCMOKFHJMPM FJOAFFLLEOK = 13;
}
message GetMonopolyInfoScRsp {
	ICIHABOLHPN GPFGDOKNGEL = 9;
	NFDGIJLOLGD HEHJKFILINN = 1;
	CANNIBGCLCL OELHKEIPIDJ = 13;
	uint32 retcode = 6;
	KJBMLBGIBJF stt = 5;
	LLGNIKNMCKE JNHJEELJFHF = 3;
	ODAIJIGEAJL HLJMHNABFMC = 7;
	HFDGMJJFOHM FGHCIADCMNJ = 15;
	AFDALBGANPC rogue_buff_info = 2;
	repeated uint32 COKCGFMEIBA = 12;
	AEDKPBFCKGO LJAOGAPDFHA = 10;
	EDKGOMNEHOH IEDGKHDJJDC = 4;
	JAJGKKDPALC rogue_map = 11;
}
message NFDGIJLOLGD {
	repeated uint32 HFMDLHIFMPI = 5;
}
message MonopolyConditionUpdateScNotify {
	NFDGIJLOLGD HEHJKFILINN = 4;
}
message KJBMLBGIBJF {
	repeated uint32 OCCMNIDEBBJ = 10;
	repeated uint32 JIHCHILFJPI = 7;
}
message MonopolySttUpdateScNotify {
	KJBMLBGIBJF stt = 2;
}
message IAACCAFGEPI {
	bool JMDEFLAFICE = 10;
	IHGJLLNGDKL MAFKCBODMMC = 14;
	uint32 cell_id = 12;
	uint32 map_id = 8;
}
message JAJGKKDPALC {
	IAACCAFGEPI HGBIGBFGBOM = 6;
	uint32 PGALBDIIEFG = 3;
	uint32 LBBONKACGEJ = 12;
	repeated IAACCAFGEPI NBMPBGPJONH = 9;
	repeated IAACCAFGEPI IMOPIEJBHOD = 8;
}
message MonopolyEventLoadUpdateScNotify {
	repeated IAACCAFGEPI NBMPBGPJONH = 4;
	repeated IAACCAFGEPI IMOPIEJBHOD = 6;
}
message COMEOLGLNKO {
	uint32 event_id = 11;
}
message PBLCEJHPOPO {
	uint32 event_id = 6;
}
message LIHOCEHEPDB {
	repeated uint32 HFEJHLNIGGH = 2;
	uint32 event_id = 10;
	uint32 option_id = 5;
	uint32 LFCMBGOAIBB = 3;
}
message OHNBCHLOEBL {
	uint32 ECCJBGLBIGM = 14;
	repeated uint32 HFEJHLNIGGH = 1;
	uint32 event_id = 2;
	uint32 LFCMBGOAIBB = 13;
	uint32 OLFNJJKLGMK = 9;
}
message BLMJNFFPMCN {
	repeated LBENAAHCPEO KMKFOJAHELJ = 9;
	uint32 PIFPGKFFBPN = 1;
}
message AAIBAKECHCE {
	uint32 PAGCAMAGFLB = 15;
}
message FGONFNIDOHJ {
	uint32 shop_id = 14;
}
message IPONFKAJENJ {
	uint32 APAOBDGJMEG = 5;
}
message NALPJMLJPNP {
	uint32 OEFHMBJBLGC = 4;
	uint32 get_item_list = 10;
}
message LBENAAHCPEO {
	oneof EDAPCHIOJMD {
		COMEOLGLNKO PECBIMKOOAH = 1;
		PBLCEJHPOPO EMLNNMLGNKH = 2;
		LIHOCEHEPDB JBJLDPPDBBC = 9;
		AAIBAKECHCE ECOIFNNJDAP = 5;
		FGONFNIDOHJ NBJICDAJDGF = 12;
		IPONFKAJENJ GAJBFPCPIGM = 4;
		NALPJMLJPNP JOPPAEMPPFH = 13;
		OHNBCHLOEBL JOADHBLDIMF = 10;
		BLMJNFFPMCN IEFOGHNGCMC = 3;
	}
	uint32 OKDLMEJPCHE = 6;
}
message ICIHABOLHPN {
	LBENAAHCPEO FHNPAGIHINF = 1;
}
message MonopolyContentUpdateScNotify {
	LBENAAHCPEO FHNPAGIHINF = 4;
}
message MonopolyCellUpdateNotify {
	IAACCAFGEPI HGBIGBFGBOM = 3;
}
message MonopolyRollDiceCsReq {
}
message MonopolyRollDiceScRsp {
	uint32 BLHIABBKGPB = 5;
	uint32 retcode = 11;
}
message MonopolyCheatDiceCsReq {
	uint32 OCFHHDCBFBH = 5;
}
message MonopolyCheatDiceScRsp {
	uint32 OCFHHDCBFBH = 14;
	uint32 retcode = 8;
}
message MonopolyMoveCsReq {
	uint32 DGBMDPBIALG = 5;
	uint32 CNIFHNBIOFJ = 10;
}
message MonopolyMoveScRsp {
	uint32 retcode = 6;
	JAJGKKDPALC rogue_map = 11;
	repeated IAACCAFGEPI HECJNJNIAKK = 9;
}
message MonopolySelectOptionCsReq {
	uint32 event_id = 4;
	uint32 option_id = 2;
}
message DDCELCOJGNP {
	uint32 option_id = 10;
	uint32 LGIIAHIDLMG = 9;
	uint32 event_id = 14;
}
message MonopolySelectOptionScRsp {
	repeated DDCELCOJGNP ABNOINLOKLN = 7;
	uint32 retcode = 1;
	LBENAAHCPEO GPFGDOKNGEL = 3;
	uint32 option_id = 14;
	uint32 event_id = 4;
}
message MonopolyRollRandomCsReq {
	uint32 event_id = 5;
}
message MonopolyRollRandomScRsp {
	LBENAAHCPEO GPFGDOKNGEL = 4;
	uint32 retcode = 12;
	uint32 event_id = 9;
}
message MonopolyReRollRandomCsReq {
	uint32 event_id = 8;
}
message MonopolyReRollRandomScRsp {
	uint32 event_id = 7;
	LBENAAHCPEO GPFGDOKNGEL = 6;
	uint32 retcode = 11;
}
message MonopolyConfirmRandomCsReq {
	uint32 event_id = 11;
}
message MonopolyConfirmRandomScRsp {
	uint32 retcode = 1;
	uint32 event_id = 9;
	LBENAAHCPEO GPFGDOKNGEL = 7;
}
message MonopolyBuyGoodsCsReq {
	uint32 goods_id = 4;
	uint32 shop_id = 13;
}
message MonopolyBuyGoodsScRsp {
	uint32 retcode = 6;
	uint32 goods_id = 9;
	uint32 shop_id = 10;
}
message MonopolyUpgradeAssetCsReq {
	uint32 PAGCAMAGFLB = 4;
}
message MonopolyUpgradeAssetScRsp {
	uint32 PAGCAMAGFLB = 9;
	uint32 retcode = 14;
}
message MonopolyGiveUpCurContentCsReq {
	uint32 content_id = 14;
}
message MonopolyGiveUpCurContentScRsp {
	uint32 content_id = 6;
	uint32 retcode = 2;
}
message MonopolyActionResult {
	uint32 ClickCellId = 6;
	uint32 ClickMapId = 7;
	NIBJAMFMEFD Detail = 11;
	uint32 TriggerCellId = 13;
	GKEJFKAKENM SourceType = 14;
	uint32 EffectType = 2;
	uint32 TriggerMapId = 3;
}
message MonopolyActionResultScNotify {
	repeated MonopolyActionResult PFNOKNCDPGE = 2;
}
message LMMEBMBGLDN {
	uint32 HKMIHEJCAEM = 8;
	bool BLHDOHMACBM = 2;
}
message NIBJAMFMEFD {
	oneof PFABLBBFOJF {
		LMKAAEFPFFO MECLLCDABNO = 4;
		LMKAAEFPFFO FFIPKMHCKHJ = 6;
		AIDFBBIAPEP NFBCGKNOPDA = 7;
		AIDFBBIAPEP DACHANHPPBG = 3;
		BMPLFJKEOLF get_buff_list = 8;
		BMPLFJKEOLF remove_buff_list = 14;
		LNKMKNBPIJH DMDPCOOAFJK = 9;
		LNKMKNBPIJH HHIBFNAGKFF = 2;
		LMMEBMBGLDN NKCMGBCPJGG = 10;
		LPBAMOKKJCM HANOGACJPKB = 13;
		BMPLFJKEOLF OMFECIMLADC = 1;
		LNKMKNBPIJH NGONCCBLAOL = 15;
		NMGHFOLKFAJ FJGHNLNJLPH = 12;
	}
}
message NMGHFOLKFAJ {
	uint32 GJLKOGGIIFO = 5;
}
message LMKAAEFPFFO {
	uint32 item_id = 8;
	uint32 OGJOFMCMFPG = 12;
	uint32 BMALPKEKBEL = 10;
}
message LNKMKNBPIJH {
	uint32 IGDBOFCDJOL = 7;
	uint32 OGNKMDNJGOG = 14;
}
message LPBAMOKKJCM {
	uint32 HNLFMJOKNBN = 14;
	uint32 MDFLFLLMGNA = 10;
	uint32 KNGGPPIOGAE = 8;
	uint32 NJDGGJBEFCN = 11;
}
message HAKNOFDPBOD {
	oneof HEAIAEDBPKL {
		GJKIAPIPGAN EJCOLGNJGDC = 9;
		EIMOBGLLEFO LKANIPLNKGC = 5;
		EOPFMPAOOJE BDEMPAKHGMJ = 12;
	}
	uint32 FPOGIALMCIP = 4;
	uint32 ACDOPCBMPNL = 10;
	uint32 config_id = 8;
}
message HFDGMJJFOHM {
	repeated HAKNOFDPBOD PEFMDFKECOD = 11;
	HAKNOFDPBOD AJCINKHBDJB = 14;
	LMMEBMBGLDN NPOIGJPCGFB = 1;
}
message MonopolyGameSettleScNotify {
	HAKNOFDPBOD GAJBFPCPIGM = 13;
	ItemList PEMIJIMJMIO = 2;
	ItemList item_list = 9;
}
message MonopolyGameCreateScNotify {
	LMMEBMBGLDN NPOIGJPCGFB = 6;
	HAKNOFDPBOD GAJBFPCPIGM = 11;
}
message MonopolyGameRaiseRatioCsReq {
	uint32 ACDOPCBMPNL = 3;
}
message MonopolyGameRaiseRatioScRsp {
	uint32 Retcode = 2;
	uint32 Ratio = 9;
}
message DailyFirstEnterMonopolyActivityCsReq {
}
message DailyFirstEnterMonopolyActivityScRsp {
	bool OICAGHGMMFP = 11;
	uint32 KEKJCDMIDDL = 3;
	AEDKPBFCKGO LJAOGAPDFHA = 7;
	int64 IIHKIKLIOJI = 12;
	uint32 retcode = 2;
}
message MonopolyGetDailyInitItemCsReq {
	bool IFHPJJBLNDL = 9;
}
message MonopolyGetDailyInitItemScRsp {
	uint32 HEOOFPGKDCD = 14;
	uint32 IOABHFPABBE = 13;
	uint32 HCDBBFLPCFL = 12;
	uint32 HBFFFGPJKIC = 3;
	uint32 OFGNIGNOHAF = 8;
	uint32 retcode = 2;
	int64 IIHKIKLIOJI = 15;
}
message GJKIAPIPGAN {
	repeated uint32 POGEMMICILA = 3;
	bool NFEADMFNFLK = 4;
	repeated uint32 LEGHKNNKOMG = 8;
	uint32 OEFJMEFPIPL = 7;
	repeated uint32 FHBOPEPJAEN = 1;
}
message MonopolyGameBingoFlipCardCsReq {
	uint32 HCFPOFMDGKN = 6;
}
message MonopolyGameBingoFlipCardScRsp {
	uint32 NPJEECEDPOK = 13;
	repeated uint32 LEGHKNNKOMG = 15;
	bool NFEADMFNFLK = 6;
	uint32 retcode = 10;
}
message MonopolyGameGachaCsReq {
}
message MonopolyGameGachaScRsp {
	repeated uint32 ResultList = 12;
	uint32 Retcode = 5;
}
message NKACIMEOAPD {
	uint32 IBADOBADHJH = 14;
	uint32 POGJHKFBMCH = 6;
}
message EIMOBGLLEFO {
	uint32 OHLEPKEKMNH = 10;
	uint32 EAEJLOFGAFO = 1;
	repeated NKACIMEOAPD NDGGACPICBF = 2;
	uint32 CHJNGDIOOME = 4;
	uint32 BHPFPEJBKEC = 6;
	repeated uint32 HPNHHCMKJCB = 14;
}
message MonopolyAcceptQuizCsReq {
	repeated NKACIMEOAPD NDGGACPICBF = 3;
}
message MonopolyAcceptQuizScRsp {
	EIMOBGLLEFO LKANIPLNKGC = 9;
	uint32 retcode = 11;
}
message OOCKALNFHNP {
	uint32 CHJNGDIOOME = 14;
	uint32 HMCJOBJBPKJ = 6;
	uint32 BGBIHIDHCON = 2;
}
message MonopolyQuizDurationChangeScNotify {
	repeated OOCKALNFHNP LEADMNEIMDP = 11;
}
message EOPFMPAOOJE {
	uint32 PPCLBDBJLMO = 6;
	uint32 HMHJDBIFGDI = 5;
	bool LOPDBAEGFKP = 4;
}
message MonopolyGuessChooseCsReq {
	uint32 HMHJDBIFGDI = 2;
}
message MonopolyGuessChooseScRsp {
	uint32 HMHJDBIFGDI = 1;
	uint32 retcode = 9;
}
message ACKNCAAAMJM {
	uint32 PPCLBDBJLMO = 14;
	ItemList item_list = 4;
	uint32 GIACFCDDJNM = 1;
}
message MonopolyGuessDrawScNotify {
	repeated ACKNCAAAMJM JHIIKPEJEIE = 14;
}
message MonopolyGuessBuyInformationCsReq {
}
message MonopolyGuessBuyInformationScRsp {
	uint32 retcode = 15;
}
message AIDFBBIAPEP {
	uint32 MILKEACFLPO = 1;
	uint32 level = 3;
	uint32 PAGCAMAGFLB = 12;
}
message CANNIBGCLCL {
	repeated AIDFBBIAPEP MAGEFLJGJND = 3;
}
message AEDKPBFCKGO {
	uint32 PKDLKCBKKPF = 7;
	uint32 IFKDGEBCDEG = 15;
	uint32 EFINFPKKJLE = 4;
	bool IMOBLGOAJCB = 14;
	uint32 GIMDHBNJOOO = 8;
	uint32 FNIGPGBGEHN = 12;
	uint32 PILAAGOKAOF = 13;
	uint32 KMGIEMOFOGB = 10;
	uint32 PDDNGKNCPEB = 11;
}
message MonopolyDailySettleScNotify {
	uint32 KEKJCDMIDDL = 13;
	AEDKPBFCKGO LJAOGAPDFHA = 9;
}
message BMPLFJKEOLF {
	uint32 COFFEBNIBHK = 4;
	uint32 buff_id = 8;
	uint32 OKDLMEJPCHE = 6;
}
message AFDALBGANPC {
	repeated BMPLFJKEOLF buff_list = 10;
}
message INDGLKCECDC {
	uint32 PILAAGOKAOF = 14;
	uint32 HDILBDIPGHO = 5;
	uint32 uid = 10;
	uint32 DPJKOJGCJLP = 15;
	uint32 FNIGPGBGEHN = 1;
}
message GetMonopolyFriendRankingListCsReq {
}
message GetMonopolyFriendRankingListScRsp {
	INDGLKCECDC ICMGEGEFDLE = 7;
	uint32 retcode = 12;
	repeated INDGLKCECDC DCFHGAAJLNN = 10;
}
message MonopolyLikeCsReq {
	uint32 CBEGNBKMHCD = 9;
}
message MonopolyLikeScRsp {
	uint32 retcode = 14;
	uint32 CBEGNBKMHCD = 9;
	ItemList reward_list = 2;
}
message MonopolyLikeScNotify {
	repeated uint32 OFIODJNLBEA = 1;
	uint32 HDILBDIPGHO = 12;
}
message GetMbtiReportCsReq {
}
message MFDKINPDMKE {
	uint32 FIOEPGPEBFD = 14;
	uint32 cnt = 8;
}
message GetMbtiReportScRsp {
	uint32 progress = 7;
	repeated MFDKINPDMKE GMDHHOGBACN = 2;
	uint32 retcode = 6;
	int32 LJHAIFCIABH = 8;
	repeated DDCELCOJGNP ABNOINLOKLN = 11;
	bool PCADCGCELIN = 13;
	int32 PHNKKELLANM = 12;
	bool is_taken_reward = 10;
}
message MonopolyEventSelectFriendCsReq {
	uint32 IPGECLELHGJ = 11;
	bool BAGMAOIPMJE = 8;
}
message MonopolyEventSelectFriendScRsp {
	uint32 retcode = 1;
	IAACCAFGEPI HGBIGBFGBOM = 2;
	uint32 OEFHMBJBLGC = 14;
	uint32 get_item_list = 6;
}
message SocialEventServerCache {
	uint32 Id = 9;
	uint32 AddCoin = 3;
	uint32 SrcUid = 12;
	uint32 SubCoin = 4;
}
message MonopolySocialEventEffectScNotify {
	repeated SocialEventServerCache MIAEAFFDGMH = 5;
}
message GetSocialEventServerCacheCsReq {
}
message GetSocialEventServerCacheScRsp {
	uint32 retcode = 9;
	repeated SocialEventServerCache MIAEAFFDGMH = 14;
}
message DeleteSocialEventServerCacheCsReq {
	repeated uint32 JIDDLNHJNPB = 4;
}
message DeleteSocialEventServerCacheScRsp {
	uint32 retcode = 14;
	repeated uint32 BFGJMMPCPNJ = 8;
}
message MonopolyGetRaffleTicketCsReq {
	uint32 pool_id = 11;
}
message MonopolyGetRaffleTicketScRsp {
	repeated LAILNIGFPOO BLMEDLNOKEI = 11;
	uint32 pool_id = 13;
	uint32 retcode = 10;
}
message MonopolyTakeRaffleTicketRewardCsReq {
	uint32 pool_id = 2;
	uint64 PMELCDFHGKC = 11;
}
message MonopolyTakeRaffleTicketRewardScRsp {
	uint32 retcode = 4;
	ItemList reward_list = 8;
	uint32 PMELCDFHGKC = 13;
	uint32 pool_id = 7;
}
message MonopolyScrachRaffleTicketCsReq {
	uint64 PMELCDFHGKC = 4;
	uint32 pool_id = 1;
}
message MonopolyScrachRaffleTicketScRsp {
	uint64 PMELCDFHGKC = 12;
	uint32 pool_id = 5;
	uint32 retcode = 8;
}
message MonopolyGetRegionProgressCsReq {
}
message MonopolyGetRegionProgressScRsp {
	uint32 retcode = 7;
	uint32 DPJKOJGCJLP = 9;
	uint32 EIMGBKNLGNF = 6;
}
message MonopolyGetRafflePoolInfoCsReq {
}
message MonopolyGetRafflePoolInfoScRsp {
	uint32 retcode = 6;
	EDKGOMNEHOH IEDGKHDJJDC = 15;
}
message MonopolyTakePhaseRewardCsReq {
	repeated uint32 LJBGJHPKKJJ = 11;
}
message MonopolyTakePhaseRewardScRsp {
	uint32 retcode = 14;
	repeated uint32 LJBGJHPKKJJ = 1;
	ItemList reward_list = 8;
}
message GetMonopolyMbtiReportRewardCsReq {
}
message GetMonopolyMbtiReportRewardScRsp {
	uint32 retcode = 12;
	ItemList reward_list = 2;
}
message GetMonopolyDailyReportCsReq {
}
message GetMonopolyDailyReportScRsp {
	uint32 retcode = 12;
	AEDKPBFCKGO LJAOGAPDFHA = 6;
}
message MonopolyClickCellCsReq {
	uint32 map_id = 10;
	uint32 cell_id = 12;
}
message MonopolyClickCellScRsp {
	uint32 retcode = 13;
	uint32 cell_id = 7;
	uint32 map_id = 14;
}
message MonopolyClickMbtiReportCsReq {
}
message MonopolyClickMbtiReportScRsp {
	uint32 retcode = 7;
}
message MultiplayerFightGameStateCsReq {
}
message MultiplayerFightGameStateScRsp {
	PPGGKMDAOEA PFFFJNGNPOM = 8;
	uint32 retcode = 3;
	repeated CBBDIOMIFHD LIPJDJPMOKB = 14;
}
message MultiplayerGetFightGateCsReq {
	uint32 player_data = 6;
}
message MultiplayerGetFightGateScRsp {
	string ip = 11;
	string AOKCMMPFGBC = 3;
	uint64 NOGFEEMNHPC = 9;
	uint32 port = 12;
	uint32 retcode = 2;
}
message MultiplayerFightGiveUpCsReq {
	uint64 NOGFEEMNHPC = 3;
}
message MultiplayerFightGiveUpScRsp {
	uint32 retcode = 11;
}
message MultiplayerFightGameStartScNotify {
	repeated CBBDIOMIFHD LIPJDJPMOKB = 2;
	PPGGKMDAOEA PFFFJNGNPOM = 9;
}
message MultiplayerFightGameFinishScNotify {
	PPGGKMDAOEA PFFFJNGNPOM = 3;
}
message MultiplayerMatch3FinishScNotify {
	CDIMEMFJJFP NIAEGHJLNMB = 5;
	uint32 FDGDOKAFBDH = 12;
	Match3FinishReason reason = 7;
	uint32 KOJIHJIHKIA = 15;
}
message GetMultipleDropInfoCsReq {
}
message ECCNNONKFCA {
	uint32 OLALHIKMJOP = 8;
	uint32 id = 15;
}
message GetMultipleDropInfoScRsp {
	repeated ECCNNONKFCA LJCPDMNKJIF = 7;
	uint32 retcode = 1;
	repeated OHDNCHFGFMA FCHNNKEKFCL = 2;
}
message MultipleDropInfoScNotify {
	repeated ECCNNONKFCA LJCPDMNKJIF = 3;
}
message GetPlayerReturnMultiDropInfoCsReq {
}
message JBFIPIJJIDL {
	uint32 panel_id = 2;
	uint32 DKJGCBJKEEN = 6;
	uint32 PJHDJKMJPKH = 1;
	uint32 LJKFFDMHOJH = 4;
}
message OHDNCHFGFMA {
	uint32 panel_id = 9;
	uint32 durability = 12;
	uint32 BJFBGLBJBNN = 5;
	uint32 LCLMHEGDGGB = 15;
}
message GetPlayerReturnMultiDropInfoScRsp {
	repeated OHDNCHFGFMA FCHNNKEKFCL = 11;
	uint32 retcode = 6;
	JBFIPIJJIDL IKGFOEJPJCF = 1;
}
message MultipleDropInfoNotify {
	repeated ECCNNONKFCA LJCPDMNKJIF = 12;
	repeated OHDNCHFGFMA FCHNNKEKFCL = 9;
	repeated JBFIPIJJIDL PONJJNDDKBH = 4;
}
message OPGJGDOGGNJ {
	KAMLGLMNJGJ pos = 5;
	uint32 BDJCGCDJOEO = 10;
}
message JMEAOCPFEOL {
	uint32 level = 8;
	uint32 HIHLGAGHLNI = 6;
	uint32 CDNNGAGBAAK = 13;
	repeated OPGJGDOGGNJ BOJMNAFDJKH = 7;
	uint32 HJJFMDHEAPB = 14;
	uint32 area_id = 10;
}
message PANAIJBJMEN {
	uint32 BELEODAIINB = 12;
	bool is_finish = 6;
}
message DOLGFNLHEAE {
	uint32 FILEDDCMDOC = 6;
	uint32 FNPPHMBLKOA = 14;
	uint32 PNGDDNAJCGG = 12;
	repeated PANAIJBJMEN FMBFBGNABOC = 3;
	uint32 GGFDDEJHLIF = 9;
	uint32 DCEHOGAGKOM = 13;
}
message OLKMLFEEFCJ {
	uint32 BDJCGCDJOEO = 4;
	uint32 LGKIIELGHDJ = 8;
}
message BLNEHDIFMOO {
	uint32 DGJBACBIICO = 10;
	uint32 HCAGLCLEJND = 11;
	uint32 COGBCPLMNFD = 8;
	MuseumRandomEventState state = 3;
	uint32 BMBGKLKECAJ = 15;
	uint32 event_id = 5;
	repeated uint32 HAABEFKHAMI = 13;
}
message JNBCPNCNOHO {
	uint32 LHNJMBGNDKC = 4;
	repeated uint32 PNJEEPOEMCA = 15;
	repeated BLNEHDIFMOO BJCMPHLPKNF = 3;
}
message GetMuseumInfoCsReq {
}
message GetMuseumInfoScRsp {
	repeated uint32 KNDMDPEFADC = 1;
	uint32 EJKGHBEMOOB = 12;
	repeated uint32 KNDJAPNPAPK = 5;
	repeated OLKMLFEEFCJ BOJMNAFDJKH = 6;
	uint32 JBJLDPPDBBC = 15;
	uint32 HPNMPDOCJMA = 2;
	uint32 retcode = 7;
	DOLGFNLHEAE JPIBMBBKGND = 9;
	repeated JMEAOCPFEOL area_list = 14;
	uint32 EJNKMKFFCCL = 3;
	uint32 level = 4;
	uint32 exp = 13;
	JNBCPNCNOHO EKKOLCCCNNK = 11;
	uint32 cur_fund = 10;
}
message BuyNpcStuffCsReq {
	uint32 BDJCGCDJOEO = 12;
}
message BuyNpcStuffScRsp {
	uint32 retcode = 7;
	uint32 BDJCGCDJOEO = 10;
}
message SetStuffToAreaCsReq {
	uint32 LGKIIELGHDJ = 11;
	KAMLGLMNJGJ pos = 8;
	uint32 BDJCGCDJOEO = 2;
}
message SetStuffToAreaScRsp {
	uint32 BDJCGCDJOEO = 13;
	KAMLGLMNJGJ pos = 2;
	uint32 retcode = 10;
	uint32 LGKIIELGHDJ = 7;
}
message RemoveStuffFromAreaCsReq {
	uint32 BDJCGCDJOEO = 2;
}
message RemoveStuffFromAreaScRsp {
	uint32 retcode = 9;
	uint32 BDJCGCDJOEO = 12;
}
message GetStuffScNotify {
	GetStuffType AOCELKONHOB = 1;
	uint32 BDJCGCDJOEO = 6;
}
message GetExhibitScNotify {
	uint32 BCCGCFMABGM = 9;
}
message FinishCurTurnCsReq {
	uint32 CCIECPFPFJG = 10;
}
message FinishCurTurnScRsp {
	uint32 retcode = 5;
	uint32 GPOIECCPAMN = 3;
}
message UpgradeAreaCsReq {
	uint32 level = 15;
	uint32 area_id = 11;
}
message UpgradeAreaScRsp {
	uint32 level = 7;
	uint32 area_id = 5;
	uint32 retcode = 11;
}
message UpgradeAreaStatCsReq {
	uint32 level = 8;
	StatType BOJBPOELFCI = 10;
	uint32 area_id = 12;
}
message UpgradeAreaStatScRsp {
	uint32 area_id = 11;
	StatType BOJBPOELFCI = 6;
	uint32 retcode = 14;
	uint32 level = 7;
}
message MuseumInfoChangedScNotify {
	repeated uint32 KNDJAPNPAPK = 12;
	uint32 JBJLDPPDBBC = 11;
	uint32 EJKGHBEMOOB = 2;
	uint32 cur_fund = 3;
	JNBCPNCNOHO EKKOLCCCNNK = 4;
	uint32 HPNMPDOCJMA = 6;
	uint32 exp = 13;
	repeated uint32 KNDMDPEFADC = 9;
	uint32 EJNKMKFFCCL = 10;
	uint32 level = 7;
	DOLGFNLHEAE JPIBMBBKGND = 1;
	repeated OLKMLFEEFCJ BOJMNAFDJKH = 8;
	repeated JMEAOCPFEOL area_list = 14;
}
message MuseumRandomEventStartScNotify {
	BLNEHDIFMOO info = 9;
}
message MuseumRandomEventQueryCsReq {
	int32 CEHFIILMJKM = 3;
}
message MuseumRandomEventQueryScRsp {
	uint32 retcode = 8;
	JNBCPNCNOHO info = 9;
}
message MuseumRandomEventSelectCsReq {
	uint32 event_id = 3;
	uint32 DGJBACBIICO = 15;
}
message MuseumRandomEventSelectScRsp {
	uint32 retcode = 15;
	uint32 event_id = 13;
	uint32 DGJBACBIICO = 11;
}
message MuseumFundsChangedScNotify {
	uint32 cur_fund = 13;
}
message MuseumDispatchFinishedScNotify {
	uint32 MODFABDDNKL = 11;
	uint32 IMBLGCAADFL = 12;
	uint32 BDJCGCDJOEO = 2;
	uint32 cur_fund = 1;
}
message MuseumTargetStartNotify {
	uint32 PNGDDNAJCGG = 2;
}
message MuseumTargetMissionFinishNotify {
	repeated uint32 BELEODAIINB = 6;
	bool FPBGADBMEAD = 15;
	uint32 PNGDDNAJCGG = 2;
}
message MuseumTargetRewardNotify {
	uint32 PNGDDNAJCGG = 4;
	uint32 item_count = 3;
	uint32 item_id = 7;
}
message MuseumTakeCollectRewardCsReq {
	uint32 item_id = 6;
}
message MuseumTakeCollectRewardScRsp {
	ItemList reward = 11;
	uint32 item_id = 2;
	uint32 retcode = 6;
}
message MusicRhythmLevel {
	uint32 level_id = 4;
	bool full_combo = 2;
	uint32 unlock_level = 12;
}
message MusicRhythmGroup {
	repeated uint32 DNKJDJJBCDK = 2;
	repeated uint32 NBBOABGLCJC = 12;
	uint32 music_group_id = 8;
	uint32 music_group_phase = 11;
}
message MusicRhythmDataCsReq {
	uint32 player_data = 14;
}
message MusicRhythmDataScRsp {
	repeated uint32 unlock_track_list = 12;
	repeated uint32 unlock_song_list = 9;
	bool show_hint = 13;
	repeated MusicRhythmGroup music_group = 10;
	repeated uint32 unlock_phase_list = 14;
	uint32 cur_song_id = 2;
	repeated MusicRhythmLevel music_level = 15;
	uint32 retcode = 11;
	uint32 cur_level_id = 3;
}
message MusicRhythmStartLevelCsReq {
	uint32 level_id = 4;
}
message MusicRhythmStartLevelScRsp {
	uint32 retcode = 10;
	uint32 level_id = 7;
	string MDLNDGIJNML = 6;
}
message MusicRhythmFinishLevelCsReq {
	uint32 score_id = 3;
	uint32 finish_level = 12;
	bool full_combo = 13;
}
message MusicRhythmFinishLevelScRsp {
	uint32 level_id = 10;
	uint32 retcode = 13;
}
message MusicRhythmUnlockTrackScNotify {
	repeated uint32 track_unlock_list = 10;
}
message MusicRhythmSaveSongConfigDataCsReq {
	MusicRhythmGroup CGEDABOABOH = 5;
}
message MusicRhythmSaveSongConfigDataScRsp {
	uint32 MBLDFHLDCPI = 1;
	uint32 retcode = 13;
	uint32 cur_song_id = 3;
}
message MusicRhythmUnlockSongNotify {
	repeated uint32 music_unlock_list = 11;
}
message MusicRhythmMaxDifficultyLevelsUnlockNotify {
}
message MusicRhythmUnlockSongSfxScNotify {
	repeated uint32 music_unlock_list = 8;
}
message OfferingInfo {
	uint32 offering_level = 8;
	uint32 level_exp = 11;
	OfferingState offering_state = 3;
	uint32 total_exp = 13;
	uint32 offering_id = 12;
	repeated uint32 has_taken_reward_id_list = 9;
}
message GetOfferingInfoCsReq {
	repeated uint32 offering_id_list = 12;
}
message GetOfferingInfoScRsp {
	repeated OfferingInfo offering_info_list = 13;
	uint32 retcode = 5;
}
message SubmitOfferingItemCsReq {
	uint32 interacted_prop_entity_id = 11;
	uint32 offering_id = 15;
}
message SubmitOfferingItemScRsp {
	OfferingInfo offering_info = 2;
	uint32 retcode = 14;
}
message TakeOfferingRewardCsReq {
	repeated uint32 take_reward_level_list = 4;
	uint32 interacted_prop_entity_id = 15;
	uint32 offering_id = 6;
}
message TakeOfferingRewardScRsp {
	OfferingInfo offering_info = 9;
	ItemList reward = 4;
	uint32 retcode = 14;
}
message OfferingInfoScNotify {
	OfferingInfo offering_info = 12;
}
message AcceptedPamMissionExpireCsReq {
	uint32 main_mission_id = 10;
}
message AcceptedPamMissionExpireScRsp {
	uint32 main_mission_id = 5;
	uint32 retcode = 15;
}
message SyncAcceptedPamMissionNotify {
	uint64 PAMBJBFNGPO = 10;
	uint32 main_mission_id = 13;
}
message GetPamSkinDataCsReq {
}
message GetPamSkinDataScRsp {
	uint32 retcode = 10;
	repeated uint32 unlock_skin_list = 11;
	uint32 cur_skin = 14;
}
message SelectPamSkinCsReq {
	uint32 pam_skin = 12;
}
message SelectPamSkinScRsp {
	uint32 set_skin = 10;
	uint32 retcode = 12;
	uint32 cur_skin = 3;
}
message UnlockPamSkinScNotify {
	uint32 pam_skin = 14;
}
message GetPetDataCsReq {
}
message GetPetDataScRsp {
	uint32 cur_pet_id = 7;
	repeated uint32 unlocked_pet_id = 14;
	uint32 retcode = 6;
}
message SummonPetCsReq {
	uint32 summoned_pet_id = 8;
}
message SummonPetScRsp {
	uint32 select_pet_id = 7;
	uint32 cur_pet_id = 11;
	uint32 retcode = 3;
}
message RecallPetCsReq {
	uint32 summoned_pet_id = 5;
}
message RecallPetScRsp {
	uint32 retcode = 1;
	uint32 select_pet_id = 3;
	uint32 cur_pet_id = 8;
}
message CurPetChangedScNotify {
	uint32 cur_pet_id = 5;
}
message GetPhoneDataCsReq {
}
message GetPhoneDataScRsp {
	repeated uint32 KKNEEGDKEMD = 8;
	repeated uint32 owned_phone_themes = 14;
	uint32 cur_phone_theme = 12;
	uint32 retcode = 3;
	uint32 cur_chat_bubble = 9;
	uint32 LMOCAMKLKPI = 4;
	repeated uint32 owned_chat_bubbles = 15;
}
message SelectChatBubbleCsReq {
	uint32 bubble_id = 15;
}
message SelectChatBubbleScRsp {
	uint32 PMDCBFOPCHB = 1;
	uint32 cur_chat_bubble = 6;
	uint32 retcode = 15;
}
message UnlockChatBubbleScNotify {
	uint32 bubble_id = 10;
}
message SelectPhoneThemeCsReq {
	uint32 theme_id = 10;
}
message SelectPhoneThemeScRsp {
	uint32 ACHOPOJLCCE = 7;
	uint32 cur_phone_theme = 6;
	uint32 retcode = 9;
}
message UnlockPhoneThemeScNotify {
	uint32 theme_id = 1;
}
message PDNNFCNOHIK {
	uint32 GIANHLIIKIA = 1;
}
message SelectPhoneCaseScRsp {
	uint32 LMOCAMKLKPI = 15;
	uint32 PDACJDIEOJG = 6;
	uint32 retcode = 8;
}
message UnlockPhoneCaseScNotify {
	uint32 GIANHLIIKIA = 8;
}
message PEJKMMNDPFJ {
}
message GetPlanetFesDataScRsp {
	DKEJEOEHAGM LAPCHEIGNMJ = 13;
	GJBFGABAAMO ADMJKKOIAGD = 6;
	AJCJCHLJBGF HLJMHNABFMC = 5;
	repeated KHOCCHABNMN custom_value_list = 4;
	MIOAEGBPOMA HMFFHBHALGE = 2;
	AFBAMPLGHEH KJKBKEGIGHK = 11;
	OAINKJLPCDK HBDLIICPKOB = 1;
	CLKNIBOJLGP HEOJNAIMGKC = 12;
	KOFOLLACIGO FDHGIKJDLGD = 7;
	uint32 retcode = 3;
	IACFPGOLFLM skill_info = 9;
	GCAMEGPEPOL level_info = 8;
}
message IIKNGNHDMFI {
	repeated uint32 MCNMHBJHMME = 15;
}
message PlanetFesSyncChangeScNotify {
	repeated CCNANLCODDF LEADMNEIMDP = 1;
}
message OIDFFLEEALL {
	uint32 KEJNIMGHOIG = 11;
	uint32 IMFCIMKMJPL = 2;
	uint32 IHELAJNMMBF = 14;
}
message CCNANLCODDF {
	OIDFFLEEALL source = 13;
	HMBANCKGBII rogue_action = 4;
}
message OFGBMCKNLDJ {
	uint32 DGCFLHCPJLN = 4;
	int64 MFKNHHNFKGI = 10;
	IIKNGNHDMFI JCFPLGHKJAA = 12;
	IIKNGNHDMFI BJODEEPGOPC = 3;
}
message KOFOLLACIGO {
	repeated OFGBMCKNLDJ INLLEKAMNPF = 3;
}
message EOAEGAEFPFH {
	uint32 PAEHAMJHNDD = 12;
	uint32 level = 6;
	uint32 finish_level = 10;
	uint32 avatar_id = 14;
}
message DKEJEOEHAGM {
	repeated EOAEGAEFPFH avatar_list = 13;
}
message CEODDCEIDDL {
	uint32 item_id = 4;
	uint32 item_count = 3;
}
message AJCJCHLJBGF {
	repeated CEODDCEIDDL item_list = 12;
	IIKNGNHDMFI PCAJNCBMIMM = 6;
	IIKNGNHDMFI item_value = 2;
}
message OAINKJLPCDK {
	repeated PPFCJHEKOLG option_result_info = 11;
}
message PPFCJHEKOLG {
	uint32 config_id = 7;
	repeated FIMACPHLMNO DFCFHHLBGDC = 3;
	uint64 unique_id = 10;
	OIDFFLEEALL source = 2;
}
message FIMACPHLMNO {
	oneof info_case {
		int64 KBEFCMIIIIN = 13;
	}
}
message ADAFJFOJDEG {
	oneof GNIOHLCLPMP {
		uint32 BONAGHBBICF = 8;
		IIKNGNHDMFI NNHPCOIIKFF = 2;
	}
	uint32 progress = 15;
	GMFEJEFIBBI status = 13;
	uint32 quest_id = 7;
}
message PCODFCNKHJK {
	uint32 DCNPHBDDDIP = 15;
	uint32 EOFELDEAPEO = 8;
}
message CLKNIBOJLGP {
	PCODFCNKHJK CMHNLJJODJF = 7;
	repeated ADAFJFOJDEG quest_list = 12;
}
message GCAMEGPEPOL {
	IIKNGNHDMFI EHBJBPCNPLG = 1;
	uint32 PJOLEMHLGNL = 13;
}
message DHNFBGENLIG {
	uint32 BHPCNNFOKEE = 3;
	uint32 progress = 13;
}
message AFBAMPLGHEH {
	repeated uint32 IHBJIIHBIBP = 5;
	repeated DHNFBGENLIG NCKCMGCBEHK = 10;
}
message HFOCNHOJLAH {
	uint32 level = 2;
	uint32 skill_id = 3;
}
message IACFPGOLFLM {
	repeated HFOCNHOJLAH skill_list = 10;
}
message GJBFGABAAMO {
	repeated uint32 HIGNFPJLFKA = 7;
	uint32 EIMGBKNLGNF = 5;
}
message MIOAEGBPOMA {
	repeated uint32 FGIMACCHHDK = 11;
	repeated uint32 AIOFNPFDABO = 15;
	uint32 FGPACIHLANB = 8;
	int64 EPCPDOCDOCB = 14;
}
message HMBANCKGBII {
	oneof info_case {
		GIEDCJDLEGE LKMLGOEEEKH = 4;
		GIEDCJDLEGE COHNLGMIFBO = 3;
		HPGAGBGJLID PMLOCBHIDDL = 12;
		HPGAGBGJLID LEBMNLOAKHC = 13;
		OFGBMCKNLDJ KBNLIGLJENN = 14;
		OFGBMCKNLDJ MMFBENAMBNE = 15;
		EOAEGAEFPFH GNAIDHHJEBI = 6;
		EOAEGAEFPFH JBDHLHHFDGE = 11;
		PPFCJHEKOLG JPLPLFCOOKD = 10;
		PPFCJHEKOLG MKOFOOCOKBK = 2;
		PHFBDNNLINF OLMGNEOAHOP = 1;
		ADAFJFOJDEG GBFFGPHFMDP = 5;
		ADAFJFOJDEG DMNMIFJHECL = 7;
		PCODFCNKHJK IMFCDMIEOPL = 8;
		OLBOPGJFFPM PCLLCBMHCBD = 9;
		HFOCNHOJLAH BIEDMJPAEBD = 2042;
		PGNDIBBGIJN FOICFOGCGIA = 1493;
		DJOEEGHMCFJ NCEIDLNKBBG = 716;
		CBIKMFFDCGI KMMDPEJAKEC = 1907;
		HPCAIMKJDIJ GPNLPNEEHDM = 787;
		HOHDMMNDKNJ CNEKLOKHAHL = 991;
		FHNGONEFBDE DMFJDAHPIID = 752;
		PPFCJHEKOLG ILOEKHKEJAJ = 1167;
		ILJJBGIFDPE LAEGJPILNND = 678;
	}
}
message OLBOPGJFFPM {
	bool BIINNCNDPCG = 12;
	DHNFBGENLIG KJKBKEGIGHK = 10;
}
message PHFBDNNLINF {
	IIKNGNHDMFI EHBJBPCNPLG = 15;
	uint32 PJOLEMHLGNL = 4;
}
message GIEDCJDLEGE {
	repeated uint32 BLCABEMFACH = 9;
	IIKNGNHDMFI OGJOFMCMFPG = 1;
	IIKNGNHDMFI MFNAGLKDPNI = 4;
	IIKNGNHDMFI BMALPKEKBEL = 12;
}
message HPGAGBGJLID {
	uint32 OGJOFMCMFPG = 3;
	uint32 item_id = 5;
	uint32 BMALPKEKBEL = 8;
}
message PGNDIBBGIJN {
	uint32 GFJAGHLJJDN = 11;
	uint32 ECILICNOLFN = 6;
}
message NPAIINEKEFB {
	IIKNGNHDMFI DMAIMCPPJGH = 8;
	uint32 avatar_id = 4;
	uint32 JLCEEFBLJDC = 9;
	uint32 PEFDLAJLCJB = 11;
}
message ILJJBGIFDPE {
	IIKNGNHDMFI FOFHIEIICPB = 14;
	uint32 NIJMJBMCFJF = 2;
	uint32 HDKAFNKHALA = 15;
	uint32 NLAOMPDENKK = 11;
	map<uint32, uint32> BJELCLBGALF = 12;
	uint32 MEMBICNIFLI = 3;
	IIKNGNHDMFI PEHINGJKGCB = 9;
	IIKNGNHDMFI EAJPDPCDJPK = 13;
	uint32 CCIGDJCGAMD = 8;
	repeated NPAIINEKEFB OEBAFBIGMBC = 6;
}
message DJOEEGHMCFJ {
	EGBKGEMFODN AAKDAHHIGIF = 1;
}
message HPCAIMKJDIJ {
	ILMELFJCCMD JILAGGDMALL = 14;
}
message CBIKMFFDCGI {
	IIKNGNHDMFI HHJOCIPOBCF = 6;
}
message HOHDMMNDKNJ {
	JOFGDAIADBO NFJLFNBPPPG = 11;
	DFHEJCIJBEJ PODGJPEKEEG = 10;
}
message FHNGONEFBDE {
	uint32 EIMGBKNLGNF = 2;
}
message OHDHPCLIJNH {
	uint32 EAFOMFLMOJJ = 10;
	IIKNGNHDMFI KJBKNGCFBBP = 13;
	uint32 GINMOIBGLNM = 3;
	uint32 CIOAOGDKFOG = 6;
	uint32 IACPHGOJHMB = 4;
}
message DJIAEMANGCG {
	repeated CEODDCEIDDL item_list = 13;
	repeated OHDHPCLIJNH transfer_item_list = 15;
}
message BFAAEFCEJPA {
	OHDHPCLIJNH PKBBHJPAEKI = 9;
	CEODDCEIDDL HOCNLIJHJJK = 3;
}
message BAILPFJGMLE {
	uint32 DGCFLHCPJLN = 12;
}
message PlanetFesCollectIncomeScRsp {
	uint32 retcode = 3;
}
message PFBFIMJFEGI {
	uint32 DGCFLHCPJLN = 3;
	uint32 avatar_id = 4;
}
message NHMBLKBLDOP {
	repeated PFBFIMJFEGI KNGPOFHNFAJ = 8;
}
message PlanetFesSetAvatarWorkScRsp {
	uint32 retcode = 5;
}
message JNNOGMCDKJK {
	uint32 DGCFLHCPJLN = 15;
}
message PlanetFesBuyLandScRsp {
	uint32 retcode = 10;
}
message CAHHKIIFJMG {
	bool FJINNLFCBOJ = 9;
}
message PlanetFesClientStatusScRsp {
	uint32 retcode = 15;
}
message HNJCKGGBCOB {
}
message PlanetFesCollectAllIncomeScRsp {
	IIKNGNHDMFI GNDCAMMILOI = 11;
	uint32 retcode = 2;
}
message JNIDOJLNOFD {
	uint32 gacha_id = 5;
	uint32 gacha_count = 6;
}
message NEIHLDGEBHE {
	uint32 avatar_id = 2;
	BFAAEFCEJPA LPDEOPGELLE = 7;
	uint32 JKJNCNCLFLD = 6;
	uint32 FLJPKFJAJFP = 13;
}
message CGOJKBOEOFO {
	repeated uint32 JCDJCANEHJD = 11;
	repeated NEIHLDGEBHE DHHAPHNMEDF = 1;
	repeated BFAAEFCEJPA GMOFKLBFAPL = 13;
	IIKNGNHDMFI CABCGKNGAOC = 14;
}
message PJCAKIFOOCP {
	repeated uint32 ECDAMBIIFCI = 2;
	DJIAEMANGCG JFMAHMOFJPI = 3;
}
message PlanetFesDoGachaScRsp {
	oneof CCPFABANCNN {
		CGOJKBOEOFO IDGKLMCEPBO = 2;
		PJCAKIFOOCP JABDCPFPOKE = 7;
	}
	uint32 gacha_id = 9;
	repeated CEODDCEIDDL CIKEPDANGFD = 15;
	uint32 retcode = 6;
}
message AOHIONCOMDE {
	uint32 avatar_id = 4;
	uint32 LDNJEACFBJE = 12;
}
message PlanetFesAvatarLevelUpScRsp {
	DIAHNMNCPBD reward = 9;
	uint32 retcode = 6;
	uint32 BHPFPEJBKEC = 1;
	uint32 LDNJEACFBJE = 7;
	uint32 avatar_id = 14;
}
message ENBMABHKKOL {
	uint32 quest_id = 13;
}
message PlanetFesTakeQuestRewardScRsp {
	uint32 retcode = 1;
	DJIAEMANGCG DNFFKABFOEF = 15;
	uint32 quest_id = 13;
}
message MDILHLHLHKI {
	uint32 skill_id = 12;
	uint32 LDNJEACFBJE = 1;
}
message PlanetFesUpgradeSkillLevelScRsp {
	uint32 skill_id = 9;
	uint32 skill_level = 4;
	uint32 retcode = 11;
	CEODDCEIDDL item_cost = 3;
}
message DIAHNMNCPBD {
	repeated CEODDCEIDDL item_list = 4;
	map<uint32, uint32> FGGAEFIPAAC = 5;
	IIKNGNHDMFI item_value = 7;
}
message KNOKILFKOHI {
	uint32 JOOOEAFOKHK = 11;
	uint32 avatar_id = 3;
	uint32 AOPIKHKKGLM = 9;
}
message DLLJMIAGHDD {
	repeated KNOKILFKOHI FJHGCKENOPF = 3;
}
message EFHABDOFKDE {
	map<uint32, uint32> AGMGPPAOMKA = 15;
	uint32 BPCFOEGHONC = 3;
	uint32 NNGOPAKJICC = 1;
	uint32 EPMOOHCJNHO = 12;
}
message CGOMNLBLJGH {
	uint32 OOHNKOJHDHO = 5;
	HLDHEMLPJNG rogue_current_info = 2;
	uint32 AFGKFIFJFCL = 14;
}
message POHNIIFLCGE {
	uint32 DGDDJNHLGGJ = 4;
}
message BKODHAEECJH {
	uint32 CGDGPGJLKNM = 9;
	uint32 DGDDJNHLGGJ = 3;
	uint32 HDDIJNADFDD = 10;
}
message CBOEMEJIFFE {
	uint32 DGDDJNHLGGJ = 8;
}
message JOFGDAIADBO {
	oneof content_case {
		DLLJMIAGHDD PGMBLLOOBMA = 15;
		EFHABDOFKDE GILDJPKDPNN = 3;
		CGOMNLBLJGH BOLAIPLEFPI = 14;
		POHNIIFLCGE GENPKDAEIHC = 7;
		BKODHAEECJH JFNHPIEGMMM = 2;
		CBOEMEJIFFE JLEFNHIKFOC = 8;
	}
	bool FOMJLFJCKDB = 11;
	bool CHNLIOKGLBP = 12;
	bool PKLCNHICGIA = 13;
	uint32 BKMAMGAPEGH = 9;
	uint32 HOIOKBKGFDN = 4;
	int64 LJHEOCHHCAB = 10;
	uint32 DAJJJFCHOOJ = 6;
}
message ILMELFJCCMD {
	map<uint32, uint32> HIJDDFBEDPO = 9;
	IIKNGNHDMFI PEHINGJKGCB = 12;
	repeated JOFGDAIADBO KMNDEBCFFAD = 8;
	bool DKHIGCIPEKF = 10;
	uint32 BKMAMGAPEGH = 11;
	bool BIINNCNDPCG = 15;
	int64 COIFHFPEGPH = 1;
}
message FLNIDKIGGBK {
	bool DKHIGCIPEKF = 10;
	uint32 GJPANOCNGBM = 7;
	IIKNGNHDMFI PEHINGJKGCB = 13;
	repeated NPAIINEKEFB OEBAFBIGMBC = 9;
	uint32 BKMAMGAPEGH = 8;
	IIKNGNHDMFI KNEINMNLCDI = 2;
}
message LEAAHDPAIEG {
	uint32 HOIOKBKGFDN = 7;
	bool AGMAMBDEHLK = 9;
}
message EGBKGEMFODN {
	uint32 HJNOIENGEDL = 15;
	repeated FLNIDKIGGBK DPPIMJNDNDF = 8;
	uint32 BLMNEKFPAGH = 11;
	repeated uint32 CCBBDGFFFAG = 4;
	int64 BCFBFMMENJK = 7;
	ILMELFJCCMD NCIKKFENHJF = 10;
	repeated LEAAHDPAIEG NFIOACFHJNK = 13;
}
message NPMMPIHFJAJ {
}
message PlanetFesGetBusinessDayInfoScRsp {
	uint32 retcode = 15;
	EGBKGEMFODN AAKDAHHIGIF = 2;
}
message HNCIHJEDCAM {
	uint32 BKMAMGAPEGH = 3;
	bool KBLPJCFNHLE = 15;
	uint32 HOIOKBKGFDN = 2;
}
message PlanetFesBusinessDayRefreshEventScRsp {
	uint32 retcode = 15;
	JOFGDAIADBO NFJLFNBPPPG = 9;
}
message KIHFHLJNJIG {
	uint32 avatar_id = 4;
	uint32 AOPIKHKKGLM = 12;
}
message PlanetFesDeliverPamCargoScRsp {
	uint32 retcode = 14;
	DIAHNMNCPBD GCBDEDABGKO = 3;
	JOFGDAIADBO NFJLFNBPPPG = 11;
	uint32 avatar_id = 12;
}
message PPAJMNJLOBK {
	uint32 NFCAAMBMMMB = 10;
}
message PlanetFesChooseAvatarEventOptionScRsp {
	uint32 EPMOOHCJNHO = 4;
	uint32 retcode = 1;
	uint32 OJKJPKHDEPE = 6;
	DIAHNMNCPBD reward = 2;
	uint32 HAKKGODICFI = 3;
	JOFGDAIADBO NFJLFNBPPPG = 13;
}
message LCIKAFGBDLH {
	uint32 NNGOPAKJICC = 7;
	bool LECDHDDCEIA = 15;
}
message PlanetFesDealAvatarEventOptionItemScRsp {
	uint32 retcode = 14;
	DIAHNMNCPBD reward = 15;
	bool LECDHDDCEIA = 9;
	uint32 HAKKGODICFI = 1;
	JOFGDAIADBO NFJLFNBPPPG = 10;
	uint32 OJKJPKHDEPE = 12;
}
message HFAAHBMGHLK {
	uint32 NDBOJANDNJN = 4;
}
message PlanetFesTakeRegionPhaseRewardScRsp {
	uint32 retcode = 5;
	ItemList reward_list = 10;
	uint32 NDBOJANDNJN = 12;
}
message CNLMDFFEFJM {
	repeated uint32 HFKGGOEPPLE = 11;
	uint32 ALHANJKLBOO = 5;
	repeated uint32 CDLBEHLAMMM = 4;
	uint32 GPAGHIAJICD = 8;
}
message HLDHEMLPJNG {
	oneof HEAIAEDBPKL {
		CNLMDFFEFJM EJCOLGNJGDC = 8;
	}
	uint32 ACDOPCBMPNL = 7;
	uint32 OOHNKOJHDHO = 13;
}
message FMNHLKNJNAH {
	repeated uint32 PKHLGKKIPPA = 14;
}
message FEOHKDLJNDN {
	uint32 OOHNKOJHDHO = 15;
	uint32 ACDOPCBMPNL = 1;
}
message PlanetFesStartMiniGameScRsp {
	oneof GOCOKLAEMOH {
		FMNHLKNJNAH JFMAHMOFJPI = 8;
	}
	uint32 retcode = 12;
	DIAHNMNCPBD reward = 4;
	HLDHEMLPJNG rogue_current_info = 3;
}
message NLBPMNKBMEH {
	uint32 item_id = 8;
	uint32 DIOOKFOCCMO = 4;
}
message PlanetFesUseItemScRsp {
	DIAHNMNCPBD reward = 11;
	uint32 retcode = 7;
}
message LHBDNBMDMLD {
	uint32 HCFPOFMDGKN = 9;
}
message PlanetFesGameBingoFlipScRsp {
	DIAHNMNCPBD reward = 1;
	bool NFEADMFNFLK = 5;
	uint32 HCFPOFMDGKN = 13;
	uint32 retcode = 10;
}
message GHHEPGMFLKN {
	uint32 HOIOKBKGFDN = 15;
	uint32 APMODAGOHNA = 1;
}
message PlanetFesBonusEventInteractScRsp {
	DIAHNMNCPBD reward = 15;
	uint32 HOIOKBKGFDN = 12;
	JOFGDAIADBO NFJLFNBPPPG = 5;
	uint32 retcode = 1;
}
message EIKAIIDAEPP {
	uint32 DGJDMOCBBII = 2;
	uint32 HDCBEJDENLA = 8;
	uint32 PJOLEMHLGNL = 12;
	uint32 uid = 11;
	uint32 LNJIIHHPMED = 14;
	IIKNGNHDMFI HHJOCGOMECO = 3;
}
message DNCDENAAEBC {
}
message PlanetFesGetFriendRankingInfoListScRsp {
	EIKAIIDAEPP ICMGEGEFDLE = 3;
	uint32 retcode = 9;
}
message PlanetFesFriendRankingInfoChangeScNotify {
	repeated EIKAIIDAEPP CNHEKLKBMHH = 14;
}
message GCBAMAELHIC {
	uint32 key = 4;
	uint32 value = 8;
}
message PlanetFesSetCustomKeyValueScRsp {
	uint32 retcode = 7;
	uint32 value = 9;
	uint32 key = 4;
}
message JFGJEHICCCD {
	uint32 LDNJEACFBJE = 3;
}
message PlanetFesUpgradeFesLevelScRsp {
	uint32 retcode = 9;
}
message JOIMPGHIEFC {
}
message PlanetFesGetAvatarStatScRsp {
	repeated NPAIINEKEFB OEBAFBIGMBC = 1;
	uint32 retcode = 3;
}
message IEEHPECGECL {
}
message DEINADPEHKE {
	uint32 OFGFHCLDOBG = 14;
	repeated uint32 JPACOBGBDBG = 11;
	uint32 PNAKHNBDJAE = 13;
}
message GJIPJNGNFEJ {
	repeated uint32 JPACOBGBDBG = 4;
	uint32 source = 13;
	uint32 OFGFHCLDOBG = 12;
	int64 time = 14;
}
message FFAPKCNAPID {
	repeated DEINADPEHKE GEDGLNCPGGN = 13;
	repeated uint32 IEMNJHLFGKD = 2;
	uint32 uid = 11;
	int64 AIIEKLILMJC = 12;
	uint32 HLKPNECAMBL = 14;
	repeated CEODDCEIDDL PBFHDNBGMBP = 4;
	uint32 AOAEFEIBBMF = 10;
	repeated GJIPJNGNFEJ OBBOCCNFLOL = 6;
}
message PlanetFesGetExtraCardPieceInfoScRsp {
	FFAPKCNAPID BAAMHDNNKIA = 12;
	uint32 retcode = 14;
}
message JKAIFEBMLLL {
}
message PlanetFesGetFriendCardPieceScRsp {
	repeated FFAPKCNAPID CGDANDNIBGJ = 5;
	uint32 retcode = 10;
}
message KJHEBGGHEOJ {
	uint32 HLKPNECAMBL = 7;
}
message PlanetFesChangeCardPieceApplyPermissionScRsp {
	uint32 retcode = 10;
	uint32 HLKPNECAMBL = 14;
}
message GBIFOPHFAPB {
	uint32 CBEGNBKMHCD = 1;
	repeated uint32 JPACOBGBDBG = 15;
}
message PlanetFesApplyCardPieceScRsp {
	uint32 retcode = 15;
	uint32 CBEGNBKMHCD = 9;
	repeated uint32 JPACOBGBDBG = 13;
	int64 EPCPDOCDOCB = 5;
	bool MCFFPIEEKNN = 2;
}
message MPDFLMMAPDE {
	repeated uint32 DLHBCOKCIDP = 7;
	uint32 OFGFHCLDOBG = 11;
	bool MDAPCFHELJL = 10;
	uint32 PNAKHNBDJAE = 3;
}
message PlanetFesHandleCardPieceApplyScRsp {
	repeated uint32 DLHBCOKCIDP = 13;
	uint32 retcode = 8;
	bool MDAPCFHELJL = 11;
	uint32 PNAKHNBDJAE = 1;
	int64 PPIOLCLPMPL = 7;
}
message JGHDMOIMEBO {
	uint64 HPJJDCJHHOA = 5;
	bool CABEHKOFLPG = 2;
}
message BKBILPDKOIL {
	uint32 LHJPKMDMNMP = 15;
	uint64 HPJJDCJHHOA = 11;
	int64 time = 1;
	bool CABEHKOFLPG = 3;
	repeated uint32 JPACOBGBDBG = 9;
}
message PlanetFesGetOfferedCardPieceScRsp {
	uint64 HPJJDCJHHOA = 3;
	bool CABEHKOFLPG = 8;
	repeated BKBILPDKOIL ONJGMGHCPEF = 4;
	repeated CEODDCEIDDL PBFHDNBGMBP = 7;
	int64 DLJCKCMADHJ = 13;
	uint32 retcode = 9;
}
message EPDCLDLCFKG {
	uint32 CBEGNBKMHCD = 13;
	repeated uint32 DLHBCOKCIDP = 8;
}
message PlanetFesGiveCardPieceScRsp {
	repeated uint32 DLHBCOKCIDP = 6;
	uint32 retcode = 5;
	uint32 CBEGNBKMHCD = 12;
	int64 PPIOLCLPMPL = 15;
}
message PHGOGJANIDN {
	uint32 OOIOOKGMEHP = 5;
	uint32 MOPFFBMABCD = 12;
	uint32 IHCILNHKLMC = 7;
}
message PlanetFesLargeBonusInteractScRsp {
	JOFGDAIADBO NFJLFNBPPPG = 5;
	IIKNGNHDMFI GMIDJMMMJKP = 8;
	uint32 retcode = 13;
	uint32 IHCILNHKLMC = 7;
}
message PlayerLoginCsReq {
	string KIBBNBNGIJD = 3;
	string signature = 1;
	LanguageType FADPDIBKNBI = 14;
	string KFDJEIEOBBN = 1899;
	string OCDACJNNJNJ = 15;
	string IGNFBLGJIOJ = 1893;
	string GMALCPNOHBF = 264;
	string BNIGPDOOILI = 11;
	JGFKICDCFLJ MIOHKAOIDNK = 316;
	uint32 JMKHDHAIOIM = 4;
	bool OEENCFMCAHD = 510;
	string HJDMJPEBPPM = 13;
	uint64 login_random = 7;
	string DMPMHCCFBKG = 8;
	string AKCEJFCFBAN = 656;
	string OEHJLODAHFN = 10;
	uint32 HAEHHCPOAPP = 430;
	string OHPCKCNAEIK = 1486;
	string BPCKJKDENCB = 568;
	string BNBOALIAPAE = 2;
	string client_version = 9;
	uint32 NHBHBALHJML = 338;
	PlatformType platform = 6;
	string rogue_get_info = 12;
	uint32 client_res_version = 5;
	uint32 MLNABEPINDB = 600;
	bool GEHAPNIHCDO = 57;
}
message PlayerLoginScRsp {
	PlayerBasicInfo basic_info = 13;
	uint32 stamina = 5;
	uint32 retcode = 15;
	string NHMHABJKHOG = 9;
	uint64 login_random = 11;
	bool IGKBEAMLNBJ = 6;
	string PDIKPEIFANN = 7;
	int32 cur_timezone = 3;
	uint64 server_timestamp_ms = 4;
	bool JLPKEOBINCP = 12;
}
message LMIPMHHPFHN {
}
message PlayerGetTokenCsReq {
	string account_uid = 5;
	uint32 uid = 11;
	string token = 13;
	uint32 platform = 15;
	uint32 ICMFPNPIJJF = 6;
	uint32 HAEHHCPOAPP = 7;
	uint32 FGOJLPAEJEC = 3;
	string MEMPBKCJJFJ = 1;
}
message PlayerGetTokenScRsp {
	uint32 uid = 12;
	uint32 retcode = 5;
	BlackInfo black_info = 11;
	uint64 secret_key_seed = 15;
	string msg = 3;
}
message GmTalkScNotify {
	string msg = 11;
}
message PlayerKickOutScNotify {
	KickType kick_type = 14;
	BlackInfo black_info = 13;
}
message GmTalkCsReq {
	string msg = 3;
}
message GmTalkScRsp {
	string BJDOJLKEHNA = 1;
	uint32 retcode = 7;
}
message GetBasicInfoCsReq {
}
message OGFIODPILEL {
	bool AKHEILMNDHJ = 6;
	uint32 CACEKELNMIN = 9;
	bool DMKLNJBOABO = 3;
}
message PlayerSettingInfo {
	OGFIODPILEL GHKCMDNKOPN = 7;
	bool KAPDIMGJLNF = 10;
	bool NJFMILJOFOK = 14;
	bool APONEIDMPHL = 1;
	bool GMJANOJMKCE = 8;
	bool KJNCCKHJFHE = 5;
	bool AICNFAOBCPI = 9;
	bool MMMNJCHEMFN = 6;
	bool NKEKIBNJMPA = 4;
	bool include_upgrade_relic = 3;
	bool PBKBGLHHKPE = 11;
}
message GetBasicInfoScRsp {
	bool IsGenderSet = 8;
	int64 NextRecoverTime = 14;
	uint32 Gender = 10;
	uint32 Retcode = 6;
	uint32 WeekCocoonFinishedCount = 15;
	int64 LastSetNicknameTime = 11;
	uint32 ExchangeTimes = 2;
	PlayerSettingInfo PlayerSettingInfo = 3;
	uint32 GameplayBirthday = 7;
	uint32 CurDay = 9;
}
message ExchangeStaminaCsReq {
}
message ExchangeStaminaScRsp {
	uint32 StaminaAdd = 11;
	uint32 Retcode = 7;
	uint32 ExchangeTimes = 14;
	int64 LastRecoverTime = 15;
	repeated ItemCost ItemCostList = 3;
}
message GetAuthkeyCsReq {
	uint32 authkey_ver = 15;
	string auth_appid = 11;
	uint32 sign_type = 7;
}
message GetAuthkeyScRsp {
	uint32 sign_type = 11;
	uint32 retcode = 7;
	string authkey = 15;
	string auth_appid = 5;
	uint32 authkey_ver = 4;
}
message RegionStopScNotify {
	int64 stop_end_time = 7;
	int64 stop_begin_time = 8;
}
message AntiAddictScNotify {
	string Level = 5;
	string Msg = 9;
	uint32 MsgType = 15;
}
message SetNicknameCsReq {
	bool is_modify = 12;
	string nickname = 2;
}
message SetNicknameScRsp {
	uint32 retcode = 6;
	int64 JENDKBOOAIP = 13;
	bool is_modify = 10;
}
message GetLevelRewardTakenListCsReq {
}
message GetLevelRewardTakenListScRsp {
	repeated uint32 level_reward_taken_list = 15;
	uint32 retcode = 2;
}
message GetLevelRewardCsReq {
	uint32 level = 10;
	uint32 interacted_prop_entity_id = 2;
}
message GetLevelRewardScRsp {
	uint32 level = 14;
	ItemList reward = 1;
	uint32 retcode = 2;
}
message SetLanguageCsReq {
	LanguageType FADPDIBKNBI = 1;
}
message SetLanguageScRsp {
	LanguageType FADPDIBKNBI = 15;
	uint32 retcode = 4;
}
message AnnounceData {
	int64 end_time = 3;
	string emergency_text = 9;
	string banner_text = 2;
	uint32 config_id = 14;
	uint32 banner_frequency = 15;
	uint32 center_system_frequency = 13;
	int64 begin_time = 6;
	bool is_center_system_last_5_every_minutes = 10;
	string count_down_text = 1;
}
message ServerAnnounceNotify {
	repeated AnnounceData announce_data_list = 7;
}
message GateServer {
	string lua_url = 13;
	string cloud_game_url = 805;
	string design_data_relogin_desc = 1686;
	string temporary_maintenance_url = 153;
	bool enable_watermark = 1266;
	bool network_diagnostic = 1600;
	bool enable_android_middle_package = 281;
	string player_return_questionnaire_b_url = 1375;
	string operation_feedback_url = 453;
	string online_replay_upload_url = 1010;
	string game_start_customer_service_url = 930;
	string cdkey_recall_url = 239;
	string third_privacy_in_game_url = 1584;
	string mdk_res_version = 202;
	string login_white_msg = 1722;
	string pre_download_url = 334;
	bool use_new_networking = 217;
	string custom_service_url = 1793;
	bool enable_design_data_version_update = 15;
	uint32 port = 14;
	bool enable_version_update = 10;
	bool mtp_switch = 607;
	string player_return_invite_h5_url = 689;
	string server_description = 1767;
	string MPNJIKPKOHJ = 555;
	string asset_bundle_url = 9;
	string rogue_tourn_build_ref_h5_url = 1304;
	bool forbid_recharge = 1684;
	bool close_redeem_code = 1545;
	string teenager_privacy_in_game_url = 1123;
	repeated string OAOHIECDGCC = 2026;
	string personal_information_in_game_url = 692;
	string rogue_magic_h5_url = 267;
	string online_replay_download_url = 1044;
	bool ECBFEHFPOFJ = 1966;
	string user_agreement_url = 1492;
	bool enable_save_replay_file = 233;
	string privacy_in_game_url = 1335;
	string ifix_url = 1199;
	string web_tool_url = 646;
	string hot_point_url = 1367;
	int64 stop_end_time = 1;
	uint32 enable_cdn_ipv6 = 1182;
	uint32 rogue_tourn_notice_pic_type = 1727;
	string rogue_tourn_build_ref_api_req_color_header_key = 506;
	bool ios_exam = 1588;
	bool enable_upload_battle_log = 1214;
	string ipv6_address = 1779;
	string EJCFBDDLLME = 1038;
	string region_name = 6;
	bool event_tracking_open = 1720;
	uint32 asb_relogin_type = 4;
	uint32 rogue_tourn_notice_id = 859;
	string msg = 11;
	string asb_relogin_desc = 8;
	string ip = 7;
	string community_activity_url = 434;
	int64 stop_begin_time = 12;
	bool use_tcp = 1800;
	string player_return_questionnaire_a_url = 572;
	string client_secret_key = 275;
	uint32 design_data_relogin_type = 5;
	string ifix_version = 1547;
	string ex_resource_url = 3;
	uint32 retcode = 2;
	string official_community_url = 516;
	string rogue_tourn_build_ref_static_data_url_prefix = 804;
	string rogue_tourn_build_ref_api_req_color_header_value = 225;
}
message GateServerScNotify {
	string CONNPKCCHJE = 5;
}
message MultiPathAvatarInfo {
	repeated EquipRelic equip_relic_list = 11;
	uint32 rank = 4;
	repeated AvatarSkillTree multi_path_skill_tree = 2;
	MultiPathAvatarType avatar_id = 13;
	uint32 path_equipment_id = 5;
	uint32 dressed_skin_id = 6;
}
message SetAvatarPathCsReq {
	MultiPathAvatarType avatar_id = 13;
}
message SetAvatarPathScRsp {
	MultiPathAvatarType avatar_id = 2;
	uint32 retcode = 8;
}
message SetMultipleAvatarPathsCsReq {
	repeated MultiPathAvatarType avatar_id_list = 11;
}
message SetMultipleAvatarPathsScRsp {
	uint32 retcode = 12;
}
message GetMultiPathAvatarInfoCsReq {
}
message GetMultiPathAvatarInfoScRsp {
	map<uint32, MultiPathAvatarType> cur_avatar_path = 1;
	repeated MultiPathAvatarInfo multi_path_avatar_info_list = 3;
	repeated uint32 basic_type_id_list = 9;
	uint32 retcode = 6;
}
message UnlockAvatarPathCsReq {
	MultiPathAvatarType avatar_id = 4;
}
message UnlockAvatarPathScRsp {
	ItemList reward = 7;
	repeated uint32 basic_type_id_list = 6;
	MultiPathAvatarType avatar_id = 9;
	uint32 retcode = 1;
}
message AvatarPathChangedNotify {
	MultiPathAvatarType cur_multi_path_avatar_type = 15;
	uint32 base_avatar_id = 14;
}
message SetGenderCsReq {
	Gender gender = 7;
}
message SetGenderScRsp {
	MultiPathAvatarType cur_avatar_path = 6;
	repeated MultiPathAvatarInfo cur_avatar_path_info_list = 9;
	uint32 retcode = 3;
}
message SetPlayerInfoCsReq {
	bool is_modify = 7;
	Gender gender = 2;
	string nickname = 5;
}
message SetPlayerInfoScRsp {
	MultiPathAvatarType cur_avatar_path = 14;
	bool is_modify = 9;
	uint32 retcode = 10;
	int64 JENDKBOOAIP = 1;
	repeated MultiPathAvatarInfo cur_avatar_path_info_list = 12;
}
message QueryProductInfoCsReq {
}
message Product {
	ProductGiftType gift_type = 4;
	bool double_reward = 10;
	int64 end_time = 7;
	uint32 GCBOBAMCALK = 5;
	int64 begin_time = 15;
	string price_tier = 11;
	uint32 IOGLPEBJMDB = 1;
	string product_id = 12;
}
message QueryProductInfoScRsp {
	uint64 month_card_out_date_time = 8;
	repeated Product product_list = 10;
	uint32 CMGHDMPEAKO = 13;
	uint32 ODNFIAAHKCI = 1;
	uint32 retcode = 3;
}
message MonthCardRewardNotify {
	ItemList reward = 5;
}
message ClientDownloadDataScNotify {
	ClientDownloadData download_data = 7;
}
message ClientObjDownloadDataScNotify {
	ClientObjDownloadData data = 11;
}
message UpdateFeatureSwitchScNotify {
	repeated FeatureSwitchInfo SwitchInfoList = 6;
}
message DailyRefreshNotify {
	uint32 GMFEBDAFDPJ = 15;
}
message SetGameplayBirthdayCsReq {
	uint32 birthday = 4;
}
message SetGameplayBirthdayScRsp {
	uint32 retcode = 5;
	uint32 birthday = 11;
}
message AceAntiCheaterCsReq {
	uint32 GLNKKFAIPOB = 8;
	string DGDLNIEFCPF = 12;
}
message AceAntiCheaterScRsp {
	uint32 retcode = 11;
}
message RetcodeNotify {
	repeated uint32 JOJPPODOMAH = 8;
	Retcode retcode = 14;
}
message PlayerHeartBeatCsReq {
	ClientUploadData LKJMJGDEBEE = 8;
	uint32 JBPEMOFNEDG = 10;
	uint64 client_time_ms = 12;
}
message PlayerHeartBeatScRsp {
	uint64 client_time_ms = 10;
	uint64 server_time_ms = 12;
	uint32 retcode = 2;
	ClientDownloadData download_data = 8;
}
message FeatureSwitchClosedScNotify {
	FeatureSwitchType KIMNKFPFBDG = 14;
}
message SecretKeyInfo {
	string secret_key = 4;
	SecretKeyType type = 7;
}
message GetSecretKeyInfoCsReq {
	bytes secret_req = 10;
}
message GetSecretKeyInfoScRsp {
	repeated SecretKeyInfo secret_info = 15;
	uint32 retcode = 8;
	bytes secret_rsp = 5;
}
message PlayerLoginFinishCsReq {
}
message PlayerLoginFinishScRsp {
	uint32 retcode = 2;
}
message VideoKeyInfo {
	uint64 video_key = 15;
	uint32 id = 12;
}
message GetVideoVersionKeyCsReq {
}
message GetVideoVersionKeyScRsp {
	repeated VideoKeyInfo video_key_info_list = 8;
	uint32 retcode = 14;
	repeated VideoKeyInfo activity_video_key_info_list = 1;
}
message NHJGHOKBDPK {
	uint32 NCIADBAKMAE = 9;
	uint32 content_id = 4;
	uint32 JDAKKOFDGEP = 10;
	uint32 IIPDEFCEDMC = 1;
}
message SetRedPointStatusScNotify {
	repeated NHJGHOKBDPK NJEHHFFDGHK = 2;
	uint32 IIPDEFCEDMC = 11;
	uint32 content_id = 13;
	uint32 uid = 6;
	uint32 JDAKKOFDGEP = 10;
}
message ReserveStaminaExchangeCsReq {
	uint32 num = 15;
}
message ReserveStaminaExchangeScRsp {
	uint32 Num = 5;
	uint32 Retcode = 2;
}
message StaminaInfoScNotify {
	int64 DPIMHEMJKOE = 11;
	uint32 reserve_stamina = 2;
	uint32 stamina = 3;
	int64 next_recover_time = 13;
}
message UpdatePlayerSetting {
	oneof setting_case {
		bool KAPDIMGJLNF = 2;
		bool MMMNJCHEMFN = 5;
		bool NKEKIBNJMPA = 7;
		bool PBKBGLHHKPE = 9;
		bool NJFMILJOFOK = 1;
		bool AICNFAOBCPI = 4;
		bool KJNCCKHJFHE = 13;
		bool APONEIDMPHL = 11;
		bool GMJANOJMKCE = 8;
		bool include_upgrade_relic = 15;
		OGFIODPILEL GHKCMDNKOPN = 14;
	}
}
message UpdatePlayerSettingCsReq {
	UpdatePlayerSetting player_setting = 5;
}
message UpdatePlayerSettingScRsp {
	uint32 retcode = 15;
	UpdatePlayerSetting player_setting = 6;
}
message ClientObjUploadCsReq {
	bytes LKJMJGDEBEE = 13;
	uint32 JBPEMOFNEDG = 1;
}
message ClientObjUploadScRsp {
	ClientObjDownloadData data = 4;
	uint32 retcode = 1;
}
message MENPBGGOGMC {
	repeated string GKHFBFKNHOB = 13;
}
message NCBIMLPODON {
	bool IAHOPFNPFLN = 14;
	MENPBGGOGMC black_list = 9;
}
message CJAKIBDIMMJ {
	oneof BFGKJIMCGAH {
		bool IAHOPFNPFLN = 392;
		MENPBGGOGMC AMALJFOKCBA = 1558;
		MENPBGGOGMC OECBELGDLFP = 393;
	}
}
message UpdatePsnSettingsInfoCsReq {
	oneof DDBNLHJNANE {
		NCBIMLPODON DOOCPLCLDPD = 757;
		CJAKIBDIMMJ INHLDIDJGHA = 366;
	}
}
message UpdatePsnSettingsInfoScRsp {
	uint32 retcode = 8;
}
message GetGameStateServiceConfigCsReq {
}
message GetGameStateServiceConfigScRsp {
	repeated string KAOJCOBEEON = 1;
	repeated string FIBIJGMKDPP = 5;
	repeated string LEDKMDOLLBB = 10;
	uint32 retcode = 2;
}
message HeadIconData {
	uint32 id = 14;
}
message DisplayAvatarData {
	uint32 avatar_id = 13;
	uint32 pos = 7;
}
message DisplayAvatarVec {
	bool is_display = 2;
	repeated DisplayAvatarData display_avatar_list = 1;
}
message GetPlayerBoardDataCsReq {
}
message GetPlayerBoardDataScRsp {
	string signature = 4;
	repeated uint32 KKNJHENMGPK = 11;
	repeated uint32 assist_avatar_id_list = 5;
	DisplayAvatarVec display_avatar_vec = 12;
	uint32 current_head_icon_id = 9;
	uint32 retcode = 8;
	uint32 OLDMJONBJOM = 15;
	repeated HeadIconData unlocked_head_icon_list = 1;
}
message SetHeadIconCsReq {
	uint32 id = 5;
}
message SetHeadIconScRsp {
	uint32 retcode = 5;
	uint32 current_head_icon_id = 6;
}
message EFKAOICFGCL {
	uint32 id = 8;
}
message SetPersonalCardScRsp {
	uint32 retcode = 2;
	uint32 OLDMJONBJOM = 12;
}
message SetDisplayAvatarCsReq {
	repeated DisplayAvatarData display_avatar_list = 13;
}
message SetDisplayAvatarScRsp {
	uint32 retcode = 4;
	repeated DisplayAvatarData display_avatar_list = 2;
}
message SetIsDisplayAvatarInfoCsReq {
	bool is_display = 12;
}
message SetIsDisplayAvatarInfoScRsp {
	bool is_display = 15;
	uint32 retcode = 8;
}
message SetSignatureCsReq {
	string signature = 11;
}
message SetSignatureScRsp {
	string signature = 12;
	uint32 retcode = 1;
}
message SetAssistAvatarCsReq {
	uint32 avatar_id = 11;
	repeated uint32 avatar_id_list = 7;
}
message SetAssistAvatarScRsp {
	uint32 avatar_id = 15;
	repeated uint32 avatar_id_list = 9;
	uint32 retcode = 2;
}
message PlayerReturnStartScNotify {
	uint32 NCHIEKEDHCE = 15;
}
message PlayerReturnSignCsReq {
	repeated uint32 NMKLEGOMEPJ = 11;
	uint32 OPEEDJIHJOP = 6;
}
message PlayerReturnSignScRsp {
	repeated ItemList IPFLHCJIEBM = 15;
	uint32 OPEEDJIHJOP = 9;
	repeated uint32 NMKLEGOMEPJ = 12;
	uint32 retcode = 8;
}
message PlayerReturnPointChangeScNotify {
	uint32 MAMHOJMFJOF = 4;
}
message PlayerReturnTakePointRewardCsReq {
	uint32 IIFOMGOFMDL = 15;
	uint32 CPNIMLJNMMF = 13;
}
message PlayerReturnTakePointRewardScRsp {
	ItemList CFIDBMMIJHG = 8;
	uint32 IIFOMGOFMDL = 15;
	uint32 CPNIMLJNMMF = 14;
	uint32 retcode = 2;
}
message PlayerReturnTakeRewardCsReq {
}
message PlayerReturnTakeRewardScRsp {
	ItemList IPFLHCJIEBM = 11;
	uint32 retcode = 10;
}
message PlayerReturnInfoQueryCsReq {
	uint32 CEHFIILMJKM = 6;
}
message AFBNEIBIJND {
	uint32 ILCFOJCDNHI = 9;
	uint32 MAMHOJMFJOF = 1;
	int64 COIFHFPEGPH = 15;
	repeated uint32 NMKLEGOMEPJ = 2;
	uint32 world_level = 12;
	repeated uint32 CAIMHCAACFG = 4;
	uint32 BGAFGHIPOJE = 8;
	NOBPMMNFENJ status = 3;
	bool is_taken_reward = 14;
	uint32 AHNFMDNEJNL = 11;
	bool FJNDPCFNFLO = 10;
	int64 finish_time = 5;
}
message PlayerReturnInfoQueryScRsp {
	uint32 retcode = 4;
	AFBNEIBIJND PFEIDPOLOKM = 9;
	uint32 GMFIDNOHGCO = 3;
}
message PlayerReturnForceFinishScNotify {
	AFBNEIBIJND PFEIDPOLOKM = 8;
}
message AFLMIOMNECM {
	uint32 avatar_id = 15;
}
message PlayerReturnTakeRelicScRsp {
	uint32 avatar_id = 4;
	ItemList item_list = 8;
	uint32 retcode = 14;
}
message FinishPlotCsReq {
	uint32 CLDAJDJHOII = 8;
}
message FinishPlotScRsp {
	uint32 CLDAJDJHOII = 14;
	uint32 retcode = 7;
}
message KAOAHKAOHFI {
	uint32 COJKEIFJNEK = 14;
	PunkLordMonsterBasicInfo basic_info = 8;
	PunkLordBattleRecordList DHLPKMIHDNM = 11;
	PunkLordAttackerStatus EKKJLAOKIJI = 1;
}
message GetPunkLordMonsterDataCsReq {
}
message GetPunkLordMonsterDataScRsp {
	uint32 retcode = 9;
	repeated KAOAHKAOHFI FIJNJGFABJD = 10;
}
message StartPunkLordRaidCsReq {
	uint32 monster_id = 12;
	bool CLOMMFKJPMM = 4;
	uint32 uid = 6;
}
message StartPunkLordRaidScRsp {
	uint32 retcode = 11;
	FNLGPLNCPCL scene = 3;
	repeated uint32 DMILCFHLIHP = 7;
	KAOAHKAOHFI DPMKAMMIOLB = 12;
	bool CLOMMFKJPMM = 6;
	int64 AGEGDMGNPDK = 9;
}
message SharePunkLordMonsterCsReq {
	uint32 uid = 3;
	uint32 monster_id = 5;
	PunkLordShareType share_type = 15;
}
message SharePunkLordMonsterScRsp {
	uint32 retcode = 7;
	uint32 monster_id = 4;
	uint32 uid = 11;
	PunkLordShareType share_type = 14;
}
message SummonPunkLordMonsterCsReq {
}
message SummonPunkLordMonsterScRsp {
	uint32 retcode = 3;
	KAOAHKAOHFI DPMKAMMIOLB = 6;
}
message TakePunkLordPointRewardCsReq {
	bool MDHJKKBNMCF = 7;
	uint32 level = 2;
}
message TakePunkLordPointRewardScRsp {
	bool MDHJKKBNMCF = 4;
	uint32 retcode = 2;
	uint32 level = 3;
	ItemList reward = 15;
}
message PunkLordMonsterInfoScNotify {
	PunkLordMonsterBasicInfo basic_info = 11;
	repeated uint32 DMILCFHLIHP = 14;
	PunkLordBattleRecord DHLPKMIHDNM = 2;
	PunkLordMonsterInfoNotifyReason reason = 10;
}
message GetPunkLordDataCsReq {
}
message GetPunkLordDataScRsp {
	uint32 GBJODJCOLGA = 1;
	uint32 GNLMKKHAEKM = 6;
	int64 BEDJDEANCOJ = 2;
	uint32 retcode = 9;
	uint32 BDPBDGBKDOO = 11;
	uint32 PPNKPNBIIEN = 10;
	repeated uint32 EAHBIKFALLF = 15;
	uint32 IADCOHODGJN = 7;
}
message PunkLordRaidTimeOutScNotify {
	PunkLordMonsterBasicInfo DPMKAMMIOLB = 11;
}
message PunkLordBattleResultScNotify {
	PunkLordMonsterBasicInfo DPMKAMMIOLB = 10;
	uint32 AHJFPNGDBDO = 6;
	uint32 NCACOCCJNLD = 2;
	PunkLordBattleRecord DHLPKMIHDNM = 9;
	uint32 PGOFPNLAPOE = 4;
}
message KilledPunkLordMonsterInfo {
	bool PPBOCECKCAH = 6;
	uint32 LKKJEILKPNI = 10;
	uint32 config_id = 4;
	uint32 monster_id = 3;
	int64 create_time = 13;
	uint32 world_level = 8;
}
message GetKilledPunkLordMonsterDataCsReq {
}
message GetKilledPunkLordMonsterDataScRsp {
	repeated PunkLordMonsterKey OAKKCCGAEKK = 14;
	uint32 retcode = 11;
	repeated KilledPunkLordMonsterInfo DDCEMDGEDIO = 1;
}
message PunkLordMonsterKilledNotify {
	KilledPunkLordMonsterInfo AIECOBKEIGB = 3;
}
message TakeKilledPunkLordMonsterScoreCsReq {
	bool KFEJGFNONIP = 8;
	PunkLordMonsterKey PKCPJJNOALN = 7;
}
message TakeKilledPunkLordMonsterScoreScRsp {
	uint32 retcode = 1;
	bool KFEJGFNONIP = 11;
	uint32 score_id = 2;
	repeated PunkLordMonsterKey JEAHDCGKBBB = 12;
}
message PunkLordDataChangeNotify {
	uint32 GBJODJCOLGA = 15;
	uint32 BDPBDGBKDOO = 8;
	uint32 IADCOHODGJN = 10;
}
message GetPunkLordBattleRecordCsReq {
	PunkLordMonsterKey PKCPJJNOALN = 15;
}
message GetPunkLordBattleRecordScRsp {
	uint32 retcode = 6;
	repeated PunkLordBattleRecord battle_record_list = 14;
	repeated PunkLordBattleReplay OKOBGJHJJOA = 12;
	PunkLordMonsterKey PKCPJJNOALN = 3;
}
message GetQuestDataCsReq {
}
message Quest {
	uint32 progress = 3;
	repeated uint32 PGJNGNAJHPP = 12;
	uint32 id = 15;
	QuestStatus status = 5;
	int64 finish_time = 10;
}
message GetQuestDataScRsp {
	uint32 total_achievement_exp = 12;
	uint32 retcode = 3;
	repeated Quest quest_list = 11;
}
message TakeQuestRewardCsReq {
	repeated uint32 succ_quest_id_list = 13;
}
message TakeQuestRewardScRsp {
	repeated uint32 SuccQuestIdList = 12;
	ItemList Reward = 1;
	uint32 Retcode = 13;
}
message TakeQuestOptionalRewardCsReq {
	uint32 quest_id = 3;
	uint32 optional_reward_id = 10;
}
message TakeQuestOptionalRewardScRsp {
	ItemList reward = 5;
	uint32 quest_id = 7;
	uint32 retcode = 10;
}
message GetQuestRecordCsReq {
}
message EPJDFBAOFDF {
	uint32 IJFIHGCKNHG = 9;
	uint32 progress = 8;
}
message GetQuestRecordScRsp {
	repeated EPJDFBAOFDF OBEMGACMGNH = 4;
	uint32 retcode = 3;
}
message QuestRecordScNotify {
	EPJDFBAOFDF FEAOCOKKGBM = 5;
}
message FinishQuestCsReq {
	uint32 group_id = 12;
	uint32 quest_id = 13;
	uint32 prop_id = 15;
}
message FinishQuestScRsp {
	uint32 retcode = 8;
}
message BatchGetQuestDataCsReq {
	repeated uint32 quest_list = 13;
}
message BatchGetQuestDataScRsp {
	repeated Quest quest_list = 13;
	uint32 retcode = 10;
}
message FNLGPLNCPCL {
	uint32 raid_id = 6;
	LineupInfo lineup = 14;
	SceneInfo GHEDLCLNHIJ = 11;
	uint32 world_level = 4;
}
message StartRaidCsReq {
	uint32 world_level = 1;
	uint32 prop_entity_id = 2;
	repeated uint32 avatar_list = 8;
	uint32 raid_id = 5;
	uint32 is_save = 14;
}
message StartRaidScRsp {
	FNLGPLNCPCL scene = 12;
	uint32 retcode = 4;
}
message LeaveRaidCsReq {
	uint32 raid_id = 11;
	bool is_save = 1;
}
message LeaveRaidScRsp {
	uint32 retcode = 15;
}
message RaidTargetInfo {
	FOCHDFJANPC MDDOFMCJJHH = 5;
	uint32 HFALJIHKECN = 1;
	uint32 DLPPDPBJIIM = 6;
}
message RaidInfoNotify {
	uint64 raid_finish_time = 4;
	RaidStatus status = 13;
	ItemList item_list = 12;
	repeated RaidTargetInfo raid_target_info = 15;
	uint32 raid_id = 11;
	uint32 world_level = 9;
}
message ChallengeRaid {
	uint32 max_score = 2;
	uint32 raid_id = 4;
}
message FinishedRaidInfo {
	uint32 raid_id = 8;
	uint32 world_level = 4;
	repeated uint32 KNIBANIILDE = 13;
}
message GetRaidInfoCsReq {
}
message GetRaidInfoScRsp {
	repeated ChallengeRaid ChallengeRaidList = 5;
	repeated uint32 ChallengeTakenRewardIdList = 6;
	uint32 Retcode = 12;
	repeated FinishedRaidInfo FinishedRaidInfoList = 4;
}
message GetChallengeRaidInfoCsReq {
}
message GetChallengeRaidInfoScRsp {
	uint32 retcode = 4;
	repeated ChallengeRaid challenge_raid_data_list = 10;
	repeated uint32 taken_reward_id_list = 8;
}
message TakeChallengeRaidRewardCsReq {
	uint32 reward_id = 9;
}
message TakeChallengeRaidRewardScRsp {
	uint32 reward_id = 1;
	ItemList reward = 2;
	uint32 retcode = 15;
}
message ChallengeRaidNotify {
	ChallengeRaid challenge_raid = 7;
}
message SetClientRaidTargetCountCsReq {
	uint32 progress = 15;
	uint32 DMMPPKMJPMM = 14;
}
message SetClientRaidTargetCountScRsp {
	uint32 DMMPPKMJPMM = 9;
	uint32 progress = 7;
	uint32 retcode = 4;
}
message GetSaveRaidCsReq {
	uint32 raid_id = 4;
	uint32 world_level = 3;
}
message GetSaveRaidScRsp {
	uint32 retcode = 8;
	uint32 raid_id = 7;
	bool is_save = 3;
	uint32 world_level = 1;
	repeated RaidTargetInfo raid_target_info = 12;
}
message RaidData {
	uint32 world_level = 9;
	uint32 raid_id = 8;
	repeated RaidTargetInfo raid_target_info = 3;
}
message GetAllSaveRaidCsReq {
}
message GetAllSaveRaidScRsp {
	repeated RaidData raid_data_list = 4;
	uint32 retcode = 8;
}
message DelSaveRaidScNotify {
	uint32 world_level = 14;
	uint32 raid_id = 10;
}
message RaidKickByServerScNotify {
	LineupInfo lineup = 4;
	EGKFNDOOPNN reason = 5;
	SceneInfo scene = 14;
	uint32 world_level = 2;
	uint32 raid_id = 1;
}
message ACONLFJEJOK {
	uint32 JJDMKHBKPLM = 3;
}
message RaidCollectionDataCsReq {
}
message RaidCollectionDataScRsp {
	repeated ACONLFJEJOK challenge_list = 13;
	uint32 retcode = 7;
}
message RaidCollectionDataScNotify {
	ACONLFJEJOK collection_info = 14;
}
message RaidCollectionEnterNextRaidCsReq {
	uint32 is_save = 15;
	uint32 raid_id = 14;
	repeated uint32 avatar_list = 5;
	uint32 world_level = 11;
}
message RaidCollectionEnterNextRaidScRsp {
	uint32 retcode = 13;
	FNLGPLNCPCL scene = 6;
}
message ABHFJDNFCFL {
}
message OIOPBDBJHIE {
	uint32 index = 3;
	IPKPKDCEBKI status = 13;
}
message FPNJLDDAMGH {
	uint32 gift_type = 7;
	int64 COIFHFPEGPH = 14;
	int64 end_time = 12;
	repeated OIOPBDBJHIE MIGFMPJBELG = 13;
}
message GetRechargeGiftInfoScRsp {
	repeated FPNJLDDAMGH MMGLCJMGGIH = 10;
	uint32 retcode = 4;
}
message HADFKEGGMCA {
	uint32 gift_type = 9;
}
message TakeRechargeGiftRewardScRsp {
	uint32 retcode = 4;
	ItemList reward = 11;
	FPNJLDDAMGH HNKGCNDOCAK = 8;
}
message NJOOEGFJKIH {
}
message JMHOJKKGNIF {
	repeated uint32 JCLOBIAPKEG = 3;
	uint32 progress = 1;
	uint32 panel_id = 10;
	uint32 id = 6;
}
message GetRechargeBenefitInfoScRsp {
	uint32 retcode = 10;
	repeated JMHOJKKGNIF EHNDMLFFMHI = 4;
}
message SyncRechargeBenefitInfoScNotify {
	JMHOJKKGNIF AMEFPPFCFJI = 8;
}
message AADIKBDAIMM {
	uint32 id = 8;
}
message TakeRechargeBenefitRewardScRsp {
	uint32 retcode = 1;
	ItemList reward = 14;
	JMHOJKKGNIF AMEFPPFCFJI = 10;
}
message GetChallengeRecommendLineupListCsReq {
	uint32 challenge_id = 3;
}
message ChallengeRecommendLineup {
	repeated uint32 first_lineup = 4;
	uint32 CEIFDIKPDAM = 9;
	uint32 DCHOLKBFBGI = 3;
	repeated uint32 second_lineup = 11;
}
message GetChallengeRecommendLineupListScRsp {
	repeated ChallengeRecommendLineup challenge_recommend_list = 8;
	uint32 retcode = 15;
	uint32 challenge_id = 2;
}
message EquipmentRecommendInfo {
	uint32 LGIIAHIDLMG = 4;
	uint32 MDMGKHLHIIN = 7;
}
message EquipmentRecommend {
	repeated EquipmentRecommendInfo equipment_list = 6;
}
message RelicRecommendInfo {
	uint32 FIKKGBIBCJK = 8;
	uint32 EHCEEPMBDDI = 9;
	uint32 PDMGJKODFOP = 13;
}
message RelicRecommend {
	repeated RelicRecommendInfo recommend_relic_list = 3;
}
message GetBigDataRecommendCsReq {
	BigDataRecommendType big_data_recommend_type = 15;
	uint32 equip_avatar = 1;
}
message GetBigDataRecommendScRsp {
	oneof data_case {
		EquipmentRecommend equipment_recommend = 15;
		RelicRecommend relic_recommend = 10;
	}
	uint32 retcode = 11;
	BigDataRecommendType big_data_recommend_type = 12;
	bool has_recommand = 8;
	uint32 equip_avatar = 4;
}
message KNNFPFKCABE {
	repeated uint32 avatar_id_list = 3;
	uint32 CFIPHFHOJFP = 8;
	uint32 DHJHIBCDNBA = 5;
}
message PIIIPHEFDJO {
	repeated KNNFPFKCABE APFECOOPNKN = 7;
}
message NKGHHAFANHN {
	uint32 KICOBNPCKAE = 10;
	uint32 FLEEFJLNLCH = 8;
	uint32 IIKGCJFJADF = 9;
}
message GHLEDKFIIJH {
	uint32 KICOBNPCKAE = 6;
	uint32 JICDFLIMHHD = 8;
}
message OFNGPLJKLOJ {
	repeated GHLEDKFIIJH FBBAJBINGLB = 4;
	repeated GHLEDKFIIJH KKCMFGMHIMO = 2;
	repeated GHLEDKFIIJH MPMFAHLKEOB = 3;
	repeated NKGHHAFANHN PDBHNHPCNNJ = 9;
	repeated GHLEDKFIIJH LGEJJAJPEDK = 11;
	repeated NKGHHAFANHN NOBONCCPENG = 5;
	uint32 avatar_id = 15;
}
message MKJALMKMPGL {
	repeated OFNGPLJKLOJ BFDMGINBOIB = 14;
}
message GetBigDataAllRecommendCsReq {
	BigDataRecommendType big_data_recommend_type = 11;
}
message GetBigDataAllRecommendScRsp {
	oneof data_case {
		PIIIPHEFDJO DKLBNBDPMPO = 10;
		MKJALMKMPGL PFOPJPJKKLK = 7;
	}
	BigDataRecommendType big_data_recommend_type = 5;
	uint32 retcode = 15;
}
message EJBIOKMOLAF {
	repeated uint32 FFBEEBKOGPN = 14;
}
message KNCHLMGILJC {
	uint32 panel_id = 2;
	uint32 NOPDKLDEKKF = 8;
	map<uint32, EJBIOKMOLAF> MBGIJNJFHGE = 11;
}
message GetAllRedDotDataCsReq {
}
message GetAllRedDotDataScRsp {
	uint32 retcode = 11;
	repeated KNCHLMGILJC IAGIBDAICHI = 1;
}
message UpdateRedDotDataCsReq {
	repeated uint32 switch_list = 10;
	uint32 group_id = 15;
	OJLJHFNFDKP HONEMGCFBGI = 14;
	uint32 NOPDKLDEKKF = 12;
	uint32 panel_id = 2;
}
message UpdateRedDotDataScRsp {
	uint32 retcode = 14;
	uint32 group_id = 10;
	uint32 panel_id = 9;
	uint32 NOPDKLDEKKF = 1;
}
message GetSingleRedDotParamGroupCsReq {
	uint32 NOPDKLDEKKF = 13;
	uint32 group_id = 9;
	uint32 panel_id = 11;
}
message GetSingleRedDotParamGroupScRsp {
	uint32 retcode = 7;
	EJBIOKMOLAF CHPJJKLGOKM = 3;
	uint32 group_id = 15;
	uint32 panel_id = 5;
	uint32 NOPDKLDEKKF = 6;
}
message RelicSmartWearPlan {
	uint32 avatar_id = 15;
	repeated uint32 inside_relic_list = 13;
	repeated uint32 outside_relic_list = 6;
	uint32 unique_id = 2;
}
message RelicSmartWearGetPlanCsReq {
	uint32 avatar_id = 4;
}
message RelicSmartWearGetPlanScRsp {
	repeated RelicSmartWearPlan relic_plan_list = 5;
	uint32 avatar_id = 6;
	uint32 retcode = 14;
}
message RelicSmartWearAddPlanCsReq {
	RelicSmartWearPlan relic_plan = 14;
}
message RelicSmartWearAddPlanScRsp {
	uint32 retcode = 1;
	RelicSmartWearPlan relic_plan = 2;
}
message RelicSmartWearUpdatePlanCsReq {
	RelicSmartWearPlan relic_plan = 9;
}
message RelicSmartWearUpdatePlanScRsp {
	uint32 retcode = 1;
	RelicSmartWearPlan relic_plan = 6;
}
message RelicSmartWearDeletePlanCsReq {
	uint32 unique_id = 7;
}
message RelicSmartWearDeletePlanScRsp {
	uint32 retcode = 9;
	uint32 unique_id = 2;
}
message RelicSmartWearPinRelicCsReq {
	uint32 avatar_id = 11;
	uint32 relic_type = 9;
	bool BAOONJDCFKD = 13;
}
message RelicSmartWearPinRelicScRsp {
	bool BAOONJDCFKD = 6;
	uint32 retcode = 7;
	uint32 avatar_id = 12;
	uint32 relic_type = 11;
}
message RelicSmartWearGetPinRelicCsReq {
	uint32 avatar_id = 6;
}
message RelicSmartWearGetPinRelicScRsp {
	repeated uint32 pin_relic_id_list = 5;
	uint32 avatar_id = 13;
	uint32 retcode = 11;
}
message RelicSmartWearUpdatePinRelicScNotify {
	repeated uint32 pin_relic_id_list = 12;
	uint32 avatar_id = 15;
}
message GetReplayTokenCsReq {
	uint32 CMPBKBBKAOA = 4;
	string KIHBIGPFKKN = 2;
	uint32 stage_id = 12;
	ReplayType replay_type = 8;
	string BBEMIDHMNLM = 9;
	uint32 AFEHLMFIBMD = 5;
}
message GetReplayTokenScRsp {
	string KIHBIGPFKKN = 7;
	ReplayType replay_type = 2;
	uint32 stage_id = 3;
	uint32 retcode = 9;
	string token = 11;
}
message GetPlayerReplayInfoCsReq {
}
message GetPlayerReplayInfoScRsp {
	repeated ReplayInfo KGCFEALANKO = 6;
	uint32 retcode = 5;
}
message GetRndOptionCsReq {
	uint32 id = 6;
}
message GetRndOptionScRsp {
	uint32 retcode = 1;
	repeated uint32 EEGEGGBDHDG = 3;
}
message DailyFirstMeetPamCsReq {
}
message DailyFirstMeetPamScRsp {
	uint32 retcode = 4;
}
message RogueBuff {
	uint32 level = 14;
	uint32 buff_id = 11;
}
message RogueBuffList {
	repeated RogueBuff buff_list = 4;
}
message RogueRoom {
	uint32 site_id = 7;
	RogueRoomStatus cur_status = 3;
	uint32 room_id = 2;
	RogueRoomStatus BEEEBOIOJIF = 14;
	uint32 IMIMGFAAGHM = 1;
}
message RogueMapInfo {
	uint32 area_id = 12;
	uint32 cur_site_id = 7;
	uint32 cur_room_id = 4;
	repeated RogueRoom room_list = 8;
	uint32 map_id = 6;
}
message RogueArea {
	uint32 map_id = 2;
	uint32 area_id = 9;
	uint32 GMPIIAEGGEK = 6;
	bool has_taken_reward = 11;
	RogueStatus rogue_status = 8;
	RogueAreaStatus area_status = 5;
}
message OMOGAIEOFAH {
	uint32 CMOGBLHAFHN = 13;
	bool EHPMCGOELGB = 7;
	uint32 BHEIDPPFCKA = 2;
	ItemCostData FPOELPFCNBI = 10;
	repeated RogueBuff maze_buff_list = 8;
	repeated uint32 PDIHILCLENM = 14;
	uint32 PDAPEHEAMBM = 15;
	uint32 IPODNBLJPOL = 6;
	uint32 EKFLPNLAPDF = 9;
	uint32 DJFCKFEMGOJ = 1;
	RogueCommonBuffSelectSourceType modifier_source_type = 4;
	uint32 CKKEKMJMABC = 11;
	uint32 IGCHBPAKBCB = 3;
}
message KFEJFBBGIAD {
	RogueBuff get_buff_list = 10;
	repeated RogueBuff KMPMDLDHABN = 7;
}
message IGJENCIKLOF {
	repeated RogueBuff CLPLEFHHAFB = 2;
	uint32 select_hint_id = 15;
	repeated RogueBuff IHGMPJNNMKI = 14;
}
message RogueBuffEnhanceInfo {
	uint32 buff_id = 6;
	ItemCostData cost_data = 13;
	float FAMCMAGFKCL = 11;
}
message RogueBuffEnhanceInfoList {
	repeated RogueBuffEnhanceInfo enhance_info_list = 2;
}
message RogueMiracle {
	uint32 max_times = 6;
	map<uint32, uint32> GMAFEJEJBHO = 11;
	uint32 durability = 7;
	uint32 cur_times = 2;
	uint32 miracle_id = 1;
}
message RogueMiracleInfo {
	repeated RogueMiracle miracle_list = 3;
	uint32 DLNFOKKNFGI = 2;
	uint32 FNHFJFIOILD = 12;
}
message BFLJDBHBMNP {
	RogueMiracleInfo game_miracle_info = 6;
	repeated uint32 miracle_handbook_list = 1;
}
message KEIONFFFLCO {
	repeated uint32 CMAGGNFDKAG = 14;
}
message FLECFLLDNFP {
	repeated uint32 bonus_id_list = 5;
}
message NGFFCEICACD {
	oneof CCPFABANCNN {
		ItemList JDIJKEGCIBP = 13;
		RogueBuffList buff_info_list = 11;
	}
	uint32 EBNPOCIDPKE = 10;
}
message RogueReviveInfo {
	uint32 EHHBHKOBNNJ = 14;
	repeated uint32 KNFJMANJGGA = 13;
	ItemCostData rogue_revive_cost = 15;
	uint32 HBNBNNIJMHN = 7;
}
message JHEELOAGMIG {
	uint32 NIDFLBKPOEB = 5;
}
message RogueVirtualItemInfo {
	uint32 JKJMCFAGOCF = 11;
	uint32 HGBLOMELBLE = 7;
	uint32 GFDBGCOLKCP = 5;
	uint32 IPODNBLJPOL = 9;
}
message RogueInfo {
	RogueCurrentInfo rogue_current_info = 1732;
	RogueGetInfo rogue_get_info = 809;
}
message RogueGetInfo {
	RogueAreaInfo rogue_area_info = 13;
	RogueAeonInfo rogue_aeon_info = 7;
	RogueSeasonInfo rogue_season_info = 9;
	RogueScoreRewardInfo rogue_score_reward_info = 4;
	RogueGetVirtualItemInfo rogue_virtual_item_info = 2;
}
message RogueCurrentInfo {
	RogueLineupInfo rogue_lineup_info = 3;
	GameAeonInfo rogue_aeon_info = 2;
	bool is_explore_win = 14;
	RogueStatus status = 15;
	RogueVirtualItem virtual_item_info = 13;
	GameMiracleInfo game_miracle_info = 5;
	RogueModuleInfo module_info = 12;
	RogueMapInfo rogue_map = 1;
	RogueBuffInfo rogue_buff_info = 7;
	RogueCommonPendingAction pending_action = 6;
}
message RogueSeasonInfo {
	int64 begin_time = 8;
	int64 end_time = 1;
	uint32 season = 4;
}
message RogueAreaInfo {
	repeated RogueArea rogue_area_list = 10;
}
message RogueAeonInfo {
	repeated uint32 aeon_id_list = 3;
	uint32 unlocked_aeon_enhance_num = 2;
	uint32 unlocked_aeon_num = 8;
	bool is_unlocked = 10;
}
message RogueGetVirtualItemInfo {
	uint32 BILEOOPHJEF = 12;
	uint32 IFEHBIMEMEC = 13;
}
message RogueBuffInfo {
	repeated RogueBuff maze_buff_list = 14;
}
message GameMiracleInfo {
	RogueMiracleInfo game_miracle_info = 9;
}
message RogueLineupInfo {
	RogueReviveInfo revive_info = 6;
	repeated uint32 base_avatar_id_list = 14;
	repeated uint32 MANKKFPBFCB = 2;
	repeated uint32 trial_avatar_id_list = 13;
}
message HDJFLBMLLDP {
	FLECFLLDNFP bonus_select_info = 7;
}
message GameAeonInfo {
	bool is_unlocked = 5;
	uint32 unlocked_aeon_enhance_num = 14;
	uint32 game_aeon_id = 9;
}
message RogueModuleInfo {
	repeated uint32 module_id_list = 9;
}
message NIKKCCAKNNP {
	uint32 unlocked_aeon_enhance_num = 14;
	repeated uint32 aeon_id_list = 7;
	bool is_unlocked = 2;
	uint32 game_aeon_id = 13;
	uint32 unlocked_aeon_num = 4;
}
message RogueExploreScore {
	uint32 KOBFCOMHGCE = 6;
	uint32 score_id = 9;
	uint32 FJJDFPKGOPC = 4;
}
message AOJOFBBNEPA {
	repeated RogueExploreScore DCMHGOKCINF = 8;
	float DPFBDJMNCEO = 10;
	uint32 NPJEECEDPOK = 12;
}
message RogueRecordAvatar {
	uint32 level = 3;
	uint32 id = 14;
	AvatarType avatar_type = 4;
	uint32 slot = 15;
}
message RogueRecordInfo {
	repeated RogueBuff buff_list = 4;
	repeated uint32 miracle_list = 7;
	repeated RogueRecordAvatar avatar_list = 12;
}
message RogueFinishInfo {
	ItemList HLOBJOOEBOD = 9;
	uint32 IFEHBIMEMEC = 10;
	uint32 area_id = 1144;
	bool BEJMOKAPADK = 8;
	AODIDFNPICF AHOAHFFMJPK = 3;
	bool is_win = 4;
	RogueScoreRewardInfo AGPPEPMGFMF = 13;
	ItemList GHOGLLFKJHO = 7;
	ItemList LBGGHNANCOO = 1;
	uint32 DEDLGFJAEAM = 15;
	RogueScoreRewardInfo HLJJHLIJBPD = 12;
	RogueRecordInfo record_info = 2;
	uint32 LMMEANJPEND = 896;
	uint32 BIMDLGHKAOI = 11;
	AOJOFBBNEPA CDIPFDNPMOM = 14;
	uint32 MNBIEBOLCCN = 6;
	uint32 score_id = 5;
}
message RogueScoreRewardInfo {
	repeated uint32 taken_normal_free_row_list = 7;
	uint32 pool_id = 14;
	bool has_taken_initial_score = 15;
	int64 reward_begin_time = 12;
	uint32 explore_score = 11;
	int64 reward_end_time = 8;
	bool pool_refreshed = 13;
}
message EACOFHBFMLB {
	uint32 level = 11;
	uint32 JGMIPMDPPIJ = 15;
	uint32 exp = 7;
	uint32 aeon_id = 9;
}
message RogueDialogueEventParam {
	bool IsValid = 14;
	int32 IntValue = 7;
	uint32 DialogueEventId = 13;
	float Ratio = 2;
	uint32 ArgId = 8;
}
message DialogueEvent {
	uint32 event_unique_id = 12;
	repeated RogueDialogueEventParam dialogue_event_param_list = 14;
	uint32 game_mode_type = 13;
	uint32 talk_dialogue_id = 8;
	uint32 aeon_talk_id = 10;
	repeated uint32 EOHEEIGOBKD = 5;
}
message GGHFIJKPFLN {
	oneof CCPFABANCNN {
		ItemList JDIJKEGCIBP = 5;
	}
	RogueDialogueResult BPLMPMEFEAM = 10;
	repeated uint32 JJEALOEMMKK = 13;
}
message GetRogueInfoCsReq {
}
message GetRogueInfoScRsp {
	uint32 retcode = 4;
	RogueInfo rogue_game_info = 11;
}
message StartRogueCsReq {
	repeated uint32 trial_avatar_id_list = 7;
	repeated uint32 base_avatar_id_list = 9;
	uint32 aeon_id = 12;
	repeated uint32 disable_aeon_id_list = 11;
	uint32 interacted_prop_entity_id = 15;
	uint32 area_id = 10;
}
message StartRogueScRsp {
	RogueMapRotateInfo rotate_info = 4;
	SceneInfo scene = 3;
	RogueInfo rogue_game_info = 13;
	LineupInfo lineup = 2;
	uint32 retcode = 1;
}
message EnterRogueCsReq {
	uint32 area_id = 10;
	uint32 interacted_prop_entity_id = 12;
}
message EnterRogueScRsp {
	uint32 retcode = 5;
	SceneInfo scene = 14;
	RogueInfo rogue_game_info = 2;
	RogueMapRotateInfo rotate_info = 7;
	LineupInfo lineup = 13;
}
message LeaveRogueCsReq {
}
message LeaveRogueScRsp {
	SceneInfo scene = 3;
	uint32 retcode = 15;
	RogueInfo rogue_game_info = 14;
	RogueMapRotateInfo rotate_info = 13;
	LineupInfo lineup = 8;
}
message SyncRogueFinishScNotify {
	RogueFinishInfo rogue_finish_info = 8;
}
message PickRogueAvatarCsReq {
	uint32 prop_entity_id = 1;
	repeated uint32 base_avatar_id_list = 8;
	repeated uint32 trial_avatar_id_list = 7;
}
message PickRogueAvatarScRsp {
	uint32 retcode = 8;
	repeated uint32 base_avatar_id_list = 13;
	repeated uint32 trial_avatar_id_list = 5;
}
message ReviveRogueAvatarCsReq {
	uint32 interacted_prop_entity_id = 9;
	repeated uint32 trial_avatar_id_list = 5;
	uint32 base_avatar_id = 12;
	repeated uint32 base_avatar_id_list = 8;
}
message ReviveRogueAvatarScRsp {
	repeated uint32 trial_avatar_id_list = 4;
	uint32 retcode = 7;
	repeated uint32 base_avatar_id_list = 15;
	RogueReviveInfo revive_info = 2;
	uint32 CINHFFLFCIK = 9;
	uint32 base_avatar_id = 11;
}
message SyncRogueReviveInfoScNotify {
	RogueReviveInfo revive_info = 10;
}
message GetRogueBuffEnhanceInfoCsReq {
}
message GetRogueBuffEnhanceInfoScRsp {
	uint32 retcode = 13;
	RogueBuffEnhanceInfoList buff_enhance_info = 15;
}
message EnhanceRogueBuffCsReq {
	uint32 maze_buff_id = 12;
}
message EnhanceRogueBuffScRsp {
	RogueBuff rogue_buff = 4;
	bool is_succ = 11;
	uint32 retcode = 5;
}
message QuitRogueCsReq {
	uint32 area_id = 6;
}
message QuitRogueScRsp {
	RogueFinishInfo rogue_finish_info = 10;
	RogueInfo rogue_game_info = 12;
	uint32 retcode = 4;
}
message SyncRogueExploreWinScNotify {
	bool is_explore_win = 5;
}
message SyncRogueSeasonFinishScNotify {
	bool NIOLDFFFELN = 3;
	SceneInfo scene = 4;
	RogueScoreRewardInfo rogue_score_reward_info = 12;
	LineupInfo lineup = 15;
	RogueFinishInfo rogue_finish_info = 1;
}
message EnterRogueMapRoomCsReq {
	uint32 site_id = 15;
	uint32 room_id = 2;
}
message EnterRogueMapRoomScRsp {
	RogueMapRotateInfo rotate_info = 15;
	uint32 cur_site_id = 12;
	uint32 retcode = 14;
	LineupInfo lineup = 11;
	SceneInfo scene = 5;
}
message SyncRogueMapRoomScNotify {
	uint32 map_id = 1;
	RogueRoom cur_room = 8;
}
message OpenRogueChestCsReq {
	bool EIDDMGHLPBP = 8;
	uint32 interacted_prop_entity_id = 6;
}
message OpenRogueChestScRsp {
	uint32 retcode = 12;
	ItemList drop_data = 5;
	MBKOCMMICPG KJCHGEHDLNO = 7;
	ItemList reward = 8;
}
message ExchangeRogueRewardKeyCsReq {
	uint32 count = 1;
}
message ExchangeRogueRewardKeyScRsp {
	uint32 Count = 12;
	uint32 Retcode = 8;
}
message SyncRogueAreaUnlockScNotify {
	uint32 area_id = 13;
}
message SyncRogueGetItemScNotify {
	ItemList IODFGFOMGOD = 5;
	ItemList get_item_list = 2;
}
message TakeRogueAeonLevelRewardCsReq {
	uint32 level = 8;
	uint32 aeon_id = 2;
}
message TakeRogueAeonLevelRewardScRsp {
	uint32 retcode = 9;
	uint32 level = 12;
	uint32 aeon_id = 3;
	ItemList reward = 11;
}
message SyncRogueAeonLevelUpRewardScNotify {
	uint32 level = 5;
	uint32 aeon_id = 1;
	ItemList reward = 9;
}
message GetRogueScoreRewardInfoCsReq {
}
message GetRogueScoreRewardInfoScRsp {
	RogueScoreRewardInfo info = 2;
	uint32 retcode = 15;
}
message TakeRogueScoreRewardCsReq {
	uint32 pool_id = 2;
	repeated uint32 LMMFPCOKHEE = 12;
}
message TakeRogueScoreRewardScRsp {
	ItemList reward = 6;
	uint32 retcode = 4;
	RogueScoreRewardInfo rogue_score_reward_info = 9;
	uint32 pool_id = 5;
}
message GetRogueInitialScoreCsReq {
}
message GetRogueInitialScoreScRsp {
	uint32 retcode = 3;
	RogueScoreRewardInfo rogue_score_reward_info = 10;
}
message GetRogueAeonInfoCsReq {
}
message GetRogueAeonInfoScRsp {
	repeated EACOFHBFMLB BELOFMFHFDK = 14;
	uint32 retcode = 3;
}
message FinishAeonDialogueGroupCsReq {
	uint32 aeon_id = 13;
}
message FinishAeonDialogueGroupScRsp {
	EACOFHBFMLB rogue_aeon_info = 6;
	uint32 retcode = 3;
	ItemList reward = 8;
}
message GetRogueTalentInfoCsReq {
}
message GetRogueTalentInfoScRsp {
	RogueTalentInfoList talent_info_list = 8;
	uint32 retcode = 11;
}
message EnableRogueTalentCsReq {
	uint32 talent_id = 3;
}
message EnableRogueTalentScRsp {
	RogueTalentInfoList talent_info_list = 1;
	uint32 retcode = 3;
}
message SyncRogueVirtualItemInfoScNotify {
	RogueVirtualItemInfo rogue_virtual_item_info = 15;
}
message SyncRogueStatusScNotify {
	bool JIENHHAHFGI = 1;
	RogueStatus status = 4;
}
message SyncRogueRewardInfoScNotify {
	RogueScoreRewardInfo rogue_score_reward_info = 13;
}
message SyncRoguePickAvatarInfoScNotify {
	repeated uint32 base_avatar_id_list = 3;
	repeated uint32 trial_avatar_id_list = 15;
}
message SyncRogueAeonScNotify {
	NIKKCCAKNNP GCJOGFLGBBH = 13;
}
message LLPNBNEJKII {
	SceneInfo scene = 11;
	LineupInfo lineup = 12;
	RogueMapRotateInfo rotate_info = 13;
}
message RogueArcadeStartCsReq {
	repeated uint32 base_avatar_id_list = 1;
	uint32 room_id = 11;
}
message RogueArcadeStartScRsp {
	uint32 retcode = 14;
	uint32 room_id = 3;
	LLPNBNEJKII rogue_tourn_cur_scene_info = 12;
}
message RogueArcadeLeaveCsReq {
}
message RogueArcadeLeaveScRsp {
	LLPNBNEJKII rogue_tourn_cur_scene_info = 15;
	uint32 retcode = 7;
}
message RogueArcadeRestartCsReq {
}
message RogueArcadeRestartScRsp {
	uint32 retcode = 15;
	LLPNBNEJKII rogue_tourn_cur_scene_info = 8;
}
message RogueArcadeGetInfoCsReq {
}
message RogueArcadeGetInfoScRsp {
	uint32 room_id = 7;
	uint32 retcode = 2;
}
message RogueCommonBuff {
	uint32 buff_level = 6;
	uint32 buff_id = 5;
}
message ChessRogueBuff {
	repeated RogueCommonBuff buff_list = 6;
}
message RogueCommonBuffSelectInfo {
	uint32 SourceCurCount = 14;
	uint32 CertainSelectBuffId = 5;
	uint32 RollBuffMaxCount = 2;
	uint32 SourceTotalCount = 12;
	bool CanRoll = 10;
	repeated uint32 HandbookUnlockBuffIdList = 6;
	repeated uint32 FirstBuffTypeList = 1;
	uint32 RollBuffFreeCount = 7;
	RogueCommonBuffSelectSourceType SourceType = 13;
	repeated RogueCommonBuff SelectBuffList = 11;
	ItemCostData RollBuffCostData = 8;
	uint32 SourceHintId = 3;
	uint32 RollBuffCount = 4;
}
message RogueBuffSelectResult {
	uint32 buff_select_id = 6;
}
message RogueBuffSelectCallback {
}
message RogueBuffRerollResult {
}
message RogueBuffRerollCallback {
	RogueCommonBuffSelectInfo buff_select_info = 8;
}
message ChessRogueBuffEnhanceInfo {
	uint32 buff_id = 13;
	ItemCostData cost_data = 15;
}
message ChessRogueBuffEnhanceList {
	repeated ChessRogueBuffEnhanceInfo enhance_info_list = 4;
}
message INEMPCAKNNC {
	uint32 select_hint_id = 8;
	repeated RogueCommonBuff IHGMPJNNMKI = 2;
	repeated RogueCommonBuff CLPLEFHHAFB = 6;
}
message LEFCOMGMPCL {
	repeated RogueCommonBuff IHGMPJNNMKI = 7;
	uint32 select_hint_id = 15;
}
message PBMAKLNJEKO {
	uint32 LJEJKCCBCHA = 4;
}
message FKDBIHNPCHE {
}
message IPGKAGFFBHF {
	uint32 select_hint_id = 2;
	repeated RogueCommonBuff DLFMGKPGMHL = 3;
}
message OKEFIDDNLKG {
	uint32 buff_select_id = 10;
}
message DLHPDALGDEH {
}
message RogueCommonBuffReforgeSelectInfo {
	repeated RogueCommonBuff select_buffs = 11;
	uint32 select_hint_id = 1;
}
message RogueBuffReforgeSelectResult {
	uint32 buff_select_id = 15;
}
message RogueBuffReforgeSelectCallback {
}
message ChessRogueBuffInfo {
	ChessRogueBuff chess_rogue_buff_info = 15;
}
message GameRogueMiracle {
	map<uint32, uint32> GMAFEJEJBHO = 11;
	uint32 durability = 12;
	uint32 cur_times = 10;
	uint32 miracle_id = 13;
}
message LAJBHGHNBAC {
	uint32 BEMCEEDABFD = 9;
	bool GANHKLNPAPI = 11;
	GameRogueMiracle JALAMOPLDHO = 7;
}
message RogueCommonMiracle {
	GameRogueMiracle miracle_info = 10;
}
message RogueCommonRemoveMiracle {
	uint32 miracle_id = 13;
}
message IBIBPOOPDEN {
	GameRogueMiracle miracle_info = 10;
	uint32 LGJFNAIAGLD = 11;
}
message MAAAAGPJJFE {
	GameRogueMiracle miracle_info = 11;
}
message PBALOEJCGFN {
	uint32 BEMCEEDABFD = 1;
	GameRogueMiracle JALAMOPLDHO = 10;
}
message HBLNHGANBAB {
	GameRogueMiracle miracle_info = 3;
}
message ChessRogueMiracle {
	repeated GameRogueMiracle miracle_list = 3;
}
message RogueMiracleSelectInfo {
	uint32 select_hint_id = 15;
	repeated uint32 miracle_handbook_list = 4;
	repeated uint32 select_miracle_list = 11;
}
message RogueMiracleSelectResult {
	uint32 miracle_select_id = 9;
}
message RogueMiracleSelectCallback {
}
message ANMCAIMELCA {
	repeated uint32 CMAGGNFDKAG = 7;
}
message GABBEHOIPJC {
	uint32 select_hint_id = 3;
	repeated uint32 DCJEGGJPCDF = 8;
}
message NALELIGHDAA {
	uint32 ABMAMCFPCCI = 1;
}
message PAOCONGELJK {
}
message MLKICCAELKE {
	uint32 select_hint_id = 1;
	repeated uint32 ANBPNIHMKAH = 8;
}
message PKODMMPHIBC {
	uint32 JIBHLJNEICM = 6;
}
message BLFJBKBHJIL {
}
message EAKECFAPPKD {
	repeated uint32 FIKENBEONDJ = 11;
	uint32 select_hint_id = 4;
}
message NHCKHPLKLIO {
	uint32 IBEMOJGALLK = 15;
}
message OMJFMBJMFMC {
}
message ELDAFCNMFBF {
	repeated uint32 MDPDADOOOBN = 2;
	uint32 select_hint_id = 1;
}
message LHJPIKEKPGH {
	uint32 miracle_select_id = 4;
}
message MOIKNHHCABH {
}
message RogueComposeMiracleSelectInfo {
	repeated uint32 JLHFOJODOKG = 9;
	uint32 select_hint_id = 12;
}
message IMCBIIGOKPM {
	uint32 miracle_select_id = 6;
}
message FHIKPLAIOEI {
}
message RogueHexAvatarSelectInfo {
	uint32 select_hint_id = 8;
	repeated uint32 JLHFOJODOKG = 7;
}
message RogueHexAvatarSelectResult {
	uint32 miracle_select_id = 15;
}
message RogueHexAvatarSelectCallback {
}
message RogueBonusSelectResult {
	uint32 bonus_id = 2;
}
message RogueBonusSelectCallback {
}
message ChessRogueMiracleInfo {
	ChessRogueMiracle chess_rogue_miracle_info = 12;
}
message RogueBonusSelectInfo {
	repeated uint32 bonus_id_list = 14;
}
message RogueVirtualItem {
	uint32 AMNKMBMHKDF = 7;
	uint32 DAFALAOAOOI = 8;
	uint32 rogue_money = 11;
	uint32 BPJOAPFAFKK = 13;
}
message RogueCommonMoney {
	uint32 display_type = 15;
	uint32 num = 9;
}
message MDGJIKLJDDE {
	uint32 avatar_id = 3;
	AvatarType avatar_type = 2;
}
message RogueSyncContextBoardEvent {
	uint32 BoardEventId = 12;
	uint32 ModifierEffectType = 6;
}
message CFELLCPMONH {
	ItemList item_list = 8;
}
message OIAOLBGOAAG {
	RogueSyncContextBoardEvent NOAEDNNIBAF = 11;
	CFELLCPMONH HHPHLEGCLDM = 5;
}
message RogueAdventureRoomTargetNone {
}
message RogueAdventureRoomTargetCoin {
	int32 count = 5;
}
message RogueAdventureRoomTargetMiracle {
	uint32 miracle_id = 1;
}
message RogueAdventureRoomTargetRuanmei {
}
message RogueAdventureRoomGameplayWolfGunTarget {
	oneof targetImplCase_ {
		RogueAdventureRoomTargetNone TargetNone = 3;
		RogueAdventureRoomTargetCoin TargetCoin = 11;
		RogueAdventureRoomTargetMiracle TargetMiracle = 13;
		RogueAdventureRoomTargetRuanmei TargetRuanmei = 4;
	}
}
message RogueAdventureRoomGameplayWolfGunGameInfo {
	uint32 game_target_num = 8;
	repeated RogueAdventureRoomGameplayWolfGunTarget battle_target_list = 14;
}
message RogueAdventureRoomGameplayWolfGunInfo {
	oneof info_case {
		RogueAdventureRoomGameplayWolfGunGameInfo game_info = 9;
	}
}
message AdventureRoomInfo {
	double sus = 13;
	uint32 caught_monster_num = 15;
	uint32 remain_monster_num = 5;
	uint32 status = 2;
	RogueAdventureRoomGameplayWolfGunInfo query_info = 9;
	uint32 score_id = 10;
}
message SyncRogueAdventureRoomInfoScNotify {
	AdventureRoomInfo adventure_room_info = 12;
}
message PrepareRogueAdventureRoomCsReq {
}
message PrepareRogueAdventureRoomScRsp {
	uint32 retcode = 13;
	AdventureRoomInfo adventure_room_info = 8;
}
message StopRogueAdventureRoomCsReq {
	repeated uint32 hit_target_index_list = 6;
	uint32 MMHMDHIHCAB = 12;
}
message StopRogueAdventureRoomScRsp {
	uint32 retcode = 9;
	AdventureRoomInfo adventure_room_info = 15;
}
message GetRogueAdventureRoomInfoCsReq {
}
message GetRogueAdventureRoomInfoScRsp {
	uint32 retcode = 6;
	AdventureRoomInfo adventure_room_info = 11;
}
message UpdateRogueAdventureRoomScoreCsReq {
	uint32 score_id = 12;
	uint32 HMFFHGBKOGL = 3;
}
message UpdateRogueAdventureRoomScoreScRsp {
	AdventureRoomInfo adventure_room_info = 4;
	uint32 retcode = 10;
}
message AHCLNMJPMIJ {
	bool BPHCBOHKHMD = 10;
	ItemCostData NBLFFDIPBHI = 7;
	bool POAPEGKPFOB = 9;
	ItemCostData cost_data = 2;
	uint32 miracle_id = 4;
}
message MGKFKECFHHM {
	ItemCostData cost_data = 10;
	ItemCostData NBLFFDIPBHI = 1;
	bool POAPEGKPFOB = 6;
	bool BPHCBOHKHMD = 4;
	uint32 buff_id = 11;
	uint32 LEAAEBAFCHP = 12;
}
message IILHOAKJDNH {
	bool POAPEGKPFOB = 6;
	ItemCostData NBLFFDIPBHI = 13;
	uint32 formula_id = 4;
	bool BPHCBOHKHMD = 2;
	ItemCostData cost_data = 9;
}
message NNJOLKJLPJG {
	repeated AHCLNMJPMIJ miracle_list = 11;
}
message ANJDKFJOEEI {
	repeated MGKFKECFHHM buff_list = 6;
}
message GLPPDLECCLI {
	repeated IILHOAKJDNH game_formula_info = 8;
}
message GetRogueShopBuffInfoCsReq {
	uint32 interacted_prop_entity_id = 9;
	bool HMILGHCPEDE = 11;
}
message GetRogueShopBuffInfoScRsp {
	ItemCostData IHJHCCFMIFD = 9;
	uint32 retcode = 10;
	int32 AEFHKANBFNC = 7;
	int32 EFOJOCFGIDJ = 5;
	ANJDKFJOEEI rogue_buff_info = 12;
}
message GetRogueShopMiracleInfoCsReq {
	uint32 interacted_prop_entity_id = 14;
	bool HMILGHCPEDE = 7;
}
message GetRogueShopMiracleInfoScRsp {
	int32 AEFHKANBFNC = 8;
	ItemCostData IHJHCCFMIFD = 12;
	int32 EFOJOCFGIDJ = 5;
	uint32 retcode = 14;
	NNJOLKJLPJG game_miracle_info = 9;
}
message GetRogueShopFormulaInfoCsReq {
	uint32 interacted_prop_entity_id = 15;
	bool HMILGHCPEDE = 14;
}
message GetRogueShopFormulaInfoScRsp {
	GLPPDLECCLI CKAANMDDKCJ = 14;
	int32 AEFHKANBFNC = 12;
	uint32 retcode = 8;
	ItemCostData IHJHCCFMIFD = 13;
	int32 EFOJOCFGIDJ = 7;
}
message BuyRogueShopMiracleCsReq {
	uint32 interacted_prop_entity_id = 15;
	uint32 miracle_id = 4;
}
message BuyRogueShopBuffCsReq {
	uint32 interacted_prop_entity_id = 15;
	repeated uint32 buff_id_list = 13;
}
message BuyRogueShopFormulaCsReq {
	repeated uint32 AOIIHCFMFPH = 8;
	uint32 interacted_prop_entity_id = 6;
}
message BuyRogueShopMiracleScRsp {
	NNJOLKJLPJG game_miracle_info = 15;
	uint32 retcode = 14;
}
message BuyRogueShopBuffScRsp {
	uint32 retcode = 13;
	ANJDKFJOEEI rogue_buff_info = 9;
}
message BuyRogueShopFormulaScRsp {
	uint32 retcode = 11;
	GLPPDLECCLI CKAANMDDKCJ = 10;
}
message RogueNpcDisappearCsReq {
	uint32 disappear_npc_entity_id = 1;
}
message RogueNpcDisappearScRsp {
	uint32 retcode = 15;
}
message SyncRogueCommonActionResultScNotify {
	uint32 rogue_sub_mode = 4;
	RogueCommonActionResultDisplayType display_type = 12;
	repeated RogueCommonActionResult action_result_list = 3;
}
message RogueCommonActionResult {
	RogueCommonActionResultSourceType source = 7;
	RogueCommonActionResultData rogue_action = 8;
}
message FormulaBuffTypeInfo {
	uint32 key = 5;
	int32 formula_buff_num = 12;
}
message MLPKNLLAOIF {
	int32 EEGCBBHOPHG = 5;
	uint32 JPNFBFKHPGD = 3;
	int32 CFCLOGFJPBD = 14;
}
message FormulaInfo {
	uint32 formula_id = 15;
	repeated FormulaBuffTypeInfo formula_buff_type_list = 2;
	bool is_expand = 6;
}
message FormulaTypeValue {
	map<uint32, int32> formula_type_map = 6;
}
message RogueCommonFormula {
	FormulaInfo formula_info = 6;
}
message RogueCommonRemoveFormula {
	FormulaInfo formula_info = 1;
}
message RogueCommonExpandedFormula {
	FormulaInfo formula_info = 3;
}
message RogueCommonContractFormula {
	FormulaInfo formula_info = 5;
}
message FIPFPHBPHLH {
	repeated MLPKNLLAOIF ILBKMNAJGMO = 10;
}
message RogueCommonPathBuff {
	FormulaTypeValue value = 15;
}
message RogueTournFormulaInfo {
	repeated MLPKNLLAOIF ILBKMNAJGMO = 14;
	repeated FormulaInfo game_formula_info = 9;
	FormulaTypeValue formula_type_value = 1;
}
message RogueCommonKeyword {
	uint32 keyword_id = 6;
}
message RogueCommonRemoveKeyword {
	uint32 keyword_id = 9;
}
message KeywordUnlockValue {
	map<uint32, bool> keyword_unlock_map = 14;
}
message RogueCommonActionResultData {
	oneof info_case {
		RogueCommonMoney get_item_list = 12;
		RogueCommonMoney remove_item_list = 14;
		RogueCommonBuff get_buff_list = 1451;
		RogueCommonBuff remove_buff_list = 305;
		RogueCommonMiracle get_miracle_list = 2018;
		RogueCommonRemoveMiracle remove_miracle_list = 953;
		IBIBPOOPDEN APFMFBBDCJK = 1242;
		MAAAAGPJJFE BMDJOPGHLCA = 1843;
		PBALOEJCGFN OMPBJJOHPOO = 1216;
		HBLNHGANBAB IOMJMEAOMFI = 1607;
		MDGJIKLJDDE BBLGEEMHIIM = 899;
		RogueCommonFormula get_formula_list = 612;
		RogueCommonRemoveFormula remove_formula_list = 467;
		RogueCommonExpandedFormula expand_formula_list = 1149;
		RogueCommonContractFormula contract_formula_list = 451;
		FIPFPHBPHLH DMKGEBHPIPJ = 1654;
		RogueCommonPathBuff path_buff_list = 1200;
		RogueCommonKeyword get_keyword_list = 184;
		RogueCommonRemoveKeyword remove_keyword_list = 1903;
		RogueCommonDressScepter dress_scepter_list = 1251;
		RogueCommonGetScepter get_scepter_list = 1594;
		AEFFJLGFAMH KAAILMGCHOK = 651;
		RogueMagicGameUnitInfo get_magic_unit_list = 614;
		RogueMagicGameUnitInfo remove_magic_unit_list = 1062;
		RogueMagicGameUnitInfo JGDAEBNEFKA = 965;
		RogueMagicGameScepterInfo AOIBHCMANFK = 1077;
		HOBKEOICBMI MIBOBJIDCAD = 1071;
		LNAMGOMHGJB EDBPEHABHBI = 1357;
	}
}
message RogueFormulaSelectInfo {
	repeated uint32 HandbookUnlockFormulaIdList = 1;
	uint32 RollFormulaFreeCount = 6;
	uint32 HintId = 2;
	uint32 RollFormulaMaxCount = 3;
	uint32 RollFormulaCount = 4;
	ItemCostData RollFormulaCostData = 10;
	bool CanRoll = 11;
	repeated uint32 SelectFormulaIdList = 7;
}
message RogueTournFormulaResult {
	uint32 tourn_formula_id = 8;
}
message RogueTournFormulaCallback {
}
message FHMAIANENPO {
	repeated uint32 LALDACMCHFI = 8;
	uint32 select_hint_id = 2;
}
message ONOOFHDEIDD {
	uint32 tourn_formula_id = 14;
}
message HKJEGONGJNP {
}
message KHGCDEIMLHN {
}
message EHEFOMMBNAF {
	RogueFormulaSelectInfo rogue_formula_select_info = 1;
}
message RogueReforgeFormulaSelectInfo {
	RogueFormulaSelectInfo rogue_formula_select_info = 2;
}
message RogueReforgeFormulaSelectResult {
	uint32 tourn_formula_id = 5;
}
message RogueReforgeFormulaSelectCallback {
}
message LGCMEEPJMHA {
	uint32 IDIGNADNDNF = 13;
}
message RogueMagicScepterDressInfo {
	uint32 type = 3;
	uint32 dress_magic_unit_unique_id = 9;
	uint32 slot = 5;
}
message RogueMagicScepter {
	uint32 scepter_id = 10;
	uint32 level = 12;
}
message RogueMagicGameScepterInfo {
	map<uint32, uint32> trench_count = 7;
	RogueMagicScepter modifier_content = 10;
	repeated RogueMagicGameUnit locked_magic_unit_list = 3;
	repeated RogueMagicScepterDressInfo scepter_dress_info = 12;
}
message RogueMagicGameUnit {
	uint32 level = 5;
	uint32 magic_unit_id = 13;
}
message RogueMagicGameUnitInfo {
	RogueMagicGameUnit game_magic_unit = 6;
	uint32 unique_id = 11;
}
message RogueCommonDressScepter {
	RogueMagicGameScepterInfo update_scepter_info = 10;
}
message RogueCommonGetScepter {
	RogueMagicGameScepterInfo update_scepter_info = 11;
}
message AEFFJLGFAMH {
	RogueMagicGameScepterInfo update_scepter_info = 13;
}
message OKECOPGKLEE {
	RogueMagicGameUnitInfo PMGJICCHHDL = 15;
}
message PGAKDEJBOHF {
	RogueMagicGameUnitInfo JFPJBBJLIFK = 15;
}
message RogueMagicUnitSelectInfo {
	uint32 IGCHBPAKBCB = 7;
	RogueMagicGameUnit FGDJAMHOKIF = 9;
	repeated RogueMagicGameUnit select_magic_units = 14;
	uint32 select_hint_id = 3;
	uint32 CKKEKMJMABC = 8;
}
message KKAGNMEMKOG {
	repeated RogueMagicGameUnitInfo select_magic_units = 12;
	uint32 select_hint_id = 7;
}
message RogueMagicUnitSelectResult {
	RogueMagicGameUnit select_magic_unit = 6;
}
message IIPEGHDKHGD {
	RogueMagicGameUnitInfo select_magic_unit = 10;
}
message RogueMagicUnitSelectCallback {
}
message ABPNCPOIJCI {
}
message IMNNNJGGPAG {
}
message IMDHPDBHEBC {
}
message HOBKEOICBMI {
	RogueMagicGameUnitInfo EOCIPKGJFOP = 9;
	repeated uint32 HKKLPLDNPKD = 10;
}
message RogueMagicScepterSelectInfo {
	uint32 select_hint_id = 2;
	repeated RogueMagicScepter select_scepters = 12;
}
message RogueMagicScepterSelectResult {
	bool ABBMHPKGAIK = 10;
	RogueMagicScepter select_scepter = 13;
}
message RogueMagicScepterSelectCallback {
}
message IKCNDLJLAPP {
}
message JKHKEBMOBEJ {
	RogueMagicScepter JBJGGNBJKDJ = 9;
}
message JCDLJBPHOMD {
	RogueMagicScepter GHELBOBFPAM = 3;
	bool BLCILJENELO = 9;
}
message LGPGCJDOIBK {
}
message LNAMGOMHGJB {
	uint32 event_unique_id = 5;
}
message CGJNHNMAMDH {
	uint32 LDFGIFDFPCF = 14;
	repeated uint32 KDAOIMPPPKI = 1;
	int32 JMCEMBEHCOJ = 2;
}
message CGGBPJICHGF {
	uint32 NCLAEHAIJJB = 13;
	repeated uint32 GBOOALMIKOB = 7;
	uint32 select_hint_id = 12;
	NDKLJJIIMGM OBIEDGMEBDL = 9;
}
message HAOJLHGNFPM {
	uint32 JMEHMHKBJAH = 15;
}
message BLJOGGMJBMD {
}
message PIGFBKOJNHG {
	uint32 event_unique_id = 5;
}
message AJNAJINFJIC {
	bool is_win = 5;
	uint32 battle_event_id = 12;
}
message MNMLOAPBHNF {
	uint32 event_unique_id = 2;
}
message SyncRogueCommonPendingActionScNotify {
	RogueCommonPendingAction action = 7;
	uint32 rogue_sub_mode = 2;
}
message RogueCommonPendingAction {
	uint32 queue_position = 12;
	RogueAction rogue_action = 14;
}
message RogueAction {
	oneof info_case {
		RogueCommonBuffSelectInfo buff_select_info = 1987;
		LEFCOMGMPCL FPHHHIOBFAI = 136;
		IPGKAGFFBHF AJDDFANCEJN = 1313;
		RogueCommonBuffReforgeSelectInfo buff_reforge_select_info = 199;
		RogueMiracleSelectInfo miracle_select_info = 126;
		ANMCAIMELCA BICJEMPPLAM = 318;
		GABBEHOIPJC AELPPPIEFAB = 2023;
		MLKICCAELKE BEDIACHLCII = 1666;
		EAKECFAPPKD LADGCOOMNKA = 272;
		ELDAFCNMFBF CGKFOMNCNAK = 1555;
		RogueComposeMiracleSelectInfo compose_miracle_select_info = 1354;
		RogueHexAvatarSelectInfo hex_avatar_select_info = 1519;
		RogueBonusSelectInfo bonus_select_info = 240;
		RogueFormulaSelectInfo rogue_formula_select_info = 775;
		FHMAIANENPO JBKPIKAJPEB = 1077;
		RogueReforgeFormulaSelectInfo reforge_formula_select_info = 1919;
		RogueMagicUnitSelectInfo magic_unit_select_info = 381;
		RogueMagicScepterSelectInfo scepter_select_info = 923;
		JKHKEBMOBEJ HFJECHFANNF = 450;
		RogueMagicUnitSelectInfo LDJOMIOJEPF = 1067;
		RogueMagicUnitSelectInfo LMNONCMBIOO = 1633;
		RogueMagicUnitSelectInfo CNLMCOBNCAI = 59;
		KKAGNMEMKOG FHOKDLLICJL = 382;
		KKAGNMEMKOG PHDEMDBGOIB = 28;
		KKAGNMEMKOG KLJJIBPJGFF = 1672;
		PIGFBKOJNHG DLFALFGFDHE = 471;
		CGGBPJICHGF NPCDBPNDGOP = 1127;
	}
}
message HandleRogueCommonPendingActionCsReq {
	oneof info_case {
		RogueBuffSelectResult buff_select_result = 1465;
		PBMAKLNJEKO KBNEGOLPLFC = 1508;
		OKEFIDDNLKG GDKGIBEKGPF = 1876;
		RogueBuffRerollResult buff_reroll_select_result = 229;
		RogueBuffReforgeSelectResult buff_reforge_select_result = 1213;
		RogueMiracleSelectResult miracle_select_result = 1361;
		NALELIGHDAA GNEBJEPPKEJ = 1884;
		PKODMMPHIBC KJLAFILAPJF = 253;
		NHCKHPLKLIO FLFPCPHLAGO = 1158;
		LHJPIKEKPGH EPOAKMFMFLM = 1154;
		IMCBIIGOKPM FKPFOKHBPKK = 1778;
		RogueHexAvatarSelectResult hex_avatar_select_result = 389;
		RogueBonusSelectResult bonus_select_result = 497;
		RogueTournFormulaResult rogue_tourn_formula_result = 751;
		KHGCDEIMLHN LNPLOEOFCCJ = 1482;
		ONOOFHDEIDD IEABOHKEAPA = 1358;
		RogueReforgeFormulaSelectResult reforge_miracle_select_result = 1975;
		RogueMagicUnitSelectResult magic_unit_select_result = 74;
		RogueMagicScepterSelectResult scepter_select_result = 1147;
		JCDLJBPHOMD LDAGLIMNMAN = 1418;
		RogueMagicUnitSelectResult AFLHEIKJNBN = 489;
		RogueMagicUnitSelectResult PHKBFLNPEFI = 97;
		RogueMagicUnitSelectResult GOCMNDKFOAB = 1602;
		IIPEGHDKHGD CHONECOLIHA = 1491;
		IIPEGHDKHGD MOAOGACBOIJ = 860;
		IIPEGHDKHGD KILHFPPBBFM = 918;
		HAOJLHGNFPM BLHDFAJHCJA = 466;
		HAOJLHGNFPM LPJBAIMJAIK = 1130;
		LGCMEEPJMHA ECEGPEJCPBL = 1580;
		AJNAJINFJIC FKPDKFEMKEC = 44024;
		MNMLOAPBHNF LLNMCJCFBMJ = 173963;
	}
	uint32 queue_location = 13;
}
message HandleRogueCommonPendingActionScRsp {
	oneof info_case {
		RogueBuffSelectCallback buff_select_callback = 921;
		FKDBIHNPCHE KKIANGABFNJ = 1384;
		DLHPDALGDEH CLDBPLNIAEN = 799;
		RogueBuffRerollCallback buff_reroll_callback = 892;
		RogueBuffReforgeSelectCallback buff_reforge_select_callback = 94;
		RogueMiracleSelectCallback miracle_select_callback = 1339;
		PAOCONGELJK DMCEPJKOOGC = 1105;
		BLFJBKBHJIL FDPPGKDDPGC = 36;
		OMJFMBJMFMC MAPBDBMFIMD = 595;
		MOIKNHHCABH OIHJEKIMPPD = 283;
		FHIKPLAIOEI OKPCJLPMBAD = 1371;
		RogueHexAvatarSelectCallback hex_avatar_select_callback = 765;
		RogueBonusSelectCallback bonus_select_callback = 1632;
		RogueTournFormulaCallback rogue_tourn_formula_callback = 1263;
		EHEFOMMBNAF CPOPCHNDDFM = 30;
		HKJEGONGJNP NDJBGFHEICI = 1125;
		RogueReforgeFormulaSelectCallback reforge_miracle_select_callback = 639;
		RogueMagicUnitSelectCallback magic_unit_select_callback = 733;
		RogueMagicScepterSelectCallback scepter_select_callback = 782;
		LGPGCJDOIBK LBOJLIIABAP = 1363;
		ABPNCPOIJCI ILHBHPHDEDL = 1396;
		IMNNNJGGPAG DICGEADECPK = 1336;
		IMDHPDBHEBC GABICMFAKPD = 115;
		IKCNDLJLAPP DKMMOIMOJDM = 991;
		BLJOGGMJBMD HCFOPGMLENO = 1470;
		BLJOGGMJBMD GDMGOELOMFK = 545;
	}
	uint32 retcode = 13;
	uint32 queue_position = 12;
	uint32 queue_location = 4;
}
message RogueHandbookMazeBuff {
	uint32 maze_buff_id = 15;
}
message GIADLHEEPHD {
	uint32 FHHGDPCECEE = 9;
	bool has_taken_reward = 13;
}
message LOGNKEKHBAI {
	uint32 AJBEPAHCGIK = 1;
	bool has_taken_reward = 6;
}
message KNIJHGNJIJM {
	uint32 JGMIPMDPPIJ = 11;
	uint32 aeon_id = 8;
	uint32 level = 7;
	uint32 exp = 15;
	repeated uint32 DPMIBDHKDAE = 13;
	repeated uint32 DDGCFJDBOOH = 2;
}
message RogueMagicScepterInfo {
	RogueMagicScepter magic_item = 11;
}
message RogueMagicUnitInfo {
	uint32 magic_unit_id = 9;
	uint32 magic_unit_level = 3;
}
message RogueHandbook {
	repeated LOGNKEKHBAI BJCMPHLPKNF = 12;
	repeated KNIJHGNJIJM BELOFMFHFDK = 13;
	repeated GIADLHEEPHD miracle_list = 8;
	repeated RogueHandbookMazeBuff buff_list = 15;
}
message GetRogueHandbookDataCsReq {
}
message GetRogueHandbookDataScRsp {
	RogueHandbook HandbookInfo = 12;
	uint32 Retcode = 8;
}
message SyncRogueHandbookDataUpdateScNotify {
	repeated RogueHandbookMazeBuff ABIBOBFDKLD = 15;
	repeated RogueMagicUnitInfo MMHCHHCOFPB = 1;
	repeated LOGNKEKHBAI HAEBAAMBNBB = 4;
	repeated RogueMagicScepterInfo BJKPKFBFDFF = 8;
	repeated GIADLHEEPHD IDDDCJONPFN = 7;
}
message TakeRogueMiracleHandbookRewardCsReq {
	repeated uint32 handbook_buff_list = 15;
}
message TakeRogueMiracleHandbookRewardScRsp {
	repeated uint32 FEIFJADCDFL = 14;
	ItemList reward = 5;
	uint32 retcode = 10;
}
message TakeRogueEventHandbookRewardCsReq {
	repeated uint32 handbook_buff_list = 3;
}
message TakeRogueEventHandbookRewardScRsp {
	ItemList reward = 9;
	uint32 retcode = 4;
	repeated uint32 DPJHILHGOKE = 14;
}
message RogueGameItemValue {
	map<uint32, uint32> virtual_item = 15;
}
message ChessRogueGameAeonInfo {
	int32 ICJABPGMACJ = 15;
	EENDHPKPFLP BOHDMINEJNO = 8;
	uint32 game_aeon_id = 10;
}
message RogueDifficultyLevelInfo {
	repeated uint32 difficulty_id_list = 5;
}
message RogueTournLineupInfo {
	ItemCostData rogue_revive_cost = 15;
	repeated uint32 avatar_id_list = 4;
}
message RogueGameInfo {
	oneof rouge_case {
		ChessRogueBuffInfo rogue_buff_info = 15;
		ChessRogueMiracleInfo game_miracle_info = 11;
		RogueGameItemValue FFFCCEJIFDK = 5;
		ChessRogueGameAeonInfo rogue_aeon_info = 3;
		RogueDifficultyLevelInfo rogue_difficulty_info = 7;
		RogueTournFormulaInfo CKAANMDDKCJ = 10;
		KeywordUnlockValue NBDACDNBJIK = 1;
		RogueTournLineupInfo rogue_lineup_info = 8;
	}
}
message PMJGKHPKHCM {
	repeated RogueGameInfo rogue_current_game_info = 6;
	uint32 AGEBAMBKKBC = 10;
	uint32 rogue_sub_mode = 5;
	uint32 sub_area_id = 4;
	uint32 rogue_magic_battle_const = 15;
}
message RogueUnlockProgress {
	uint32 UnlockId = 5;
	uint32 Progress = 6;
	bool Finish = 3;
}
message RogueTalentInfo {
	repeated RogueUnlockProgress rogue_unlock_progress_list = 13;
	RogueTalentStatus status = 9;
	uint32 talent_id = 3;
}
message RogueTalentInfoList {
	repeated RogueTalentInfo talent_info = 5;
}
message RogueCommonVirtualItemInfo {
	uint32 virtual_item_num = 8;
	uint32 virtual_item_id = 1;
}
message SyncRogueCommonVirtualItemInfoScNotify {
	repeated RogueCommonVirtualItemInfo common_item_info = 2;
}
message MAPOMOILGEH {
	uint32 MBKFININNEK = 14;
	uint32 GEDJNIAEFHO = 3;
	uint32 BDCFFOBGKOA = 15;
}
message PLGDCFIPEAA {
	repeated RogueUnlockFunctionType JPGCDJDGDBI = 8;
}
message ILAEKJCNEMF {
	repeated uint32 AFEDJKMFODP = 15;
}
message LGJMDNNMPPE {
	ILAEKJCNEMF NOLHGNHAEMA = 8;
	PLGDCFIPEAA KJKBKEGIGHK = 5;
	MAPOMOILGEH ONGPJOGKKJN = 13;
}
message CommonRogueQueryCsReq {
}
message CommonRogueQueryScRsp {
	uint32 FHHBJLHAJFJ = 6;
	LGJMDNNMPPE rogue_get_info = 9;
	uint32 retcode = 4;
}
message CommonRogueUpdateScNotify {
	oneof update_case {
		MAPOMOILGEH ONGPJOGKKJN = 9;
		PLGDCFIPEAA KJKBKEGIGHK = 2;
		ILAEKJCNEMF NOLHGNHAEMA = 13;
	}
}
message RogueCommonDialogueBasicInfo {
	uint32 talk_dialogue_id = 3;
	uint32 aeon_talk_id = 14;
}
message GNJAPOMLLHE {
	uint32 BGLEHMKMAPG = 15;
}
message CNHHPDHBMDC {
	uint32 BGLEHMKMAPG = 8;
}
message JIEAAFJENLK {
	uint32 formula_id = 2;
}
message HPJLAFHHGJG {
	uint32 BGLEHMKMAPG = 13;
}
message AFCCAOACNAK {
	uint32 dialogue_id = 15;
}
message RogueCommonDialogueInfo {
	oneof dialogue_case {
		RogueCommonDialogueBasicInfo dialogue_basic_info = 12;
		GNJAPOMLLHE ADMAHLAALNH = 5;
		CNHHPDHBMDC ODDGCBPOPLF = 13;
		JIEAAFJENLK GMAKHONAEPH = 11;
		HPJLAFHHGJG CACGEKAANKL = 6;
		AFCCAOACNAK AGGBLHGKPFJ = 3;
	}
}
message RogueCommonDialogueOptionDisplayInfo {
	int32 display_int_value = 9;
	float display_float_value = 2;
}
message RogueCommonDialogueOptionBattleResultInfo {
	uint32 battle_event_id = 9;
}
message NEBPGHDDEPC {
	int32 JEFIOIHHCLG = 9;
}
message RogueCommonDialogueOptionResultInfo {
	oneof result_case {
		RogueCommonDialogueOptionBattleResultInfo battle_result_info = 14;
		NEBPGHDDEPC HMLCEHIKFFK = 7;
	}
}
message RogueCommonDialogueOptionInfo {
	uint32 arg_id = 5;
	uint32 option_id = 2;
	bool confirm = 12;
	repeated RogueCommonDialogueOptionResultInfo option_result_info = 8;
	RogueCommonDialogueOptionDisplayInfo display_value = 14;
	bool is_valid = 6;
}
message RogueCommonDialogueDataInfo {
	uint32 event_unique_id = 13;
	repeated RogueCommonDialogueOptionInfo option_list = 1;
	RogueCommonDialogueInfo dialogue_info = 9;
}
message GetRogueCommonDialogueDataCsReq {
}
message GetRogueCommonDialogueDataScRsp {
	uint32 retcode = 6;
	repeated RogueCommonDialogueDataInfo dialogue_data_list = 14;
}
message SelectRogueCommonDialogueOptionCsReq {
	uint32 option_id = 8;
	uint32 event_unique_id = 7;
}
message SelectRogueCommonDialogueOptionScRsp {
	uint32 retcode = 7;
	RogueCommonDialogueDataInfo dialogue_data = 8;
	repeated uint32 effect_event_id_list = 9;
	bool event_has_effect = 1;
	uint32 event_unique_id = 6;
	uint32 option_id = 12;
}
message FinishRogueCommonDialogueCsReq {
	uint32 event_unique_id = 6;
}
message FinishRogueCommonDialogueScRsp {
	uint32 retcode = 10;
	uint32 event_unique_id = 9;
}
message SyncRogueCommonDialogueDataScNotify {
	repeated RogueCommonDialogueDataInfo dialogue_data_list = 2;
}
message SyncRogueCommonDialogueOptionFinishScNotify {
	RogueCommonDialogueDataInfo dialogue_data = 5;
	RogueCommonDialogueOptionInfo result_option_info = 7;
	uint32 option_id = 1;
	uint32 event_unique_id = 4;
}
message CommonRogueComponentUpdateScNotify {
	RogueGameInfo DLKCOJGHHMI = 7;
	uint32 rogue_magic_battle_const = 13;
	uint32 rogue_sub_mode = 9;
	uint32 AGEBAMBKKBC = 4;
}
message RogueTournCurAreaInfo {
	string MDLNDGIJNML = 9;
	uint32 rogue_magic_battle_const = 3;
	RogueCommonPendingAction pending_action = 5;
	uint32 sub_area_id = 6;
	uint32 AGEBAMBKKBC = 8;
	uint32 rogue_sub_mode = 12;
}
message RogueWorkbenchGetInfoCsReq {
	uint32 prop_entity_id = 7;
}
message RogueWorkbenchGetInfoScRsp {
	uint32 retcode = 9;
	map<uint32, WorkbenchFuncInfo> func_info_map = 7;
}
message WorkbenchFuncInfo {
	oneof func_case {
		WorkbenchReforgeBuffFuncInfo reforge_buff_func = 3;
		WorkbenchReforgeFormulaFuncInfo reforge_formula_func = 9;
		WorkbenchEnhanceBuffFuncInfo enhance_buff_func = 10;
		WorkbenchComposeMiracleFunc compose_miracle_func = 2;
		WorkbenchReforgeHexAvatarFunc reforge_hex_avatar_func = 5;
		KHCBGNLNPEL magic_item = 4;
		KMHIBNGAFEO game_magic_unit = 12;
		DMKPFGEBILH CEAJNLIOFHF = 14;
		LFGGPNGKBCH PGPAAPOPDOC = 13;
		DHMFCIDJBFD PMKEHGBPCNG = 8;
	}
}
message WorkbenchReforgeBuffFuncInfo {
	uint32 uint_reforge_num_value = 5;
	uint32 free_reforge_num = 4;
	int32 int_reforge_num_value = 2;
	ItemCostData cost_data = 9;
	bool can_free_reforge = 11;
}
message WorkbenchReforgeFormulaFuncInfo {
	ItemCostData cost_data = 7;
	uint32 free_reforge_num = 13;
	uint32 uint_reforge_num_value = 2;
	bool can_free_reforge = 5;
	int32 int_reforge_num_value = 10;
}
message WorkbenchEnhanceBuffFuncInfo {
	uint32 max_num = 1;
	map<uint32, uint32> buff_enhance_cost_map = 15;
	uint32 cur_num = 6;
}
message WorkbenchComposeMiracleFunc {
	uint32 free_reforge_num = 15;
	ItemCostData cost_data = 11;
	int32 int_reforge_num_value = 1;
	map<uint32, bool> allow_to_compose_map = 3;
}
message WorkbenchReforgeHexAvatarFunc {
	int32 int_reforge_num_value = 12;
	ItemCostData cost_data = 2;
	uint32 free_reforge_num = 14;
}
message COAHGFLONAN {
	ItemCostData cost_data = 2;
	RogueMagicScepter magic_item = 6;
	bool NGKJPCEHMBA = 5;
	ItemCostData HBPBLGLLIEN = 4;
}
message KHCBGNLNPEL {
	repeated COAHGFLONAN rogue_magic_scepter_info_list = 14;
}
message AOGIIMKCJDJ {
	ItemCostData HBPBLGLLIEN = 14;
	ItemCostData cost_data = 6;
	uint32 magic_unit_level = 11;
	uint32 magic_unit_id = 12;
	bool NGKJPCEHMBA = 5;
}
message KMHIBNGAFEO {
	repeated AOGIIMKCJDJ rogue_magic_unit_info_list = 14;
}
message DMKPFGEBILH {
	int32 int_reforge_num_value = 14;
	ItemCostData cost_data = 10;
	uint32 free_reforge_num = 13;
}
message LFGGPNGKBCH {
	uint32 free_reforge_num = 15;
	map<uint32, ItemCostData> IAKHMMELMFD = 11;
	int32 int_reforge_num_value = 8;
	ItemCostData FAIDIBODMCH = 5;
}
message KIFILCJOLCH {
	ItemCostData cost_data = 7;
	uint32 scepter_id = 6;
}
message DHMFCIDJBFD {
	repeated KIFILCJOLCH magic_scepter_info_list = 7;
}
message RogueWorkbenchHandleFuncCsReq {
	uint32 func_id = 7;
	uint32 prop_entity_id = 3;
	RogueWorkbenchContentInfo workbench_content = 10;
}
message RogueWorkbenchHandleFuncScRsp {
	WorkbenchFuncInfo target_func_info = 10;
	uint32 func_id = 4;
	uint32 retcode = 11;
}
message RogueWorkbenchContentInfo {
	oneof content_case {
		WorkbenchReforgeBuffTargetInfo reforge_buff_func = 9;
		WorkbenchReforgeFormulaTargetInfo reforge_formula_func = 7;
		WorkbenchEnhanceBuffTargetInfo enhance_buff_func = 4;
		WorkbenchComposeMiracleTargetInfo compose_miracle_func = 11;
		WorkbenchReforgeHexAvatarTargetInfo reforge_hex_avatar_func = 10;
		JDOOIDBKCIM magic_item = 2;
		GJBBLCIPBHD game_magic_unit = 12;
		LEHGLCELJMF CEAJNLIOFHF = 8;
		FHJGLOPMFNC PGPAAPOPDOC = 3;
		JBNCDFFPDOP PMKEHGBPCNG = 6;
	}
}
message WorkbenchReforgeBuffTargetInfo {
	uint32 target_reforge_buff_id = 5;
}
message WorkbenchReforgeFormulaTargetInfo {
	uint32 target_reforge_formula_id = 8;
}
message WorkbenchEnhanceBuffTargetInfo {
	uint32 target_buff_id = 11;
}
message WorkbenchComposeMiracleTargetInfo {
	repeated uint32 target_compose_miracle_id_list = 4;
}
message WorkbenchReforgeHexAvatarTargetInfo {
	uint32 target_reforge_hex_id = 10;
}
message JDOOIDBKCIM {
	uint32 FPLJOAACDGD = 2;
}
message GJBBLCIPBHD {
	repeated uint32 CLOPKOBKHMA = 13;
}
message LEHGLCELJMF {
	repeated uint32 DNKCCIBPFGK = 9;
}
message FHJGLOPMFNC {
	uint32 magic_unit_id = 5;
}
message JBNCDFFPDOP {
	uint32 scepter_id = 6;
}
message FKBFOOEFPAE {
	RogueCollectionStatus status = 1;
	uint32 INFBHPGDLND = 15;
}
message AJAKDCDDAMO {
	uint32 INFBHPGDLND = 15;
	RogueBoothStatus status = 11;
	uint32 EONLMDCBNME = 14;
}
message GetRogueCollectionCsReq {
}
message GetRogueCollectionScRsp {
	repeated FKBFOOEFPAE PCPEDFLNBGA = 13;
	repeated AJAKDCDDAMO PAHPDBIACHA = 6;
	uint32 retcode = 10;
}
message SetRogueCollectionCsReq {
	repeated uint32 FPIPMKCAGPD = 14;
	repeated RogueCollectionExhibitionOperateType LGHPHFPPJEN = 9;
	repeated uint32 OPKMCIFFCCH = 2;
}
message SetRogueCollectionScRsp {
	uint32 retcode = 4;
	repeated FKBFOOEFPAE PCPEDFLNBGA = 13;
	repeated AJAKDCDDAMO PAHPDBIACHA = 6;
}
message GBPFLAGFAIJ {
	RogueExhibitionStatus status = 5;
	uint32 KBDFBGINNBJ = 12;
}
message DMODINLGCCB {
	uint32 KBDFBGINNBJ = 14;
	uint32 EONLMDCBNME = 6;
	RogueBoothStatus status = 7;
}
message GetRogueExhibitionCsReq {
}
message GetRogueExhibitionScRsp {
	uint32 retcode = 12;
	repeated DMODINLGCCB PJPJOKKFNIM = 10;
	repeated GBPFLAGFAIJ MKCEFANCAIG = 2;
}
message SetRogueExhibitionCsReq {
	repeated uint32 HEEPOEOLILO = 11;
	repeated RogueCollectionExhibitionOperateType ANEKPINLKFJ = 14;
	repeated uint32 LDIFBJDGFFE = 6;
}
message SetRogueExhibitionScRsp {
	repeated GBPFLAGFAIJ MKCEFANCAIG = 12;
	repeated DMODINLGCCB PJPJOKKFNIM = 2;
	uint32 retcode = 6;
}
message EHKEGMCGCMH {
	uint32 miracle_id = 11;
}
message PNDNJBBDHDP {
	uint32 maze_id = 9;
	uint32 level = 11;
}
message RogueGambleMazeInfo {
	oneof OONIJKKDLLP {
		EHKEGMCGCMH DJNABIOEENF = 4;
		PNDNJBBDHDP IMCAJAOGCLG = 8;
	}
	uint32 maze_id = 14;
	bool KDGBJGOPEHI = 1;
}
message RogueGambleMazeGroupInfo {
	bool ENBIJBFBNEC = 8;
	uint32 group_id = 6;
	repeated RogueGambleMazeInfo maze_list = 4;
}
message RogueGambleInfo {
	uint32 DDJDDBKNPFF = 7;
	bool can_play = 3;
	uint32 cur_times = 8;
	uint32 HFBKBHJIEGD = 14;
	uint32 max_game_times = 6;
	repeated RogueGambleMazeGroupInfo maze_group_list = 10;
	ItemCostData cur_cost_item = 12;
}
message RogueGetGambleInfoCsReq {
	uint32 prop_entity_id = 10;
}
message RogueGetGambleInfoScRsp {
	RogueGambleInfo gamble_info = 10;
	uint32 retcode = 3;
}
message RogueDoGambleCsReq {
	uint32 prop_entity_id = 11;
}
message RogueDoGambleScRsp {
	uint32 retcode = 10;
	RogueGambleInfo gamble_info = 11;
	uint32 JPKLMPPOGDH = 9;
	uint32 CFBGLFOJODA = 6;
}
message RogueDebugReplaySaveScNotify {
	string NEPGEEJCLAH = 14;
	string KFAMACKFHPM = 5;
	string JHJGFDMKIHG = 9;
	string JDEDCKKACGO = 3;
	string DFPFALBJHJH = 13;
	uint32 uid = 15;
	string IJPPKNKNLNL = 6;
}
message JNFELCKIOCM {
	repeated uint32 base_avatar_id_list = 15;
	uint32 map_id = 6;
	uint32 KJGIMHFKGBN = 5;
	repeated uint32 trial_avatar_id_list = 2;
	uint32 FFKPEGNBHOD = 10;
	ChessRogueBuff chess_rogue_buff_info = 12;
	RogueStatus status = 4;
	ChessRogueMiracle chess_rogue_miracle_info = 14;
	uint32 GMPIIAEGGEK = 8;
}
message RogueEndlessLayerInfo {
	uint32 AEIEOJGCMMO = 15;
	uint32 HDJCJBBKNAF = 7;
	uint32 battle_id = 4;
	uint32 JPKJKIMNIGG = 5;
	uint32 BPEKCEJPOFE = 8;
	uint32 KKPKALJMAMF = 14;
	uint32 HDLLMDNLOKP = 11;
	bool is_rotate = 3;
}
message RogueEndlessAreaData {
	RogueEndlessLayerInfo BOPAANGKOGH = 2;
	uint32 area_id = 7;
	uint32 panel_id = 8;
	JNFELCKIOCM AELOIPGFODB = 13;
}
message GetRogueEndlessActivityDataCsReq {
}
message GetRogueEndlessActivityDataScRsp {
	uint32 ANAMEOBFKGN = 15;
	uint32 JCHCHLMDPEN = 2;
	repeated uint32 EAHBIKFALLF = 13;
	repeated RogueEndlessAreaData data = 8;
	uint32 retcode = 5;
}
message RogueEndlessAvatar {
	uint32 avatar_id = 13;
	AvatarType avatar_type = 10;
}
message EnterRogueEndlessActivityStageCsReq {
	uint32 MGIGDCMLEOG = 15;
	repeated RogueEndlessAvatar avatar_list = 4;
}
message EnterRogueEndlessActivityStageScRsp {
	uint32 retcode = 5;
	SceneBattleInfo battle_info = 12;
	RogueEndlessLayerInfo BOPAANGKOGH = 11;
}
message RogueEndlessActivityBattleEndScNotify {
	RogueEndlessLayerInfo BOPAANGKOGH = 10;
}
message TakeRogueEndlessActivityPointRewardCsReq {
	uint32 level = 10;
	bool MDHJKKBNMCF = 9;
}
message TakeRogueEndlessActivityPointRewardScRsp {
	uint32 retcode = 14;
	uint32 JCHCHLMDPEN = 8;
	uint32 level = 4;
	bool MDHJKKBNMCF = 5;
	repeated uint32 EAHBIKFALLF = 15;
	ItemList reward = 9;
}
message TakeRogueEndlessActivityAllBonusRewardCsReq {
}
message TakeRogueEndlessActivityAllBonusRewardScRsp {
	repeated uint32 EAHBIKFALLF = 12;
	uint32 retcode = 15;
	uint32 JCHCHLMDPEN = 3;
	ItemList reward = 1;
}
message RogueMagicCurSceneInfo {
	SceneInfo scene = 7;
	LineupInfo lineup = 4;
	RogueMapRotateInfo rotate_info = 5;
}
message RogueMagicLayerInfo {
	uint32 cur_room_index = 9;
	uint32 level_index = 8;
	repeated RogueMagicRoomInfo tourn_room_list = 4;
	uint32 layer_id = 1;
	RogueMagicLayerStatus status = 12;
}
message RogueMagicRoomInfo {
	uint32 room_id = 13;
	uint32 EIPNNEJNNKJ = 14;
	RogueMagicRoomStatus status = 3;
	uint32 room_index = 11;
}
message RogueMagicGameLevelInfo {
	RogueMagicLevelStatus status = 4;
	uint32 cur_level_index = 6;
	uint32 ACGBELAIGBO = 3;
	RogueMagicSettleReason reason = 8;
	repeated RogueMagicLayerInfo level_info_list = 11;
	uint32 extra_round_limit = 7;
}
message RogueMagicGameItemInfo {
	repeated RogueMagicGameUnitInfo rogue_magic_unit_info_list = 13;
	repeated RogueMagicGameScepterInfo magic_scepter_info_list = 7;
	bool JFCNAJMIHCI = 10;
	uint32 game_style_type = 8;
}
message RogueMagicGameDifficultyInfo {
	repeated uint32 difficulty_id_list = 3;
}
message KLOHNFGBNPH {
	uint32 LAEEJIIKMPI = 13;
}
message RogueMagicStartCsReq {
	uint32 select_style_type = 9;
	uint32 area_id = 4;
	repeated uint32 base_avatar_id_list = 15;
	repeated uint32 start_difficulty_id_list = 11;
}
message RogueMagicCurInfo {
	ChessRogueMiracleInfo miracle_info = 14;
	KLOHNFGBNPH CACGEKAANKL = 8;
	RogueMagicGameDifficultyInfo game_difficulty_info = 9;
	RogueTournLineupInfo lineup = 12;
	RogueMagicGameLevelInfo level = 3;
	RogueTournCurAreaInfo basic_info = 15;
	RogueMagicGameItemInfo magic_item = 11;
	RogueGameItemValue item_value = 5;
}
message RogueMagicStartScRsp {
	uint32 retcode = 10;
	RogueMagicCurSceneInfo rogue_tourn_cur_scene_info = 5;
	RogueMagicCurInfo rogue_tourn_cur_info = 1;
}
message RogueMagicEnterCsReq {
}
message RogueMagicEnterScRsp {
	RogueMagicCurInfo rogue_tourn_cur_info = 2;
	RogueMagicCurSceneInfo rogue_tourn_cur_scene_info = 13;
	uint32 retcode = 7;
}
message RogueMagicLeaveCsReq {
}
message RogueMagicLeaveScRsp {
	uint32 retcode = 14;
	RogueMagicCurSceneInfo rogue_tourn_cur_scene_info = 11;
}
message RogueMagicEnterRoomCsReq {
	uint32 next_room_type = 6;
	uint32 cur_room_index = 11;
}
message RogueMagicEnterRoomScRsp {
	uint32 retcode = 7;
	RogueMagicCurSceneInfo rogue_tourn_cur_scene_info = 10;
}
message RogueMagicEnterLayerCsReq {
	uint32 cur_level_index = 14;
	uint32 next_room_type = 5;
}
message RogueMagicEnterLayerScRsp {
	RogueMagicCurSceneInfo rogue_tourn_cur_scene_info = 6;
	uint32 retcode = 9;
}
message RogueMagicLevelInfoUpdateScNotify {
	repeated RogueMagicLayerInfo level_info_list = 9;
	uint32 ACGBELAIGBO = 7;
	RogueMagicSettleReason reason = 10;
	RogueMagicLevelStatus status = 12;
	uint32 cur_level_index = 6;
	uint32 extra_round_limit = 3;
}
message RogueMagicAreaUpdateScNotify {
	repeated RogueMagicAreaInfo rogue_tourn_area_info = 14;
}
message CACLANLOOLK {
	bool FBJHGPDKBGM = 13;
	uint32 EFKEGDOAJBH = 3;
}
message FJJDKDNDFDJ {
	bool FBJHGPDKBGM = 5;
	uint32 KKNGHGBHCGG = 2;
}
message RogueMagicFinishInfo {
	CACLANLOOLK GCGLNKFDKKN = 6;
	RogueMagicCurInfo rogue_tourn_cur_info = 14;
	LineupInfo rogue_lineup_info = 9;
	FJJDKDNDFDJ BJLEMFMCODD = 11;
}
message HCJGPMDGBJO {
	repeated uint32 MNKCJFELCNG = 3;
	repeated RogueMagicGameUnit EPCKCOOKCLJ = 15;
	repeated uint32 BLBFDCGCEDA = 5;
	repeated RogueMagicScepter KLMGAEBEAGK = 11;
}
message RogueMagicBattleFailSettleInfoScNotify {
	RogueMagicCurSceneInfo rogue_tourn_cur_scene_info = 4;
	RogueMagicFinishInfo tourn_finish_info = 3;
}
message RogueMagicSettleCsReq {
}
message RogueMagicSettleScRsp {
	RogueMagicFinishInfo tourn_finish_info = 13;
	HCJGPMDGBJO MGCFOGLKMCH = 10;
	RogueMagicCurSceneInfo rogue_tourn_cur_scene_info = 3;
	ItemList GFONFDBFBNA = 2;
	uint32 retcode = 5;
}
message RogueMagicReviveCostUpdateScNotify {
	ItemCostData rogue_revive_cost = 1;
}
message RogueMagicReviveAvatarCsReq {
	uint32 interacted_prop_entity_id = 10;
	repeated uint32 base_avatar_id_list = 4;
}
message RogueMagicReviveAvatarScRsp {
	uint32 retcode = 12;
	ItemCostData rogue_revive_cost = 3;
}
message RogueMagicQueryCsReq {
}
message OLFGBAMEFJI {
	uint32 HMKGBMIDGOP = 7;
	uint32 extra_round_limit = 9;
	uint32 game_style_type = 10;
	uint32 NJIEMPGEEOG = 12;
	repeated uint32 avatar_id_list = 1672;
	repeated RogueMagicGameScepterInfo magic_scepter_info_list = 709;
	uint32 OFBIAHGOPCM = 1;
	uint32 NNNKJKCLBLO = 4;
	uint32 FONNGHLGJFA = 13;
	repeated RogueMagicGameUnitInfo rogue_magic_unit_info_list = 477;
	repeated uint32 JLHFOJODOKG = 1133;
	uint32 BLFDFMCFFIM = 8;
	uint32 IPODNBLJPOL = 2;
}
message KOIICMIEAEF {
	repeated uint32 DPPLCDDHBGE = 930;
}
message RogueMagicAreaInfo {
	repeated uint32 unlocked_tourn_difficulty_list = 6;
	KOIICMIEAEF CGAIJCCLKBH = 1;
	bool completed = 13;
	bool is_unlocked = 14;
	uint32 IFPOILOPFAG = 11;
	uint32 area_id = 2;
	OLFGBAMEFJI record_info = 7;
	bool is_taken_reward = 3;
}
message RogueMagicDifficultyInfo {
	bool is_unlocked = 13;
	uint32 difficulty_id = 9;
}
message RogueMagicStoryInfo {
	repeated uint32 finished_magic_story_list = 5;
}
message RogueMagicGetInfo {
	repeated RogueMagicUnitInfo rogue_magic_unit_info_list = 15;
	repeated RogueMagicDifficultyInfo rogue_tourn_difficulty_info = 8;
	repeated uint32 KGLBNDEAPHF = 4;
	repeated RogueMagicScepterInfo rogue_magic_scepter_info_list = 10;
	RogueMagicStoryInfo story_info = 5;
	repeated RogueMagicAreaInfo rogue_tourn_area_info = 6;
	RogueMagicTalentInfo rogue_magic_talent_info = 14;
}
message RogueMagicQueryScRsp {
	RogueMagicGetInfo rogue_get_info = 11;
	RogueMagicCurInfo rogue_tourn_cur_info = 13;
	uint32 retcode = 14;
}
message RogueMagicScepterDressInUnitCsReq {
	uint32 scepter_id = 1;
	uint32 dice_slot_id = 3;
	uint32 dress_magic_unit_unique_id = 15;
}
message RogueMagicScepterDressInUnitScRsp {
	uint32 retcode = 11;
}
message RogueMagicAutoDressInUnitCsReq {
	repeated uint32 magic_unit_id_list = 4;
}
message RogueMagicAutoDressInUnitScRsp {
	uint32 retcode = 15;
}
message RogueMagicSetAutoDressInMagicUnitCsReq {
	bool enable_auto_dress = 15;
}
message RogueMagicSetAutoDressInMagicUnitScRsp {
	bool enable_auto_dress = 12;
	uint32 retcode = 8;
}
message RogueMagicAutoDressInMagicUnitChangeScNotify {
	bool enable_auto_dress = 6;
}
message RogueMagicScepterTakeOffUnitCsReq {
	repeated uint32 magic_unit_id_list = 3;
	uint32 scepter_id = 13;
}
message RogueMagicScepterTakeOffUnitScRsp {
	uint32 retcode = 13;
}
message RogueMagicUnitComposeCsReq {
	repeated uint32 magic_unit_id_list = 11;
}
message RogueMagicUnitComposeScRsp {
	uint32 retcode = 7;
}
message RogueMagicUnitReforgeCsReq {
	repeated uint32 magic_unit_id_list = 9;
}
message RogueMagicUnitReforgeScRsp {
	uint32 retcode = 15;
}
message RogueMagicTalentInfo {
	RogueTalentInfoList talent_info_list = 13;
	uint32 CMADMLIALJL = 11;
}
message RogueMagicGetTalentInfoCsReq {
}
message RogueMagicGetTalentInfoScRsp {
	RogueMagicTalentInfo rogue_magic_talent_info = 8;
	uint32 retcode = 14;
}
message RogueMagicEnableTalentCsReq {
	uint32 talent_id = 13;
}
message RogueMagicEnableTalentScRsp {
	uint32 retcode = 4;
	RogueMagicTalentInfo rogue_magic_talent_info = 7;
}
message RogueMagicGetMiscRealTimeDataCsReq {
}
message RogueMagicGetMiscRealTimeDataScRsp {
	CACLANLOOLK GCGLNKFDKKN = 1;
	uint32 retcode = 2;
	FJJDKDNDFDJ BJLEMFMCODD = 7;
}
message RogueMagicStoryInfoUpdateScNotify {
	uint32 MNBCCBABCHA = 9;
}
message EDDHMIGFDJI {
	uint32 MBGKCKLDHIB = 12;
	bool confirm = 5;
	uint32 select_cell_id = 14;
}
message FOIACPFKDHK {
	uint32 MBGKCKLDHIB = 9;
	bool confirm = 3;
	uint32 select_cell_id = 14;
	repeated uint32 ONNJGDJNFLG = 7;
}
message POGCNJMNGPI {
	uint32 select_cell_id = 11;
	repeated uint32 ONNJGDJNFLG = 4;
	bool confirm = 8;
}
message AINBLBBFDBJ {
	uint32 NIJAGOAJPEM = 8;
	uint32 select_cell_id = 7;
	bool confirm = 3;
	repeated uint32 NHGOJDODGMA = 13;
}
message AJEEIAKEMIP {
	uint32 CEHFIILMJKM = 4;
}
message KHMJBJLOBPG {
	uint32 CPOCNGEKIIB = 10;
}
message GFGDODHMBPK {
	uint32 KOKPCEAMABC = 11;
}
message NPDIPKHDCNF {
	uint32 select_cell_id = 10;
	bool confirm = 2;
	repeated uint32 NHGOJDODGMA = 15;
	uint32 block_type = 8;
}
message EGALAGNAEFB {
	uint32 OLGLJHECDOF = 15;
	uint32 GCLEBGDDIIP = 6;
	uint32 GPDEIIIOIPN = 5;
}
message NDGLJKNKEFK {
	uint32 maze_buff_id = 2;
}
message EGFDAJDIHNJ {
	uint32 item_id = 4;
	uint32 item_count = 10;
}
message PNIKOFBIMJL {
	uint32 num = 6;
	uint32 NEJDMEGNFGK = 3;
	uint32 EOAEFBKNFFE = 11;
}
message JJDKOEEHBJO {
	uint32 num = 7;
	uint32 OOOFGDBLDCE = 14;
}
message OKGMDMJHCMK {
	uint32 CEHFIILMJKM = 4;
}
message CFKBHPNBCNB {
	uint32 MBGKCKLDHIB = 14;
}
message BBBEOEOIFJK {
	uint32 select_cell_id = 2;
	repeated uint32 ONNJGDJNFLG = 8;
	bool confirm = 7;
}
message AHPNAPGPJEG {
	uint32 AMOJFMFEOGE = 13;
	uint32 maze_buff_id = 15;
}
message RogueModifierContent {
	RogueModifierContentType modifier_content_type = 12;
	uint32 content_modifier_effect_id = 13;
	uint32 AFFJHMJDIBN = 14;
}
message ChessRogueModifierInfo {
	uint32 select_cell_id = 9;
	bool confirm = 3;
	repeated uint32 modifier_effect_cell_id_list = 13;
}
message MDBJBIEKKEE {
	uint32 LIPAPOMHMCE = 5;
}
message BLCPNBIKCLP {
	uint32 count = 6;
}
message RogueModifier {
	oneof info_case {
		ChessRogueModifierInfo modifier_info = 1274;
	}
	RogueModifierContent modifier_content = 13;
	uint64 modifier_id = 4;
	RogueModifierSourceType modifier_source_type = 3;
}
message EENDHPKPFLP {
	repeated RogueModifier MEBJCLENPIO = 13;
}
message RogueModifierAddNotify {
	RogueModifier modifier = 6;
}
message RogueModifierSelectCellCsReq {
	uint32 cell_id = 3;
}
message RogueModifierSelectCellScRsp {
	uint32 retcode = 5;
	uint32 cell_id = 4;
	ItemList JDIJKEGCIBP = 13;
}
message RogueModifierUpdateNotify {
	RogueModifier modifier = 15;
}
message RogueModifierDelNotify {
	uint64 modifier_id = 2;
}
message RogueModifierStageStartNotify {
	RogueModifierSourceType modifier_source_type = 15;
}
message RogueTournCurSceneInfo {
	RogueMapRotateInfo rotate_info = 3;
	LineupInfo lineup = 9;
	SceneInfo scene = 13;
}
message RogueTournCurInfo {
	oneof info_case {
		RogueTournCurGameInfo rogue_tourn_cur_game_info = 377;
	}
	RogueTournCurAreaInfo rogue_tourn_cur_area_info = 15;
}
message NKPKIAAMODG {
	uint32 LDFEHKDCNEL = 2;
	uint32 JDBAHPEBFJC = 4;
	bool FBJHGPDKBGM = 10;
	uint32 MNNKJPLIILJ = 8;
}
message NNIJCDKHPKL {
	uint32 JEDJBEDKCJI = 3;
	uint32 CDINHFHBMOG = 13;
	bool FBJHGPDKBGM = 12;
	uint32 AIPLFLIBPKJ = 9;
}
message GPNJMEHNDMN {
	bool FBJHGPDKBGM = 15;
	uint32 JAPDCMJPIEJ = 12;
	uint32 HIPJHPJOLBE = 1;
}
message FBHNFJCNHML {
	bool FBJHGPDKBGM = 8;
	uint32 JAPDCMJPIEJ = 12;
}
message RogueTournModuleInfo {
	bool allow_food = 3;
}
message RogueTournCurGameInfo {
	RogueTournGameDifficultyInfo game_difficulty_info = 9;
	KeywordUnlockValue unlock_value = 13;
	RogueGameItemValue item_value = 8;
	RogueTournModuleInfo tourn_module_info = 5;
	ChessRogueMiracleInfo miracle_info = 12;
	RogueTournLineupInfo lineup = 15;
	ChessRogueBuffInfo buff = 4;
	RogueTournLevelInfo level = 1;
	CGJNHNMAMDH JMIDLLDKJBI = 14;
	RogueTournFormulaInfo tourn_formula_info = 2;
	RogueTournGameAreaInfo rogue_tourn_game_area_info = 10;
}
message RogueTournLevelInfo {
	uint32 cur_level_index = 11;
	bool LGBOHDICFPK = 12;
	repeated RogueTournLevel level_info_list = 15;
	bool EJOIJGCLCJO = 4;
	RogueTournSettleReason reason = 13;
	RogueTournLevelStatus status = 7;
}
message RogueTournGameAreaInfo {
	uint32 game_week = 4;
	uint32 game_area_id = 8;
}
message RogueTournGameDifficultyInfo {
	repeated uint32 difficulty_id_list = 4;
}
message RogueTournLevel {
	uint32 layer_id = 14;
	uint32 cur_room_index = 8;
	RogueTournLayerStatus status = 11;
	repeated RogueTournRoomList tourn_room_list = 2;
	uint32 level_index = 3;
}
message RogueTournRoomList {
	uint32 room_index = 5;
	uint32 room_id = 4;
	RogueTournRoomStatus status = 2;
	uint32 EIPNNEJNNKJ = 8;
}
message RogueTournStartCsReq {
	bool EJOIJGCLCJO = 11;
	repeated uint32 base_avatar_id_list = 3;
	bool LGBOHDICFPK = 10;
	uint32 area_id = 9;
}
message RogueTournStartScRsp {
	uint32 week = 3;
	uint32 retcode = 1;
	RogueTournCurInfo rogue_tourn_cur_info = 14;
	RogueTournCurSceneInfo rogue_tourn_cur_scene_info = 5;
}
message RogueTournEnterCsReq {
}
message RogueTournEnterScRsp {
	RogueTournCurSceneInfo rogue_tourn_cur_scene_info = 15;
	uint32 retcode = 7;
	RogueTournCurInfo rogue_tourn_cur_info = 12;
}
message RogueTournLeaveCsReq {
}
message RogueTournLeaveScRsp {
	RogueTournCurSceneInfo rogue_tourn_cur_scene_info = 8;
	uint32 retcode = 14;
}
message RogueTournSettleCsReq {
}
message RogueTournFinishInfo {
	KCLCHJMNPGL CLKHPONDDDO = 7;
	LineupInfo rogue_lineup_info = 12;
	GPNJMEHNDMN KGCIAIAFIBE = 5;
	NKPKIAAMODG CJCOJAMLEEL = 9;
	FBHNFJCNHML PFOEPFPHFNJ = 8;
	RogueTournCurInfo rogue_tourn_cur_info = 14;
	NNIJCDKHPKL GCGLNKFDKKN = 3;
}
message RogueTournSettleScRsp {
	RogueTournFinishInfo tourn_finish_info = 13;
	RogueTournCurSceneInfo rogue_tourn_cur_scene_info = 15;
	uint32 retcode = 3;
}
message RogueTournEnterRoomCsReq {
	uint32 next_room_type = 5;
	uint32 cur_room_index = 13;
}
message RogueTournEnterRoomScRsp {
	uint32 retcode = 14;
	RogueTournCurSceneInfo rogue_tourn_cur_scene_info = 11;
}
message RogueTournEnterLayerCsReq {
	uint32 next_room_type = 12;
	uint32 cur_level_index = 11;
}
message RogueTournEnterLayerScRsp {
	RogueTournCurSceneInfo rogue_tourn_cur_scene_info = 8;
	uint32 retcode = 9;
}
message RogueTournLevelInfoUpdateScNotify {
	RogueTournLevelStatus status = 2;
	RogueTournSettleReason reason = 15;
	repeated RogueTournLevel level_info_list = 14;
	uint32 cur_level_index = 7;
}
message RogueTournTakeExpRewardCsReq {
	repeated uint32 LOPMHJFBHIM = 11;
	uint32 sub_tourn_id = 4;
}
message RogueTournTakeExpRewardScRsp {
	repeated uint32 taken_level_rewards = 7;
	uint32 retcode = 14;
	ItemList reward = 9;
	uint32 exp = 11;
}
message RogueTournExpNotify {
	uint32 exp = 1;
}
message RogueTournQueryCsReq {
}
message RogueTournAreaInfo {
	bool is_taken_reward = 5;
	bool GMOPLJJGBPO = 14;
	uint32 area_id = 2;
	bool completed = 7;
	repeated uint32 unlocked_tourn_difficulty_list = 6;
	bool is_unlocked = 3;
}
message ExtraScoreInfo {
	bool GPODHHAOHNP = 4;
	uint32 week = 10;
	uint32 LFPCCPOLJPC = 9;
	int64 end_time = 7;
}
message RogueTournExpInfo {
	uint32 exp = 8;
	repeated uint32 taken_level_rewards = 13;
}
message RogueTournPermanentTalentInfo {
	uint32 tourn_talent_coin_num = 8;
	RogueTalentInfoList talent_info_list = 7;
}
message RogueTournDifficultyInfo {
	bool is_unlocked = 15;
	uint32 difficulty_id = 5;
}
message RogueTournSeasonInfo {
	uint32 sub_tourn_id = 5;
	uint32 main_tourn_id = 7;
}
message RogueTournHandbookInfo {
	repeated uint32 NFFBJBBCDMG = 3;
	repeated uint32 PPCONKKPIPM = 14;
	repeated uint32 BKGJPCCLIDN = 10;
	repeated uint32 handbook_buff_list = 6;
	uint32 rogue_tourn_handbook_const = 7;
	repeated uint32 FAJCNMEKKNN = 9;
	repeated uint32 KCDLMNINCGE = 13;
}
message KCLCHJMNPGL {
	uint32 OFGBJCCCIKE = 13;
	uint32 NGIAMBEIHPI = 2;
}
message RogueTournInfo {
	RogueTournHandbookInfo rogue_tourn_handbook = 9;
	GIGPOFFBIEO LLAOOGCHHDK = 3;
	RogueTournExpInfo rogue_tourn_exp_info = 5;
	RogueTournSeasonInfo rogue_season_info = 4;
	KCLCHJMNPGL LKCEFCLJCBM = 14;
	repeated RogueTournDifficultyInfo rogue_tourn_difficulty_info = 11;
	repeated RogueTournAreaInfo rogue_tourn_area_info = 13;
	RogueTournPermanentTalentInfo permanent_info = 15;
	repeated RogueTournSaveList rogue_tourn_save_list = 10;
	ExtraScoreInfo extra_score_info = 7;
}
message RogueTournQueryScRsp {
	RogueTournInfo rogue_get_info = 10;
	uint32 retcode = 11;
	RogueTournCurInfo rogue_tourn_cur_info = 1;
}
message RogueTournAreaUpdateScNotify {
	repeated RogueTournAreaInfo rogue_tourn_area_info = 7;
}
message RogueTournSaveList {
	uint32 max_times = 8;
	int64 end_time = 9;
	string name = 1;
	int64 time = 2;
	RogueTournSeasonInfo rogue_season_info = 14;
	RogueTournCurInfo rogue_tourn_cur_info = 12;
	BKFFNNAIODC data = 7;
}
message BKFFNNAIODC {
	repeated GameRogueMiracle miracle_list = 7;
	uint32 item_value = 6;
	repeated RogueCommonBuff buff_list = 8;
}
message RogueTournGetAllArchiveCsReq {
}
message RogueTournGetAllArchiveScRsp {
	uint32 retcode = 14;
	repeated RogueTournSaveList EDJPODPNMED = 12;
}
message RogueTournDeleteArchiveCsReq {
	uint32 max_times = 12;
}
message RogueTournDeleteArchiveScRsp {
	uint32 retcode = 9;
	uint32 max_times = 10;
}
message RogueTournRenameArchiveCsReq {
	uint32 max_times = 15;
	string name = 12;
}
message RogueTournRenameArchiveScRsp {
	uint32 max_times = 4;
	uint32 retcode = 11;
	string name = 14;
}
message RogueTournClearArchiveNameScNotify {
	uint32 max_times = 12;
}
message RogueTournGetPermanentTalentInfoCsReq {
}
message RogueTournGetPermanentTalentInfoScRsp {
	uint32 retcode = 13;
	RogueTournPermanentTalentInfo permanent_info = 14;
}
message RogueTournEnablePermanentTalentCsReq {
	uint32 talent_id = 3;
}
message RogueTournEnablePermanentTalentScRsp {
	RogueTournPermanentTalentInfo permanent_info = 2;
	uint32 retcode = 1;
}
message RogueTournResetPermanentTalentCsReq {
}
message RogueTournResetPermanentTalentScRsp {
	uint32 retcode = 6;
	RogueTournPermanentTalentInfo permanent_info = 5;
}
message RogueTournEnterRogueCocoonSceneCsReq {
	bool EIDDMGHLPBP = 9;
	uint32 IBGNLBOEBCG = 7;
	uint32 PILMKHCKMED = 6;
	uint32 difficulty_level = 13;
	repeated PHHKOMBGPPK avatar_list = 11;
}
message RogueTournEnterRogueCocoonSceneScRsp {
	uint32 retcode = 3;
	RogueTournCurSceneInfo rogue_tourn_cur_scene_info = 9;
}
message RogueTournLeaveRogueCocoonSceneCsReq {
}
message RogueTournLeaveRogueCocoonSceneScRsp {
	RogueTournCurSceneInfo rogue_tourn_cur_scene_info = 11;
	uint32 retcode = 9;
}
message RogueTournReEnterRogueCocoonStageCsReq {
	bool EIDDMGHLPBP = 6;
}
message RogueTournReEnterRogueCocoonStageScRsp {
	uint32 retcode = 11;
	SceneBattleInfo battle_info = 3;
}
message RogueTournGetCurRogueCocoonInfoCsReq {
}
message RogueTournGetCurRogueCocoonInfoScRsp {
	uint32 PILMKHCKMED = 15;
	uint32 IBGNLBOEBCG = 8;
	uint32 retcode = 2;
	uint32 difficulty_level = 1;
}
message RogueTournDifficultyCompNotify {
	repeated uint32 GGGFIGCPKLF = 3;
}
message JNIAOGIIOGB {
	uint32 miracle_id = 14;
}
message JCCCACNFDJG {
	uint32 miracle_id = 5;
}
message JFIHGDPOIID {
	uint32 buff_id = 10;
}
message ECGOCHPMCPD {
	uint32 event_id = 15;
}
message APFJLOFINFJ {
	uint32 formula_id = 4;
}
message FIDFNNCJAJE {
	uint32 event_unique_id = 5;
	uint32 level = 12;
	uint32 DCHPOGOBDKO = 6;
	uint32 IJPPKNKNLNL = 9;
}
message RogueTournHandBookNotify {
	oneof info_case {
		JNIAOGIIOGB IIHOPMEEAJA = 7;
		JCCCACNFDJG GPOLBDGOOOD = 1;
		JFIHGDPOIID buff = 10;
		ECGOCHPMCPD NFLDODIABCL = 12;
		APFJLOFINFJ tourn_formula_info = 14;
		FIDFNNCJAJE JMIDLLDKJBI = 13;
	}
}
message RogueTournGetSettleInfoCsReq {
	uint32 area_id = 3;
}
message RogueTournGetSettleInfoScRsp {
	RogueTournFinishInfo tourn_finish_info = 12;
	uint32 retcode = 4;
}
message RogueTournConfirmSettleCsReq {
	uint32 area_id = 2;
	string name = 1;
	uint32 max_times = 15;
}
message RogueTournConfirmSettleScRsp {
	uint32 retcode = 15;
	RogueTournCurSceneInfo rogue_tourn_cur_scene_info = 9;
	ItemList JPLAAPJCCBH = 6;
	RogueTournSaveList OHHJKGFOFHB = 7;
	ItemList GFONFDBFBNA = 2;
}
message RogueTournWeekChallengeUpdateScNotify {
	ExtraScoreInfo extra_score_info = 4;
}
message RogueTournGetMiscRealTimeDataCsReq {
}
message RogueTournGetMiscRealTimeDataScRsp {
	GPNJMEHNDMN KGCIAIAFIBE = 11;
	NKPKIAAMODG CJCOJAMLEEL = 9;
	uint32 retcode = 1;
	NNIJCDKHPKL GCGLNKFDKKN = 5;
	FBHNFJCNHML PFOEPFPHFNJ = 14;
	KCLCHJMNPGL CLKHPONDDDO = 10;
}
message RogueTournGetArchiveRepositoryCsReq {
}
message RogueTournGetArchiveRepositoryScRsp {
	repeated uint32 HKDOCLOPKOH = 14;
	uint32 retcode = 5;
	repeated uint32 LNEJMJBFLLH = 2;
}
message RogueTournReviveCostUpdateScNotify {
	ItemCostData rogue_revive_cost = 2;
}
message RogueTournReviveAvatarCsReq {
	uint32 interacted_prop_entity_id = 6;
	repeated uint32 base_avatar_id_list = 4;
}
message RogueTournReviveAvatarScRsp {
	uint32 retcode = 13;
	ItemCostData rogue_revive_cost = 4;
}
message RogueTournBattleFailSettleInfoScNotify {
	RogueTournFinishInfo tourn_finish_info = 13;
	RogueTournCurSceneInfo rogue_tourn_cur_scene_info = 4;
}
message GIGPOFFBIEO {
	uint32 CMOGHIANDFL = 6;
	RogueTalentInfoList talent_info_list = 1;
}
message RogueTournGetSeasonTalentInfoCsReq {
}
message RogueTournGetSeasonTalentInfoScRsp {
	GIGPOFFBIEO LLAOOGCHHDK = 10;
	uint32 retcode = 12;
}
message RogueTournEnableSeasonTalentCsReq {
	uint32 talent_id = 11;
}
message RogueTournEnableSeasonTalentScRsp {
	GIGPOFFBIEO LLAOOGCHHDK = 9;
	uint32 retcode = 6;
}
message RogueTournTitanUpdateTitanBlessProgressScNotify {
	uint32 LDFGIFDFPCF = 8;
}
message GetRollShopInfoCsReq {
	uint32 roll_shop_id = 2;
}
message GetRollShopInfoScRsp {
	uint32 roll_shop_id = 3;
	uint32 gacha_random = 11;
	repeated uint32 shop_group_id_list = 8;
	uint32 retcode = 7;
}
message DoGachaInRollShopCsReq {
	uint32 gacha_random = 11;
	uint32 roll_shop_id = 2;
	uint32 gacha_count = 1;
}
message DoGachaInRollShopScRsp {
	uint32 retcode = 9;
	uint32 PENILHGLHHM = 15;
	uint32 reward_display_type = 5;
	ItemList reward = 1;
	uint32 roll_shop_id = 11;
}
message TakeRollShopRewardCsReq {
	uint32 roll_shop_id = 2;
}
message TakeRollShopRewardScRsp {
	ItemList Reward = 15;
	uint32 Retcode = 6;
	uint32 GroupType = 4;
	uint32 RollShopId = 11;
}
message SceneActorInfo {
	uint32 map_layer = 4;
	uint32 base_avatar_id = 12;
	AvatarType avatar_type = 14;
	uint32 uid = 7;
}
message NpcMonsterRogueInfo {
	uint32 level = 5;
	uint32 DNEAMPLLFME = 12;
	uint32 elite_group = 9;
	uint32 hard_level_group = 13;
	uint32 rogue_monster_id = 6;
}
message NpcMonsterExtraInfo {
	oneof info_case {
		NpcMonsterRogueInfo rogue_game_info = 11;
	}
}
message SceneNpcMonsterInfo {
	uint32 world_level = 10;
	uint32 monster_id = 6;
	bool MPFEDFBKKDF = 13;
	NpcMonsterExtraInfo extra_info = 4;
	bool IDPJIDNLEHH = 7;
	uint32 event_id = 14;
}
message NpcDialogueEventParam {
	uint32 rogue_dialogue_event_id = 8;
	uint32 arg_id = 11;
}
message NpcRogueGameInfo {
	uint32 talk_dialogue_id = 3;
	map<uint32, uint32> KJCBNEINDHL = 15;
	uint32 aeon_talk_id = 13;
	uint32 event_unique_id = 12;
	bool finish_dialogue = 11;
	uint32 KAPMKJGHIEI = 1;
	repeated NpcDialogueEventParam dialogue_event_param_list = 7;
	bool LOMILOMCAOM = 2;
	bool JENFHOMBKKE = 4;
}
message CLFACBCGIFL {
}
message KKFKKPPLDAI {
	uint32 AMLKPOHDELN = 11;
	bool is_meet = 7;
	uint32 visitor_id = 2;
}
message NpcExtraInfo {
	oneof info_case {
		NpcRogueGameInfo rogue_game_info = 3;
		KKFKKPPLDAI JKJOPMEFCBO = 11;
		CLFACBCGIFL PNBJJBJNMGL = 10;
	}
}
message SceneNpcInfo {
	NpcExtraInfo extra_info = 14;
	uint32 npc_id = 10;
}
message PropRogueInfo {
	uint32 room_id = 14;
	uint32 site_id = 1;
	uint32 BBNFIIFMGAK = 8;
	uint32 CCDEPAPJNKO = 11;
}
message PropAeonInfo {
	uint32 DialogueGroupId = 6;
	uint32 AddExp = 12;
	uint32 AeonId = 7;
}
message PropChessRogueInfo {
	bool AKCGHBFGBCC = 7;
	bool enter_next_cell = 4;
}
message RogueTournDoorInfo {
	uint32 EIPNNEJNNKJ = 9;
	uint32 rogue_door_next_room_type = 15;
	bool enter_next_layer = 11;
}
message RogueMagicDoorInfo {
	bool enter_next_layer = 9;
	uint32 EIPNNEJNNKJ = 7;
	uint32 rogue_door_next_room_type = 6;
}
message WorkbenchFuncIdInfo {
	uint32 func_id = 13;
	bool is_valid = 2;
}
message RogueTournWorkbenchInfo {
	repeated WorkbenchFuncIdInfo workbench_func_list = 8;
	uint32 workbench_id = 9;
}
message RogueGambleMachineInfo {
	uint32 MGDMHLGJHOC = 11;
	RogueGambleInfo gamble_info = 7;
}
message RogueCurseChestInfo {
	uint32 chest_id = 7;
}
message PropTimelineInfo {
	bytes timeline_byte_value = 5;
	bool timeline_bool_value = 6;
}
message PropExtraInfo {
	oneof infoCase_ {
		PropRogueInfo RogueInfo = 11;
		PropAeonInfo AeonInfo = 13;
		PropChessRogueInfo ChessRogueInfo = 3;
		RogueTournDoorInfo RogueTournDoorInfo = 7;
		RogueTournWorkbenchInfo RogueTournWorkbenchInfo = 10;
		RogueGambleMachineInfo RogueGambleMachineInfo = 15;
		RogueCurseChestInfo RogueCurseChestInfo = 14;
		RogueMagicDoorInfo RogueMagicDoorInfo = 1;
	}
	PropTimelineInfo TimelineInfo = 5;
}
message ScenePropInfo {
	uint64 create_time_ms = 6;
	uint32 prop_id = 15;
	PropExtraInfo extra_info = 8;
	uint32 life_time_ms = 2;
	uint32 prop_state = 11;
	repeated string trigger_name_list = 14;
}
message SceneSummonUnitInfo {
	int32 life_time_ms = 7;
	uint32 caster_entity_id = 1;
	repeated string trigger_name_list = 11;
	uint32 attach_entity_id = 2;
	uint64 create_time_ms = 10;
	uint32 summon_unit_id = 15;
}
message SceneEntityInfo {
	oneof entityCase_ {
		SceneActorInfo Actor = 15;
		SceneNpcMonsterInfo NpcMonster = 7;
		SceneNpcInfo Npc = 12;
		ScenePropInfo Prop = 8;
		SceneSummonUnitInfo SummonUnit = 13;
	}
	MotionInfo Motion = 1;
	uint32 EntityId = 14;
	uint32 InstId = 2;
	uint32 GroupId = 5;
}
message BuffInfo {
	uint32 base_avatar_id = 14;
	uint32 level = 3;
	uint32 buff_summon_entity_id = 7;
	uint32 buff_id = 12;
	map<string, float> dynamic_values = 1;
	float life_time = 8;
	uint32 count = 4;
	uint64 add_time_ms = 10;
}
message EntityBuffInfo {
	uint32 entity_id = 7;
	repeated BuffInfo buff_list = 9;
}
message MechanismBarInfo {
	uint32 OHDEOIGHIEM = 6;
	uint32 value = 12;
}
message CustomSaveData {
	uint32 group_id = 2;
	string save_data = 10;
}
message KEGMIHDFPMM {
	uint32 CPPDJFKIIHK = 14;
	uint32 BLOGJDCKAHM = 12;
}
message SceneEntityGroupInfo {
	map<string, int32> HEJAMOOJBCJ = 10;
	repeated SceneEntityInfo entity_list = 2;
	uint32 group_id = 7;
	uint32 state = 14;
}
message SceneGroupState {
	bool is_default = 6;
	uint32 group_id = 12;
	uint32 state = 5;
}
message MissionStatusBySceneInfo {
	repeated uint32 unfinished_main_mission_id_list = 9;
	repeated uint32 disabled_main_mission_id_list = 5;
	repeated MainMissionCustomValue BIGEHKDPGPN = 13;
	repeated uint32 finished_main_mission_id_list = 12;
	repeated Mission sub_mission_status_list = 8;
}
message SceneInfo {
	uint32 floor_id = 1;
	uint32 leader_entity_id = 7;
	MissionStatusBySceneInfo scene_mission_info = 991;
	uint32 game_mode_type = 10;
	uint32 content_id = 1990;
	map<uint32, KEGMIHDFPMM> MPEHIBKEOBE = 2;
	repeated EntityBuffInfo entity_buff_info_list = 12;
	repeated SceneEntityInfo entity_list = 15;
	uint32 entry_id = 13;
	uint32 dimension_id = 820;
	repeated CustomSaveData custom_data_list = 5;
	uint32 plane_id = 14;
	repeated SceneEntityGroupInfo entity_group_list = 1779;
	repeated uint32 lighten_section_list = 3;
	repeated BuffInfo scene_buff_info_list = 8;
	repeated SceneGroupState group_state_list = 76;
	repeated uint32 DJBIBIJMEBH = 134;
	uint32 world_id = 6;
	uint32 client_pos_version = 11;
	uint32 game_story_line_id = 1900;
	map<string, int32> floor_saved_data = 136;
}
message EntityMotion {
	MotionInfo motion = 14;
	uint32 entity_id = 13;
	uint32 map_layer = 7;
	bool NFOPIKDKPGG = 4;
}
message SceneEntityMoveCsReq {
	repeated EntityMotion entity_motion_list = 11;
	uint64 PEMLEJJBAJE = 4;
	uint32 entry_id = 7;
}
message SceneEntityMoveScRsp {
	uint32 retcode = 12;
	ClientDownloadData download_data = 15;
	repeated EntityMotion entity_motion_list = 1;
}
message SceneEntityMoveScNotify {
	uint32 entry_id = 8;
	uint32 client_pos_version = 11;
	MotionInfo motion = 14;
	uint32 entity_id = 9;
}
message SceneUpdatePositionVersionNotify {
	uint32 pos_version = 15;
}
message InteractPropCsReq {
	uint32 prop_entity_id = 3;
	uint32 interact_id = 1;
}
message InteractPropScRsp {
	uint32 retcode = 6;
	uint32 prop_state = 3;
	uint32 prop_entity_id = 4;
}
message ChangePropTimelineInfoCsReq {
	uint64 uuid = 11;
	PropTimelineInfo timeline_info = 2;
	bool is_close_map = 6;
	uint32 prop_entity_id = 7;
}
message ChangePropTimelineInfoScRsp {
	uint32 prop_entity_id = 13;
	uint32 retcode = 10;
}
message HitMonsterBattleInfo {
	uint32 target_monster_entity_id = 12;
	MonsterBattleType monster_battle_type = 6;
}
message DynamicValues {
	float value = 11;
	string key = 4;
}
message AssistMonsterEntityInfo {
	repeated uint32 entity_id_list = 3;
}
message SceneCastSkillCsReq {
	MotionInfo target_motion = 13;
	repeated uint32 assist_monster_entity_id_list = 12;
	uint32 attacked_by_entity_id = 7;
	uint32 skill_index = 14;
	repeated uint32 hit_target_entity_id_list = 8;
	uint32 HCHDHLJCIJE = 11;
	repeated DynamicValues dynamic_values = 2;
	repeated AssistMonsterEntityInfo assist_monster_entity_info = 4;
	uint32 cast_entity_id = 6;
	string maze_ability_str = 1;
	repeated SkillExtraTag skill_extra_tags = 15;
}
message SceneCastSkillScRsp {
	SceneBattleInfo battle_info = 9;
	uint32 cast_entity_id = 1;
	uint32 retcode = 2;
	repeated HitMonsterBattleInfo monster_battle_info = 15;
}
message SceneCastSkillCostMpCsReq {
	uint32 cast_entity_id = 8;
	uint32 skill_index = 4;
	uint32 attacked_by_entity_id = 9;
}
message SceneCastSkillCostMpScRsp {
	uint32 retcode = 7;
	uint32 cast_entity_id = 3;
}
message SceneCastSkillMpUpdateScNotify {
	uint32 cast_entity_id = 5;
	uint32 mp = 10;
}
message SceneEnterStageCsReq {
	bool PMJAHILBLFL = 14;
	uint32 event_id = 6;
	RebattleType rebattle_type = 3;
}
message SceneEnterStageScRsp {
	uint32 retcode = 15;
	SceneBattleInfo battle_info = 10;
}
message SceneReviveAfterRebattleCsReq {
	RebattleType rebattle_type = 1;
}
message SceneReviveAfterRebattleScRsp {
	uint32 retcode = 11;
}
message GetCurSceneInfoCsReq {
}
message GetCurSceneInfoScRsp {
	SceneInfo scene = 9;
	uint32 retcode = 2;
}
message EntityBuffChangeInfo {
	oneof info_case {
		BuffInfo buff_change_info = 2;
		uint32 remove_buff_id = 5;
	}
	uint32 cast_entity_id = 4;
	SceneEntityBuffChangeType reason = 10;
	uint32 entity_id = 8;
}
message SyncEntityBuffChangeListScNotify {
	repeated EntityBuffChangeInfo entity_buff_change_list = 2;
}
message SpringRefreshCsReq {
	uint32 floor_id = 9;
	uint32 prop_entity_id = 6;
	uint32 plane_id = 14;
}
message SpringRefreshScRsp {
	uint32 retcode = 3;
}
message LastSpringRefreshTimeNotify {
	int64 JBICINDPIGM = 15;
}
message ReturnLastTownCsReq {
}
message ReturnLastTownScRsp {
	SceneInfo scene = 2;
	uint32 retcode = 6;
}
message EnterSectionCsReq {
	uint32 section_id = 10;
}
message EnterSectionScRsp {
	uint32 retcode = 3;
}
message SetCurInteractEntityCsReq {
	uint32 entity_id = 3;
}
message SetCurInteractEntityScRsp {
	uint32 retcode = 10;
}
message RecoverAllLineupCsReq {
}
message RecoverAllLineupScRsp {
	uint32 retcode = 14;
}
message SavePointsInfoNotify {
	uint32 ValidTimes = 6;
	int64 RefreshTime = 14;
}
message StartCocoonStageCsReq {
	uint32 wave = 9;
	uint32 world_level = 4;
	uint32 cocoon_id = 5;
	uint32 prop_entity_id = 8;
}
message StartCocoonStageScRsp {
	uint32 Wave = 1;
	uint32 Retcode = 12;
	uint32 PropEntityId = 5;
	SceneBattleInfo BattleInfo = 7;
	uint32 CocoonId = 8;
}
message EntityBindPropCsReq {
	bool MJJMPIFLMKF = 10;
	MotionInfo motion = 15;
}
message EntityBindPropScRsp {
	uint32 retcode = 1;
}
message SetClientPausedCsReq {
	bool paused = 3;
}
message SetClientPausedScRsp {
	bool paused = 12;
	uint32 retcode = 10;
}
message DeactivateFarmElementCsReq {
	uint32 entity_id = 12;
}
message DeactivateFarmElementScRsp {
	uint32 entity_id = 7;
	uint32 retcode = 5;
}
message ActivateFarmElementCsReq {
	uint32 world_level = 3;
	uint32 entity_id = 13;
}
message ActivateFarmElementScRsp {
	uint32 retcode = 13;
	uint32 world_level = 9;
	uint32 entity_id = 14;
}
message AvatarPresetHp {
	uint32 avatar_id = 6;
	uint32 JLAFLDCHDGJ = 5;
}
message SpringRecoverConfig {
	repeated AvatarPresetHp BCGLMLABOGF = 5;
	uint32 EIDNIGIFNAA = 1;
	bool GHDEPANCGPF = 10;
}
message UpdateMechanismBarScNotify {
	uint32 floor_id = 11;
	MechanismBarInfo GIGKDAPGNME = 10;
	uint32 plane_id = 4;
}
message SetGroupCustomSaveDataCsReq {
	uint32 entry_id = 9;
	string save_data = 8;
	uint32 group_id = 13;
}
message SetGroupCustomSaveDataScRsp {
	uint32 group_id = 14;
	uint32 retcode = 8;
	uint32 entry_id = 12;
}
message ReEnterLastElementStageCsReq {
	uint32 stage_id = 7;
}
message ReEnterLastElementStageScRsp {
	SceneBattleInfo battle_info = 3;
	uint32 stage_id = 1;
	uint32 retcode = 2;
}
message SceneEntityTeleportCsReq {
	uint32 entry_id = 14;
	EntityMotion entity_motion = 6;
}
message SceneEntityTeleportScRsp {
	EntityMotion entity_motion = 13;
	uint32 client_pos_version = 6;
	uint32 retcode = 12;
}
message EnterSceneCsReq {
	uint32 teleport_id = 2;
	uint32 game_story_line_id = 12;
	uint32 content_id = 6;
	uint32 entry_id = 1;
	bool is_close_map = 14;
}
message EnterSceneScRsp {
	bool is_close_map = 9;
	uint32 content_id = 4;
	uint32 retcode = 7;
	bool is_over_map = 1;
	uint32 game_story_line_id = 2;
}
message EnterSceneByServerScNotify {
	SceneInfo scene = 5;
	EnterSceneReason reason = 7;
	LineupInfo lineup = 9;
}
message ScenePlaneEventScNotify {
	ItemList MHDJADHNDKD = 5;
	ItemList MEEKFPCOBAI = 6;
	ItemList get_item_list = 8;
	ItemList EPOJGHEBPKC = 10;
}
message GetSceneMapInfoCsReq {
	bool IGFIKGHLLNO = 3;
	uint32 content_id = 2;
	uint32 entry_story_line_id = 10;
	repeated uint32 floor_id_list = 4;
	repeated uint32 entry_id_list = 1;
}
message MazePropState {
	uint32 config_id = 5;
	uint32 state = 15;
	uint32 group_id = 13;
}
message MazeGroup {
	bool ILBEAAOOJJP = 1;
	int64 INLDCCLIOAN = 14;
	uint32 group_id = 4;
	repeated uint32 NOBKEONAKLE = 7;
}
message ChestInfo {
	uint32 opened_num = 10;
	uint32 exist_num = 12;
	ChestType chest_type = 15;
}
message NPAOGKFKAAE {
	uint32 type = 10;
	uint32 FLJINDNJPHL = 15;
	uint32 FOKCIFJMJGL = 13;
}
message SceneMapInfo {
	uint32 floor_id = 10;
	uint32 entry_id = 2;
	map<string, int32> floor_saved_data = 11;
	repeated MazeGroup maze_group_list = 1;
	uint32 dimension_id = 12;
	repeated ChestInfo chest_list = 4;
	uint32 cur_map_entry_id = 8;
	uint32 retcode = 14;
	repeated MazePropState maze_prop_list = 3;
	repeated uint32 lighten_section_list = 15;
	repeated NPAOGKFKAAE JMLDMOCNMHM = 5;
	repeated uint32 unlock_teleport_list = 6;
}
message GetSceneMapInfoScRsp {
	bool IGFIKGHLLNO = 1;
	uint32 retcode = 3;
	uint32 content_id = 13;
	uint32 entry_story_line_id = 8;
	repeated SceneMapInfo scene_map_info = 10;
}
message SyncServerSceneChangeNotify {
}
message GameplayCounterCountDownCsReq {
	uint32 NMGLNHPANAH = 3;
	uint32 cur_times = 6;
}
message GameplayCounterCountDownScRsp {
	uint32 retcode = 11;
}
message GameplayCounterUpdateScNotify {
	uint32 BLOGJDCKAHM = 2;
	GameplayCounterUpdateReason reason = 8;
	uint32 NMGLNHPANAH = 9;
}
message GameplayCounterRecoverCsReq {
	uint32 LABOODDALOE = 1;
	uint32 NMGLNHPANAH = 5;
}
message GameplayCounterRecoverScRsp {
	uint32 retcode = 2;
}
message UpdateFloorSavedValueNotify {
	map<string, int32> saved_value = 8;
	uint32 plane_id = 13;
	uint32 dimension_id = 5;
	uint32 floor_id = 2;
}
message GetUnlockTeleportCsReq {
	repeated uint32 entry_id_list = 3;
}
message GetUnlockTeleportScRsp {
	repeated uint32 unlock_teleport_list = 3;
	uint32 retcode = 9;
}
message OpenChestScNotify {
	uint32 chest_id = 3;
}
message SceneEntityRefreshInfo {
	oneof entity_case {
		SceneEntityInfo add_entity = 11;
		uint32 delete_entity = 3;
		uint32 MHHOAAHDGAO = 12;
	}
}
message CMGFHBHAFFB {
	string JAIBIEEKHEG = 4;
	int32 DLMAMKINNCO = 6;
	int32 AGFIJNIEBKF = 9;
}
message GroupRefreshInfo {
	SceneGroupRefreshType refresh_type = 8;
	uint32 group_id = 5;
	repeated CMGFHBHAFFB BCCGJIHNCDN = 1;
	uint32 state = 6;
	repeated SceneEntityRefreshInfo refresh_entity = 7;
}
message SceneGroupRefreshScNotify {
	uint32 dimension_id = 3;
	repeated GroupRefreshInfo group_refresh_list = 14;
	uint32 floor_id = 8;
}
message GroupStateInfo {
	uint32 group_id = 8;
	uint32 group_state = 11;
	uint32 GDNOPAABGHF = 12;
	uint32 entry_id = 3;
}
message GroupStateChangeCsReq {
	GroupStateInfo group_state_info = 10;
}
message GroupStateChangeScRsp {
	GroupStateInfo group_state_info = 9;
	uint32 retcode = 6;
}
message GroupStateChangeScNotify {
	GroupStateInfo group_state_info = 5;
}
message EnteredSceneInfo {
	uint32 plane_id = 6;
	uint32 floor_id = 3;
}
message GetEnteredSceneCsReq {
}
message GetEnteredSceneScRsp {
	uint32 retcode = 6;
	repeated EnteredSceneInfo entered_scene_info_list = 14;
}
message EnteredSceneChangeScNotify {
	repeated EnteredSceneInfo entered_scene_info_list = 15;
}
message RefreshTriggerByClientCsReq {
	repeated uint32 trigger_target_id_list = 9;
	string trigger_name = 2;
	uint32 trigger_entity_id = 3;
	MotionInfo trigger_motion = 6;
}
message RefreshTriggerByClientScRsp {
	bool refresh_trigger = 9;
	string trigger_name = 6;
	uint32 trigger_entity_id = 12;
	uint32 retcode = 3;
}
message RefreshTriggerByClientScNotify {
	string trigger_name = 13;
	repeated uint32 trigger_target_id_list = 15;
	uint32 trigger_entity_id = 6;
}
message DeleteSummonUnitCsReq {
	repeated uint32 entity_id_list = 3;
}
message DeleteSummonUnitScRsp {
	uint32 retcode = 15;
	repeated uint32 entity_id_list = 9;
}
message UnlockedAreaMapScNotify {
	repeated uint32 entry_id_list = 8;
}
message UnlockTeleportNotify {
	uint32 entry_id = 8;
	uint32 teleport_id = 2;
}
message UpdateGroupPropertyCsReq {
	uint32 group_id = 12;
	uint32 floor_id = 2;
	int32 MOJOHJEBCNJ = 3;
	string JAIBIEEKHEG = 6;
	uint32 dimension_id = 5;
}
message UpdateGroupPropertyScRsp {
	uint32 retcode = 6;
	int32 DLMAMKINNCO = 4;
	int32 AGFIJNIEBKF = 11;
	uint32 floor_id = 15;
	uint32 group_id = 7;
	string JAIBIEEKHEG = 14;
	uint32 dimension_id = 10;
}
message TrainWorldIdChangeScNotify {
	uint32 NPEBNEKDLEN = 13;
}
message ServerPrefs {
	bytes data = 6;
	uint32 server_prefs_id = 9;
}
message GetAllServerPrefsDataCsReq {
}
message GetAllServerPrefsDataScRsp {
	repeated ServerPrefs server_prefs_list = 1;
	uint32 retcode = 12;
}
message GetServerPrefsDataCsReq {
	uint32 server_prefs_id = 12;
}
message GetServerPrefsDataScRsp {
	uint32 retcode = 1;
	ServerPrefs server_prefs = 12;
}
message UpdateServerPrefsDataCsReq {
	ServerPrefs server_prefs = 1;
}
message UpdateServerPrefsDataScRsp {
	uint32 retcode = 5;
	uint32 server_prefs_id = 8;
}
message Shop {
	repeated Goods GoodsList = 2;
	int64 BeginTime = 12;
	uint64 CityTakenLevelReward = 14;
	int64 EndTime = 9;
	uint32 CityExp = 3;
	uint32 CityLevel = 4;
	uint32 ShopId = 10;
}
message Goods {
	uint32 GoodsId = 2;
	int64 EndTime = 5;
	uint32 ItemId = 14;
	int64 BeginTime = 9;
	uint32 BuyTimes = 4;
}
message GetShopListCsReq {
	uint32 shop_type = 13;
}
message GetShopListScRsp {
	repeated Shop ShopList = 8;
	uint32 Retcode = 5;
	uint32 ShopType = 10;
}
message BuyGoodsCsReq {
	uint32 interacted_prop_entity_id = 11;
	repeated uint32 FMPNHEAIMDN = 9;
	uint32 goods_id = 3;
	uint32 item_id = 13;
	uint32 goods_num = 5;
	uint32 shop_id = 1;
}
message BuyGoodsScRsp {
	ItemList ReturnItemList = 8;
	uint32 GoodsBuyTimes = 1;
	uint32 ShopId = 9;
	uint32 GoodsId = 15;
	uint32 Retcode = 12;
}
message TakeCityShopRewardCsReq {
	uint32 level = 5;
	uint32 shop_id = 8;
}
message TakeCityShopRewardScRsp {
	uint32 ShopId = 8;
	uint32 Level = 5;
	uint32 Retcode = 4;
	ItemList Reward = 15;
}
message CityShopInfoScNotify {
	uint64 TakenLevelReward = 14;
	uint32 Exp = 6;
	uint32 ShopId = 12;
	uint32 Level = 2;
}
message FAFGMLPADMI {
	bool HALBHKNPIKH = 4;
	repeated uint32 IGJCPPKAIBI = 13;
	uint32 BEJEEDAEBBE = 3;
	uint32 unique_id = 11;
	uint32 FCLNOOGEHMC = 6;
	repeated uint32 item_list = 2;
}
message IPJAIINEGEL {
	uint32 ECBALMAEBJC = 14;
	uint32 BEJEEDAEBBE = 1;
}
message SpaceZooDataCsReq {
}
message SpaceZooDataScRsp {
	repeated uint32 PMCMECDLEMC = 14;
	repeated uint32 KMOADEOGAPA = 11;
	repeated IPJAIINEGEL INIHLANCNFI = 2;
	repeated uint32 KJFHKICGGDE = 7;
	repeated FAFGMLPADMI AAGIHKBFMFI = 6;
	uint32 retcode = 10;
	repeated uint32 BNHNDBNABFN = 3;
	uint32 PBLCAHNMFJG = 5;
	repeated uint32 DPLKBEEHPLB = 1;
}
message SpaceZooBornCsReq {
	uint32 LHEONPHGBNB = 1;
	repeated uint32 HDCBACOOIND = 7;
}
message SpaceZooBornScRsp {
	FAFGMLPADMI KPKDHGHDGNB = 2;
	repeated IPJAIINEGEL GOEAOFNFJOD = 11;
	uint32 retcode = 5;
	bool IKLPNCGBPPC = 8;
}
message SpaceZooMutateCsReq {
	uint32 unique_id = 4;
	uint32 item_id = 9;
}
message SpaceZooMutateScRsp {
	FAFGMLPADMI EFLCMHMAJAL = 5;
	bool IKLPNCGBPPC = 8;
	repeated IPJAIINEGEL GOEAOFNFJOD = 10;
	uint32 retcode = 1;
}
message SpaceZooOpCatteryCsReq {
	uint32 NILEEDJLGIN = 9;
	uint32 op_type = 3;
	uint32 ALGEIENIOAN = 15;
}
message SpaceZooOpCatteryScRsp {
	repeated uint32 KJFHKICGGDE = 5;
	uint32 retcode = 14;
}
message SpaceZooDeleteCatCsReq {
	repeated uint32 DEJAOOEBBHA = 3;
}
message SpaceZooDeleteCatScRsp {
	repeated uint32 NFHEAGELICI = 4;
	uint32 retcode = 13;
}
message SpaceZooCatUpdateNotify {
	bool IKLPNCGBPPC = 4;
	repeated FAFGMLPADMI AIKMBPPNOKD = 8;
	bool FPMNCAGJEBG = 2;
}
message SpaceZooExchangeItemCsReq {
	uint32 item_id = 11;
}
message SpaceZooExchangeItemScRsp {
	uint32 retcode = 5;
	uint32 item_id = 6;
}
message SpaceZooTakeCsReq {
	uint32 HLNMAJIDIFD = 12;
}
message SpaceZooTakeScRsp {
	ItemList reward = 12;
	uint32 retcode = 5;
	uint32 HLNMAJIDIFD = 4;
}
message MJCJAIKPLLM {
	uint32 group_id = 11;
	uint32 CBINDIAAMJG = 14;
	uint32 MPAECAPOHEO = 5;
	bool ACELAGJPHMA = 12;
	uint32 IFANGMHNKBB = 8;
}
message GetStarFightDataCsReq {
}
message GetStarFightDataScRsp {
	uint32 retcode = 6;
	repeated MJCJAIKPLLM BDIIMMHJLCN = 15;
}
message AEDAOIFFIGN {
	uint32 avatar_id = 10;
	AvatarType avatar_type = 14;
}
message StartStarFightLevelCsReq {
	uint32 NEDFIBONLKB = 6;
	uint32 group_id = 5;
	repeated AEDAOIFFIGN avatar_list = 7;
}
message StartStarFightLevelScRsp {
	uint32 retcode = 6;
	uint32 NEDFIBONLKB = 7;
	SceneBattleInfo battle_info = 12;
	uint32 group_id = 2;
}
message StarFightDataChangeNotify {
	uint32 group_id = 4;
	MJCJAIKPLLM FMCDALALFIA = 9;
}
message GetStoryLineInfoCsReq {
}
message GetStoryLineInfoScRsp {
	uint32 retcode = 13;
	repeated uint32 trial_avatar_id_list = 2;
	repeated uint32 unfinished_story_line_id_list = 11;
	uint32 cur_story_line_id = 1;
}
message StoryLineInfoScNotify {
	repeated uint32 trial_avatar_id_list = 12;
	uint32 FIMCEJGDAGF = 8;
	repeated uint32 unfinished_story_line_id_list = 9;
	uint32 cur_story_line_id = 6;
}
message ChangeStoryLineFinishScNotify {
	ChangeStoryLineAction action = 4;
	uint32 cur_story_line_id = 13;
	bool KOOCCEIGHMA = 5;
	uint32 KIDKHJECJLF = 11;
}
message StoryLineTrialAvatarChangeScNotify {
	repeated uint32 IBLBNIANPHD = 13;
	repeated uint32 KFMFFGGJMNE = 3;
	bool CLIIGMNMHNA = 12;
}
message HPFGPODEFLA {
}
message HIFCFIBKAIG {
	repeated uint32 FMBFBGNABOC = 8;
	bool is_taken_reward = 15;
	uint32 panel_id = 7;
}
message GetStoryTokenActivityDataScRsp {
	HIFCFIBKAIG GIILGFFKHDA = 4;
	uint32 retcode = 2;
}
message JNNFJKAMCDM {
	uint32 panel_id = 14;
}
message TakeStoryTokenActivityRewardScRsp {
	uint32 BPKJJNFLJDG = 13;
	ItemList reward_list = 5;
	uint32 retcode = 6;
}
message StrongChallengeAvatar {
	AvatarType AvatarType = 14;
	uint32 AvatarId = 13;
}
message StrongChallengeAvatarData {
	repeated StrongChallengeAvatar avatar_list = 13;
	repeated uint32 buff_list = 8;
}
message StrongChallengeActivityData {
	StrongChallengeAvatarData AHINPCKGKJG = 7;
	uint32 max_score = 11;
	uint32 JGBAINFDBAN = 14;
	uint32 panel_id = 4;
	uint32 stage_id = 12;
}
message StrongChallengeActivityInfo {
	map<uint32, StrongChallengeActivityData> ALCEDMLHFLM = 14;
}
message GetStrongChallengeActivityDataCsReq {
}
message GetStrongChallengeActivityDataScRsp {
	StrongChallengeActivityInfo GIILGFFKHDA = 6;
	uint32 retcode = 12;
}
message EnterStrongChallengeActivityStageCsReq {
	uint32 stage_id = 11;
	repeated uint32 buff_list = 3;
	repeated StrongChallengeAvatar avatar_list = 8;
}
message EnterStrongChallengeActivityStageScRsp {
	SceneBattleInfo battle_info = 1;
	uint32 retcode = 3;
	uint32 stage_id = 7;
}
message StrongChallengeActivityBattleEndScNotify {
	uint32 max_score = 2;
	uint32 score_id = 14;
	uint32 stage_id = 15;
	uint32 total_damage = 4;
	uint32 GGBECCHPHCD = 3;
	uint32 AHJFPNGDBDO = 7;
	uint32 JAMLOKNCAKC = 1;
	BattleEndStatus end_status = 6;
}
message PGBHMOLFBMM {
	uint32 star = 8;
	uint32 group_id = 12;
	uint32 NEDFIBONLKB = 3;
}
message GetSummonActivityDataCsReq {
}
message GetSummonActivityDataScRsp {
	uint32 retcode = 4;
	repeated PGBHMOLFBMM JHOMKEMCDMG = 9;
}
message ONOEPLFNELL {
	uint32 avatar_id = 14;
	AvatarType avatar_type = 3;
}
message EnterSummonActivityStageCsReq {
	uint32 group_id = 10;
	uint32 NEDFIBONLKB = 7;
	repeated ONOEPLFNELL avatar_list = 1;
	ONOEPLFNELL MNOEDECLHBJ = 2;
}
message EnterSummonActivityStageScRsp {
	SceneBattleInfo battle_info = 5;
	uint32 retcode = 10;
	uint32 group_id = 13;
	uint32 NEDFIBONLKB = 3;
}
message SummonActivityBattleEndScNotify {
	uint32 HMFFHGBKOGL = 8;
	uint32 NEDFIBONLKB = 1;
	uint32 star = 10;
	uint32 group_id = 5;
}
message HandInfo {
	bytes MJNNBLCDCBJ = 15;
	uint32 GFJIIABANLM = 7;
	MotionInfo hand_motion = 12;
	uint32 MCBIOHMIMGN = 3;
	uint32 config_id = 11;
}
message SwitchHandDataCsReq {
	uint32 config_id = 2;
}
message SwitchHandDataScRsp {
	repeated HandInfo LBOMDFHFFCF = 1;
	uint32 retcode = 13;
	uint32 ABOJJANDFNO = 15;
	uint32 DLNGHHDMJJM = 4;
}
message SwitchHandStartCsReq {
	uint32 config_id = 2;
}
message SwitchHandStartScRsp {
	uint32 retcode = 11;
	uint32 config_id = 1;
}
message SwitchHandFinishCsReq {
}
message SwitchHandFinishScRsp {
	uint32 retcode = 4;
	HandInfo CMFMACMIPEE = 11;
}
message PMGECPBKJCJ {
	uint32 KDLPEIGHJAK = 9;
	uint32 IEFMADJGADB = 1;
	uint32 group_id = 15;
	HandPropType op_type = 4;
}
message SwitchHandUpdateCsReq {
	PMGECPBKJCJ CLBMGBFANLC = 6;
	HandInfo OPBHJAGOAGG = 13;
}
message SwitchHandUpdateScRsp {
	HandInfo CMFMACMIPEE = 8;
	uint32 retcode = 12;
	PMGECPBKJCJ CLBMGBFANLC = 5;
}
message SwitchHandCoinUpdateCsReq {
	uint32 MCBIOHMIMGN = 2;
}
message SwitchHandCoinUpdateScRsp {
	uint32 retcode = 5;
	uint32 MCBIOHMIMGN = 15;
}
message SwitchHandResetHandPosCsReq {
	MotionInfo hand_motion = 9;
	uint32 config_id = 7;
}
message SwitchHandResetHandPosScRsp {
	uint32 retcode = 11;
	HandInfo LBOMDFHFFCF = 7;
}
message SwitchHandResetGameCsReq {
	HandInfo DPJNCBBOHKE = 14;
}
message SwitchHandResetGameScRsp {
	HandInfo LBOMDFHFFCF = 7;
	uint32 retcode = 11;
}
message ALEFDNLLKLB {
	DMJLKIFEMMN LJGCPNOGIFO = 3;
	uint32 EENJBPMNDOL = 12;
	repeated uint32 FDEIGEPCCBP = 2;
	JKMFMMPMNAM pending_action = 15;
	GJBNIIINKFB skill_info = 8;
	OCBOLHFOIGI AFPDJDKNENI = 4;
	PGGGCFBKDPK GBEABIMOBIC = 14;
	BPPMEIGAHGI NNCJOECKCKA = 5;
}
message GJBNIIINKFB {
	uint32 BILEGELKMCB = 2;
	repeated uint32 CCKHKBNMAPN = 3;
	uint32 MCEGAIBNMGB = 1;
}
message PGGGCFBKDPK {
	repeated uint32 CNBCKEFNFGE = 6;
	uint32 game_story_line_id = 1;
}
message MMOIBACBPKA {
	HDIJJMDPILE PJGBFKNJPNO = 2;
	uint32 value = 12;
}
message BPPMEIGAHGI {
	repeated MMOIBACBPKA MIGFMPJBELG = 9;
	uint32 IOMGDIKELIA = 5;
	uint32 PDMDKAPCOJM = 11;
}
message LEEHJGNBGNK {
	uint32 queue_position = 14;
	uint32 level = 12;
}
message OCBOLHFOIGI {
	repeated LEEHJGNBGNK FMDKHADMCOC = 1;
}
message DMJLKIFEMMN {
	oneof info_case {
		KLINPBNKIIA GAIBHJHDOHB = 6;
		PBMKKICMLDA KPJAFBCPEGI = 5;
	}
	uint32 IGHLABGGIJE = 665;
}
message PIIBOJCEJJN {
	uint32 daily_index = 13;
	uint32 GIMLNDLOFFA = 10;
}
message KLINPBNKIIA {
	repeated uint32 EIJDEOPOFNB = 13;
	repeated PIIBOJCEJJN DNCBPCENKIF = 11;
	SwordTrainingDailyPhaseType CCLJMNCKECP = 15;
}
message PBMKKICMLDA {
	uint32 FHBOMFBLGPD = 5;
}
message JKMFMMPMNAM {
	oneof info_case {
		DPDIEGOAGBP KANGPCOKFNE = 4;
		FPEGPJCEOEI HHCIFNFMKLA = 7;
		FKHFONPKDIP OCGPLMNKMLK = 11;
		AEJCCMEPLGO AKMNKLADOLM = 6;
		NIGCOPGHAMJ KKDDANDLFBD = 10;
		KHPHAIFNJEI AFFNCONKEKP = 1;
		PLODIDCJOKA CNIBNGJDNJP = 2;
		KHCAKPOMGNK OAPMKLFJKKG = 14;
	}
}
message DPDIEGOAGBP {
}
message FPEGPJCEOEI {
}
message FKHFONPKDIP {
	uint32 dialogue_id = 2;
}
message AEJCCMEPLGO {
}
message NIGCOPGHAMJ {
	uint32 BGLEHMKMAPG = 12;
	bool HHGAPDFINDI = 15;
}
message KHPHAIFNJEI {
}
message PLODIDCJOKA {
}
message KHCAKPOMGNK {
	bool MMKIJAEMNBL = 10;
	uint32 BGLEHMKMAPG = 9;
}
message OMOJDEIFDAM {
	PKHJBPMIBBA source = 1;
	CGHKIDBJHFH rogue_action = 14;
}
message CGHKIDBJHFH {
	oneof info_case {
		NLCALKLPGOG PJABKIFDNND = 15;
		OJLEHPPJBBC NIHIFEMOKAM = 1;
		OJLEHPPJBBC MLCGALIHAIP = 7;
		OCJGNPIFOBM BIDDDNIPBLE = 12;
		NMENKIGNBCA DIJHPEHONOK = 11;
		NIGCOPGHAMJ EDHBKECGOLI = 4;
		HJKDNGIHMAA MFHBHKIMDCA = 13;
		uint32 NPFPAJLCLNN = 14;
		uint32 IOMGDIKELIA = 1301;
		KHCAKPOMGNK GKAHDHELILD = 905;
		KHPHAIFNJEI GNPEAMELJDJ = 34;
		uint32 CBAKIHCDENP = 312;
	}
}
message HJKDNGIHMAA {
	uint32 dialogue_id = 6;
}
message NLCALKLPGOG {
	uint32 BMALPKEKBEL = 10;
	uint32 OGJOFMCMFPG = 8;
	HDIJJMDPILE PJGBFKNJPNO = 4;
}
message OJLEHPPJBBC {
	uint32 BMALPKEKBEL = 6;
	uint32 OGJOFMCMFPG = 4;
}
message OCJGNPIFOBM {
	uint32 GFFBDANDHMK = 3;
	uint32 level = 10;
	uint32 queue_position = 13;
}
message NMENKIGNBCA {
	DMJLKIFEMMN IFNMBNGIFPH = 5;
	uint32 EENJBPMNDOL = 13;
}
message FGPBIBIJCOH {
	bool HHGAPDFINDI = 2;
	uint32 BGLEHMKMAPG = 7;
}
message SwordTrainingGameSyncChangeScNotify {
	repeated OMOJDEIFDAM LEADMNEIMDP = 6;
}
message HDFKPEEBGEN {
	uint32 progress = 8;
	uint32 id = 4;
}
message NOKODMNOHMN {
	repeated uint32 ONILFFENAMO = 2;
	repeated HDFKPEEBGEN NCKCMGCBEHK = 10;
}
message GetSwordTrainingDataCsReq {
}
message GetSwordTrainingDataScRsp {
	uint32 retcode = 14;
	uint32 DCHGIODEDDK = 2;
	NOKODMNOHMN KJKBKEGIGHK = 8;
	repeated uint32 CNBCKEFNFGE = 6;
	repeated uint32 JOEFNHGGAGO = 1;
	bool KLBPECANFIG = 3;
	ALEFDNLLKLB GAJBFPCPIGM = 11;
	repeated uint32 FABKPHMJGHL = 5;
}
message SwordTrainingTurnActionCsReq {
	repeated uint32 BHNFGPEHOMO = 15;
	repeated uint32 PHAJEHIBKFI = 14;
}
message SwordTrainingTurnActionScRsp {
	uint32 retcode = 11;
	repeated uint32 BHNFGPEHOMO = 14;
}
message SwordTrainingDailyPhaseConfirmCsReq {
	SwordTrainingDailyPhaseType IFENLNHLBAB = 15;
}
message SwordTrainingDailyPhaseConfirmScRsp {
	uint32 retcode = 4;
	bool MLLAEFJEMCF = 9;
}
message SwordTrainingDialogueSelectOptionCsReq {
	uint32 option_id = 15;
}
message SwordTrainingDialogueSelectOptionScRsp {
	uint32 retcode = 1;
}
message SwordTrainingExamResultConfirmCsReq {
}
message SwordTrainingExamResultConfirmScRsp {
	uint32 retcode = 1;
}
message EnterSwordTrainingExamCsReq {
}
message EnterSwordTrainingExamScRsp {
	SceneBattleInfo battle_info = 15;
	uint32 retcode = 4;
}
message SwordTrainingLearnSkillCsReq {
	uint32 skill_id = 7;
}
message SwordTrainingLearnSkillScRsp {
	uint32 retcode = 2;
	uint32 skill_id = 1;
}
message SwordTrainingStartGameCsReq {
	uint32 game_story_line_id = 3;
}
message SwordTrainingStartGameScRsp {
	ALEFDNLLKLB GAJBFPCPIGM = 13;
	uint32 retcode = 3;
}
message SwordTrainingStoryConfirmCsReq {
	uint32 BGLEHMKMAPG = 5;
}
message SwordTrainingStoryConfirmScRsp {
	uint32 BGLEHMKMAPG = 5;
	uint32 retcode = 8;
}
message SwordTrainingGiveUpGameCsReq {
}
message SwordTrainingGiveUpGameScRsp {
	uint32 retcode = 13;
}
message SwordTrainingGameSettleScNotify {
	uint32 PIGEEBCKCOO = 15;
	uint32 IFNMBNGIFPH = 13;
	uint32 game_story_line_id = 6;
	uint32 FPBNIPMHANH = 14;
	repeated uint32 CCDCHKKMGJF = 1;
	HDMKPHALALG reason = 5;
	repeated uint32 PPIMFPOOOKB = 8;
	ItemList reward = 2;
}
message SwordTrainingUnlockSyncScNotify {
	repeated uint32 ONILFFENAMO = 15;
	repeated HDFKPEEBGEN NCKCMGCBEHK = 2;
}
message SwordTrainingSelectEndingCsReq {
	uint32 DECJMBHNNHD = 2;
}
message SwordTrainingSelectEndingScRsp {
	uint32 retcode = 1;
	uint32 DECJMBHNNHD = 3;
}
message SwordTrainingRestoreGameCsReq {
}
message SwordTrainingRestoreGameScRsp {
	uint32 retcode = 1;
	ALEFDNLLKLB GAJBFPCPIGM = 13;
}
message SwordTrainingStoryBattleCsReq {
}
message SwordTrainingStoryBattleScRsp {
	SceneBattleInfo battle_info = 12;
	uint32 retcode = 11;
}
message SwordTrainingActionTurnSettleScNotify {
	uint32 CGFCMKNCCDC = 3;
	repeated MMOIBACBPKA MCCCNLIIIBC = 14;
}
message SwordTrainingResumeGameCsReq {
	uint32 game_story_line_id = 5;
}
message SwordTrainingResumeGameScRsp {
	uint32 retcode = 7;
	ALEFDNLLKLB GAJBFPCPIGM = 3;
}
message SwordTrainingSetSkillTraceCsReq {
	uint32 skill_id = 13;
}
message SwordTrainingSetSkillTraceScRsp {
	uint32 retcode = 15;
	uint32 skill_id = 14;
}
message SwordTrainingMarkEndingViewedCsReq {
}
message SwordTrainingMarkEndingViewedScRsp {
	uint32 retcode = 10;
}
message BasicModuleSync {
	uint32 stamina = 15;
	uint32 week_cocoon_finished_count = 13;
}
message PlayerBoardModuleSync {
	string signature = 12;
	repeated HeadIconData unlocked_head_icon_list = 3;
	bool PAGJKDJIGPI = 14;
	repeated uint32 ALMMHKFKHLK = 8;
}
message AvatarSync {
	repeated Avatar avatar_list = 5;
}
message MissionSync {
	repeated FHABEIKAFBO GAEGMBIOGOH = 15;
	repeated uint32 ANIHPCKNGBM = 2;
	repeated uint32 HNEPOEDCIDK = 7;
	repeated IKAMMKLBOCO EJBGGJONBOL = 10;
	repeated Mission mission_list = 1;
	repeated uint32 MCFONOPKOKD = 5;
	repeated uint32 finished_main_mission_id_list = 9;
}
message DMBMPAHKHLA {
	repeated uint32 DINGKFDBCJJ = 6;
	repeated uint32 LKKIDNJCFJA = 15;
}
message SyncStatus {
	repeated SectionStatus section_status = 8;
	repeated uint32 CNGLDJNPOPI = 7;
	repeated GroupStatus message_group_status = 15;
	repeated uint32 LNEJLGEFPLE = 2;
}
message PlayerSyncScNotify {
	uint32 total_achievement_exp = 1146;
	repeated uint32 new_item_hint_list = 1921;
	repeated MultiPathAvatarInfo multi_path_avatar_info_list = 1450;
	DMBMPAHKHLA OMJOPKGJPLG = 2024;
	repeated Relic relic_list = 10;
	repeated Equipment equipment_list = 9;
	BasicModuleSync basic_module_sync = 11;
	repeated Material material_list = 15;
	PlayerBasicInfo basic_info = 12;
	PlayerBoardModuleSync playerboard_module_sync = 2018;
	repeated Quest quest_list = 3;
	repeated Material FCOKFFEAPMI = 1525;
	AvatarSync avatar_sync = 5;
	repeated WaitDelResource wait_del_resource_list = 6;
	SyncStatus sync_status = 184;
	repeated uint32 del_relic_list = 7;
	MissionSync mission_sync = 8;
	ItemList MJOKLHFPGAD = 1165;
	repeated GKDIHIFFHFD IGIPEIMGEAA = 736;
	repeated uint32 del_equipment_list = 14;
}
message GetNpcTakenRewardCsReq {
	uint32 npc_id = 1;
}
message GetNpcTakenRewardScRsp {
	uint32 retcode = 4;
	repeated uint32 talk_event_list = 15;
	uint32 npc_id = 8;
}
message TakeTalkRewardCsReq {
	uint32 IEMOEOIMHMA = 11;
	Vector OLCONCNJMMP = 1;
}
message TakeTalkRewardScRsp {
	uint32 retcode = 5;
	uint32 IEMOEOIMHMA = 10;
	ItemList reward = 11;
}
message GetFirstTalkNpcCsReq {
	repeated uint32 npc_id_list = 4;
}
message FirstNpcTalkInfo {
	uint32 npc_id = 3;
	bool is_meet = 11;
}
message GetFirstTalkNpcScRsp {
	repeated FirstNpcTalkInfo npc_meet_status_list = 7;
	uint32 retcode = 14;
}
message FinishFirstTalkNpcCsReq {
	uint32 npc_id = 9;
}
message FinishFirstTalkNpcScRsp {
	uint32 retcode = 1;
	uint32 npc_id = 5;
}
message SelectInclinationTextCsReq {
	uint32 talk_sentence_id = 4;
}
message SelectInclinationTextScRsp {
	uint32 retcode = 12;
	uint32 talk_sentence_id = 11;
}
message NpcMeetByPerformanceStatus {
	uint32 performance_id = 12;
	bool is_meet = 6;
}
message GetFirstTalkByPerformanceNpcCsReq {
	repeated uint32 performance_id_list = 9;
}
message GetFirstTalkByPerformanceNpcScRsp {
	uint32 retcode = 5;
	repeated NpcMeetByPerformanceStatus npc_meet_status_list = 7;
}
message FinishFirstTalkByPerformanceNpcCsReq {
	uint32 performance_id = 6;
}
message FinishFirstTalkByPerformanceNpcScRsp {
	uint32 performance_id = 5;
	uint32 retcode = 15;
	ItemList reward = 3;
}
message EJDGKNKHKHH {
	uint32 level = 13;
	uint32 id = 14;
}
message BKMGDPHACKE {
	uint32 id = 11;
	bool BIINNCNDPCG = 8;
}
message FLOICKMNMLL {
	repeated EJDGKNKHKHH CNIJNMDGEDD = 7;
	repeated BKMGDPHACKE DGPEJFLJNOJ = 4;
}
message OFDGOGDBHAC {
	repeated uint32 LIBLLKBLDCH = 12;
}
message TarotBookGetDataCsReq {
}
message TarotBookGetDataScRsp {
	uint32 retcode = 7;
	OFDGOGDBHAC IPNINOPEKBP = 6;
	map<uint32, uint32> JKEMDJIAMHI = 12;
	FLOICKMNMLL HEFJEJHOJEA = 1;
	uint32 energy_info = 5;
	map<uint32, uint32> NDCJJPGNFLN = 14;
	uint32 FDCKFKFKHLO = 10;
}
message TarotBookOpenPackCsReq {
}
message TarotBookOpenPackScRsp {
	uint32 energy_info = 2;
	map<uint32, uint32> IIKBCNBJKKI = 11;
	uint32 FDCKFKFKHLO = 12;
	uint32 retcode = 3;
	map<uint32, uint32> CJENCDIFLCF = 13;
}
message TarotBookUnlockStoryCsReq {
	repeated uint32 PPIMFPOOOKB = 11;
}
message TarotBookUnlockStoryScRsp {
	map<uint32, uint32> JKEMDJIAMHI = 11;
	map<uint32, uint32> NDCJJPGNFLN = 12;
	EJDGKNKHKHH PPDGGOCIEDE = 15;
	repeated uint32 PPIMFPOOOKB = 9;
	uint32 retcode = 14;
}
message TarotBookFinishStoryCsReq {
	uint32 BGLEHMKMAPG = 14;
}
message TarotBookFinishStoryScRsp {
	FLOICKMNMLL HEFJEJHOJEA = 12;
	uint32 BGLEHMKMAPG = 6;
	uint32 retcode = 13;
}
message TarotBookModifyEnergyScNotify {
	uint32 energy_info = 12;
	uint32 sub_mission_id = 15;
}
message TarotBookFinishInteractionCsReq {
	uint32 NBLHJJJEGNO = 11;
}
message TarotBookFinishInteractionScRsp {
	uint32 retcode = 4;
	uint32 NBLHJJJEGNO = 3;
}
message TelevisionActivityData {
	uint32 KEGCJPPOKBK = 12;
	uint32 max_score = 9;
	uint32 NINLFBGLBLL = 10;
}
message GetTelevisionActivityDataCsReq {
}
message GetTelevisionActivityDataScRsp {
	uint32 retcode = 10;
	repeated TelevisionActivityData KADGMHHGKMP = 11;
}
message TelevisionActivityDataChangeScNotify {
	repeated TelevisionActivityData KADGMHHGKMP = 13;
}
message TelevisionActivityBattleEndScNotify {
	uint32 HOEHIOBIIEJ = 15;
	uint32 FCEPIPCCOMN = 14;
	TelevisionActivityData DFCCBDPNLEA = 1;
	uint32 NPJEECEDPOK = 5;
	uint32 FIDIOIHLLGA = 11;
}
message DEPEAHJNKGJ {
	uint32 avatar_id = 2;
	AvatarType avatar_type = 6;
}
message EnterTelevisionActivityStageCsReq {
	repeated uint32 buff_list = 3;
	uint32 NINLFBGLBLL = 15;
	repeated DEPEAHJNKGJ avatar_list = 8;
}
message EnterTelevisionActivityStageScRsp {
	SceneBattleInfo battle_info = 12;
	uint32 NINLFBGLBLL = 14;
	uint32 retcode = 1;
}
message IOMOPENEMBF {
	uint32 FANOKEMBMPB = 6;
	string HBJKEEBDJML = 5;
	uint32 ADINNBPINAK = 2;
	string NKIOIIOIAOG = 10;
	uint32 NLFNJPMACPM = 12;
}
message TextJoinSaveCsReq {
	string HBJKEEBDJML = 8;
	uint32 ADINNBPINAK = 15;
	uint32 FANOKEMBMPB = 14;
}
message TextJoinSaveScRsp {
	uint32 FANOKEMBMPB = 6;
	uint32 ADINNBPINAK = 1;
	uint32 retcode = 11;
	string HBJKEEBDJML = 15;
}
message TextJoinQueryCsReq {
	repeated uint32 PONENNKHCMJ = 12;
}
message TextJoinQueryScRsp {
	repeated IOMOPENEMBF NKKKOPACOKG = 13;
	uint32 retcode = 10;
}
message TextJoinBatchSaveCsReq {
	repeated IOMOPENEMBF NKKKOPACOKG = 10;
}
message TextJoinBatchSaveScRsp {
	uint32 retcode = 5;
	repeated IOMOPENEMBF NKKKOPACOKG = 15;
}
message CGLIGECGAKN {
	uint32 stage_id = 8;
	uint32 max_score = 2;
}
message GetTrackPhotoActivityDataCsReq {
}
message GetTrackPhotoActivityDataScRsp {
	repeated CGLIGECGAKN EMGFLDOPKGL = 7;
	uint32 retcode = 11;
}
message GEOAEOFJOGC {
	uint32 entity_id = 14;
	bool KFBOAONLDEM = 4;
}
message SettleTrackPhotoStageCsReq {
	uint32 stage_id = 11;
	repeated GEOAEOFJOGC LPIHANIOJFI = 8;
	uint32 cost_time = 6;
}
message SettleTrackPhotoStageScRsp {
	uint32 stage_id = 2;
	uint32 score_id = 7;
	repeated GEOAEOFJOGC LPIHANIOJFI = 6;
	uint32 retcode = 12;
}
message StartTrackPhotoStageCsReq {
	uint32 stage_id = 4;
	bool DJFCMLIPDAB = 6;
}
message StartTrackPhotoStageScRsp {
	uint32 retcode = 13;
	uint32 MDLNDGIJNML = 14;
}
message QuitTrackPhotoStageCsReq {
	uint32 stage_id = 5;
}
message QuitTrackPhotoStageScRsp {
	uint32 retcode = 13;
}
message FPLMDELMJKB {
	repeated uint32 HCPGEALODME = 4;
	uint32 unique_id = 9;
	uint32 card_id = 5;
	uint32 cur_index = 14;
}
message HBCINIKPAFI {
	repeated FPLMDELMJKB FODPDMPBAND = 9;
}
message CGCONJFFFBB {
	HBCINIKPAFI FODPDMPBAND = 13;
	uint32 HAFCKONEHFM = 7;
	bool LKLLMPOKOGH = 15;
}
message KKNLMCJIGAF {
	uint32 GHFAIHLCELN = 3;
	uint32 display_value = 11;
	uint32 unique_id = 4;
	uint32 HFNHLCFNHKD = 6;
}
message KACKJJDJONI {
	uint32 NCDCGFKOLOE = 12;
	uint32 JODNMDOAMKC = 8;
	uint32 PAPKGJOJPII = 2;
	uint32 HCFOCPKFOBG = 9;
	repeated uint32 KDDPPGOCOMB = 11;
	uint32 BLHPICIOFAI = 7;
}
message EDFABKMNBLI {
	repeated KKNLMCJIGAF MKOAMBMKDID = 14;
	uint32 LLJEFMPDJKH = 15;
	KACKJJDJONI GDGHCBGHLND = 10;
	uint32 BIHMELMJHPO = 11;
}
message FPDFCGKIILE {
	uint32 KPAKAPNHNND = 11;
	uint32 KHHLNGGECPB = 10;
}
message GOCKBLNJIBG {
	uint32 skill_id = 2;
	uint32 JGMIPMDPPIJ = 7;
	uint32 skill_level = 12;
}
message MAONNNELGCC {
	FPDFCGKIILE BOJBPOELFCI = 8;
	uint32 passenger_id = 11;
	uint32 MIHLFGCGKNO = 3;
}
message TrainPartyPassenger {
	uint32 record_id = 3;
	uint32 passenger_id = 13;
	bool CINMLCKBHIM = 5;
	repeated uint32 PCLMNBILAPH = 2;
}
message LHLEEHCBMOL {
	repeated MAONNNELGCC KBGDCEHIFFJ = 6;
	uint32 cur_index = 5;
	repeated GOCKBLNJIBG skill_list = 7;
	uint32 PKIDBDGPILO = 9;
	repeated uint32 CFKPAICDJPJ = 8;
	uint32 OAFAAEEMNFB = 3;
}
message TrainPartyPassengerInfo {
	repeated TrainPartyPassenger passenger_info_list = 14;
	repeated uint32 PCLMNBILAPH = 5;
}
message TrainPartyArea {
	uint32 progress = 15;
	repeated uint32 static_prop_id_list = 3;
	repeated uint32 step_id_list = 10;
	repeated uint32 verify_step_id_list = 5;
	repeated AreaDynamicInfo dynamic_info = 1;
	AreaStepInfo area_step_info = 6;
	uint32 area_id = 4;
}
message INDFFNNHOHC {
	repeated uint32 step_id_list = 9;
	uint32 area_id = 14;
}
message PPKDPAJPAGF {
	uint32 JLHDKOLMEDA = 5;
	uint32 GJFHPCIEBOJ = 15;
	BuildGoalStep status = 11;
}
message AreaStepInfo {
	repeated PPKDPAJPAGF IMEKHGCIEDN = 1;
	uint32 HEIDCIKEDPD = 2;
}
message AreaDynamicInfo {
	uint32 diy_dynamic_id = 2;
	uint32 dice_slot_id = 3;
}
message TrainPartyInfo {
	repeated TrainPartyArea area_list = 5;
	uint32 PPFFKFGOLLJ = 4;
	repeated uint32 CIGACGHPDGK = 3;
	repeated uint32 dynamic_id_list = 11;
	uint32 OBOKGLCMKKE = 13;
	uint32 CNAJOIGNMLJ = 12;
	uint32 cur_fund = 2;
	repeated INDFFNNHOHC EOHBBEAKODF = 6;
	uint32 EEBNAAPBKCN = 8;
	uint32 FLBNEKGIDBO = 1;
}
message TrainPartyData {
	CDNGNDNLNAJ CEFMBAFCNPK = 5;
	uint32 AIANOFKNLHG = 11;
	TrainPartyInfo train_party_info = 7;
	uint32 record_id = 8;
	TrainPartyPassengerInfo passenger_info = 15;
	uint32 unlock_area_num = 10;
}
message CDNGNDNLNAJ {
	LHLEEHCBMOL AAKHCNEDBCD = 2;
	CGCONJFFFBB HBHEAJIJEGF = 3;
	uint32 GONEAKBDGEK = 6;
	EDFABKMNBLI EEIHDCPOLEF = 14;
	GCFEHMENONM GBFCLMLIMHC = 10;
}
message TrainPartyGetDataCsReq {
}
message TrainPartyGetDataScRsp {
	TrainPartyData train_party_data = 6;
	uint32 retcode = 7;
}
message TrainPartyUseCardCsReq {
	uint32 EEGHHHKCGHB = 1;
}
message TrainPartyUseCardScRsp {
	uint32 retcode = 2;
	uint32 EEGHHHKCGHB = 11;
}
message TrainPartyMoveScNotify {
	uint32 GHEEOEOHMFI = 5;
	repeated KKNLMCJIGAF PEADIOCNIMF = 7;
}
message TrainPartySettleNotify {
	FKMBFLMEGEB HILOMEKAFBP = 4;
	uint32 EEGHHHKCGHB = 10;
}
message FKMBFLMEGEB {
	repeated MAONNNELGCC KBGDCEHIFFJ = 2;
	repeated BAEPNHDCIEM FOAPLIALHDI = 13;
	uint32 HEIJCNLNHHI = 6;
}
message BAEPNHDCIEM {
	uint32 IJFIHGCKNHG = 6;
	repeated uint32 switch_list = 15;
}
message NCLCBOPCEJG {
	FPLMDELMJKB HMFFHBHALGE = 2;
}
message IDBEOMMCKIK {
	FPDFCGKIILE BOJBPOELFCI = 15;
	uint32 passenger_id = 3;
}
message IBOMHKHBAAO {
	repeated IDBEOMMCKIK NFEOLNAOGDK = 8;
}
message ENJHDLHKINO {
	GCFEHMENONM pending_action = 1;
}
message FNOGHGHPJPD {
	uint32 cur_index = 1;
}
message JLDHCFGGEAO {
	GOCKBLNJIBG MHMEDDEHBHI = 5;
}
message PFGIAHAIDLM {
	repeated GOCKBLNJIBG skill_list = 8;
}
message JHMNLCOBJCJ {
	TrainPartyPassenger ABBNHMGGPIL = 7;
}
message FKJLBFNIGGM {
	repeated uint32 PCLMNBILAPH = 5;
}
message HAKMEBIAJCF {
	repeated KKNLMCJIGAF MKOAMBMKDID = 6;
}
message HMOPIBLFCLN {
	uint32 HAFCKONEHFM = 3;
	KACKJJDJONI GDGHCBGHLND = 4;
	HBCINIKPAFI LNMMKFMEAJM = 2;
	bool LKLLMPOKOGH = 9;
}
message PLKCMGDEDCK {
	oneof LGNAKLFMHFF {
		HBCINIKPAFI LNMMKFMEAJM = 770;
		IBOMHKHBAAO FPFDJNDNPIM = 103;
		ENJHDLHKINO NJKJNBDBOCA = 1766;
		FNOGHGHPJPD LGJGBIGHONP = 1346;
		HAKMEBIAJCF DGNKBNGIPKI = 1638;
		JLDHCFGGEAO MKKPCHHNHCJ = 1237;
		HMOPIBLFCLN PKPJEFGGBOO = 218;
		PFGIAHAIDLM NHACNNJPALP = 779;
		JHMNLCOBJCJ AHPDPOOLJLE = 1134;
		FKJLBFNIGGM AFMIEICDNEA = 993;
	}
	TrainPartySrc src = 15;
}
message TrainPartySyncUpdateScNotify {
	repeated PLKCMGDEDCK FFLPKLLDHLM = 8;
}
message GCFEHMENONM {
	oneof AJOBHBKLMJI {
		NJKENNCJLCF IAMKDJCFMIB = 606;
		MIIAIODLEOA LEEHAEOBEBA = 1427;
		EMMDENJBFPF OAOOFNJGIDH = 1698;
		EPBGFBEDANM PMMGOCJFEEJ = 627;
	}
	uint32 queue_position = 1;
}
message HHPIAFBHJCF {
	uint32 option_id = 1;
	bool confirm = 15;
}
message NJKENNCJLCF {
	repeated HHPIAFBHJCF option_list = 12;
	uint32 event_id = 7;
	TrainPartyEventType HOIOKBKGFDN = 2;
}
message HPFKGDDIFHG {
	uint32 event_id = 7;
	uint32 option_id = 14;
}
message BFIFANAOCPC {
	FKMBFLMEGEB HILOMEKAFBP = 3;
}
message OCMHOFEMNHI {
	uint32 JGMIPMDPPIJ = 9;
	uint32 skill_id = 1;
	uint32 level = 7;
}
message MIIAIODLEOA {
	repeated OCMHOFEMNHI GANAKFAIBFC = 2;
	uint32 passenger_id = 15;
}
message EPBGFBEDANM {
	repeated GOCKBLNJIBG LLIJAGDKJCO = 3;
	uint32 IDAIHKMMDEK = 2;
}
message GLBFBNHFCNO {
	uint32 IEHHDALHGPI = 15;
}
message MBINMAONBCD {
	repeated GOCKBLNJIBG skill_list = 4;
}
message PJJDMMBKKCN {
	uint32 unique_id = 7;
	uint32 passenger_id = 6;
	uint32 KHHLNGGECPB = 13;
}
message HEOJLDBKKGE {
	uint32 num = 7;
	uint32 passenger_id = 14;
}
message EMMDENJBFPF {
	uint32 NPJEECEDPOK = 4;
	repeated BJGLDLJKIDH KJMLIAMGDLE = 13;
	uint32 CFOKIGIHCFP = 3;
	uint32 MLIIJGOAECK = 11;
	repeated HEOJLDBKKGE CCGBHHFBAFJ = 15;
	repeated PJJDMMBKKCN MMEIPHBNKED = 6;
	uint32 KMLPPMNMPKE = 5;
	uint32 MLIPPLKIIFD = 8;
}
message PlaySkillBrief {
	TrainPartyMtSkillBriefType SkillType = 8;
	uint32 SkillParam = 7;
	uint32 SkillId = 9;
}
message PlayCardBrief {
	uint32 UniqueId = 13;
	repeated PlaySkillBrief SkillBriefList = 2;
	uint32 BaseValue = 7;
}
message PHOEFKFBIKD {
	uint32 MKEGODINHNC = 5;
	ItemList OJCJNBGNICF = 14;
	repeated uint32 NPOJMHHIBKI = 11;
}
message PECGLKCICGO {
	repeated uint32 CANNGFDAFOE = 13;
}
message JBOCJHNDAMC {
	repeated PlayCardBrief OMGGNAEAHIF = 11;
	repeated PJJDMMBKKCN MMEIPHBNKED = 12;
	uint32 NPJEECEDPOK = 1;
	repeated HEOJLDBKKGE CCGBHHFBAFJ = 13;
	repeated PlaySkillBrief BIHFECJHPGH = 10;
	CateGoryType IJPPKNKNLNL = 7;
	uint32 CFOKIGIHCFP = 15;
	PHOEFKFBIKD MFAKJHFMAIB = 8;
	KACKJJDJONI GDGHCBGHLND = 5;
	uint32 score_id = 4;
}
message ENCJKPGOIAL {
	repeated uint32 CANNGFDAFOE = 6;
}
message FBGLLDNLGPE {
	uint32 KMLPPMNMPKE = 4;
	repeated HEOJLDBKKGE CCGBHHFBAFJ = 13;
	repeated PlaySkillBrief NICGNEMCHED = 10;
	repeated PJJDMMBKKCN MMEIPHBNKED = 7;
}
message TrainPartyHandlePendingActionCsReq {
	oneof PHKGCBNEJCO {
		HPFKGDDIFHG IAMKDJCFMIB = 933;
		GLBFBNHFCNO PMMGOCJFEEJ = 599;
		PECGLKCICGO LGBJAELDPNB = 401;
		ENCJKPGOIAL BGJMFBHCMKL = 540;
	}
	uint32 queue_position = 6;
}
message TrainPartyHandlePendingActionScRsp {
	oneof PHKGCBNEJCO {
		BFIFANAOCPC LAELPNHHJIK = 852;
		MBINMAONBCD PMOJBJMKFAN = 54;
		JBOCJHNDAMC AFDNDBADDKP = 318;
		FBGLLDNLGPE LEDFNCDFAMK = 1841;
	}
	FKMBFLMEGEB HILOMEKAFBP = 12;
	uint32 retcode = 7;
	bool DLNCBJFGKAA = 3;
	uint32 queue_position = 11;
}
message TrainPartyBuildStartStepCsReq {
	uint32 HEIDCIKEDPD = 6;
	AreaDynamicInfo ALAODDBGHPL = 8;
	uint32 area_id = 4;
	uint32 GJFHPCIEBOJ = 15;
}
message TrainPartyBuildStartStepScRsp {
	uint32 retcode = 11;
	uint32 cur_fund = 14;
}
message CIKOHJNAGON {
	AreaDynamicInfo KCJBMKJLFBA = 6;
	uint32 area_id = 3;
}
message TrainPartyBuildDiyCsReq {
	uint32 dice_slot_id = 7;
	bool GANHKLNPAPI = 8;
	uint32 diy_dynamic_id = 12;
	uint32 area_id = 2;
}
message TrainPartyBuildDiyScRsp {
	uint32 area_id = 3;
	repeated CIKOHJNAGON FFLPKLLDHLM = 11;
	uint32 retcode = 8;
	repeated AreaDynamicInfo dynamic_info = 6;
	bool GANHKLNPAPI = 15;
}
message KMBDKDLNHMC {
	repeated PPKDPAJPAGF CGFIHJCCGCD = 1;
	uint32 OKHCJKLJGHF = 7;
}
message JNAHOJLCNJA {
	uint32 area_id = 2;
	repeated PPKDPAJPAGF CGFIHJCCGCD = 15;
	uint32 progress = 3;
	uint32 HEIDCIKEDPD = 8;
}
message IEFKFKFMEPL {
	uint32 PPFFKFGOLLJ = 6;
	uint32 OBOKGLCMKKE = 10;
}
message FNPMCDNKDFJ {
	uint32 BDCCOPIEHIN = 3;
}
message GEGJHBMLOEM {
	uint32 FLBNEKGIDBO = 9;
}
message BFDDPPLMKPG {
	uint32 area_id = 2;
	uint32 MNLEIKIEHHP = 4;
}
message KMLEHLLOGJG {
	uint32 diy_dynamic_id = 12;
}
message OKFGJEIHLJM {
	uint32 FBFIHJIIABO = 2;
}
message KAKJCJOMFGH {
	uint32 CNAJOIGNMLJ = 8;
}
message MCLNCBCPAFF {
	repeated uint32 CGFIHJCCGCD = 6;
	uint32 area_id = 1;
}
message LNDGCGOBDJL {
	repeated MCLNCBCPAFF area_list = 2;
}
message PPKGJKIFELK {
	oneof LGNAKLFMHFF {
		OKFGJEIHLJM MAPLOGDNBGB = 419;
		KMBDKDLNHMC EKFLEJANKME = 674;
		JNAHOJLCNJA JOBEJAFKECD = 617;
		IEFKFKFMEPL DBLBHNPHHKB = 1000;
		FNPMCDNKDFJ CKBNOJAPNNB = 1462;
		BFDDPPLMKPG NEPCONHOFKJ = 251;
		KMLEHLLOGJG EGDGPIKBNLK = 304;
		GEGJHBMLOEM BHOFHHEMLOG = 148;
		KAKJCJOMFGH HAEADFOOLND = 548;
		LNDGCGOBDJL GAIBCBGHHGL = 233;
	}
}
message TrainPartyBuildingUpdateNotify {
	repeated PPKGJKIFELK BJDFKEMKAOL = 5;
}
message TrainPartyEnterCsReq {
}
message TrainPartyEnterScRsp {
	uint32 retcode = 10;
}
message TrainPartyLeaveCsReq {
}
message TrainPartyLeaveScRsp {
	uint32 retcode = 2;
}
message BJGLDLJKIDH {
	uint32 level = 2;
	CateGoryType JLLNMGBENAF = 12;
}
message TrainPartyGamePlaySettleNotify {
	TrainPartyPassengerInfo HANFPHGEMGF = 13;
	uint32 AIANOFKNLHG = 14;
	uint32 record_id = 15;
	repeated uint32 OLBAGKMFDAJ = 6;
}
message TrainPartyGamePlayStartCsReq {
	uint32 GONEAKBDGEK = 8;
	repeated uint32 KBGDCEHIFFJ = 12;
}
message TrainPartyGamePlayStartScRsp {
	uint32 retcode = 1;
	CDNGNDNLNAJ KMDPHCMBJGB = 14;
}
message TrainPartyAddBuildDynamicBuffCsReq {
}
message TrainPartyAddBuildDynamicBuffScRsp {
	uint32 retcode = 12;
	uint32 buff_id = 10;
}
message TrainPartyTakeBuildLevelAwardCsReq {
	uint32 ECCLPIFMMPP = 10;
}
message TrainPartyTakeBuildLevelAwardScRsp {
	uint32 ECCLPIFMMPP = 7;
	uint32 retcode = 14;
	ItemList item_list = 11;
}
message TrainVisitorBehavior {
	bool is_meet = 2;
	uint32 visitor_id = 15;
}
message TrainVisitorBehaviorFinishCsReq {
	uint32 visitor_id = 5;
}
message TrainVisitorBehaviorFinishScRsp {
	uint32 visitor_id = 5;
	ItemList reward = 9;
	uint32 retcode = 8;
}
message GetTrainVisitorBehaviorCsReq {
	repeated uint32 OIFNLNBKDMA = 5;
}
message GetTrainVisitorBehaviorScRsp {
	uint32 retcode = 6;
	repeated TrainVisitorBehavior ECFOPDHGKFB = 10;
}
message TrainRefreshTimeNotify {
	uint64 refresh_timestamp_ms = 9;
}
message TrainVisitorRewardSendNotify {
	TrainVisitorRewardSendType type = 9;
	ItemList reward = 8;
	uint32 visitor_id = 12;
}
message TrainVisitorInfo {
	bool toast_finish_main_mission = 8;
	uint32 mission_id = 3;
	TrainVisitorStatus status = 2;
	repeated uint32 EDHHGCPDKIK = 6;
	uint32 visitor_id = 5;
}
message GetTrainVisitorRegisterCsReq {
	TrainVisitorRegisterGetType type = 6;
}
message GetTrainVisitorRegisterScRsp {
	repeated uint32 FAMHPMFOIJH = 7;
	uint32 retcode = 10;
	repeated TrainVisitorInfo FDMFKALJBAJ = 3;
}
message TakeTrainVisitorUntakenBehaviorRewardCsReq {
	uint32 visitor_id = 5;
}
message TakeTrainVisitorUntakenBehaviorRewardScRsp {
	uint32 retcode = 7;
	repeated uint32 EDHHGCPDKIK = 12;
	uint32 visitor_id = 9;
}
message ShowNewSupplementVisitorCsReq {
	repeated uint32 FAMHPMFOIJH = 5;
}
message ShowNewSupplementVisitorScRsp {
	uint32 retcode = 3;
}
message NHBDDINFKOH {
	uint32 KBCDECDNEFM = 2;
	uint32 item_id = 11;
	uint32 IIMOPLCFHAH = 6;
	int32 IEAGBPEMFLG = 8;
	uint64 unique_id = 10;
	int32 LLJAEGOBHMP = 12;
}
message KCHJHCLJOCK {
	HGKKPPLJBOI CLFGFABOIOP = 15;
	repeated NHBDDINFKOH HJBPKCFKHLI = 8;
	uint32 DIPHGGHFMCP = 14;
	uint32 CPODEJOFPDD = 7;
	DCJAOPDINOI EMBKICMEFCO = 13;
}
message TravelBrochureGetDataCsReq {
}
message TravelBrochureGetDataScRsp {
	map<uint32, KCHJHCLJOCK> MIBCLBGMDLA = 15;
	uint32 retcode = 5;
	map<uint32, uint32> FKBBOMHEKPE = 2;
	uint32 custom_value = 11;
}
message TravelBrochurePageUnlockScNotify {
	uint32 CPODEJOFPDD = 7;
}
message TravelBrochureSelectMessageCsReq {
	uint32 DIPHGGHFMCP = 12;
	uint32 CPODEJOFPDD = 3;
}
message TravelBrochureSelectMessageScRsp {
	uint32 retcode = 12;
	ItemList reward = 11;
	KCHJHCLJOCK CAGGLKLIIMF = 10;
}
message TravelBrochureApplyPasterCsReq {
	uint32 CPODEJOFPDD = 11;
	uint32 item_id = 14;
	int32 IEAGBPEMFLG = 9;
	uint32 KBCDECDNEFM = 6;
	uint32 IIMOPLCFHAH = 10;
	int32 LLJAEGOBHMP = 2;
}
message TravelBrochureApplyPasterScRsp {
	uint32 retcode = 6;
	KCHJHCLJOCK CAGGLKLIIMF = 13;
}
message TravelBrochureRemovePasterCsReq {
	uint32 item_id = 12;
	uint32 CPODEJOFPDD = 3;
	uint64 unique_id = 13;
}
message TravelBrochureRemovePasterScRsp {
	uint32 retcode = 8;
	KCHJHCLJOCK CAGGLKLIIMF = 11;
}
message TravelBrochureUpdatePasterPosCsReq {
	int32 IEAGBPEMFLG = 7;
	uint64 unique_id = 13;
	uint32 item_id = 15;
	int32 LLJAEGOBHMP = 5;
	uint32 KBCDECDNEFM = 12;
	uint32 IIMOPLCFHAH = 4;
	uint32 CPODEJOFPDD = 14;
}
message TravelBrochureUpdatePasterPosScRsp {
	KCHJHCLJOCK CAGGLKLIIMF = 11;
	uint32 retcode = 9;
}
message TravelBrochureGetPasterScNotify {
	uint32 num = 8;
	uint32 FKKOBDMFHIL = 12;
}
message GKDIHIFFHFD {
	uint32 num = 6;
	uint32 FKKOBDMFHIL = 4;
}
message TravelBrochureSetCustomValueCsReq {
	uint32 value = 13;
}
message TravelBrochureSetCustomValueScRsp {
	uint32 retcode = 9;
}
message TravelBrochureSetPageDescStatusCsReq {
	DCJAOPDINOI GEIBGFDENJA = 8;
	uint32 CPODEJOFPDD = 9;
}
message TravelBrochureSetPageDescStatusScRsp {
	uint32 retcode = 11;
}
message TravelBrochurePageResetCsReq {
	uint32 CPODEJOFPDD = 2;
}
message TravelBrochurePageResetScRsp {
	KCHJHCLJOCK CAGGLKLIIMF = 3;
	uint32 retcode = 8;
}
message KBJPHLNAPGI {
	int32 LLJAEGOBHMP = 5;
	int32 IEAGBPEMFLG = 11;
	uint32 KBCDECDNEFM = 2;
	uint32 item_id = 15;
	uint32 IIMOPLCFHAH = 7;
}
message TravelBrochureApplyPasterListCsReq {
	uint32 CPODEJOFPDD = 5;
	repeated KBJPHLNAPGI GEDGLNCPGGN = 3;
}
message TravelBrochureApplyPasterListScRsp {
	uint32 retcode = 8;
	KCHJHCLJOCK CAGGLKLIIMF = 15;
}
message TreasureDungeonRecordData {
	uint32 TargetGridId = 8;
	TreasureDungeonRecordType Type = 15;
	uint32 SourceGridId = 10;
	uint32 Param2 = 2;
	uint32 Param1 = 4;
}
message TreasureDungeonDataScNotify {
	TreasureDungeonLevel DLEJPJJCELJ = 1;
}
message TreasureDungeonFinishScNotify {
	bool is_win = 3;
	uint32 HOHHBIHFJEH = 12;
	uint32 AECNCDPJPDG = 15;
	uint32 PIKAPDJHGND = 5;
	map<uint32, uint32> KGMMPGFGODJ = 14;
	map<uint32, uint32> JBCGKLDMHNL = 11;
	uint32 NLMDEMOHBOO = 13;
}
message TreasureDungeonLevel {
	repeated ENBNFOLCDIE buff_list = 396;
	repeated PCAIGNJKAFA GFFOJCCKLFM = 459;
	repeated LHANBGNJCIF item_list = 1122;
	uint32 NCBHADLOAGA = 13;
	uint32 IIALGLDDNAD = 234;
	repeated TreasureDungeonRecordData BBCKFJIHIDM = 7;
	repeated PCAIGNJKAFA avatar_list = 1003;
	uint32 JAFNPNMOHCM = 5;
	uint32 FCJECKCICKB = 1;
	bool NODBPKHOJEC = 924;
	uint32 NLMDEMOHBOO = 10;
	uint32 PIKAPDJHGND = 12;
	uint32 PHHKBAENBMM = 6;
	bool CFDPDENPPDH = 1050;
	repeated LKHHGJPPMPP KJJOMEPHJEE = 470;
	repeated LKCMFEAAHHM MKOAMBMKDID = 3;
	bool NMFAPGOLODJ = 1830;
	uint32 map_id = 4;
}
message LHANBGNJCIF {
	uint32 item_count = 3;
	uint32 item_id = 8;
}
message PCAIGNJKAFA {
	uint32 avatar_id = 4;
	uint32 avatar_type = 3;
	uint32 EAJLJNBNPNP = 6;
	uint32 hp = 7;
	SpBarInfo sp_bar = 8;
}
message LKHHGJPPMPP {
	uint32 avatar_id = 9;
	uint32 avatar_type = 14;
}
message ENBNFOLCDIE {
	uint32 AKAHNMLNEFN = 1;
	uint32 buff_id = 2;
}
message LKCMFEAAHHM {
	repeated GGGCOCPGBBH buff_list = 379;
	bool HEMJHDOEEBL = 15;
	bool LIMMILEAPJM = 14;
	uint32 HFNHLCFNHKD = 7;
	bool KNLFELDECAL = 11;
	uint32 OLLHOBHDDEN = 2;
	bool DEMNCGLLJCP = 8;
	uint32 MONHIBBPKEE = 12;
}
message GGGCOCPGBBH {
	uint32 buff_id = 4;
	uint32 LEAAEBAFCHP = 2;
	uint32 EGKDINMMENA = 3;
	uint32 HFNHLCFNHKD = 5;
	uint32 ECGHNFCCBJJ = 1;
}
message ABHFABFGPOF {
	uint32 PIKAPDJHGND = 10;
	uint32 NLMDEMOHBOO = 12;
	bool BIINNCNDPCG = 8;
	uint32 JAFNPNMOHCM = 5;
	uint32 NKHKDJKEGDH = 14;
	uint32 FCJECKCICKB = 9;
	bool CLOONOIFEFO = 13;
}
message GetTreasureDungeonActivityDataCsReq {
}
message GetTreasureDungeonActivityDataScRsp {
	repeated ABHFABFGPOF HIOOKMOANDN = 13;
	uint32 retcode = 5;
}
message EnterTreasureDungeonCsReq {
	uint32 NLMDEMOHBOO = 4;
	repeated JACKEJLKJNA avatar_list = 12;
}
message EnterTreasureDungeonScRsp {
	uint32 retcode = 4;
	TreasureDungeonLevel DLEJPJJCELJ = 3;
}
message OpenTreasureDungeonGridCsReq {
	uint32 NLMDEMOHBOO = 12;
	uint32 HFNHLCFNHKD = 6;
}
message OpenTreasureDungeonGridScRsp {
	TreasureDungeonLevel DLEJPJJCELJ = 10;
	uint32 retcode = 6;
}
message InteractTreasureDungeonGridCsReq {
	uint32 HFNHLCFNHKD = 10;
	uint32 display_value = 6;
	uint32 NLMDEMOHBOO = 2;
}
message InteractTreasureDungeonGridScRsp {
	uint32 retcode = 14;
	TreasureDungeonLevel DLEJPJJCELJ = 5;
}
message UseTreasureDungeonItemCsReq {
	uint32 HFNHLCFNHKD = 8;
	uint32 item_id = 2;
	uint32 NLMDEMOHBOO = 4;
}
message UseTreasureDungeonItemScRsp {
	TreasureDungeonLevel DLEJPJJCELJ = 11;
	uint32 retcode = 4;
}
message JACKEJLKJNA {
	uint32 avatar_id = 11;
	AvatarType avatar_type = 2;
}
message FightTreasureDungeonMonsterCsReq {
	repeated JACKEJLKJNA avatar_list = 13;
	uint32 NLMDEMOHBOO = 9;
	uint32 HFNHLCFNHKD = 6;
}
message FightTreasureDungeonMonsterScRsp {
	SceneBattleInfo battle_info = 11;
	uint32 retcode = 1;
}
message QuitTreasureDungeonCsReq {
	bool PCPDFJHDJCC = 11;
	uint32 NLMDEMOHBOO = 14;
}
message QuitTreasureDungeonScRsp {
	uint32 retcode = 3;
}
message Tutorial {
	TutorialStatus Status = 8;
	uint32 Id = 10;
}
message TutorialGuide {
	TutorialStatus Status = 9;
	uint32 Id = 7;
}
message GetTutorialCsReq {
}
message GetTutorialScRsp {
	uint32 Retcode = 3;
	repeated Tutorial TutorialList = 1;
}
message GetTutorialGuideCsReq {
}
message GetTutorialGuideScRsp {
	repeated TutorialGuide TutorialGuideList = 11;
	uint32 Retcode = 6;
}
message UnlockTutorialCsReq {
	uint32 tutorial_id = 10;
}
message UnlockTutorialScRsp {
	uint32 Retcode = 12;
	Tutorial Tutorial = 4;
}
message UnlockTutorialGuideCsReq {
	uint32 group_id = 1;
}
message UnlockTutorialGuideScRsp {
	TutorialGuide TutorialGuide = 8;
	uint32 Retcode = 3;
}
message FinishTutorialCsReq {
	uint32 tutorial_id = 2;
}
message FinishTutorialScRsp {
	Tutorial Tutorial = 12;
	uint32 Retcode = 3;
}
message FinishTutorialGuideCsReq {
	uint32 group_id = 4;
}
message FinishTutorialGuideScRsp {
	uint32 Retcode = 6;
	TutorialGuide TutorialGuide = 4;
	ItemList Reward = 14;
}
message Waypoint {
	uint32 id = 11;
	uint32 KHFGDKNGFDP = 10;
	bool is_new = 3;
}
message ChapterBrief {
	repeated uint32 taken_reward_id_list = 3;
	uint32 NCKELKEGBGL = 4;
	uint32 id = 14;
	bool is_new = 2;
}
message Chapter {
	ChapterBrief GOKHJLMPNFF = 6;
	repeated Waypoint KONBFJPINHN = 3;
}
message GetWaypointCsReq {
	uint32 KIEKJEFFPHK = 11;
}
message GetWaypointScRsp {
	uint32 retcode = 2;
	uint32 HOEAHBIFKCI = 8;
	Chapter FJJFLKCMIDJ = 3;
}
message SetCurWaypointCsReq {
	uint32 NKCMNAFAIOI = 2;
}
message SetCurWaypointScRsp {
	uint32 retcode = 14;
	uint32 HOEAHBIFKCI = 7;
}
message GetChapterCsReq {
}
message GetChapterScRsp {
	repeated ChapterBrief IELPICLBBJI = 6;
	uint32 retcode = 2;
	uint32 HOEAHBIFKCI = 7;
}
message WaypointShowNewCsNotify {
	uint32 KIEKJEFFPHK = 14;
	uint32 NKCMNAFAIOI = 9;
}
message TakeChapterRewardCsReq {
	uint32 AKDGHHNKLEJ = 7;
	uint32 KIEKJEFFPHK = 2;
}
message TakeChapterRewardScRsp {
	uint32 KIEKJEFFPHK = 6;
	uint32 retcode = 2;
	uint32 AKDGHHNKLEJ = 14;
}
message WolfBroGameInfo {
	bool BDNFLICNFHN = 5;
	repeated Vector OPCLDNLLNFH = 12;
	MotionInfo motion = 7;
	uint32 LKJMLIDAODM = 13;
}
message WolfBroGameData {
	uint32 LKJMLIDAODM = 12;
	uint32 id = 4;
	repeated Vector OPCLDNLLNFH = 11;
	string uuid = 7;
	WolfBroGameInfo HEFJEJHOJEA = 5;
	bool BDNFLICNFHN = 8;
}
message StartWolfBroGameCsReq {
	uint32 id = 2;
	GroupStateInfo group_state_info = 3;
	MotionInfo motion = 9;
	bool DJFCMLIPDAB = 6;
}
message StartWolfBroGameScRsp {
	uint32 retcode = 1;
	WolfBroGameData DNPLIHJGJIH = 6;
}
message ArchiveWolfBroGameCsReq {
	MotionInfo motion = 7;
	uint32 id = 8;
}
message ArchiveWolfBroGameScRsp {
	WolfBroGameData DNPLIHJGJIH = 14;
	uint32 retcode = 11;
}
message RestoreWolfBroGameArchiveCsReq {
	uint32 id = 1;
}
message RestoreWolfBroGameArchiveScRsp {
	uint32 retcode = 9;
	WolfBroGameData DNPLIHJGJIH = 13;
}
message QuitWolfBroGameCsReq {
	uint32 id = 9;
}
message QuitWolfBroGameScRsp {
	uint32 retcode = 10;
	WolfBroGameData DNPLIHJGJIH = 4;
}
message GetWolfBroGameDataCsReq {
	uint32 id = 1;
}
message GetWolfBroGameDataScRsp {
	uint32 retcode = 15;
	WolfBroGameData DNPLIHJGJIH = 5;
}
message WolfBroGameDataChangeScNotify {
	WolfBroGameData DNPLIHJGJIH = 13;
}
message WolfBroGameUseBulletCsReq {
	Vector MIBCFIMMIKG = 2;
	repeated uint32 assist_monster_entity_id_list = 5;
}
message WolfBroGameUseBulletScRsp {
	uint32 retcode = 5;
	WolfBroGameData DNPLIHJGJIH = 12;
}
message WolfBroGamePickupBulletCsReq {
	Vector MIBCFIMMIKG = 5;
}
message WolfBroGamePickupBulletScRsp {
	uint32 retcode = 5;
	WolfBroGameData DNPLIHJGJIH = 4;
}
message WolfBroGameActivateBulletCsReq {
	uint32 group_id = 7;
	uint32 config_id = 15;
}
message WolfBroGameActivateBulletScRsp {
	uint32 retcode = 1;
}
message WolfBroGameExplodeMonsterCsReq {
	repeated uint32 assist_monster_entity_id_list = 7;
}
message WolfBroGameExplodeMonsterScRsp {
	uint32 retcode = 10;
}
message WorldUnlockCsReq {
	uint32 NPEBNEKDLEN = 5;
}
message WorldUnlockScRsp {
	uint32 NPEBNEKDLEN = 3;
	uint32 retcode = 14;
}
message LNKFBAEDODI {
	uint32 DGHNGBLHAIL = 1;
	uint32 authkey_ver = 2;
	uint32 GKJKKDAOPAM = 3;
	uint32 OLCCIMLMMAD = 4;
	uint32 ELHEPMNLAPG = 5;
	uint32 PIAMLFBIHPI = 6;
	uint32 CFCAJEMDFKJ = 7;
	uint32 FEPHHKIGOOP = 8;
	uint32 MOPDHNENCPC = 9;
	uint32 EDFPCONIKDC = 10;
	uint32 id = 11;
	uint32 HOGHLBEEDGA = 12;
	uint32 BIPFIFCJCBN = 13;
}
enum PlayerActionType {
	PLAYER_ACTION_NONE = 0;
	PLAYER_ACTION_REGISTER = 1;
	PLAYER_ACTION_LOGIN = 2;
	PLAYER_ACTION_LOGOUT = 3;
	PLAYER_ACTION_ADD_EXP = 4;
	PLAYER_ACTION_LEVEL_UP = 5;
	PLAYER_ACTION_ADD_MATERIAL = 6;
	PLAYER_ACTION_SAVE_STAT = 7;
	PLAYER_ACTION_TRAVEL_BROCHURE_INTERACT = 8;
	PLAYER_ACTION_RECHARGE = 101;
	PLAYER_ACTION_BUY_GOODS = 102;
	PLAYER_ACTION_ADD_COIN = 103;
	PLAYER_ACTION_MONTH_CARD_DAILY_HCOIN = 104;
	PLAYER_ACTION_MONTH_CARD_BUY_MCOIN = 105;
	PLAYER_ACTION_RECHARGE_FREE_COIN = 106;
	PLAYER_ACTION_ADD_MONTH_CARD = 107;
	PLAYER_ACTION_RECHARGE_GIFT_PAY = 108;
	PLAYER_ACTION_RECHARGE_GIFT_FREE = 109;
	PLAYER_ACTION_RECHARGE_BENEFIT = 110;
	PLAYER_ACTION_RECHARGE_GIFT_TAKE_REWARD = 111;
	PLAYER_ACTION_RECHARGE_GIFT_REACH = 112;
	PLAYER_ACTION_RECHARGE_BENEFIT_REACH = 113;
	PLAYER_ACTION_MISSION_ACCEPT = 201;
	PLAYER_ACTION_MISSION_FINISH = 202;
	PLAYER_ACTION_MISSION_FAIL = 203;
	PLAYER_ACTION_MAIN_MISSION_ACCEPT = 204;
	PLAYER_ACTION_SUB_MISSION_ACCEPT = 205;
	PLAYER_ACTION_MAIN_MISSION_FINISH = 206;
	PLAYER_ACTION_SUB_MISSION_FINISH = 207;
	PLAYER_ACTION_DAILY_TASK_FINISH = 208;
	PLAYER_ACTION_DAILY_TASK_TAKE_REWARD = 209;
	PLAYER_ACTION_NPC_TALK_REWARD = 210;
	PLAYER_ACTION_MAIN_MISSION_RECOVER = 211;
	PLAYER_ACTION_MAIN_MISSION_DISABLE = 212;
	PLAYER_ACTION_GM = 1001;
	PLAYER_ACTION_CUSTOM_OP = 1002;
	PLAYER_ACTION_CHECK_SUM = 1003;
	PLAYER_ACTION_PLAYER_LOCATION = 1004;
	PLAYER_ACTION_CHANGE_LANGUAGE = 1005;
	PLAYER_ACTION_CLIENT_REPORT = 1006;
	PLAYER_ACTION_ACE_REPORT = 1007;
	PLAYER_ACTION_PLAYER_POWER_INFO = 1008;
	PLAYER_ACTION_DAILY_REFRESH = 1009;
	PLAYER_ACTION_AVATAR_VALUE_INFO = 1010;
	PLAYER_ACTION_MOVE_CHECK_FAILED_REPORT = 1011;
	PLAYER_ACTION_BATTLE_FAILED_REPORT = 1012;
	PLAYER_ACTION_SECURITY_REPORT = 1013;
	PLAYER_ACTION_AVATAR_PROMOTION = 1101;
	PLAYER_ACTION_AVATAR_ADD = 1103;
	PLAYER_ACTION_AVATAR_USE_EXP_ITEM = 1104;
	PLAYER_ACTION_AVATAR_LEVEL_UP = 1105;
	PLAYER_ACTION_SKILL_TREE_UP = 1106;
	PLAYER_ACTION_AVATAR_HP_CHANGE = 1107;
	PLAYER_ACTION_AVATAR_MP_CHANGE = 1108;
	PLAYER_ACTION_AVATAR_ADD_EXP = 1109;
	PLAYER_ACTION_AVATAR_RANK_UP = 1110;
	PLAYER_ACTION_AVATAR_REPEATED = 1111;
	PLAYER_ACTION_MP_MAX_CHANGE = 1112;
	PLAYER_ACTION_AVATAR_TAKE_PROMOTION_REWARD = 1113;
	PLAYER_ACTION_AVATAR_RELIC_AFFIX_INFO = 1114;
	PLAYER_ACTION_AVATAR_MARK = 1115;
	PLAYER_ACTION_AVATAR_SYSTEM_POWER_RESET = 1116;
	PLAYER_ACTION_AVATAR_CHANGE_PATH = 1119;
	PLAYER_ACTION_SET_GROWTH_TARGET_AVATAR = 1120;
	PLAYER_ACTION_DEL_AVATAR = 1121;
	PLAYER_ACTION_AVATAR_SKIN_CHANGE = 1122;
	PLAYER_ACTION_SET_GROWTH_TARGET_FUNCTION_CONFIG = 1123;
	PLAYER_ACTION_STAGE_BEGIN = 1202;
	PLAYER_ACTION_STAGE_END = 1203;
	PLAYER_ACTION_COCOON_STAGE_BEGIN = 1205;
	PLAYER_ACTION_COCOON_STAGE_END = 1206;
	PLAYER_ACTION_FARM_ELEMENT_END = 1207;
	PLAYER_ACTION_ELEMENT_STAGE_END = 1208;
	PLAYER_ACTION_COCOON_SWEEP = 1209;
	PLAYER_ACTION_FARM_ELEMENT_SWEEP = 1210;
	PLAYER_ACTION_RECOVER_STAMINA = 1301;
	PLAYER_ACTION_EXCHANGE_STAMINA = 1302;
	PLAYER_ACTION_LOGIN_REWARD = 1303;
	PLAYER_ACTION_MODIFY_NICKNAME = 1304;
	PLAYER_ACTION_GET_LEVEL_REWARD = 1305;
	PLAYER_ACTION_WORLD_LEVEL_UP = 1306;
	PLAYER_ACTION_ADD_STAMINA = 1307;
	PLAYER_ACTION_GAMEPLAY_BIRTHDAY_REWARD_MAIL = 1308;
	PLAYER_ACTION_RECHARGE_REBATE_REWARD = 1309;
	PLAYER_ACTION_GAMEPLAY_BIRTHDAY_SET = 1310;
	PLAYER_ACTION_RESERVE_STAMINA_EXCHANGE = 1311;
	PLAYER_ACTION_RESERVE_STAMINA_ADD = 1312;
	PLAYER_ACTION_RESERVE_STAMINA_CHANGE = 1313;
	PLAYER_ACTION_NOW_STAMINA = 1314;
	PLAYER_ACTION_MAIL = 1401;
	PLAYER_ACTION_MAIL_OP_BY_USER = 1402;
	PLAYER_ACTION_MAIL_OP_BY_MUIP = 1403;
	PLAYER_ACTION_MAIL_OP_BY_GM = 1404;
	PLAYER_ACTION_MAIL_OP_BY_FULL = 1405;
	PLAYER_ACTION_MAIL_OP_BY_EXPIRE = 1406;
	PLAYER_ACTION_MAIL_OP_BY_INTERNAL = 1407;
	PLAYER_ACTION_ADD_MAIL = 1408;
	PLAYER_ACTION_DEL_MAIL = 1409;
	PLAYER_ACTION_TAKE_ATTACHMENT = 1410;
	PLAYER_ACTION_READ_MAIL = 1411;
	PLAYER_ACTION_BATTLE_AVATAR = 1501;
	PLAYER_ACTION_BATTLE_MONSTER = 1502;
	PLAYER_ACTION_BATTLE_END = 1504;
	PLAYER_ACTION_BATTLE_REPLAY = 1505;
	PLAYER_ACTION_BATTLE_AVATAR_DEATH = 1506;
	PLAYER_ACTION_BATTLE_SWITCH_PHASE = 1507;
	PLAYER_ACTION_BATTLE_MONSTER_SKILL = 1508;
	PLAYER_ACTION_BATTLE_REBATTLE = 1509;
	PLAYER_ACTION_BATTLE_AVATAR_SERVANT = 1510;
	PLAYER_ACTION_MISSION_REWARD = 1602;
	PLAYER_ACTION_QUEST_ACCEPT = 1603;
	PLAYER_ACTION_QUEST_FINISH = 1604;
	PLAYER_ACTION_QUEST_REMOVE = 1605;
	PLAYER_ACTION_QUEST_REWARD = 1606;
	PLAYER_ACTION_QUEST_AUTO_CLOSE = 1607;
	PLAYER_ACTION_QUEST_EXPIRED = 1608;
	PLAYER_ACTION_MISSION_REQUIRED = 1609;
	PLAYER_ACTION_SUBMISSION_REWARD = 1610;
	PLAYER_ACTION_ACHIEVEMENT_LEVEL_REWARD = 1611;
	PLAYER_ACTION_QUEST_DELETE = 1612;
	PLAYER_ACTION_SUB_MISSION_REWARD = 1613;
	PLAYER_ACTION_MISSION_COMPENSATE = 1614;
	PLAYER_ACTION_MISSION_RECYCLE = 1615;
	PLAYER_ACTION_QUEST_RESET = 1616;
	PLAYER_ACTION_QUEST_OPTIONAL_REWARD = 1617;
	PLAYER_ACTION_PROP_INTERACT = 1704;
	PLAYER_ACTION_AVATAR_MAZE_SKILL = 1705;
	PLAYER_ACTION_ENTER_MAZE = 1706;
	PLAYER_ACTION_ORDINARY_INTERACT = 1707;
	PLAYER_ACTION_CHEST_INTERACT = 1708;
	PLAYER_ACTION_CHECK_POINT_UNLOCK = 1709;
	PLAYER_ACTION_CHECK_POINT_INTERACT = 1710;
	PLAYER_ACTION_CHECK_POINT_REVIVE = 1711;
	PLAYER_ACTION_CHECK_POINT_TRANSFER = 1712;
	PLAYER_ACTION_MONSTER_INTERACT = 1714;
	PLAYER_ACTION_NPC_INTERACT = 1716;
	PLAYER_ACTION_PROP_HIT = 1717;
	PLAYER_ACTION_PRELOGUE_REVIVE = 1718;
	PLAYER_ACTION_PROP_STATE = 1719;
	PLAYER_ACTION_CHECK_POINT_RECOVER = 1720;
	PLAYER_ACTION_MECHANISM_BAR = 1722;
	PLAYER_ACTION_SUBMIT_ORIGAMI_ITEM = 1723;
	PLAYER_ACTION_MAZE_BUFF_DROP_ITEM = 1724;
	PLAYER_ACTION_FSV_CHANGE = 1725;
	PLAYER_ACTION_TIMELINE_PROP_STATE = 1726;
	PLAYER_ACTION_EQUIPMENT_PROMOTION = 1901;
	PLAYER_ACTION_ADD_ITEM = 1902;
	PLAYER_ACTION_USE_ITEM = 1904;
	PLAYER_ACTION_EQUIPMENT_RANK_UP = 1905;
	PLAYER_ACTION_EQUIPMENT_LEVEL_UP = 1906;
	PLAYER_ACTION_EXP_UP_EQUIPMENT_RETURN = 1907;
	PLAYER_ACTION_BAG_FULL_REWARD_MAIL = 1908;
	PLAYER_ACTION_EQUIPMENT_ADD = 1909;
	PLAYER_ACTION_EQUIPMENT_WEAR = 1910;
	PLAYER_ACTION_ITEM_COMPOSE = 1911;
	PLAYER_ACTION_RELIC_LEVEL_UP = 1912;
	PLAYER_ACTION_EXP_UP_RELIC_RETURN = 1913;
	PLAYER_ACTION_RELIC_NUM_CHANGED = 1914;
	PLAYER_ACTION_RELIC_WEAR = 1915;
	PLAYER_ACTION_RELIC_COMPOSE = 1916;
	PLAYER_ACTION_SELL_ITEM = 1917;
	PLAYER_ACTION_UNLOCK_MUSIC = 1918;
	PLAYER_ACTION_EXCHANGE_HCOIN_WITH_PAY_MCOIN = 1919;
	PLAYER_ACTION_GET_REWARD = 1920;
	PLAYER_ACTION_EXCHANGE_HCOIN_WITH_FREE_MCOIN = 1921;
	PLAYER_ACTION_ITEM_COMPOSE_FORMULA_UNLOCK = 1922;
	PLAYER_ACTION_EXCHANGE_HCOIN = 1923;
	PLAYER_ACTION_CITY_SHOP_LEVEL_REWARD = 1924;
	PLAYER_ACTION_ITEM_RECYCLE = 1925;
	PLAYER_ACTION_MUSEUM_FUNDS_CONSUME = 1926;
	PLAYER_ACTION_MUSEUM_EVENT_BUY_STUFF = 1927;
	PLAYER_ACTION_MUSEUM_MARKET_BUY_STUFF = 1928;
	PLAYER_ACTION_MUSEUM_RANDOM_EVENT = 1929;
	PLAYER_ACTION_MUSEUM_INITIAL_ITEM = 1930;
	PLAYER_ACTION_OPTIONAL_BOX_REWARD = 1931;
	PLAYER_ACTION_DESTROY_ITEM = 1932;
	PLAYER_ACTION_TRANSFER_EXP = 1933;
	PLAYER_ACTION_ONDUTY_USE = 1934;
	PLAYER_ACTION_ITEM_MARK = 1935;
	PLAYER_ACTION_RELIC_DISCARD = 1936;
	PLAYER_ACTION_GENERAL_VIRTUAL_ITEM_CHANGE = 1937;
	PLAYER_ACTION_RELIC_LOCK = 1938;
	PLAYER_ACTION_RELIC_FILTER_PLAN_SAVE = 1939;
	PLAYER_ACTION_RELIC_FILTER_PLAN_DELETE = 1940;
	PLAYER_ACTION_RELIC_FILTER_PLAN_MARK = 1941;
	PLAYER_ACTION_RELIC_SELL = 1942;
	PLAYER_ACTION_RELIC_REFORGE = 1943;
	PLAYER_ACTION_RELIC_SMART_WEAR_CUSTOM_PLAN = 1944;
	PLAYER_ACTION_RECOVER_RELIC = 1945;
	PLAYER_ACTION_RECOVER_EQUIPMENT = 1946;
	PLAYER_ACTION_EQUIPMENT_SELL = 1947;
	PLAYER_ACTION_RELIC_SMART_WEAR_PIN_RELIC = 1948;
	PLAYER_ACTION_RELIC_COCOON_SETTING = 1949;
	PLAYER_ACTION_PERSONAL_CARD_CHANGE = 1950;
	PLAYER_ACTION_PHONE_CASE_CHANGE = 1951;
	PLAYER_ACTION_TUTORIAL_GUIDE_FINISH = 2001;
	PLAYER_ACTION_TUTORIAL = 2002;
	PLAYER_ACTION_TUTORIAL_GUIDE = 2003;
	PLAYER_ACTION_MONSTER_DROP = 2101;
	PLAYER_ACTION_FINISH_CHALLENGE = 2201;
	PLAYER_ACTION_CHALLENGE_STARS = 2202;
	PLAYER_ACTION_CHALLENGE_START = 2203;
	PLAYER_ACTION_CHALLENGE_END = 2204;
	PLAYER_ACTION_CHALLENGE_WIN = 2205;
	PLAYER_ACTION_CHALLENGE_FAIL = 2206;
	PLAYER_ACTION_CHALLENGE_LEAVE = 2207;
	PLAYER_ACTION_CHALLENGE_SWITCH = 2208;
	PLAYER_ACTION_CHALLENGE_BONUS_REWARD = 2210;
	PLAYER_ACTION_CHALLENGE_STARS_REWARD = 2211;
	PLAYER_ACTION_CHALLENGE_RESTART = 2212;
	PLAYER_ACTION_CHALLENGE_STORY_START = 2213;
	PLAYER_ACTION_CHALLENGE_STORY_END = 2214;
	PLAYER_ACTION_CHALLENGE_FAST_PASS = 2215;
	PLAYER_ACTION_CHALLENGE_STORY_FAST_PASS = 2216;
	PLAYER_ACTION_CHALLENGE_MEMORY_FAST_PASS = 2217;
	PLAYER_ACTION_CHALLENGE_BATTLE_TARGET = 2218;
	PLAYER_ACTION_CHALLENGE_BOSS_END = 2219;
	PLAYER_ACTION_CHALLENGE_BOSS_FAST_PASS = 2220;
	PLAYER_ACTION_CHALLENGE_START_PARTIAL = 2221;
	PLAYER_ACTION_CHALLENGE_BOSS_PHASE_START = 2222;
	PLAYER_ACTION_CHALLENGE_BOSS_PHASE_END = 2223;
	PLAYER_ACTION_CHALLENGE_BOSS_PHASE_END_BEFORE_BATTLE = 2224;
	PLAYER_ACTION_CHALLENGE_RECOMMEND_LINEUP = 2225;
	PLAYER_ACTION_CHALLENGE_STORY_FEVER_BATTLE_END = 2226;
	PLAYER_ACTION_TEAM_INFO_CHANGE = 2301;
	PLAYER_ACTION_CHANGE_CURRENT_AVATAR = 2302;
	PLAYER_ACTION_CREATE_VIRTUAL_TEAM = 2303;
	PLAYER_ACTION_TEAM_NAME_EDIT = 2304;
	PLAYER_ACTION_AVATAR_BUFF_CHANGE = 2401;
	PLAYER_ACTION_ENV_BUFF_CHANGE = 2402;
	PLAYER_ACTION_GAME_CORE = 2403;
	PLAYER_ACTION_AVATAR_GLOBAL_BUFF = 2404;
	PLAYER_ACTION_ROGUE_EXPLORE_START = 2501;
	PLAYER_ACTION_ROGUE_ENTER_ROOM = 2502;
	PLAYER_ACTION_ROGUE_LEAVE_ROOM = 2503;
	PLAYER_ACTION_ROGUE_EXPLORE_FINISH = 2504;
	PLAYER_ACTION_ROGUE_SELECT_BUFF = 2505;
	PLAYER_ACTION_ROGUE_ROLL_BUFF = 2506;
	PLAYER_ACTION_ROGUE_REVIVE = 2507;
	PLAYER_ACTION_ROGUE_CHALLENGE_START = 2512;
	PLAYER_ACTION_ROGUE_MIRACLE = 2514;
	PLAYER_ACTION_ROGUE_ADD_BUFF = 2515;
	PLAYER_ACTION_ROGUE_PICK_AVATAR = 2516;
	PLAYER_ACTION_ROGUE_SEASON_CHANGED = 2522;
	PLAYER_ACTION_ROGUE_AEON_LEVEL_UP = 2524;
	PLAYER_ACTION_ROGUE_OPEN_DOOR = 2525;
	PLAYER_ACTION_ROGUE_SCORE_REWARD = 2526;
	PLAYER_ACTION_ROGUE_ENHANCE_BUFF = 2527;
	PLAYER_ACTION_ROGUE_SELECT_BONUS = 2528;
	PLAYER_ACTION_ROGUE_AREA_FIRST_REWARD = 2529;
	PLAYER_ACTION_ROGUE_ENABLE_TALENT = 2530;
	PLAYER_ACTION_ROGUE_AEON_UNLOCK = 2531;
	PLAYER_ACTION_ROGUE_AEON_ADD_EXP = 2532;
	PLAYER_ACTION_ROGUE_IMMERSE_LEVEL_UP = 2533;
	PLAYER_ACTION_ROGUE_SELECT_MIRACLE = 2534;
	PLAYER_ACTION_ROGUE_UNLOCK_AREA = 2535;
	PLAYER_ACTION_ROGUE_EXPLORE_SCORE_CHANGE = 2536;
	PLAYER_ACTION_ROGUE_UPDATE_REWARD_POOL = 2537;
	PLAYER_ACTION_ROGUE_SWAP_BUFF = 2539;
	PLAYER_ACTION_ROGUE_WEEKLY_REFRESH = 2540;
	PLAYER_ACTION_ROGUE_EXCHANGE_KEY = 2541;
	PLAYER_ACTION_ROGUE_GET_OBJECT_REWARD = 2542;
	PLAYER_ACTION_ROGUE_AREA_MONSTER_DROP = 2543;
	PLAYER_ACTION_ROGUE_ADD_MIRACLE = 2544;
	PLAYER_ACTION_ROGUE_SWAP_MIRACLE = 2545;
	PLAYER_ACTION_ROGUE_OPEN_OBJECT_REWARD = 2546;
	PLAYER_ACTION_ROGUE_AEON_EFFECT = 2547;
	PLAYER_ACTION_ROGUE_REFORGE_BUFF = 2548;
	PLAYER_ACTION_ROGUE_TRADE_MIRACLE = 2549;
	PLAYER_ACTION_ROGUE_REMOVE_AVATAR = 2550;
	PLAYER_ACTION_ROGUE_DIALOGUE_SELECT = 2551;
	PLAYER_ACTION_ROGUE_SELECT_AEON = 2552;
	PLAYER_ACTION_ROGUE_DIALOGUE_FINISH = 2553;
	PLAYER_ACTION_ROGUE_HANDBOOK_REWARD = 2554;
	PLAYER_ACTION_ROGUE_ADVENTURE_ROOM_REWARD = 2555;
	PLAYER_ACTION_ROGUE_SHOP_BUY = 2556;
	PLAYER_ACTION_ROGUE_REPAIR_MIRACLE = 2557;
	PLAYER_ACTION_ROGUE_REPLACE_ALL_MIRACLE = 2558;
	PLAYER_ACTION_ROGUE_MIRACLE_BROKEN = 2559;
	PLAYER_ACTION_ROGUE_SHOP_REFRESH = 2560;
	PLAYER_ACTION_ROGUE_LEVEL_MECHANISM = 2561;
	PLAYER_ACTION_ROGUE_REMOVE_MIRACLE = 2562;
	PLAYER_ACTION_ROGUE_DROP_BUFF = 2563;
	PLAYER_ACTION_ROGUE_DESTROY_MIRACLE = 2564;
	PLAYER_ACTION_ROGUE_ACTIVATE_FORMULA = 2565;
	PLAYER_ACTION_ROGUE_DEACTIVATE_FORMULA = 2566;
	PLAYER_ACTION_ROGUE_REMOVE_BUFF = 2567;
	PLAYER_ACTION_ROGUE_SELECT_FORMULA = 2568;
	PLAYER_ACTION_ROGUE_DROP_FORMULA = 2569;
	PLAYER_ACTION_ROGUE_ROLL_FORMULA = 2570;
	PLAYER_ACTION_ROGUE_REFORGE_FORMULA = 2571;
	PLAYER_ACTION_ROGUE_COMPOSE_MIRACLE = 2572;
	PLAYER_ACTION_ROGUE_REFORGE_MIRACLE = 2573;
	PLAYER_ACTION_ROGUE_DO_GAMBLE = 2574;
	PLAYER_ACTION_ROGUE_KEYWORD_ACTIVATE = 2575;
	PLAYER_ACTION_ROGUE_KEYWORD_DEACTIVATE = 2576;
	PLAYER_ACTION_ROGUE_SOURCE_DEFAULT = 2577;
	PLAYER_ACTION_ROGUE_PLAYER_SELECT = 2578;
	PLAYER_ACTION_ROGUE_LAYER_SETTLEMENT = 2579;
	PLAYER_ACTION_ROGUE_FORMULA = 2580;
	PLAYER_ACTION_ROGUE_WORKBENCH = 2581;
	PLAYER_ACTION_ROGUE_MODIFIER = 2582;
	PLAYER_ACTION_ROGUE_REFORGE = 2583;
	PLAYER_ACTION_ROGUE_TALENT = 2584;
	PLAYER_ACTION_ROGUE_REROLL = 2585;
	PLAYER_ACTION_ROGUE_COIN_CHANGE = 2586;
	PLAYER_ACTION_ROGUE_MAGIC_SCEPTER_SHOP = 2587;
	PLAYER_ACTION_ROGUE_MAGIC_UNIT_SHOP = 2588;
	PLAYER_ACTION_ROGUE_MAGIC_SCEPTER_LEVEL_UP = 2589;
	PLAYER_ACTION_GACHA = 2601;
	PLAYER_ACTION_ADD_GACHA_TICKET = 2602;
	PLAYER_ACTION_GACHA_EXCHANGE = 2603;
	PLAYER_ACTION_SET_GACHA_DECIDE_ITEM = 2604;
	PLAYER_ACTION_EVENT_MISSION_ACCEPT = 2801;
	PLAYER_ACTION_EVENT_MISSION_FINISH = 2802;
	PLAYER_ACTION_EVENT_MISSION_REWARD = 2803;
	PLAYER_ACTION_RAID_FINISH = 2901;
	PLAYER_ACTION_RAID_BEGIN = 2902;
	PLAYER_ACTION_CHALLENGE_RAID_REWARD = 2903;
	PLAYER_ACTION_START_RAID = 2904;
	PLAYER_ACTION_END_RAID = 2905;
	PLAYER_ACTION_RAID_TARGET_FINISH = 2906;
	PLAYER_ACTION_ARCHIVE_RAID = 2907;
	PLAYER_ACTION_HERO_BASE_TYPE_CHANGE = 3051;
	PLAYER_ACTION_HERO_BASE_TYPE_ADD_BY_MISSION = 3052;
	PLAYER_ACTION_HERO_BASE_TYPE_ADD_BY_REQ = 3053;
	PLAYER_ACTION_HERO_BASE_TYPE_ADD = 3054;
	PLAYER_ACTION_DIALOGUE_SELECT = 3101;
	PLAYER_ACTION_EXPEDITION_START = 3151;
	PLAYER_ACTION_EXPEDITION_FINISH = 3152;
	PLAYER_ACTION_EXPEDITION_REWARD = 3153;
	PLAYER_ACTION_ACTIVITY_EXPEDITION_START = 3154;
	PLAYER_ACTION_ACTIVITY_EXPEDITION_FINISH = 3155;
	PLAYER_ACTION_ACTIVITY_EXPEDITION_REWARD = 3156;
	PLAYER_ACTION_ACTIVITY_EXPEDITION_BEGIN = 3157;
	PLAYER_ACTION_ACTIVITY_EXPEDITION_END = 3158;
	PLAYER_ACTION_ACTIVITY_LOGIN_REWARD = 3201;
	PLAYER_ACTION_FRIEND_REPORT = 3301;
	PLAYER_ACTION_ASSIST_REWARD = 3302;
	PLAYER_ACTION_ASSIST_AVATAR_REFRESH = 3303;
	PLAYER_ACTION_ASSIST_AVATAR_BATTLE_START = 3304;
	PLAYER_ACTION_ASSIST_AVATAR_BATTLE_END = 3305;
	PLAYER_ACTION_FRIEND_APPLY = 3306;
	PLAYER_ACTION_FRIEND_MANAGE = 3307;
	PLAYER_ACTION_FRIEND_BLACKLIST = 3308;
	PLAYER_ACTION_FRIEND_MODIFY_REMARK_NAME = 3309;
	PLAYER_ACTION_FRIEND_MARK = 3310;
	PLAYER_ACTION_FRIEND_ASSIST_LIST = 3311;
	PLAYER_ACTION_BATTLE_PASS_LEVEL_REWARD = 3202;
	PLAYER_ACTION_BATTLE_PASS_128TIER_REWARD = 3203;
	PLAYER_ACTION_BATTLE_PASS_LEVEL_REWARD_AUTO_MAIL = 3204;
	PLAYER_ACTION_BUY_BATTLE_PASS = 3205;
	PLAYER_ACTION_ADD_BATTLE_PASS_EXP = 3206;
	PLAYER_ACTION_BATTLE_PASS_LEVEL_UP = 3207;
	PLAYER_ACTION_BUY_BATTLE_PASS_LEVEL = 3208;
	PLAYER_ACTION_BATTLE_PASS_END_MAIL = 3209;
	PLAYER_ACTION_BATTLE_PASS_68TIER_REWARD = 3210;
	PLAYER_ACTION_MODIFY_SIGN = 3401;
	PLAYER_ACTION_DISPLAY_AVATAR_SET = 3402;
	PLAYER_ACTION_ASSIST_AVATAR_SET = 3403;
	PLAYER_ACTION_ACHIEVEMENT_FINISH = 3501;
	PLAYER_ACTION_ACHIEVEMENT_REWARD = 3502;
	PLAYER_ACTION_ACHIEVEMENT_ADD_EXP = 3503;
	PLAYER_ACTION_ACHIEVEMENT_LEVEL_UP = 3504;
	PLAYER_ACTION_PUNK_LORD_REWARD = 3601;
	PLAYER_ACTION_PUNK_LORD_BOSS_SEARCH = 3604;
	PLAYER_ACTION_PUNK_LORD_BOSS_SHARE = 3605;
	PLAYER_ACTION_START_PUNK_LORD_RAID = 3606;
	PLAYER_ACTION_PUNK_LORD_SUPPORT_TIMES = 3608;
	PLAYER_ACTION_PUNK_LORD_SCORE_REWARD = 3609;
	PLAYER_ACTION_PUNK_LORD_LIST_REFRESH = 3610;
	PLAYER_ACTION_PUNK_LORD_POWER_ATTACK = 3611;
	PLAYER_ACTION_PUNK_LORD_BATTLE_END = 3612;
	PLAYER_ACTION_PUNK_LORD_BOSS_DEATH = 3613;
	PLAYER_ACTION_PUNK_LORD_BOSS_SCORE = 3614;
	PLAYER_ACTION_DAILY_ACTIVE_LEVEL_REWARD = 3701;
	PLAYER_ACTION_DAILY_ACTIVE_ADD_POINT = 3702;
	PLAYER_ACTION_DAILY_ACTIVE_DELETE_OLD_QUEST = 3703;
	PLAYER_ACTION_FIGHT_ACTIVITY_BEGIN = 3791;
	PLAYER_ACTION_FIGHT_ACTIVITY_END = 3792;
	PLAYER_ACTION_FIGHT_ACTIVITY_REWARD = 3801;
	PLAYER_ACTION_ACTIVITY_END_MAIL = 3802;
	PLAYER_ACTION_APPOINTMENT_MAIL = 3803;
	PLAYER_ACTION_SHARE_REWARD = 3804;
	PLAYER_ACTION_ACTIVITY_TRIAL_REWARD = 3805;
	PLAYER_ACTION_ACTIVITY_TRIAL_START = 3806;
	PLAYER_ACTION_PS_PRE_ORDER_MAIL1 = 3811;
	PLAYER_ACTION_PS_PRE_ORDER_MAIL2 = 3812;
	PLAYER_ACTION_PS_LOGIN_MAIL = 3813;
	PLAYER_ACTION_LOGIN_MAIL = 3814;
	PLAYER_ACTION_GOOGLE_POINTS_100_MAIL = 3821;
	PLAYER_ACTION_GOOGLE_POINTS_150_MAIL = 3822;
	PLAYER_ACTION_TRAIN_VISITOR_BEHAVIOR_FINISH = 3901;
	PLAYER_ACTION_ENTER_VIEW_TRAIN = 3902;
	PLAYER_ACTION_TRAIN_VISITOR_BEHAVIOR_REWARD_FORCE_SEND = 3903;
	PLAYER_ACTION_TRAIN_VISITOR_REGISTER_OPEN = 3904;
	PLAYER_ACTION_TRAIN_VISITOR_BEHAVIOR_REWARD_FORCE_SEND_BY_REGISTER = 3905;
	PLAYER_ACTION_TRAIN_VISITOR_CLEAR_LAST_TRAIN_VISITOR = 3906;
	PLAYER_ACTION_TRAIN_VISITOR_REFRESH_TRAIN_VISITOR = 3907;
	PLAYER_ACTION_TRAIN_VISITOR_REFRESH_NPC = 3908;
	PLAYER_ACTION_MESSAGE_GROUP_ACCEPT = 3951;
	PLAYER_ACTION_MESSAGE_SECTION_ACCEPT = 3952;
	PLAYER_ACTION_MESSAGE_SECTION_FINISH = 3953;
	PLAYER_ACTION_MESSAGE_ITEM_FINISH = 3954;
	PLAYER_ACTION_FINISH_MESSAGE_GROUP_REWARD = 3955;
	PLAYER_ACTION_SUBSTITUTE_MESSAGE_GROUP_REWARD = 3956;
	PLAYER_ACTION_DELETE_MESSAGE_GROUP = 3957;
	PLAYER_ACTION_DELETE_MESSAGE_SECTION = 3958;
	PLAYER_ACTION_DELETE_MESSAGE_GROUP_BY_CONFIG = 3959;
	PLAYER_ACTION_DELETE_MESSAGE_GROUP_BY_ACTIVITY = 3960;
	PLAYER_ACTION_DELETE_MESSAGE_GROUP_BY_MISSION = 3961;
	PLAYER_ACTION_TEXT_JOIN_SAVE = 4001;
	PLAYER_ACTION_BOXING_CLUB_START = 4051;
	PLAYER_ACTION_BOXING_CLUB_FINISH = 4052;
	PLAYER_ACTION_BOXING_CLUB_PAUSE = 4053;
	PLAYER_ACTION_BOXING_CLUB_STAGE_START = 4054;
	PLAYER_ACTION_TALK_SEND = 4101;
	PLAYER_ACTION_SELECT_INCLINATION_TEXT = 4102;
	PLAYER_ACTION_MUSEUM_SETTLE_TURN_OPEN = 4201;
	PLAYER_ACTION_MUSEUM_UPGRADE_AREA = 4202;
	PLAYER_ACTION_MUSEUM_UPGRADE_AREA_STAT = 4203;
	PLAYER_ACTION_MUSEUM_DISPATCH_REWARD_REGULAR = 4204;
	PLAYER_ACTION_MUSEUM_DISPATCH_REWARD_DIRECTIONAL = 4205;
	PLAYER_ACTION_MUSEUM_PHASE_TARGET_FINISHED = 4206;
	PLAYER_ACTION_MUSEUM_GET_STUFF = 4207;
	PLAYER_ACTION_MUSEUM_GET_EXHIBIT = 4208;
	PLAYER_ACTION_MUSEUM_TAKE_COLLECT_MISSION = 4209;
	PLAYER_ACTION_MUSEUM_AREA_UNLOCK = 4210;
	PLAYER_ACTION_MUSEUM_AREA_UPGRADE = 4211;
	PLAYER_ACTION_MUSEUM_AREA_STAT_UPGRADE = 4212;
	PLAYER_ACTION_MUSEUM_ENTER_NEXT_ROUND = 4213;
	PLAYER_ACTION_MUSEUM_START_DISPATCH = 4214;
	PLAYER_ACTION_MUSEUM_SETTLE_DISPATCH = 4215;
	PLAYER_ACTION_MUSEUM_RENEW_POINT_CHANGED = 4216;
	PLAYER_ACTION_MUSEUM_TARGET_REWARD = 4217;
	PLAYER_ACTION_MUSEUM_PHASE_UPGRADE = 4218;
	PLAYER_ACTION_MUSEUM_COLLECT_REWARD = 4219;
	PLAYER_ACTION_MUSEUM_TARGET_START = 4220;
	PLAYER_ACTION_MUSEUM_TARGET_FINISH = 4221;
	PLAYER_ACTION_ACTIVITY_MONSTER_RESEARCH_CONSUME_MATERIAL = 4301;
	PLAYER_ACTION_ACTIVITY_MONSTER_RESEARCH_TAKE_REWARD = 4302;
	PLAYER_ACTION_PLAYER_RETURN_START = 4401;
	PLAYER_ACTION_PLAYER_RETURN_SIGN = 4402;
	PLAYER_ACTION_PLAYER_RETURN_POINT = 4403;
	PLAYER_ACTION_PLAYER_RETURN_COUNTDOWN = 4404;
	PLAYER_ACTION_PLAYER_RETURN_FINISH = 4405;
	PLAYER_ACTION_PLAYER_RETURN_COMPENSATE = 4406;
	PLAYER_ACTION_PLAYER_RETURN_GET_RELIC = 4407;
	PLAYER_ACTION_ROGUE_CHALLENGE_ACTIVITY_START = 4411;
	PLAYER_ACTION_ROGUE_CHALLENGE_ACTIVITY_FINISH = 4412;
	PLAYER_ACTION_ROGUE_CHALLENGE_ACTIVITY_SAVE = 4413;
	PLAYER_ACTION_AETHER_DIVIDE_USE_PASSIVE_SKILL_ITEM = 4450;
	PLAYER_ACTION_AETHER_DIVIDE_CLEAR_PASSIVE_SKILL = 4451;
	PLAYER_ACTION_AETHER_DIVIDE_FINISH_CHALLENGE = 4452;
	PLAYER_ACTION_AETHER_DIVIDE_OVERFLOW_CHUNK_REWARD = 4453;
	PLAYER_ACTION_AETHER_DIVIDE_LEVEL_UP = 4454;
	PLAYER_ACTION_AETHER_DIVIDE_NEW_REWARD = 4455;
	PLAYER_ACTION_AETHER_DIVIDE_MONSTER_ADD = 4456;
	PLAYER_ACTION_AETHER_DIVIDE_MONSTER_LEVEL = 4457;
	PLAYER_ACTION_AETHER_DIVIDE_MONSTER_SKILL_WEAR = 4458;
	PLAYER_ACTION_AETHER_DIVIDE_TEAM_CHANGE = 4459;
	PLAYER_ACTION_AETHER_DIVIDE_STAGE_BEGIN = 4460;
	PLAYER_ACTION_AETHER_DIVIDE_STAGE_END = 4461;
	PLAYER_ACTION_AETHER_DIVIDE_STAGE_ROLL = 4462;
	PLAYER_ACTION_ALLEY_EVENT_FINISH = 4501;
	PLAYER_ACTION_ALLEY_TAKE_REWARD = 4502;
	PLAYER_ACTION_ALLEY_PRESTIGE_LEVEL_UP = 4503;
	PLAYER_ACTION_ALLEY_LOGISTICS_FINISH = 4504;
	PLAYER_ACTION_ALLEY_PLACING_GAME_FINISH = 4505;
	PLAYER_ACTION_ALLEY_GUARANTEED_FUNDS = 4506;
	PLAYER_ACTION_ALLEY_TAKE_EVENT_REWARD = 4507;
	PLAYER_ACTION_ALLEY_SPECIAL_ORDER_FINISH = 4508;
	PLAYER_ACTION_SENSITIVE_WORD_SHIELD = 4601;
	PLAYER_ACTION_SENSITIVE_WORD_SERVER_INTERNAL_ERROR = 4602;
	PLAYER_ACTION_SENSITIVE_WORD_PLATFORM_ERROR = 4603;
	PLAYER_ACTION_TREASURE_DUNGEON_START = 4701;
	PLAYER_ACTION_TREASURE_DUNGEON_FINISH = 4702;
	PLAYER_ACTION_TREASURE_DUNGEON_ENTER_FLOOR = 4703;
	PLAYER_ACTION_TREASURE_DUNGEON_LEAVE_FLOOR = 4704;
	PLAYER_ACTION_TREASURE_DUNGEON_USE_ITEM = 4705;
	PLAYER_ACTION_TREASURE_DUNGEON_AVATAR_CHANGE = 4706;
	PLAYER_ACTION_TREASURE_DUNGEON_BATTLE_START = 4707;
	PLAYER_ACTION_TREASURE_DUNGEON_BATTLE_END = 4708;
	PLAYER_ACTION_TREASURE_DUNGEON_PICKUP_BUFF = 4709;
	PLAYER_ACTION_CHESS_ROGUE_FIRST_FINISH = 4801;
	PLAYER_ACTION_CHESS_ROGUE_GIVEUP_DICE = 4802;
	PLAYER_ACTION_CHESS_ROGUE_SUB_STORY_SELECT = 4803;
	PLAYER_ACTION_CHESS_ROGUE_ACTION_POINT = 4804;
	PLAYER_ACTION_CHESS_ROGUE_REVIVE_BY_PROP = 4805;
	PLAYER_ACTION_CHESS_ROGUE_START_LEVEL = 4806;
	PLAYER_ACTION_CHESS_ROGUE_DICE_EFFECT = 4807;
	PLAYER_ACTION_CHESS_ROGUE_MAIN_STORY_FINISH = 4808;
	PLAYER_ACTION_CHESS_ROGUE_AEON_TALENT_EFFECT = 4809;
	PLAYER_ACTION_CHESS_ROGUE_MODIFIER_OTHERS_EFFECT = 4810;
	PLAYER_ACTION_CHESS_ROGUE_ADD_BUFF = 4811;
	PLAYER_ACTION_CHESS_ROGUE_REFORGE_BUFF = 4812;
	PLAYER_ACTION_CHESS_ROGUE_BUFF_LEVEL_UP = 4813;
	PLAYER_ACTION_CHESS_ROGUE_ENHANCE_BUFF = 4814;
	PLAYER_ACTION_CHESS_ROGUE_ADD_MIRACLE = 4815;
	PLAYER_ACTION_CHESS_ROGUE_SWAP_MIRACLE = 4816;
	PLAYER_ACTION_CHESS_ROGUE_SELECT_BONUS = 4817;
	PLAYER_ACTION_CHESS_ROGUE_DIALOGUE_FINISH = 4818;
	PLAYER_ACTION_CHESS_ROGUE_SUB_STORY_FINISH = 4819;
	PLAYER_ACTION_CHESS_ROGUE_ADVENTURE_ROOM_FINISH = 4820;
	PLAYER_ACTION_CHESS_ROGUE_FINISH_LEVEL = 4821;
	PLAYER_ACTION_CHESS_ROGUE_START_LAYER = 4822;
	PLAYER_ACTION_CHESS_ROGUE_FINISH_LAYER = 4823;
	PLAYER_ACTION_CHESS_ROGUE_ENTER_ROOM = 4824;
	PLAYER_ACTION_CHESS_ROGUE_LEAVE_ROOM = 4825;
	PLAYER_ACTION_CHESS_ROGUE_ROLL_DICE = 4826;
	PLAYER_ACTION_CHESS_ROGUE_SELECT_DICE = 4827;
	PLAYER_ACTION_CHESS_ROGUE_UNLOCK_DICE = 4828;
	PLAYER_ACTION_CHESS_ROGUE_BOARD_EVENT = 4829;
	PLAYER_ACTION_CHESS_ROGUE_DIMENSION_POINT = 4830;
	PLAYER_ACTION_CHESS_ROGUE_PICK_AVATAR = 4831;
	PLAYER_ACTION_CHESS_ROGUE_REVIVE_AVATAR = 4832;
	PLAYER_ACTION_CHESS_ROGUE_NOUS_SUB_STORY_SELECT = 4833;
	PLAYER_ACTION_CHESS_ROGUE_LEVEL_MECHANISM = 4844;
	PLAYER_ACTION_CHESS_ROGUE_NOUS_START_LEVEL = 4845;
	PLAYER_ACTION_CHESS_ROGUE_NOUS_FINISH_LEVEL = 4846;
	PLAYER_ACTION_CHESS_ROGUE_NOUS_START_LAYER = 4847;
	PLAYER_ACTION_CHESS_ROGUE_NOUS_FINISH_LAYER = 4848;
	PLAYER_ACTION_CHESS_ROGUE_NOUS_ENTER_ROOM = 4849;
	PLAYER_ACTION_CHESS_ROGUE_NOUS_LEAVE_ROOM = 4850;
	PLAYER_ACTION_CHESS_ROGUE_NOUS_SELECT_DICE = 4851;
	PLAYER_ACTION_CHESS_ROGUE_NOUS_UNLOCK_DICE_BRANCH = 4852;
	PLAYER_ACTION_CHESS_ROGUE_NOUS_UNLOCK_DICE_SURFACE = 4853;
	PLAYER_ACTION_CHESS_ROGUE_NOUS_EDIT_DICE = 4854;
	PLAYER_ACTION_CHESS_ROGUE_NOUS_VALUE_CHANGE = 4855;
	PLAYER_ACTION_CHESS_ROGUE_NOUS_MAIN_STORY_TRIGGER = 4856;
	PLAYER_ACTION_CHESS_ROGUE_NOUS_MAIN_STORY_FINISH = 4857;
	PLAYER_ACTION_CHESS_ROGUE_NOUS_SUB_STORY_TRIGGER = 4858;
	PLAYER_ACTION_CHESS_ROGUE_NOUS_SUB_STORY_FINISH = 4859;
	PLAYER_ACTION_CHESS_ROGUE_NOUS_ENABLE_TALENT = 4860;
	PLAYER_ACTION_CHESS_ROGUE_SELECT_BUFF = 4861;
	PLAYER_ACTION_CHESS_ROGUE_SELECT_MIRACLE = 4862;
	PLAYER_ACTION_CHESS_ROGUE_REMOVE_MIRACLE = 4863;
	PLAYER_ACTION_CHESS_ROGUE_BOARD_CELL = 4864;
	PLAYER_ACTION_FANTASTIC_STORY_BATTLE_BEGIN = 4901;
	PLAYER_ACTION_FANTASTIC_STORY_BATTLE_END = 4902;
	PLAYER_ACTION_ROGUE_ENDLESS_REWARD = 4950;
	PLAYER_ACTION_ROGUE_ENDLESS_LEVEL_START = 4951;
	PLAYER_ACTION_ROGUE_ENDLESS_STAGE_BEGIN = 4952;
	PLAYER_ACTION_ROGUE_ENDLESS_STAGE_END = 4953;
	PLAYER_ACTION_BATTLE_COLLEGE_REWARD = 5001;
	PLAYER_ACTION_COMMON_ROGUE_MIRACLE_FOR_BUFF_SHOP = 5051;
	PLAYER_ACTION_COMMON_ROGUE_ADVENTURE_ROOM_FINISH = 5052;
	PLAYER_ACTION_COMMON_ROGUE_BUY_BUFF_SHOP = 5053;
	PLAYER_ACTION_COMMON_ROGUE_BUY_BUFF_SHOP_REFRESH = 5054;
	PLAYER_ACTION_COMMON_ROGUE_COLLECTION_UNLOCK = 5055;
	PLAYER_ACTION_COMMON_ROGUE_COLLECTION_SET = 5056;
	PLAYER_ACTION_COMMON_ROGUE_EXHIBITION_UNLOCK = 5057;
	PLAYER_ACTION_COMMON_ROGUE_EXHIBITION_SET = 5058;
	PLAYER_ACTION_COMMON_ROGUE_CHEST_INTERACT = 5059;
	PLAYER_ACTION_COMMON_ROGUE_ADVENTURE_ROOM_WOLFGUN_FINISH = 5060;
	PLAYER_ACTION_HELIOBUS_POST_INCOME_REWARD = 5101;
	PLAYER_ACTION_HELIOBUS_POST_FANS_REWARD = 5102;
	PLAYER_ACTION_HELIOBUS_LEVEL_UPGRADE = 5103;
	PLAYER_ACTION_HELIOBUS_POST_REPLY_REWARD = 5104;
	PLAYER_ACTION_HELIOBUS_COMMENT_REPLY_REWARD = 5105;
	PLAYER_ACTION_HELIOBUS_CHALLENGE_FIRST_REWARD = 5106;
	PLAYER_ACTION_HELIOBUS_FANS_ADD = 5107;
	PLAYER_ACTION_HELIOBUS_ACTION_DAY_SETTLE = 5108;
	PLAYER_ACTION_HELIOBUS_SKILL_UNLOCK = 5109;
	PLAYER_ACTION_HELIOBUS_STAGE_BEGIN = 5110;
	PLAYER_ACTION_HELIOBUS_STAGE_END = 5111;
	PLAYER_ACTION_HELIOBUS_SNS_READ = 5112;
	PLAYER_ACTION_HELIOBUS_SNS_POST_UNLOCK = 5113;
	PLAYER_ACTION_HELIOBUS_SNS_COMMENT_UNLOCK = 5114;
	PLAYER_ACTION_HELIOBUS_SNS_COMMENT = 5115;
	PLAYER_ACTION_HELIOBUS_SNS_POST = 5116;
	PLAYER_ACTION_HELIOBUS_SNS_LIKE = 5117;
	PLAYER_ACTION_HELIOBUS_PHASE_UPGRADE = 5118;
	PLAYER_ACTION_PS_POINT_CARD_30_REWARD = 5201;
	PLAYER_ACTION_PS_POINT_CARD_50_REWARD = 5202;
	PLAYER_ACTION_PS_POINT_CARD_100_REWARD = 5203;
	PLAYER_ACTION_PSN_PLUS_GIFT_REWARD = 5204;
	PLAYER_ACTION_HEART_DIAL_SUBMIT_ITEM = 5301;
	PLAYER_ACTION_HEART_DIAL_DIALOGUE_PERFORM = 5302;
	PLAYER_ACTION_HEART_DIAL_TRACE_CONSUME = 5303;
	PLAYER_ACTION_HEART_DIAL_CHANGE_EMOTION = 5304;
	PLAYER_ACTION_TRAVEL_BROCHURE_ADD_DEFAULT_PASTER = 5401;
	PLAYER_ACTION_SPACE_ZOO_BORN = 5501;
	PLAYER_ACTION_SPACE_ZOO_MUTATE = 5502;
	PLAYER_ACTION_SPACE_ZOO_DELETE = 5503;
	PLAYER_ACTION_SPACE_ZOO_EXCHANGE_ITEM = 5504;
	PLAYER_ACTION_SPACE_ZOO_EXP_POINT = 5505;
	PLAYER_ACTION_SPACE_ZOO_TAKE_REWARD = 5506;
	PLAYER_ACTION_SPACE_ZOO_COLLECTION = 5507;
	PLAYER_ACTION_SPACE_ZOO_SHOW = 5508;
	PLAYER_ACTION_SPACE_ZOO_SPECIAL_DATA = 5509;
	PLAYER_ACTION_STRONG_CHALLENGE_BATTLE_BEGIN = 5701;
	PLAYER_ACTION_STRONG_CHALLENGE_BATTLE_END = 5702;
	PLAYER_ACTION_ROLL_SHOP_DO_GACHA = 5751;
	PLAYER_ACTION_ROLL_SHOP_TAKE_REWARD = 5752;
	PLAYER_ACTION_OFFERING_SUBMIT_ITEM = 5801;
	PLAYER_ACTION_OFFERING_TAKE_REWARD = 5802;
	PLAYER_ACTION_TRAVEL_BROCHURE_PAGE_UNLOCK = 5851;
	PLAYER_ACTION_TRAVEL_BROCHURE_PAGE_INTERACT_AWARD = 5852;
	PLAYER_ACTION_TRAVEL_BROCHURE_STICKER_UNLOCK = 5853;
	PLAYER_ACTION_TRAVEL_BROCHURE_STICKER_APPLY = 5854;
	PLAYER_ACTION_TRAVEL_BROCHURE_STICKER_REMOVE = 5855;
	PLAYER_ACTION_TRAVEL_BROCHURE_PAGE_RESET = 5856;
	PLAYER_ACTION_TRACK_MAIN_MISSION_ID = 5901;
	PLAYER_ACTION_WOLF_BRO_BEGIN = 5911;
	PLAYER_ACTION_WOLF_BRO_GROUP_STATE_CHANGE = 5912;
	PLAYER_ACTION_WOLF_BRO_END = 5913;
	PLAYER_ACTION_WOLF_BRO_BULLET_ZERO = 5914;
	PLAYER_ACTION_WOLF_BRO_ACTIVATE_BULLET = 5915;
	PLAYER_ACTION_WOLF_BRO_BULLET_NUM_CHANGE = 5916;
	PLAYER_ACTION_WOLF_BRO_USE_BULLET_NULL = 5917;
	PLAYER_ACTION_WOLF_BRO_USE_BULLET_HIT_MONSTER = 5918;
	PLAYER_ACTION_WOLF_BRO_PICK_UP_BULLET = 5919;
	PLAYER_ACTION_WOLF_BRO_RESTORE_ARCHIVE = 5920;
	PLAYER_ACTION_TELEVISION_ACTIVITY_BATTLE_BEGIN = 5921;
	PLAYER_ACTION_TELEVISION_ACTIVITY_BATTLE_END = 5922;
	PLAYER_ACTION_FEVER_TIME_ACTIVITY_BATTLE_BEGIN = 5923;
	PLAYER_ACTION_FEVER_TIME_ACTIVITY_BATTLE_END = 5924;
	PLAYER_ACTION_GUN_PLAY_END = 5925;
	PLAYER_ACTION_ACTIVITY_STAR_FIGHT_BEGIN = 5926;
	PLAYER_ACTION_ACTIVITY_STAR_FIGHT_END = 5927;
	PLAYER_ACTION_MAP_ROTATION_ENTER_REGION = 5931;
	PLAYER_ACTION_MAP_ROTATION_LEAVE_REGION = 5932;
	PLAYER_ACTION_MAP_ROTATION_INTERACT_CHARGER = 5933;
	PLAYER_ACTION_MAP_ROTATION_DEPLOY_ROTATER = 5934;
	PLAYER_ACTION_MAP_ROTATION_ROTATE_MAP = 5935;
	PLAYER_ACTION_MAP_ROTATION_ADD_ENERGY = 5936;
	PLAYER_ACTION_MAP_ROTATION_SET_MAX_ENERGY = 5937;
	PLAYER_ACTION_MAP_ROTATION_REMOVE_ROTATER = 5938;
	PLAYER_ACTION_MAP_ROTATION_AUTO_DEPLOY_ROTATER = 5939;
	PLAYER_ACTION_MAP_ROTATION_AUTO_REMOVE_ROTATER = 5940;
	PLAYER_ACTION_DRINK_MAKER_ADD_TIPS = 5951;
	PLAYER_ACTION_DRINK_MAKER_FINISH_CHALLENGE = 5952;
	PLAYER_ACTION_DRINK_MAKER_GUEST_MAX_FAITH_REWARD = 5953;
	PLAYER_ACTION_DRINK_MAKER_MAKE_DRINK = 5954;
	PLAYER_ACTION_DRINK_MAKER_SAVE_CUSTOM_DRINK = 5955;
	PLAYER_ACTION_DRINK_MAKER_END_SEQUENCE = 5956;
	PLAYER_ACTION_CHANGE_STORY_LINE = 6001;
	PLAYER_ACTION_CONTENT_PACKAGE_STATUS_CHANGE = 6011;
	PLAYER_ACTION_CONTENT_PACKAGE_TRACK_CHANGE = 6012;
	PLAYER_ACTION_CONTENT_PACKAGE_ACCEPT_MAIN_MISSION = 6013;
	PLAYER_ACTION_WORLD_DIRECT_UNLOCK = 6041;
	PLAYER_ACTION_MONOPOLY_TURN_FINISH = 6051;
	PLAYER_ACTION_MONOPOLY_ASSET_TURNTAX = 6052;
	PLAYER_ACTION_MONOPOLY_ASSET_BONUS = 6053;
	PLAYER_ACTION_MONOPOLY_EVENT_EFFECT = 6054;
	PLAYER_ACTION_MONOPOLY_MINI_GAME_SETTLE = 6055;
	PLAYER_ACTION_MONOPOLY_GAME_RAISE_RATIO = 6056;
	PLAYER_ACTION_MONOPOLY_MOVE_ROLL_DICE = 6057;
	PLAYER_ACTION_MONOPOLY_MOVE = 6059;
	PLAYER_ACTION_MONOPOLY_BUY_GOODS = 6060;
	PLAYER_ACTION_MONOPOLY_UPGRADE_ASSET = 6061;
	PLAYER_ACTION_MONOPOLY_EVENT_REROLL_RANDOM = 6062;
	PLAYER_ACTION_MONOPOLY_DAILY_REFRESH = 6063;
	PLAYER_ACTION_MONOPOLY_GAME_GUESS_BUY_INFORMATION = 6064;
	PLAYER_ACTION_MONOPOLY_DAILY_FIRST_ENTER_ACTIVITY = 6065;
	PLAYER_ACTION_MONOPOLY_SOCIAL_EVENT = 6066;
	PLAYER_ACTION_MONOPOLY_RAFFLE_TICKET_REWARD = 6067;
	PLAYER_ACTION_MONOPOLY_LIKE = 6068;
	PLAYER_ACTION_MONOPOLY_PHASE_REWARD = 6069;
	PLAYER_ACTION_MONOPOLY_MBTI_REPORT_REWARD = 6070;
	PLAYER_ACTION_MONOPOLY_DAILY_SETTLE = 6071;
	PLAYER_ACTION_MONOPOLY_START = 6072;
	PLAYER_ACTION_MONOPOLY_GET_BUFF = 6073;
	PLAYER_ACTION_MONOPOLY_ASSET_FUNDS_CHANGE = 6074;
	PLAYER_ACTION_MONOPOLY_ASSET_UPGRADE = 6075;
	PLAYER_ACTION_MONOPOLY_DIRECT_COIN_GAME_SETTLE = 6076;
	PLAYER_ACTION_MONOPOLY_EXTRACT_RAFFLE_TICKET = 6077;
	PLAYER_ACTION_MONOPOLY_MBTI_PROGRESS_CHANGE = 6078;
	PLAYER_ACTION_MONOPOLY_QUIZ_GAME_SETTLE = 6079;
	PLAYER_ACTION_MONOPOLY_EVENT_SETTLE = 6080;
	PLAYER_ACTION_MONOPOLY_ITEM_CHANGE = 6081;
	PLAYER_ACTION_MONOPOLY_CELL_TRIGGER = 6082;
	PLAYER_ACTION_MONOPOLY_EVENT_TRIGGER = 6083;
	PLAYER_ACTION_MONOPOLY_CLICK_EFFECT = 6084;
	PLAYER_ACTION_EVOLVE_BUILD_LEVEL_FINISH = 6101;
	PLAYER_ACTION_EVOLVE_BUILD_SHOP_ABILITY_UP = 6102;
	PLAYER_ACTION_EVOLVE_BUILD_SHOP_ABILITY_DOWN = 6103;
	PLAYER_ACTION_EVOLVE_BUILD_TAKE_EXP_REWARD = 6104;
	PLAYER_ACTION_EVOLVE_BUILD_BATTLE_END_ADD_COIN = 6105;
	PLAYER_ACTION_EVOLVE_BUILD_SHOP_ABILITY_RESET = 6106;
	PLAYER_ACTION_EVOLVE_BUILD_LEVEL_START = 6107;
	PLAYER_ACTION_EVOLVE_BUILD_LEVEL_END = 6108;
	PLAYER_ACTION_EVOLVE_BUILD_STAGE_START = 6109;
	PLAYER_ACTION_EVOLVE_BUILD_STAGE_END = 6110;
	PLAYER_ACTION_EVOLVE_BUILD_LEVEL_LEAVE = 6111;
	PLAYER_ACTION_CLOCK_PARK_UNLOCK_SCRIPT = 6151;
	PLAYER_ACTION_CLOCK_PARK_UNLOCK_TALENT = 6152;
	PLAYER_ACTION_CLOCK_PARK_FINISH_SCRIPT = 6153;
	PLAYER_ACTION_CLOCK_PARK_ROUND_UPDATE = 6154;
	PLAYER_ACTION_CLOCK_PARK_SCRIPT_BEGIN = 6155;
	PLAYER_ACTION_ROGUE_TOURN_START_LEVEL = 6200;
	PLAYER_ACTION_ROGUE_TOURN_FINISH_LEVEL = 6201;
	PLAYER_ACTION_ROGUE_TOURN_EXP_REWARD = 6202;
	PLAYER_ACTION_ROGUE_TOURN_FINISH_WEEK_CHALLENGE = 6203;
	PLAYER_ACTION_ROGUE_TOURN_PERMANENT_TALENT_EFFECT = 6204;
	PLAYER_ACTION_ROGUE_TOURN_FINISH_FORMULA_STORY = 6205;
	PLAYER_ACTION_ROGUE_TOURN_REVIVE = 6206;
	PLAYER_ACTION_ROGUE_TOURN_STAGE_BEGIN = 6207;
	PLAYER_ACTION_ROGUE_TOURN_STAGE_END = 6208;
	PLAYER_ACTION_ROGUE_TOURN_PERMANENT_ENABLE_TALENT = 6209;
	PLAYER_ACTION_ROGUE_TOURN_PERMANENT_RESET_TALENT = 6210;
	PLAYER_ACTION_ROGUE_TOURN_COCOON_STAGE_BEGIN = 6211;
	PLAYER_ACTION_ROGUE_TOURN_COCOON_STAGE_END = 6212;
	PLAYER_ACTION_ROGUE_TOURN_EXP_UPDATE = 6213;
	PLAYER_ACTION_ROGUE_TOURN_ENTER_ROOM = 6214;
	PLAYER_ACTION_ROGUE_TOURN_LEAVE_ROOM = 6215;
	PLAYER_ACTION_ROGUE_TOURN_ARCHIVE_SAVE = 6216;
	PLAYER_ACTION_ROGUE_TOURN_SELECT_BONUS = 6217;
	PLAYER_ACTION_ROGUE_TOURN_DIALOGUE_FINISH = 6218;
	PLAYER_ACTION_ROGUE_TOURN_DO_GAMBLE = 6219;
	PLAYER_ACTION_ROGUE_TOURN_ROOM_CONTENT_GENERATE = 6220;
	PLAYER_ACTION_ROGUE_TOURN_ADD_MIRACLE = 6221;
	PLAYER_ACTION_ROGUE_TOURN_REMOVE_MIRACLE = 6222;
	PLAYER_ACTION_ROGUE_TOURN_SELECT_MIRACLE = 6223;
	PLAYER_ACTION_ROGUE_TOURN_DROP_MIRACLE = 6224;
	PLAYER_ACTION_ROGUE_TOURN_ADD_BUFF = 6225;
	PLAYER_ACTION_ROGUE_TOURN_SELECT_BUFF = 6226;
	PLAYER_ACTION_ROGUE_TOURN_BUFF_LEVEL_UP = 6227;
	PLAYER_ACTION_ROGUE_TOURN_REMOVE_BUFF = 6228;
	PLAYER_ACTION_ROGUE_TOURN_ADD_FORMULA = 6229;
	PLAYER_ACTION_ROGUE_TOURN_REMOVE_FORMULA = 6230;
	PLAYER_ACTION_ROGUE_TOURN_SELECT_FORMULA = 6231;
	PLAYER_ACTION_ROGUE_TOURN_ACTIVATE_FORMULA = 6232;
	PLAYER_ACTION_ROGUE_TOURN_ADVENTURE_ROOM_FINISH = 6233;
	PLAYER_ACTION_ROGUE_TOURN_ALTER_LINEUP = 6234;
	PLAYER_ACTION_ROGUE_TOURN_SEASON_ENABLE_TALENT = 6235;
	PLAYER_ACTION_ROGUE_TOURN_TITAN_START_LEVEL = 6236;
	PLAYER_ACTION_ROGUE_TOURN_TITAN_FINISH_LEVEL = 6237;
	PLAYER_ACTION_ROGUE_TOURN_TITAN_ENTER_ROOM = 6238;
	PLAYER_ACTION_ROGUE_TOURN_TITAN_LEAVE_ROOM = 6239;
	PLAYER_ACTION_ROGUE_TOURN_TITAN_STAGE_BEGIN = 6240;
	PLAYER_ACTION_ROGUE_TOURN_TITAN_STAGE_END = 6241;
	PLAYER_ACTION_ROGUE_TOURN_TITAN_ARCHIVE_SAVE = 6243;
	PLAYER_ACTION_ROGUE_TOURN_TITAN_ADD_TITAN_BLESS = 6244;
	PLAYER_ACTION_ROGUE_TOURN_TITAN_SELECT_TITAN_BLESS = 6245;
	PLAYER_ACTION_ROGUE_TOURN_DIVISION_CHANGE = 6246;
	PLAYER_ACTION_ROGUE_WORKBENCH_REFORGE_FORMULA = 6281;
	PLAYER_ACTION_ROGUE_WORKBENCH_REFORGE_MIRACLE = 6282;
	PLAYER_ACTION_ROGUE_WORKBENCH_COMPOSE_MIRACLE = 6283;
	PLAYER_ACTION_ROGUE_WORKBENCH_REFORGE_BUFF = 6284;
	PLAYER_ACTION_ROGUE_WORKBENCH_ENHANCE_BUFF = 6285;
	PLAYER_ACTION_MATCH_THREE_PVE_SETTLE = 6301;
	PLAYER_ACTION_MATCH_THREE_SETTLE = 6302;
	PLAYER_ACTION_FIGHT_MATCH3_GAME_START = 6303;
	PLAYER_ACTION_FIGHT_MATCH3_GAME_END = 6304;
	PLAYER_ACTION_FIGHT_MATCH3_TURN_END = 6305;
	PLAYER_ACTION_MATCH_THREE_BIRD_POS = 6306;
	PLAYER_ACTION_MULTIPLE_PLAY_INVITE = 6307;
	PLAYER_ACTION_MULTIPLE_PLAY_INVITE_RESPOND = 6308;
	PLAYER_ACTION_MULTIPLE_PLAY_LOBBY_ENTER = 6309;
	PLAYER_ACTION_MULTIPLE_PLAY_LOBBY_QUIT = 6310;
	PLAYER_ACTION_MULTIPLE_PLAY_LOBBY_KICK = 6311;
	PLAYER_ACTION_MULTIPLE_PLAY_LOBBY_MATCH = 6312;
	PLAYER_ACTION_MARBLE_SETTLE = 6313;
	PLAYER_ACTION_SWORD_TRAINING_LEARN_SKILL = 6351;
	PLAYER_ACTION_SWORD_TRAINING_NORMAL_ACTION = 6352;
	PLAYER_ACTION_SWORD_TRAINING_STORY_EFFECT = 6353;
	PLAYER_ACTION_SWORD_TRAINING_ENDING_HINT = 6354;
	PLAYER_ACTION_SWORD_TRAINING_ACTION_HINT = 6355;
	PLAYER_ACTION_SWORD_TRAINING_RESTORE_GAME_BY_EXAM = 6356;
	PLAYER_ACTION_SWORD_TRAINING_STORY_LINE_FIRST_CLEAR = 6357;
	PLAYER_ACTION_SWORD_TRAINING_TAKE_ENDING_REWARD = 6358;
	PLAYER_ACTION_SWORD_TRAINING_STORY_LINE_BEGIN = 6359;
	PLAYER_ACTION_SWORD_TRAINING_ENTER_TURN = 6360;
	PLAYER_ACTION_SWORD_TRAINING_PLAN_ACTION = 6361;
	PLAYER_ACTION_SWORD_TRAINING_ACTION_PHASE_END = 6362;
	PLAYER_ACTION_SWORD_TRAINING_STORY = 6363;
	PLAYER_ACTION_SWORD_TRAINING_STATUS_CHANGE = 6364;
	PLAYER_ACTION_SWORD_TRAINING_MOOD_CHANGE = 6365;
	PLAYER_ACTION_SWORD_TRAINING_BATTLE_BEGIN = 6366;
	PLAYER_ACTION_SWORD_TRAINING_BATTLE_END = 6367;
	PLAYER_ACTION_SWORD_TRAINING_COMBAT_RANK_CHANGE = 6368;
	PLAYER_ACTION_SWORD_TRAINING_STORY_LINE_END = 6369;
	PLAYER_ACTION_SWORD_TRAINING_RESUME_STORY_LINE = 6370;
	PLAYER_ACTION_SWORD_TRAINING_GAME_SUCCESS = 6371;
	PLAYER_ACTION_SWORD_TRAINING_GAME_GIVE_UP = 6372;
	PLAYER_ACTION_SWORD_TRAINING_EXAM = 6374;
	PLAYER_ACTION_SWORD_TRAINING_DIALOGUE = 6375;
	PLAYER_ACTION_SWORD_TRAINING_SET_SKILL_TRACE = 6376;
	PLAYER_ACTION_FIGHT_FEST_FINISH_SCORE_RACE_MISSION = 6401;
	PLAYER_ACTION_FIGHT_FEST_FINISH_SCORE_RACE_PHASE = 6402;
	PLAYER_ACTION_FIGHT_FEST_RACE_START = 6403;
	PLAYER_ACTION_FIGHT_FEST_RACE_END = 6404;
	PLAYER_ACTION_FIGHT_FEST_CHALLENGE_START = 6405;
	PLAYER_ACTION_FIGHT_FEST_CHALLENGE_END = 6406;
	PLAYER_ACTION_FIGHT_FEST_GET_COACH_ITEM = 6407;
	PLAYER_ACTION_FIGHT_FEST_ACCEPT_SCORE_RACE_MISSION = 6408;
	PLAYER_ACTION_PET_USE = 6451;
	PLAYER_ACTION_MUSIC_RHYTHM_PASS_LEVEL_STAR = 6501;
	PLAYER_ACTION_MUSIC_RHYTHM_LEVEL_BEGIN = 6502;
	PLAYER_ACTION_MUSIC_RHYTHM_LEVEL_END = 6503;
	PLAYER_ACTION_TRACK_PHOTO_STAGE_BEGIN = 6551;
	PLAYER_ACTION_TRACK_PHOTO_STAGE_END = 6552;
	PLAYER_ACTION_SUMMON_ACTIVITY_BATTLE_BEGIN = 6561;
	PLAYER_ACTION_SUMMON_ACTIVITY_BATTLE_END = 6562;
	PLAYER_ACTION_RAID_COLLECTION_ENTER_NEXT_RAID = 6571;
	PLAYER_ACTION_DIFFICULTY_ADJUSTMENT_SET = 6572;
	PLAYER_ACTION_DIFFICULTY_ADJUSTMENT_UNSET = 6573;
	PLAYER_ACTION_ROGUE_ARCADE_ADVENTURE_ROOM_START = 6580;
	PLAYER_ACTION_ROGUE_ARCADE_ADVENTURE_ROOM_FINISH = 6581;
	PLAYER_ACTION_ROGUE_MAGIC_START_LEVEL = 6601;
	PLAYER_ACTION_ROGUE_MAGIC_FINISH_LEVEL = 6602;
	PLAYER_ACTION_ROGUE_MAGIC_REVIVE = 6603;
	PLAYER_ACTION_ROGUE_MAGIC_ENTER_ROOM = 6604;
	PLAYER_ACTION_ROGUE_MAGIC_LEAVE_ROOM = 6605;
	PLAYER_ACTION_ROGUE_MAGIC_ADD_MIRACLE = 6606;
	PLAYER_ACTION_ROGUE_MAGIC_REMOVE_MIRACLE = 6607;
	PLAYER_ACTION_ROGUE_MAGIC_STAGE_BEGIN = 6608;
	PLAYER_ACTION_ROGUE_MAGIC_STAGE_END = 6609;
	PLAYER_ACTION_ROGUE_MAGIC_ENABLE_TALENT = 6610;
	PLAYER_ACTION_ROGUE_MAGIC_FINISH_STORY = 6611;
	PLAYER_ACTION_ROGUE_MAGIC_ADD_SCEPTER = 6612;
	PLAYER_ACTION_ROGUE_MAGIC_SELECT_SCEPTER = 6613;
	PLAYER_ACTION_ROGUE_MAGIC_MOUNT_UNIT = 6614;
	PLAYER_ACTION_ROGUE_MAGIC_AUTO_MOUNT_UNIT = 6615;
	PLAYER_ACTION_ROGUE_MAGIC_ADD_MAGIC_UNIT = 6616;
	PLAYER_ACTION_ROGUE_MAGIC_REMOVE_MAGIC_UNIT = 6617;
	PLAYER_ACTION_ROGUE_MAGIC_WORKBENCH_COMPOSE_MAGIC_UNIT = 6618;
	PLAYER_ACTION_ROGUE_MAGIC_WORKBENCH_REFORGE_MAGIC_UNIT = 6619;
	PLAYER_ACTION_ROGUE_MAGIC_WORKBENCH_LEVEL_UP_SCEPTER = 6620;
	PLAYER_ACTION_TRAIN_PARTY_GAME_PLAY_START = 6701;
	PLAYER_ACTION_TRAIN_PARTY_PHASE_BEGIN = 6702;
	PLAYER_ACTION_TRAIN_PARTY_PHASE_END = 6703;
	PLAYER_ACTION_TRAIN_PARTY_ROUND = 6704;
	PLAYER_ACTION_TRAIN_PARTY_MEETING_BEGIN = 6705;
	PLAYER_ACTION_TRAIN_PARTY_MEETING_END = 6706;
	PLAYER_ACTION_TRAIN_PARTY_MEETING_PLAY_CARD = 6707;
	PLAYER_ACTION_TRAIN_PARTY_MEETING_RE_ROLL = 6708;
	PLAYER_ACTION_TRAIN_PARTY_BUILD_AREA_UNLOCK = 6709;
	PLAYER_ACTION_TRAIN_PARTY_BUILD_STEP = 6710;
	PLAYER_ACTION_TRAIN_PARTY_BUILD_LEVEL_AWARD = 6711;
	PLAYER_ACTION_TRAIN_PARTY_BUILDING_DYNAMIC_BUFF = 6712;
	PLAYER_ACTION_TRAIN_PARTY_BUILD_DIY = 6713;
	PLAYER_ACTION_SWITCH_HAND_OP_PROP_STATE = 6801;
	PLAYER_ACTION_ERA_FLIPPER_CHANGE_REGION_STATE = 6811;
	PLAYER_ACTION_ERA_FLIPPER_CHANGE_PROP_STATE = 6812;
	PLAYER_ACTION_ACTIVITY_BENEFIT_REWARD = 6820;
	PLAYER_ACTION_ACTIVITY_BENEFIT_JOIN = 6821;
	PLAYER_ACTION_ACTIVITY_BENEFIT_INITIAL_REWARD = 6822;
	PLAYER_ACTION_PAM_SKIN_CHANGE_SKIN = 6851;
	PLAYER_ACTION_CHEST_FIND = 6861;
	PLAYER_ACTION_REISSUE_MARK_CHEST_ITEM_MAIL = 6862;
	PLAYER_ACTION_MARBLE_PASS_MATCH = 6871;
	PLAYER_ACTION_MARBLE_BUY_SEAL = 6872;
	PLAYER_ACTION_MARBLE_FIGHT_GAME_BEGIN = 6873;
	PLAYER_ACTION_MARBLE_FIGHT_GAME_END = 6874;
	PLAYER_ACTION_MARBLE_FIGHT_GAME_ROUND = 6875;
	PLAYER_ACTION_MARBLE_FIGHT_GAME_TURN = 6876;
	PLAYER_ACTION_PLANET_FES_LEVEL_UP = 6901;
	PLAYER_ACTION_PLANET_FES_ACTIVITY_INIT = 6902;
	PLAYER_ACTION_PLANET_FES_AVATAR_LEVEL_UP = 6903;
	PLAYER_ACTION_PLANET_FES_TAKE_REGION_PHASE_REWARD = 6904;
	PLAYER_ACTION_PLANET_FES_ADD_ITEM = 6905;
	PLAYER_ACTION_PLANET_FES_QUEST = 6906;
	PLAYER_ACTION_PLANET_FES_BUSINESS_DAY_FINISH = 6907;
	PLAYER_ACTION_PLANET_FES_AVATAR_STAR_UP = 6908;
	PLAYER_ACTION_PLANET_FES_UNLOCK_LAND = 6909;
	PLAYER_ACTION_PLANET_FES_BUSINESS_EVENT_FINISH = 6910;
	PLAYER_ACTION_PLANET_FES_ACTIVATE_CARD = 6911;
	PLAYER_ACTION_PLANET_FES_SKILL_LEVEL_UP = 6912;
	PLAYER_ACTION_PLANET_FES_GACHA = 6913;
	PLAYER_ACTION_PLANET_FES_BUSINESS_EVENT_HANDLE = 6914;
	PLAYER_ACTION_PLANET_FES_CARD_APPLY_PERMISSION = 6915;
	PLAYER_ACTION_PLANET_FES_CARD_INTERACT = 6916;
	PLAYER_ACTION_PLANET_FES_TO_SNS = 6917;
	PLAYER_ACTION_PLANET_FES_SET_WORK_AVATAR = 6918;
	PLAYER_ACTION_TAROT_BOOK_CHARACTER_LEVEL_UP = 6951;
	PLAYER_ACTION_TAROT_BOOK_OPEN_PACK = 6952;
	PLAYER_ACTION_TAROT_BOOK_UNLOCK_STORY = 6953;
	PLAYER_ACTION_TAROT_BOOK_UNLOCK_STORY_SINGLE = 6954;
	PLAYER_ACTION_TAROT_BOOK_FINISH_STORY = 6955;
	PLAYER_ACTION_TAROT_BOOK_FINISH_INTERACTION = 6956;
	PLAYER_ACTION_TAROT_BOOK_CHANGE_ENERGY = 6957;
	PLAYER_ACTION_CHIMERA_ROUND_START = 6971;
	PLAYER_ACTION_CHIMERA_ROUND_WORK_START = 6972;
	PLAYER_ACTION_CHIMERA_ROUND_WORK_END = 6973;
	PLAYER_ACTION_CHIMERA_ENDLESS_START = 6974;
	PLAYER_ACTION_CHIMERA_ENDLESS_END = 6975;
	PLAYER_ACTION_CHIMERA_ENDLESS_WORK_START = 6976;
	PLAYER_ACTION_CHIMERA_ENDLESS_WORK_END = 6977;
	PLAYER_ACTION_CHIMERA_RANK_CHANGE = 6978;
	PLAYER_ACTION_CHIMERA_GET = 6979;
	PLAYER_ACTION_STORY_TOKEN_TAKE_ACTIVITY_REWARD = 6991;
	PLAYER_ACTION_REISSUE_AVATAR_TOKEN_ITEM = 6992;
	PLAYER_ACTION_AVATAR_DELIVER_REWARD_ACTIVITY_TAKE_REWARD = 7001;
}
enum AvatarSlotType {
	AVATAR_SLOT_1 = 0;
	AVATAR_SLOT_2 = 1;
	AVATAR_SLOT_3 = 2;
}
enum ItemType {
	ITEM_TYPE_NONE = 0;
	ITEM_AVATAR_CARD = 1;
	ITEM_EQUIPMENT = 2;
	ITEM_MATERIAL = 3;
	ITEM_AVATAR_EXP = 4;
	ITEM_RELIC = 5;
}
enum VirtualItemType {
	VIRTUAL_ITEM_NONE = 0;
	VIRTUAL_ITEM_HCOIN = 1;
	VIRTUAL_ITEM_SCOIN = 2;
	VIRTUAL_ITEM_MCOIN = 3;
	VIRTUAL_ITEM_STAMINA = 11;
	VIRTUAL_ITEM_RESERVE_STAMINA = 12;
	VIRTUAL_ITEM_AVATAR_EXP = 21;
	VIRTUAL_ITEM_EXP = 22;
	VIRTUAL_ITEM_DAILY_ACTIVE_POINT = 23;
	VIRTUAL_ITEM_MP_MAX = 24;
	VIRTUAL_ITEM_PLAYER_RETURN_POINT = 25;
	VIRTUAL_ITEM_BATTLE_COLLEGE_POINT = 26;
	VIRTUAL_ITEM_ROGUE_COIN = 31;
	VIRTUAL_ITEM_ROGUE_TALENT_COIN = 32;
	VIRTUAL_ITEM_ROGUE_REWARD_KEY = 33;
	VIRTUAL_ITEM_ACHIEVEMENT_EXP = 41;
	VIRTUAL_ITEM_BP_EXP = 51;
	VIRTUAL_ITEM_BP_REAL_EXP = 52;
	VIRTUAL_ITEM_MUSEUM_FUNDS = 53;
	VIRTUAL_TRAINPARTY_BUILDING_FUNDS = 54;
	VIRTUAL_TRAINPARTY_AREA_UNLOCK_COIN = 55;
	VIRTUAL_TRAINPARTY_MOBILITY = 56;
	VIRTUAL_ITEM_WARRIOR_EXP = 190;
	VIRTUAL_ITEM_ROGUE_EXP = 191;
	VIRTUAL_ITEM_MAGE_EXP = 192;
	VIRTUAL_ITEM_SHAMAN_EXP = 193;
	VIRTUAL_ITEM_WARLOCK_EXP = 194;
	VIRTUAL_ITEM_KNIGHT_EXP = 195;
	VIRTUAL_ITEM_PRIEST_EXP = 196;
	VIRTUAL_ITEM_PUNK_LORD_POINT = 100000;
	VIRTUAL_ITEM_GAMEPLAY_COUNTER_MONSTER_SNEAK_VISION = 280001;
	VIRTUAL_ITEM_GAMEPLAY_COUNTER_WOLF_BRO_BULLET = 280002;
	VIRTUAL_ITEM_ALLEY_FUNDS = 281001;
	VIRTUAL_ITEM_ROGUE_PUMAN_COUPON = 281012;
	VIRTUAL_ITEM_MONTH_CARD = 300101;
	VIRTUAL_ITEM_BP_NORMAL = 300102;
	VIRTUAL_ITEM_BP_DELUXE = 300103;
	VIRTUAL_ITEM_BP_UPGRADE = 300104;
	VIRTUAL_ITEM_HELIOBUS_FANS = 281002;
	VIRTUAL_ITEM_SPACE_ZOO_HYBRID_ITEM = 281003;
	VIRTUAL_ITEM_SPACE_ZOO_EXP_POINT = 281004;
	VIRTUAL_ITEM_ROGUE_NOUS_TALENT_COIN = 281013;
	VIRTUAL_ITEM_EVOLVE_BUILD_COIN = 281019;
	VIRTUAL_ITEM_DRINK_MAKER_TIP = 281005;
	VIRTUAL_ITEM_MONOPOLY_DICE = 281014;
	VIRTUAL_ITEM_MONOPOLY_COIN = 281015;
	VIRTUAL_ITEM_MONOPOLY_CHEATDICE = 281016;
	VIRTUAL_ITEM_MONOPOLY_REROLL = 281017;
	VIRTUAL_ITEM_ROGUE_TOURN_PERMANENT_TALENT_COIN = 281018;
	VIRTUAL_ITEM_ROGUE_TOURN_SEASON_TALENT_COIN = 281020;
	VIRTUAL_ITEM_ROGUE_TOURN_EXP = 281022;
	VIRTUAL_ITEM_MATCHTHREE_COIN = 281024;
	VIRTUAL_ITEM_SWORD_TRAINING_SKILL_POINT = 281023;
	VIRTUAL_ITEM_FIGHT_FEST_COIN = 281025;
	VIRTUAL_ITEM_ROGUE_MAGIC_TALENT_COIN = 281026;
}
enum GameplayCounterType {
	GAMEPLAY_COUNTER_NONE = 0;
	GAMEPLAY_COUNTER_MONSTER_SNEAK_VISION = 280001;
}
enum BlackLimitLevel {
	BLACK_LIMIT_LEVEL_ALL = 0;
}
enum AreaType {
	AREA_NONE = 0;
	AREA_CN = 1;
	AREA_JP = 2;
	AREA_ASIA = 3;
	AREA_WEST = 4;
	AREA_KR = 5;
	AREA_OVERSEAS = 6;
}
enum EntityType {
	ENTITY_NONE = 0;
	ENTITY_AVATAR = 1;
	ENTITY_MONSTER = 2;
	ENTITY_NPC = 3;
	ENTITY_PROP = 4;
	ENTITY_TRIGGER = 5;
	ENTITY_ENV = 6;
	ENTITY_SUMMON_UNIT = 7;
}
enum LanguageType {
	LANGUAGE_NONE = 0;
	LANGUAGE_SC = 1;
	LANGUAGE_TC = 2;
	LANGUAGE_EN = 3;
	LANGUAGE_KR = 4;
	LANGUAGE_JP = 5;
	LANGUAGE_FR = 6;
	LANGUAGE_DE = 7;
	LANGUAGE_ES = 8;
	LANGUAGE_PT = 9;
	LANGUAGE_RU = 10;
	LANGUAGE_TH = 11;
	LANGUAGE_VI = 12;
	LANGUAGE_ID = 13;
}
enum PlatformType {
	EDITOR = 0;
	IOS = 1;
	ANDROID = 2;
	PC = 3;
	WEB = 4;
	WAP = 5;
	PS4 = 6;
	NINTENDO = 7;
	CLOUD_ANDROID = 8;
	CLOUD_PC = 9;
	CLOUD_IOS = 10;
	PS5 = 11;
	MAC = 12;
	CLOUD_MAC = 13;
	CLOUD_WEB_ANDROID = 20;
	CLOUD_WEB_IOS = 21;
	CLOUD_WEB_PC = 22;
	CLOUD_WEB_MAC = 23;
	CLOUD_WEB_TOUCH = 24;
	CLOUD_WEB_KEYBOARD = 25;
}
enum ReloginType {
	NO_KICK = 0;
	FORCE_KICK = 1;
	IDLE_KICK = 2;
	SILENCE = 3;
}
enum AvatarType {
	AVATAR_TYPE_NONE = 0;
	AVATAR_TRIAL_TYPE = 1;
	AVATAR_LIMIT_TYPE = 2;
	AVATAR_FORMAL_TYPE = 3;
	AVATAR_ASSIST_TYPE = 4;
	AVATAR_AETHER_DIVIDE_TYPE = 5;
	AVATAR_UPGRADE_AVAILABLE_TYPE = 6;
}
enum MultiPathAvatarType {
	MultiPathAvatarTypeNone = 0;
	Mar_7thKnightType = 1001;
	Mar_7thRogueType = 1224;
	BoyWarriorType = 8001;
	GirlWarriorType = 8002;
	BoyKnightType = 8003;
	GirlKnightType = 8004;
	BoyShamanType = 8005;
	GirlShamanType = 8006;
	BoyMemoryType = 8007;
	GirlMemoryType = 8008;
}
enum Gender {
	GenderNone = 0;
	GenderMan = 1;
	GenderWoman = 2;
}
enum ProductType {
	PRODUCT_NONE = 0;
	PRODUCT_NORMAL = 1;
	PRODUCT_LIMIT = 2;
	PRODUCT_LIMIT_NO_PAY = 3;
	PRODUCT_NO_PROCESS_ORDER = 4;
}
enum ProductGiftType {
	PRODUCT_GIFT_NONE = 0;
	PRODUCT_GIFT_COIN = 1;
	PRODUCT_GIFT_MONTH_CARD = 2;
	PRODUCT_GIFT_BP_68 = 3;
	PRODUCT_GIFT_BP_128 = 4;
	PRODUCT_GIFT_BP68_UPGRADE_128 = 5;
	PRODUCT_GIFT_POINT_CARD = 6;
	PRODUCT_GIFT_PS_PRE_ORDER_1 = 7;
	PRODUCT_GIFT_PS_PRE_ORDER_2 = 8;
	PRODUCT_GIFT_GOOGLE_POINTS_100 = 9;
	PRODUCT_GIFT_GOOGLE_POINTS_150 = 10;
	PRODUCT_GIFT_PS_POINT_CARD_030 = 11;
	PRODUCT_GIFT_PS_POINT_CARD_050 = 12;
	PRODUCT_GIFT_PS_POINT_CARD_100 = 13;
	PRODUCT_GIFT_PSN_PLUS = 14;
	PRODUCT_GIFT_SINGLE_6 = 15;
	PRODUCT_GIFT_DAILY_LOGIN_30 = 16;
}
enum FeatureSwitchType {
	FEATURE_SWITCH_NONE = 0;
	FEATURE_SWITCH_SHOP = 1;
	FEATURE_SWITCH_LINEUP_NAME = 2;
	FEATURE_SWITCH_RECHARGE_SHOP = 3;
	FEATURE_SWITCH_NICKNAME = 4;
	FEATURE_SWITCH_SIGNATURE = 5;
	FEATURE_SWITCH_BATTLEPASS = 6;
	FEATURE_SWITCH_PUNK_LORD = 7;
	FEATURE_SWITCH_MONTHCARD_DAILY = 8;
	FEATURE_SWITCH_PICTURE_SHARE = 9;
	FEATURE_SWITCH_ROGUE = 10;
	FEATURE_SWITCH_CHALLENGE = 11;
	FEATURE_SWITCH_COCOON = 12;
	FEATURE_SWITCH_RAID = 13;
	FEATURE_SWITCH_MAZE_PLANE_EVENT = 14;
	FEATURE_SWITCH_ACTIVITY_PANEL = 15;
	FEATURE_SWITCH_MAILBOX = 16;
	FEATURE_SWITCH_QUEST = 17;
	FEATURE_SWITCH_GACHA = 18;
	FEATURE_SWITCH_CHAT = 19;
	FEATURE_SWITCH_MODIFY_FRIEND_ALIAS = 20;
	FEATURE_SWITCH_USE_ITEM = 21;
	FEATURE_SWITCH_ACTIVITY_SCHEDULE = 22;
	FEATURE_SWITCH_FARM_ELEMENT = 23;
	FEATURE_SWITCH_ACHIEVEMENT_LEVEL = 24;
	FEATURE_SWITCH_DAILY_ACTIVE_LEVEL = 25;
	FEATURE_SWITCH_PLAYER_RETURN = 26;
	FEATURE_SWITCH_FIRST_SET_NICKNAME = 27;
	FEATURE_SWITCH_MAIN_MISSION_REWARD = 28;
	FEATURE_SWITCH_SUB_MISSION_REWARD = 29;
	FEATURE_SWITCH_PAM_MISSION = 30;
	FEATURE_SWITCH_DESTROY_ITEM = 32;
	FEATURE_SWITCH_CONSUME_ITEM_TURN = 33;
	FEATURE_SWITCH_ROGUE_MODIFIER = 34;
	FEATURE_SWITCH_CHESS_ROGUE = 35;
	FEATURE_SWITCH_CHESS_ROGUE_BOARD = 36;
	FEATURE_SWITCH_ROLL_SHOP = 37;
	FEATURE_SWITCH_H5_RETURN = 38;
	FEATURE_SWITCH_OFFERING = 39;
	FEATURE_SWITCH_SERVER_RED_POINT = 40;
	FEATURE_SWITCH_MONOPOLY_OPTION_RATIO = 41;
	FEATURE_SWITCH_MONOPOLY_GET_RAFFLE_TICKET = 42;
	FEATURE_SWITCH_MONOPOLY_TAKE_RAFFLE_REWARD = 43;
	FEATURE_SWITCH_CHALLENGE_RECOMMEND_LINEUP = 44;
	FEATURE_SWITCH_PSN_MEMBER_SHIP_CHECK = 45;
	FEATURE_SWITCH_PLAYER_BOARD_DEVELOPMENT = 46;
	FEATURE_SWITCH_PVP = 47;
	FEATURE_SWITCH_ROGUE_MODE = 48;
	FEATURE_SWITCH_ROGUE_TOURN_UGC = 49;
	FEATURE_SWITCH_RELIC_FILTER_PLAN_NAME = 50;
	FEATURE_SWITCH_MAZE_ITEM_USE_BUFF_DROP = 51;
	FEATURE_SWITCH_RED_DOT = 52;
	FEATURE_SWITCH_GAME_STATE_SERVICE = 53;
	FEATURE_SWITCH_BENEFIT_INDEX = 54;
	FEATURE_SWITCH_ROGUE_TOURN_BUILD_REF = 55;
	FEATURE_SWITCH_PRE_AVATAR_SET_GROWTH_TARGET = 56;
	FEATURE_SWITCH_IMPORT_RELIC_FILTER_PLAN = 58;
	FEATURE_SWITCH_GACHA_DECIDE_ITEM = 59;
	FEATURE_SWITCH_ITEM_SYNC = 60;
}
enum SecretKeyType {
	SECRET_KEY_NONE = 0;
	SECRET_KEY_SERVER_CHECK = 1;
	SECRET_KEY_VIDEO = 2;
	SECRET_KEY_BATTLE_TIME = 3;
}
enum ReplayType {
	REPLAY_TYPE_NONE = 0;
	REPLAY_TYPE_PUNK_LORD = 1;
}
enum PunkLordShareType {
	PUNK_LORD_SHARE_TYPE_NONE = 0;
	PUNK_LORD_SHARE_TYPE_FRIEND = 1;
	PUNK_LORD_SHARE_TYPE_ALL = 2;
}
enum PunkLordAttackerStatus {
	PUNK_LORD_ATTACKER_STATUS_NONE = 0;
	PUNK_LORD_ATTACKER_STATUS_ATTACKED = 1;
	PUNK_LORD_ATTACKER_STATUS_ATTACKING = 2;
	PUNK_LORD_ATTACKER_STATUS_ATTACKED_AND_ATTACKING = 3;
}
enum PunkLordMonsterInfoNotifyReason {
	PUNK_LORD_MONSTER_INFO_NOTIFY_REASON_NONE = 0;
	PUNK_LORD_MONSTER_INFO_NOTIFY_REASON_ENTER_RAID = 1;
	PUNK_LORD_MONSTER_INFO_NOTIFY_REASON_BATTLE_END = 2;
	PUNK_LORD_MONSTER_INFO_NOTIFY_REASON_LEAVE_RAID = 3;
}
enum ChatType {
	CHAT_TYPE_NONE = 0;
	CHAT_TYPE_PRIVATE = 1;
	CHAT_TYPE_GROUP = 2;
}
enum MsgType {
	MSG_TYPE_NONE = 0;
	MSG_TYPE_CUSTOM_TEXT = 1;
	MSG_TYPE_EMOJI = 2;
	MSG_TYPE_INVITE = 3;
	MSG_TYPE_PLANET_FES = 4;
}
enum GEJHDKJNCLP {
	PLANET_FES_MSG_CONTENT_NONE = 0;
	PLANET_FES_MSG_CONTENT_APPLY_REQ = 1;
}
enum ShieldType {
	SHIELD_TYPE_NONE = 0;
	SHIELD_TYPE_REPLACE = 1;
	SHIELD_TYPE_SHIED = 2;
}
enum FuncUnlockIdType {
	FUNC_UNLOCK_ID_NONE = 0;
	FUNC_UNLOCK_ID_RELIC = 403;
	FUNC_UNLOCK_ID_RELIC_NUM = 404;
	FUNC_UNLOCK_ID_EQUIPMENT = 401;
	FUNC_UNLOCK_ID_SKILLTREE = 402;
	FUNC_UNLOCK_ID_GACHA = 2300;
	FUNC_UNLOCK_ID_EXPEDITION = 3100;
	FUNC_UNLOCK_ID_COMPOSE = 4100;
	FUNC_UNLOCK_ID_FIGHTACTIVITY = 3700;
}
enum AssistAvatarType {
	ASSIST_AVATAR_UNKNOW = 0;
	ASSIST_AVATAR_LEVEL = 1;
	ASSIST_AVATAR_RANK = 2;
}
enum DevelopmentType {
	DEVELOPMENT_NONE = 0;
	DEVELOPMENT_ROGUE_COSMOS = 1;
	DEVELOPMENT_ROGUE_CHESS = 2;
	DEVELOPMENT_ROGUE_CHESS_NOUS = 3;
	DEVELOPMENT_MEMORY_CHALLENGE = 4;
	DEVELOPMENT_STORY_CHALLENGE = 5;
	DEVELOPMENT_UNLOCK_AVATAR = 6;
	DEVELOPMENT_UNLOCK_EQUIPMENT = 7;
	DEVELOPMENT_ACTIVITY_START = 8;
	DEVELOPMENT_ACTIVITY_END = 9;
	DEVELOPMENT_BOSS_CHALLENGE = 10;
	DEVELOPMENT_ROGUE_TOURN = 11;
	DEVELOPMENT_ROGUE_TOURN_WEEK = 12;
	DEVELOPMENT_ROGUE_MAGIC = 13;
}
enum PlayingState {
	PLAYING_STATE_NONE = 0;
	PLAYING_ROGUE_COSMOS = 1;
	PLAYING_ROGUE_CHESS = 2;
	PLAYING_ROGUE_CHESS_NOUS = 3;
	PLAYING_CHALLENGE_MEMORY = 4;
	PLAYING_CHALLENGE_STORY = 5;
	PLAYING_CHALLENGE_BOSS = 6;
	PLAYING_ROGUE_TOURN = 7;
	PLAYING_ROGUE_MAGIC = 8;
}
enum MatchRoomCharacterType {
	MatchRoomCharacter_None = 0;
	MatchRoomCharacter_Leader = 1;
	MatchRoomCharacter_Member = 2;
	MatchRoomCharacter_Watcher = 3;
}
enum MatchRoomCharacterStatus {
	MatchRoomCharacterStatus_None = 0;
	MatchRoomCharacterStatus_Idle = 1;
	MatchRoomCharacterStatus_Operating = 2;
	MatchRoomCharacterStatus_Ready = 3;
	MatchRoomCharacterStatus_Fighting = 4;
	MatchRoomCharacterStatus_Watching = 5;
}
enum MGECFLOEOEG {
	PLANET_FES_CARD_PIECE_APPLY_PERMISSION_REVIEW = 0;
	PLANET_FES_CARD_PIECE_APPLY_PERMISSION_FREE = 1;
	PLANET_FES_CARD_PIECE_PERMISSION_BAN = 2;
}
enum GHANGCBOEMC {
	PLANET_FES_CARD_PIECE_INTERACT_APPLYING = 0;
	PLANET_FES_CARD_PIECE_INTERACT_OFFERED = 1;
	PLANET_FES_CARD_PIECE_INTERACT_OFFER_TAKEN = 2;
	PLANET_FES_CARD_PIECE_INTERACT_APPLY_CANCELD = 3;
	PLANET_FES_CARD_PIECE_INTERACT_APPLY_COMPENSATED = 4;
}
enum IJHBCBEOPFE {
	PLANET_FES_CARD_PIECE_OFFER_SOURCE_REVIEW_APPLY = 0;
	PLANET_FES_CARD_PIECE_OFFER_SOURCE_FREE_APPLY = 1;
	PLANET_FES_CARD_PIECE_OFFER_SOURCE_GIVE = 2;
}
enum BattleCheckStrategyType {
	BATTLE_CHECK_STRATEGY_IDENTICAL = 0;
	BATTLE_CHECK_STRATEGY_SERVER = 1;
	BATTLE_CHECK_STRATEGY_CLIENT = 2;
}
enum BattleCheckResultType {
	BATTLE_CHECK_RESULT_SUCC = 0;
	BATTLE_CHECK_RESULT_FAIL = 1;
	BATTLE_CHECK_RESULT_PASS = 2;
}
enum BattleModuleType {
	BATTLE_MODULE_MAZE = 0;
	BATTLE_MODULE_CHALLENGE = 1;
	BATTLE_MODULE_COCOON = 2;
	BATTLE_MODULE_ROGUE = 3;
	BATTLE_MODULE_CHALLENGE_ACTIVITY = 4;
	BATTLE_MODULE_TRIAL_LEVEL = 5;
	BATTLE_MODULE_AETHER_DIVIDE = 6;
}
enum AetherdivideSpiritLineupType {
	AETHERDIVIDE_SPIRIT_LINEUP_NONE = 0;
	AETHERDIVIDE_SPIRIT_LINEUP_NORMAL = 1;
	AETHERDIVIDE_SPIRIT_LINEUP_TRIAL = 2;
}
enum BattleTargetType {
	BATTLE_TARGET_TYPE_NONE = 0;
	BATTLE_TARGET_TYPE_SCORE = 1;
	BATTLE_TARGET_TYPE_ACHIEVEMENT = 2;
	BATTLE_TARGET_TYPE_RAID = 3;
	BATTLE_TARGET_TYPE_CHALLENGE_SCORE = 4;
	BATTLE_TARGET_TYPE_COMMON = 5;
	BATTLE_TARGET_TYPE_CLIENT_ACHIEVEMENT = 6;
}
enum DeathSource {
	UNKNOWN = 0;
	KILLED_BY_OTHERS = 1;
	KILLED_BY_SELF = 2;
	ESCAPE = 3;
}
enum BattleTag {
	TAG_NONE = 0;
	TAG_HIDE_NPC_MONSTER = 1;
}
enum HEMBNDJAFDA {
	NORMAL_CREATE = 0;
	FORM_CHANGE = 1;
}
enum BattleEndReason {
	BATTLE_END_REASON_NONE = 0;
	BATTLE_END_REASON_ALL_DIE = 1;
	BATTLE_END_REASON_TURN_LIMIT = 2;
}
enum BattleStaticticEventType {
	BATTLE_STATICTIC_EVENT_NONE = 0;
	BATTLE_STATICTIC_EVENT_TREASURE_DUNGEON_ADD_EXPLORE = 1;
	BATTLE_STATICTIC_EVENT_TREASURE_DUNGEON_OPEN_GRID = 2;
	BATTLE_STATICTIC_EVENT_TREASURE_DUNGEON_PICKUP_ITEM = 3;
	BATTLE_STATICTIC_EVENT_TREASURE_DUNGEON_USE_BUFF = 4;
	BATTLE_STATICTIC_EVENT_TELEVISION_ACTIVITY_UPDATE_MAZE_BUFF_LAYER = 5;
	BATTLE_STATICTIC_EVENT_ROGUE_TOURN_TITAN_EXTRA_COIN = 6;
	BATTLE_STATICTIC_EVENT_ROGUE_TOURN_TITAN_EXTRA_COIN_TIMES = 7;
}
enum JEGLEIKMNCL {
	kNone = 0;
	kkillEliteMonsterNum = 1;
	kkillMonsterNum = 2;
}
enum BattleEndStatus {
	BATTLE_END_NONE = 0;
	BATTLE_END_WIN = 1;
	BATTLE_END_LOSE = 2;
	BATTLE_END_QUIT = 3;
}
enum FightGameMode {
	FIGHT_GAME_MODE_NONE = 0;
	FIGHT_GAME_MODE_MATCH3 = 1;
	FIGHT_GAME_MODE_MARBLE = 2;
}
enum FightKickoutType {
	FIGHT_KICKOUT_UNKNOWN = 0;
	FIGHT_KICKOUT_BLACK = 1;
	FIGHT_KICKOUT_BY_GM = 2;
	FIGHT_KICKOUT_TIMEOUT = 3;
	FIGHT_KICKOUT_SESSION_RESET = 4;
}
enum LobbyCharacterType {
	LobbyCharacter_None = 0;
	LobbyCharacter_Leader = 1;
	LobbyCharacter_Member = 2;
	LobbyCharacter_Watcher = 3;
}
enum LobbyCharacterStatus {
	LobbyCharacterStatus_None = 0;
	LobbyCharacterStatus_Idle = 1;
	LobbyCharacterStatus_Operating = 2;
	LobbyCharacterStatus_Ready = 3;
	LobbyCharacterStatus_Fighting = 4;
	LobbyCharacterStatus_Watching = 5;
	LobbyCharacterStatus_Matching = 6;
	LobbyCharacterStatus_LobbyStartFight = 7;
}
enum LobbyModifyType {
	LobbyModifyType_None = 0;
	LobbyModifyType_Idle = 1;
	LobbyModifyType_Ready = 2;
	LobbyModifyType_Operating = 3;
	LobbyModifyType_CancelMatch = 4;
	LobbyModifyType_Match = 5;
	LobbyModifyType_QuitLobby = 6;
	LobbyModifyType_KickOut = 7;
	LobbyModifyType_TimeOut = 8;
	LobbyModifyType_JoinLobby = 9;
	LobbyModifyType_LobbyDismiss = 10;
	LobbyModifyType_MatchTimeOut = 11;
	LobbyModifyType_FightStart = 12;
	LobbyModifyType_Logout = 13;
	LobbyModifyType_FightEnd = 14;
	LobbyModifyType_FightRoomDestroyInInit = 15;
	LobbyModifyType_LobbyStartFight = 16;
	LobbyModifyType_LobbyStartFightTimeout = 17;
}
enum FightRoomDestroyReason {
	FIGHT_ROOM_DESTROY_REASON_NONE = 0;
	FIGHT_ROOM_DESTROY_REASON_SVR_STOP = 1;
	FIGHT_ROOM_DESTROY_REASON_GAME_END = 2;
}
enum Match3FinishReason {
	MATCH3_FINISH_REASON_DEFAULT = 0;
	MATCH3_FINISH_REASON_LEAVE = 1;
	MATCH3_FINISH_REASON_DIE = 2;
	MATCH3_FINISH_REASON_GAMEEND = 3;
	MATCH3_FINISH_REASON_KICKOUT = 4;
}
enum MatchUnitType {
	MATCH_UNIT_TYPE_NONE = 0;
	MATCH_UNIT_TYPE_NORMAL = 1;
	MATCH_UNIT_TYPE_ROBOT = 2;
	MATCH_UNIT_TYPE_GM = 3;
}
enum FFJPPNGGLFF {
	FIGHT_PLAYER_RESULT_NONE = 0;
	FIGHT_PLAYER_RESULT_WIN = 1;
	FIGHT_PLAYER_RESULT_FAIL = 2;
	FIGHT_PLAYER_RESULT_DRAW = 3;
}
enum IMAONMHILNE {
	LOBBY_INTERACT_TYPE_NONE = 0;
	LOBBY_INTERACT_TYPE_REMIND_PREPARE = 1;
}
enum Retcode {
	RET_SUCC = 0;
	RET_FAIL = 1;
	RET_SERVER_INTERNAL_ERROR = 2;
	RET_TIMEOUT = 3;
	RET_REPEATED_REQ = 4;
	RET_REQ_PARA_INVALID = 5;
	RET_PLAYER_DATA_ERROR = 6;
	RET_PLAYER_CLIENT_PAUSED = 7;
	RET_FUNC_CHECK_FAILED = 8;
	RET_FEATURE_SWITCH_CLOSED = 9;
	RET_FREQ_OVER_LIMIT = 10;
	RET_SYSTEM_BUSY = 11;
	RET_PLAYER_NOT_ONLINE = 12;
	RET_OPERATION_IN_CD = 13;
	RET_REPEATE_LOGIN = 1000;
	RET_RETRY_LOGIN = 1001;
	RET_WAIT_LOGIN = 1002;
	RET_NOT_IN_WHITE_LIST = 1003;
	RET_IN_BLACK_LIST = 1004;
	RET_ACCOUNT_VERIFY_ERROR = 1005;
	RET_ACCOUNT_PARA_ERROR = 1006;
	RET_ANTI_ADDICT_LOGIN = 1007;
	RET_CHECK_SUM_ERROR = 1008;
	RET_REACH_MAX_PLAYER_NUM = 1009;
	RET_ALREADY_REGISTERED = 1010;
	RET_GENDER_ERROR = 1011;
	SET_NICKNAME_RET_CALLBACK_PROCESSING = 1012;
	RET_IN_GM_BIND_ACCESS = 1013;
	RET_QUEST_REWARD_ALREADY_TAKEN = 1100;
	RET_QUEST_NOT_ACCEPT = 1101;
	RET_QUEST_NOT_FINISH = 1102;
	RET_QUEST_STATUS_ERROR = 1103;
	RET_ACHIEVEMENT_LEVEL_NOT_REACH = 1104;
	RET_ACHIEVEMENT_LEVEL_ALREADY_TAKEN = 1105;
	RET_AVATAR_NOT_EXIST = 1200;
	RET_AVATAR_RES_EXP_NOT_ENOUGH = 1201;
	RET_AVATAR_EXP_REACH_PROMOTION_LIMIT = 1202;
	RET_AVATAR_REACH_MAX_PROMOTION = 1203;
	RET_SKILLTREE_CONFIG_NOT_EXIST = 1204;
	RET_SKILLTREE_ALREADY_UNLOCK = 1205;
	RET_SKILLTREE_PRE_LOCKED = 1206;
	RET_SKILLTREE_LEVEL_NOT_MEET = 1207;
	RET_SKILLTREE_RANK_NOT_MEET = 1208;
	RET_AVATAR_DRESS_NO_EQUIPMENT = 1209;
	RET_AVATAR_EXP_ITEM_NOT_EXIST = 1210;
	RET_SKILLTREE_POINT_LOCKED = 1211;
	RET_SKILLTREE_POINT_LEVEL_UPGRADE_NOT_MATCH = 1212;
	RET_SKILLTREE_POINT_LEVEL_REACH_MAX = 1213;
	RET_WORLD_LEVEL_NOT_MEET = 1214;
	RET_PLAYER_LEVEL_NOT_MEET = 1215;
	RET_AVATAR_RANK_NOT_MATCH = 1216;
	RET_AVATAR_RANK_REACH_MAX = 1217;
	RET_HERO_BASIC_TYPE_NOT_MATCH = 1218;
	RET_AVATAR_PROMOTION_NOT_MEET = 1219;
	RET_PROMOTION_REWARD_CONFIG_NOT_EXIST = 1220;
	RET_PROMOTION_REWARD_ALREADY_TAKEN = 1221;
	RET_AVATAR_SKIN_ITEM_NOT_EXIST = 1222;
	RET_AVATAR_SKIN_ALREADY_DRESSED = 1223;
	RET_AVATAR_NOT_DRESS_SKIN = 1224;
	RET_AVATAR_SKIN_NOT_MATCH_AVATAR = 1225;
	RET_AVATAR_PATH_NOT_MATCH = 1226;
	RET_ITEM_NOT_EXIST = 1300;
	RET_ITEM_COST_NOT_ENOUGH = 1301;
	RET_ITEM_COST_TOO_MUCH = 1302;
	RET_ITEM_NO_COST = 1303;
	RET_ITEM_NOT_ENOUGH = 1304;
	RET_ITEM_INVALID = 1305;
	RET_ITEM_CONFIG_NOT_EXIST = 1306;
	RET_SCOIN_NOT_ENOUGH = 1307;
	RET_ITEM_REWARD_EXCEED_LIMIT = 1308;
	RET_ITEM_INVALID_USE = 1309;
	RET_ITEM_USE_CONFIG_NOT_EXIST = 1310;
	RET_REWARD_CONFIG_NOT_EXIST = 1311;
	RET_ITEM_EXCEED_LIMIT = 1312;
	RET_ITEM_COUNT_INVALID = 1313;
	RET_ITEM_USE_TARGET_TYPE_INVALID = 1314;
	RET_ITEM_USE_SATIETY_FULL = 1315;
	RET_ITEM_COMPOSE_NOT_EXIST = 1316;
	RET_RELIC_COMPOSE_NOT_EXIST = 1317;
	RET_ITEM_CAN_NOT_SELL = 1318;
	RET_ITEM_SELL_EXCEDD_LIMIT = 1319;
	RET_ITEM_NOT_IN_COST_LIST = 1320;
	RET_ITEM_SPECIAL_COST_NOT_ENOUGH = 1321;
	RET_ITEM_SPECIAL_COST_TOO_MUCH = 1322;
	RET_ITEM_FORMULA_NOT_EXIST = 1323;
	RET_ITEM_AUTO_GIFT_OPTIONAL_NOT_EXIST = 1324;
	RET_RELIC_COMPOSE_RELIC_INVALID = 1325;
	RET_RELIC_COMPOSE_MAIN_AFFIX_ID_INVALID = 1326;
	RET_RELIC_COMPOSE_WRONG_FORMULA_TYPE = 1327;
	RET_RELIC_COMPOSE_RELIC_NOT_EXIST = 1328;
	RET_RELIC_COMPOSE_BLACK_GOLD_COUNT_INVALID = 1329;
	RET_RELIC_COMPOSE_BLACK_GOLD_NOT_NEED = 1330;
	RET_MONTH_CARD_CANNOT_USE = 1331;
	RET_ITEM_REWARD_EXCEED_DISAPPEAR = 1332;
	RET_ITEM_NEED_RECYCLE = 1333;
	RET_ITEM_COMPOSE_EXCEED_LIMIT = 1334;
	RET_ITEM_CAN_NOT_DESTROY = 1335;
	RET_ITEM_ALREADY_MARK = 1336;
	RET_ITEM_MARK_EXCEED_LIMIT = 1337;
	RET_ITEM_NOT_MARK = 1338;
	RET_ITEN_TURN_FOOD_NOT_SET = 1339;
	RET_ITEM_TURN_FOOD_ALREADY_SET = 1340;
	RET_ITEM_TURN_FOOD_CONSUME_TYPE_ERROR = 1341;
	RET_ITEM_TURN_FOOD_SWITCH_ALREADY_OPEN = 1342;
	RET_ITEM_TURN_FOOD_SWITCH_ALREADY_CLOSE = 1343;
	RET_HCOIN_EXCHANGE_TOO_MUCH = 1344;
	RET_ITEM_TURN_FOOD_SCENE_TYPE_ERROR = 1345;
	RET_EQUIPMENT_ALREADY_DRESSED = 1350;
	RET_EQUIPMENT_NOT_EXIST = 1351;
	RET_EQUIPMENT_REACH_LEVEL_LIMIT = 1352;
	RET_EQUIPMENT_CONSUME_SELF = 1353;
	RET_EQUIPMENT_ALREADY_LOCKED = 1354;
	RET_EQUIPMENT_ALREADY_UNLOCKED = 1355;
	RET_EQUIPMENT_LOCKED = 1356;
	RET_EQUIPMENT_SELECT_NUM_OVER_LIMIT = 1357;
	RET_EQUIPMENT_RANK_UP_MUST_CONSUME_SAME_TID = 1358;
	RET_EQUIPMENT_PROMOTION_REACH_MAX = 1359;
	RET_EQUIPMENT_RANK_UP_REACH_MAX = 1360;
	RET_EQUIPMENT_LEVEL_REACH_MAX = 1361;
	RET_EQUIPMENT_EXCEED_LIMIT = 1362;
	RET_RELIC_NOT_EXIST = 1363;
	RET_RELIC_REACH_LEVEL_LIMIT = 1364;
	RET_RELIC_CONSUME_SELF = 1365;
	RET_RELIC_ALREADY_DRESSED = 1366;
	RET_RELIC_LOCKED = 1367;
	RET_RELIC_ALREADY_LOCKED = 1368;
	RET_RELIC_ALREADY_UNLOCKED = 1369;
	RET_RELIC_LEVEL_IS_NOT_ZERO = 1370;
	RET_UNIQUE_ID_REPEATED = 1371;
	RET_EQUIPMENT_LEVEL_NOT_MEET = 1372;
	RET_EQUIPMENT_ITEM_NOT_IN_COST_LIST = 1373;
	RET_EQUIPMENT_LEVEL_GREATER_THAN_ONE = 1374;
	RET_EQUIPMENT_ALREADY_RANKED = 1375;
	RET_RELIC_EXCEED_LIMIT = 1376;
	RET_RELIC_ALREADY_DISCARDED = 1377;
	RET_RELIC_ALREADY_UNDISCARDED = 1378;
	RET_EQUIPMENT_BATCH_LOCK_TOO_FAST = 1379;
	RET_RELIC_FILTER_PLAN_SLOT_EMPTY = 1380;
	RET_RELIC_FILTER_PLAN_NUM_EXCEED_LIMIT = 1381;
	RET_RELIC_FILTER_PLAN_NAME_UTF8_ERROR = 1382;
	RET_RELIC_FILTER_PLAN_NAME_FORMAT_ERROR = 1383;
	RET_RELIC_FILTER_PLAN_NO_CHANGE = 1384;
	RET_RELIC_REFORGE_NOT_CONFIRMED = 1385;
	RET_EQUIPMENT_ALREADY_LEVELUP = 1386;
	RET_EQUIPMENT_RARITY_ERROR = 1387;
	RET_LINEUP_INVALID_INDEX = 1400;
	RET_LINEUP_INVALID_MEMBER_POS = 1401;
	RET_LINEUP_SWAP_NOT_EXIST = 1402;
	RET_LINEUP_AVATAR_ALREADY_IN = 1403;
	RET_LINEUP_CREATE_AVATAR_ERROR = 1404;
	RET_LINEUP_AVATAR_INIT_ERROR = 1405;
	RET_LINEUP_NOT_EXIST = 1406;
	RET_LINEUP_ONLY_ONE_MEMBER = 1407;
	RET_LINEUP_SAME_LEADER_SLOT = 1408;
	RET_LINEUP_NO_LEADER_SELECT = 1409;
	RET_LINEUP_SWAP_SAME_SLOT = 1410;
	RET_LINEUP_AVATAR_NOT_EXIST = 1411;
	RET_LINEUP_TRIAL_AVATAR_CAN_NOT_QUIT = 1412;
	RET_LINEUP_VIRTUAL_LINEUP_PLANE_NOT_MATCH = 1413;
	RET_LINEUP_NOT_VALID_LEADER = 1414;
	RET_LINEUP_SAME_INDEX = 1415;
	RET_LINEUP_IS_EMPTY = 1416;
	RET_LINEUP_NAME_FORMAT_ERROR = 1417;
	RET_LINEUP_TYPE_NOT_MATCH = 1418;
	RET_LINEUP_REPLACE_ALL_FAILED = 1419;
	RET_LINEUP_NOT_ALLOW_EDIT = 1420;
	RET_LINEUP_AVATAR_IS_ALIVE = 1421;
	RET_LINEUP_ASSIST_HAS_ONLY_MEMBER = 1422;
	RET_LINEUP_ASSIST_CANNOT_SWITCH = 1423;
	RET_LINEUP_AVATAR_TYPE_INVALID = 1424;
	RET_LINEUP_NAME_UTF8_ERROR = 1425;
	RET_LINEUP_LEADER_LOCK = 1426;
	RET_LINEUP_STORY_LINE_NOT_MATCH = 1427;
	RET_LINEUP_AVATAR_LOCK = 1428;
	RET_LINEUP_AVATAR_INVALID = 1429;
	RET_LINEUP_AVATAR_ALREADY_INIT = 1430;
	RET_LINEUP_LIMITED = 1431;
	RET_MAIL_NOT_EXIST = 1700;
	RET_MAIL_RANGE_INVALID = 1701;
	RET_MAIL_MAIL_ID_INVALID = 1702;
	RET_MAIL_NO_MAIL_TAKE_ATTACHMENT = 1703;
	RET_MAIL_NO_MAIL_TO_DEL = 1704;
	RET_MAIL_TYPE_INVALID = 1705;
	RET_MAIL_PARA_INVALID = 1706;
	RET_MAIL_ATTACHEMENT_INVALID = 1707;
	RET_MAIL_TICKET_INVALID = 1708;
	RET_MAIL_TICKET_REPEATED = 1709;
	RET_STAGE_SETTLE_ERROR = 1800;
	RET_STAGE_CONFIG_NOT_EXIST = 1801;
	RET_STAGE_NOT_FOUND = 1802;
	RET_STAGE_COCOON_PROP_NOT_VALID = 1804;
	RET_STAGE_COCOON_WAVE_NOT_VALID = 1805;
	RET_STAGE_PROP_ID_NOT_EQUAL = 1806;
	RET_STAGE_COCOON_WAVE_OVER = 1807;
	RET_STAGE_WEEK_COCOON_OVER_CNT = 1808;
	RET_STAGE_COCOON_NOT_OPEN = 1809;
	RET_STAGE_TRIAL_NOT_OPEN = 1810;
	RET_STAGE_FARM_NOT_OPEN = 1811;
	RET_STAGE_FARM_TYPE_ERROR = 1812;
	RET_STAGE_FARM_SWEEP_CD = 1813;
	RET_CHAPTER_LOCK = 1900;
	RET_CHAPTER_CHALLENGE_NUM_NOT_ENOUGH = 1901;
	RET_CHAPTER_REWARD_ID_NOT_EXIST = 1902;
	RET_CHAPTER_REWARD_ALREADY_TAKEN = 1903;
	RET_BATTLE_STAGE_NOT_MATCH = 2000;
	RET_IN_BATTLE_NOW = 2001;
	RET_BATTLE_CHEAT = 2002;
	RET_BATTLE_FAIL = 2003;
	RET_BATTLE_NO_LINEUP = 2004;
	RET_BATTLE_LINEUP_EMPTY = 2005;
	RET_BATTLE_VERSION_NOT_MATCH = 2006;
	RET_BATTLE_QUIT_BY_SERVER = 2007;
	RET_IN_BATTLE_CHECK = 2008;
	RET_BATTLE_CHECK_NEED_RETRY = 2009;
	RET_BATTLE_COST_TIME_CHECK_FAIL = 2010;
	RET_LACK_EXCHANGE_STAMINA_TIMES = 2100;
	RET_LACK_STAMINA = 2101;
	RET_STAMINA_FULL = 2102;
	RET_AUTHKEY_SIGN_TYPE_ERROR = 2103;
	RET_AUTHKEY_SIGN_VER_ERROR = 2104;
	RET_NICKNAME_FORMAT_ERROR = 2105;
	RET_SENSITIVE_WORDS = 2106;
	RET_LEVEL_REWARD_HAS_TAKEN = 2107;
	RET_LEVEL_REWARD_LEVEL_ERROR = 2108;
	RET_LANGUAGE_INVALID = 2109;
	RET_NICKNAME_IN_CD = 2110;
	RET_GAMEPLAY_BIRTHDAY_INVALID = 2111;
	RET_GAMEPLAY_BIRTHDAY_ALREADY_SET = 2112;
	RET_NICKNAME_UTF8_ERROR = 2113;
	RET_NICKNAME_DIGIT_LIMIT_ERROR = 2114;
	RET_SENSITIVE_WORDS_PLATFORM_ERROR = 2115;
	RET_PLAYER_SETTING_TYPE_INVALID = 2116;
	RET_MAZE_LACK_TICKET = 2201;
	RET_MAZE_NOT_UNLOCK = 2202;
	RET_MAZE_NO_ABILITY = 2204;
	RET_MAZE_NO_PLANE = 2205;
	RET_MAZE_MAP_NOT_EXIST = 2207;
	RET_MAZE_MP_NOT_ENOUGH = 2213;
	RET_SPRING_NOT_ENABLE = 2214;
	RET_SPRING_TOO_FAR = 2216;
	RET_NOT_IN_MAZE = 2218;
	RET_MAZE_TIME_OF_DAY_TYPE_ERROR = 2223;
	RET_SCENE_TRANSFER_LOCKED_BY_TASK = 2224;
	RET_PLOT_NOT_UNLOCK = 2300;
	RET_MISSION_NOT_EXIST = 2400;
	RET_MISSION_ALREADY_DONE = 2401;
	RET_DAILY_TASK_NOT_FINISH = 2402;
	RET_DAILY_TASK_REWARD_HAS_TAKEN = 2403;
	RET_MISSION_NOT_FINISH = 2404;
	RET_MISSION_NOT_DOING = 2405;
	RET_MISSION_FINISH_WAY_NOT_MATCH = 2406;
	RET_MISSION_SCENE_NOT_MATCH = 2407;
	RET_MISSION_CUSTOM_VALUE_NOT_VALID = 2408;
	RET_MISSION_SUB_MISSION_NOT_MATCH = 2409;
	RET_ADVENTURE_MAP_NOT_EXIST = 2500;
	RET_SCENE_ENTITY_NOT_EXIST = 2600;
	RET_NOT_IN_SCENE = 2601;
	RET_SCENE_MONSTER_NOT_EXIST = 2602;
	RET_INTERACT_CONFIG_NOT_EXIST = 2603;
	RET_UNSUPPORTED_PROP_STATE = 2604;
	RET_SCENE_ENTRY_ID_NOT_MATCH = 2605;
	RET_SCENE_ENTITY_MOVE_CHECK_FAILED = 2606;
	RET_ASSIST_MONSTER_COUNT_LIMIT = 2607;
	RET_SCENE_USE_SKILL_FAIL = 2608;
	RET_PROP_IS_HIDDEN = 2609;
	RET_LOADING_SUCC_ALREADY = 2610;
	RET_SCENE_ENTITY_TYPE_INVALID = 2611;
	RET_INTERACT_TYPE_INVALID = 2612;
	RET_INTERACT_NOT_IN_REGION = 2613;
	RET_INTERACT_SUB_TYPE_INVALID = 2614;
	RET_NOT_LEADER_ENTITY = 2615;
	RET_MONSTER_IS_NOT_FARM_ELEMENT = 2616;
	RET_MONSTER_CONFIG_NOT_EXIST = 2617;
	RET_AVATAR_HP_ALREADY_FULL = 2618;
	RET_CUR_INTERACT_ENTITY_NOT_MATCH = 2619;
	RET_PLANE_TYPE_NOT_ALLOW = 2620;
	RET_GROUP_NOT_EXIST = 2621;
	RET_GROUP_SAVE_DATA_IN_CD = 2622;
	RET_GROUP_SAVE_LENGH_REACH_MAX = 2623;
	RET_RECENT_ELEMENT_NOT_EXIST = 2624;
	RET_RECENT_ELEMENT_STAGE_NOT_MATCH = 2625;
	RET_SCENE_POSITION_VERSION_NOT_MATCH = 2626;
	RET_GAMEPLAY_COUNTER_NOT_EXIST = 2627;
	RET_GAMEPLAY_COUNTER_NOT_ENOUGH = 2628;
	RET_GROUP_STATE_NOT_MATCH = 2629;
	RET_SCENE_ENTITY_POS_NOT_MATCH = 2630;
	RET_GROUP_STATE_CUSTOM_SAVE_DATA_OFF = 2631;
	RET_SCENE_NOT_MATCH = 2632;
	RET_PROP_TYPE_INVALID = 2633;
	RET_BUY_TIMES_LIMIT = 2700;
	RET_BUY_LIMIT_TYPE = 2701;
	RET_SHOP_NOT_OPEN = 2702;
	RET_GOODS_NOT_OPEN = 2703;
	RET_CITY_LEVEL_REWARD_TAKEN = 2704;
	RET_CITY_LEVEL_NOT_MEET = 2705;
	RET_SINGLE_BUY_LIMIT = 2706;
	RET_TUTORIAL_NOT_UNLOCK = 2751;
	RET_TUTORIAL_UNLOCK_ALREADY = 2752;
	RET_TUTORIAL_FINISH_ALREADY = 2753;
	RET_TUTORIAL_PRE_NOT_UNLOCK = 2754;
	RET_TUTORIAL_PLAYER_LEVEL_NOT_MATCH = 2755;
	RET_TUTORIAL_TUTORIAL_NOT_FOUND = 2756;
	RET_CHALLENGE_NOT_EXIST = 2801;
	RET_CHALLENGE_NOT_UNLOCK = 2802;
	RET_CHALLENGE_ALREADY = 2803;
	RET_CHALLENGE_LINEUP_EDIT_FORBIDDEN = 2804;
	RET_CHALLENGE_LINEUP_EMPTY = 2805;
	RET_CHALLENGE_NOT_DOING = 2806;
	RET_CHALLENGE_NOT_FINISH = 2807;
	RET_CHALLENGE_TARGET_NOT_FINISH = 2808;
	RET_CHALLENGE_TARGET_REWARD_TAKEN = 2809;
	RET_CHALLENGE_TIME_NOT_VALID = 2810;
	RET_CHALLENGE_STARS_COUNT_NOT_MEET = 2811;
	RET_CHALLENGE_STARS_REWARD_TAKEN = 2812;
	RET_CHALLENGE_STARS_NOT_EXIST = 2813;
	RET_CHALLENGE_CUR_SCENE_NOT_ENTRY_FLOOR = 2814;
	RET_CHALLENGE_NO_TEAM_ARCHIVE = 2815;
	RET_CHALLENGE_LINEUP_AVATAR_TYPE_INVALID = 2816;
	RET_CHALLENGE_LINEUP_RECOMMEND_IN_CD = 2817;
	RET_BASIC_TYPE_ALREADY = 2850;
	RET_NO_BASIC_TYPE = 2851;
	RET_NOT_CHOOSE_BASIC_TYPE = 2852;
	RET_NOT_FUNC_CLOSE = 2853;
	RET_NOT_CHOOSE_GENDER = 2854;
	RET_NOT_REQ_UNLOCK_BASIC_TYPE = 2855;
	RET_AVATAR_PATH_LOCKED = 2856;
	RET_ROGUE_STATUS_NOT_MATCH = 2901;
	RET_ROGUE_SELECT_BUFF_NOT_EXIST = 2902;
	RET_ROGUE_COIN_NOT_ENOUGH = 2903;
	RET_ROGUE_STAMINA_NOT_ENOUGH = 2904;
	RET_ROGUE_APPRAISAL_COUNT_NOT_ENOUGH = 2905;
	RET_ROGUE_PROP_ALREADY_USED = 2906;
	RET_ROGUE_RECORD_ALREADY_SAVED = 2907;
	RET_ROGUE_ROLL_BUFF_MAX_COUNT = 2908;
	RET_ROGUE_PICK_AVATAR_INVALID = 2909;
	RET_ROGUE_QUEST_EXPIRE = 2910;
	RET_ROGUE_QUEST_REWARD_ALREADY = 2911;
	RET_ROGUE_REVIVE_COUNT_NOT_ENOUGH = 2912;
	RET_ROGUE_AREA_INVALID = 2913;
	RET_ROGUE_SCORE_REWARD_POOL_INVALID = 2914;
	RET_ROGUE_SCORE_REWARD_ROW_INVALID = 2915;
	RET_ROGUE_AEON_LEVEL_NOT_MEET = 2916;
	RET_ROGUE_AEON_LEVEL_REWARD_ALREADY_TAKEN = 2917;
	RET_ROGUE_AEON_CONFIG_NOT_EXIST = 2918;
	RET_ROGUE_TRIAL_AVATAR_INVALID = 2919;
	RET_ROGUE_HANDBOOK_REWARD_ALREADY_TAKEN = 2920;
	RET_ROGUE_ROOM_TYPE_NOT_MATCH = 2921;
	RET_ROGUE_SHOP_GOOD_NOT_FOUND = 2922;
	RET_ROGUE_SHOP_GOOD_ALREADY_BOUGHT = 2923;
	RET_ROGUE_SHOP_GOOD_ALREADY_OWN = 2924;
	RET_ROGUE_SHOP_MIRACLE_NOT_EXIST = 2925;
	RET_ROGUE_SHOP_NOT_EXIST = 2926;
	RET_ROGUE_SHOP_CANNOT_REFRESH = 2927;
	RET_ROGUE_SELECT_BUFF_CERTAIN_MISMATCH = 2928;
	RET_ROGUE_ACTION_QUEUE_NOT_EMPTY_BATTLE = 2929;
	RET_ROGUE_ACTION_QUEUE_NOT_EMPTY_OTHERS = 2930;
	RET_MISSION_EVENT_CONFIG_NOT_EXIST = 2951;
	RET_MISSION_EVENT_NOT_CLIENT = 2952;
	RET_MISSION_EVENT_FINISHED = 2953;
	RET_MISSION_EVENT_DOING = 2954;
	RET_HAS_CHALLENGE_MISSION_EVENT = 2955;
	RET_NOT_CHALLENGE_MISSION_EVENT = 2956;
	RET_GACHA_ID_NOT_EXIST = 3001;
	RET_GACHA_NUM_INVALID = 3002;
	RET_GACHA_FIRST_GACHA_MUST_ONE = 3003;
	RET_GACHA_REQ_DUPLICATED = 3004;
	RET_GACHA_NOT_IN_SCHEDULE = 3005;
	RET_GACHA_NEWBIE_CLOSE = 3006;
	RET_GACHA_TODAY_LIMITED = 3007;
	RET_GACHA_NOT_SUPPORT = 3008;
	RET_GACHA_CEILING_NOT_ENOUGH = 3009;
	RET_GACHA_CEILING_CLOSE = 3010;
	RET_GACHA_LOCKED = 3011;
	RET_GACHA_DECIDE_ITEM_TYPE_INVALID = 3012;
	RET_GACHA_DECIDE_ITEM_ID_INVALID = 3013;
	RET_NOT_IN_RAID = 3101;
	RET_RAID_DOING = 3102;
	RET_NOT_PROP = 3103;
	RET_RAID_ID_NOT_MATCH = 3104;
	RET_RAID_RESTART_NOT_MATCH = 3105;
	RET_RAID_LIMIT = 3106;
	RET_RAID_AVATAR_LIST_EMPTY = 3107;
	RET_RAID_AVATAR_NOT_EXIST = 3108;
	RET_CHALLENGE_RAID_REWARD_ALREADY = 3109;
	RET_CHALLENGE_RAID_SCORE_NOT_REACH = 3110;
	RET_CHALLENGE_RAID_NOT_OPEN = 3111;
	RET_RAID_FINISHED = 3112;
	RET_RAID_WORLD_LEVEL_NOT_LOCK = 3113;
	RET_RAID_CANNOT_USE_ASSIST = 3114;
	RET_RAID_AVATAR_NOT_MATCH = 3115;
	RET_RAID_CAN_NOT_SAVE = 3116;
	RET_RAID_NO_SAVE = 3117;
	RET_ACTIVITY_RAID_NOT_OPEN = 3118;
	RET_RAID_AVATAR_CAPTAIN_NOT_EXIST = 3119;
	RET_RAID_STORY_LINE_NOT_MATCH = 3120;
	RET_TALK_EVENT_ALREADY_TAKEN = 3151;
	RET_NPC_ALREADY_MEET = 3152;
	RET_NPC_NOT_IN_CONFIG = 3153;
	RET_DIALOGUE_GROUP_DISMATCH = 3154;
	RET_DIALOGUE_EVENT_INVALID = 3155;
	RET_TALK_EVENT_TAKE_PROTO_NOT_MATCH = 3156;
	RET_TALK_EVENT_NOT_VALID = 3157;
	RET_EXPEDITION_CONFIG_NOT_EXIST = 3201;
	RET_EXPEDITION_REWARD_CONFIG_NOT_EXIST = 3202;
	RET_EXPEDITION_NOT_UNLOCKED = 3203;
	RET_EXPEDITION_ALREADY_ACCEPTED = 3204;
	RET_EXPEDITION_REPEATED_AVATAR = 3205;
	RET_AVATAR_ALREADY_DISPATCHED = 3206;
	RET_EXPEDITION_NOT_ACCEPTED = 3207;
	RET_EXPEDITION_NOT_FINISH = 3208;
	RET_EXPEDITION_ALREADY_FINISH = 3209;
	RET_EXPEDITION_TEAM_COUNT_LIMIT = 3210;
	RET_EXPEDITION_AVATAR_NUM_NOT_MATCH = 3211;
	RET_EXPEDITION_NOT_OPEN = 3212;
	RET_EXPEDITION_FRIEND_AVATAR_NOT_VALID = 3213;
	RET_EXPEDITION_NOT_PUBLISHED = 3214;
	RET_LOGIN_ACTIVITY_HAS_TAKEN = 3301;
	RET_LOGIN_ACTIVITY_DAYS_LACK = 3302;
	RET_TRIAL_ACTIVITY_REWARD_ALREADY_TAKE = 3303;
	RET_TRIAL_ACTIVITY_STAGE_NOT_FINISH = 3304;
	RET_MATERIAL_SUBMIT_ACTIVITY_HAS_TAKEN = 3305;
	RET_MATERIAL_SUBMIT_ACTIVITY_MATERIAL_NOT_SUBMITTED = 3306;
	RET_MATERIAL_SUBMIT_ACTIVITY_MATERIAL_ALREADY_SUBMITTED = 3307;
	RET_FANTASTIC_STORY_ACTIVITY_STORY_ERROR = 3308;
	RET_FANTASTIC_STORY_ACTIVITY_STORY_NOT_OPEN = 3309;
	RET_FANTASTIC_STORY_ACTIVITY_BATTLE_ERROR = 3310;
	RET_FANTASTIC_STORY_ACTIVITY_BATTLE_NOT_OPEN = 3311;
	RET_FANTASTIC_STORY_ACTIVITY_BATTLE_AVATAR_ERROR = 3312;
	RET_FANTASTIC_STORY_ACTIVITY_BATTLE_BUFF_ERROR = 3313;
	RET_FANTASTIC_STORY_ACTIVITY_PRE_BATTLE_SCORE_NOT_ENOUGH = 3314;
	RET_TRIAL_ACTIVITY_ALREADY_IN_TRIAL_ACTIVITY = 3315;
	RET_COMMON_ACTIVITY_NOT_OPEN = 3316;
	RET_BENEFIT_NOT_READY = 3317;
	RET_COMMON_ACTIVITY_BUSY = 3318;
	RET_AVATAR_DELIVER_REWARD_PHASE_ERROR = 3319;
	RET_MESSAGE_CONFIG_NOT_EXIST = 3501;
	RET_MESSAGE_SECTION_NOT_TAKE = 3502;
	RET_MESSAGE_GROUP_NOT_TAKE = 3503;
	RET_MESSAGE_SECTION_ID_NOT_MATCH = 3504;
	RET_MESSAGE_SECTION_CAN_NOT_FINISH = 3505;
	RET_MESSAGE_ITEM_CAN_NOT_FINISH = 3506;
	RET_MESSAGE_ITEM_RAID_CAN_NOT_FINISH = 3507;
	RET_FRIEND_ALREADY_IS_FRIEND = 3601;
	RET_FRIEND_IS_NOT_FRIEND = 3602;
	RET_FRIEND_APPLY_EXPIRE = 3603;
	RET_FRIEND_IN_BLACKLIST = 3604;
	RET_FRIEND_NOT_IN_BLACKLIST = 3605;
	RET_FRIEND_NUMBER_LIMIT = 3606;
	RET_FRIEND_BLACKLIST_NUMBER_LIMIT = 3607;
	RET_FRIEND_DAILY_APPLY_LIMIT = 3608;
	RET_FRIEND_IN_HANDLE_LIMIT = 3609;
	RET_FRIEND_APPLY_IN_CD = 3610;
	RET_FRIEND_REMARK_NAME_FORMAT_ERROR = 3611;
	RET_FRIEND_PLAYER_NOT_FOUND = 3612;
	RET_FRIEND_IN_TARGET_BLACKLIST = 3613;
	RET_FRIEND_TARGET_NUMBER_LIMIT = 3614;
	RET_ASSIST_QUERY_TOO_FAST = 3615;
	RET_ASSIST_NOT_EXIST = 3616;
	RET_ASSIST_USED_ALREADY = 3617;
	RET_FRIEND_REPORT_REASON_FORMAT_ERROR = 3618;
	RET_FRIEND_REPORT_SENSITIVE_WORDS = 3619;
	RET_ASSIST_USED_TIMES_OVER = 3620;
	RET_ASSIST_QUIT_ALREADY = 3621;
	RET_ASSIST_AVATAR_IN_LINEUP = 3622;
	RET_ASSIST_NO_REWARD = 3623;
	RET_FRIEND_SEARCH_NUM_LIMIT = 3624;
	RET_FRIEND_SEARCH_IN_CD = 3625;
	RET_FRIEND_REMARK_NAME_UTF8_ERROR = 3626;
	RET_FRIEND_REPORT_REASON_UTF8_ERROR = 3627;
	RET_ASSIST_SET_ALREADY = 3628;
	RET_FRIEND_TARGET_FORBID_OTHER_APPLY = 3629;
	RET_FRIEND_MARKED_CNT_MAX = 3630;
	RET_FRIEND_MARKED_ALREADY = 3631;
	RET_FRIEND_NOT_MARKED = 3632;
	RET_FRIEND_CHALLENGE_LINEUP_RECOMMEND_IN_CD = 3633;
	RET_VIEW_PLAYER_CARD_IN_CD = 3634;
	RET_VIEW_PLAYER_BATTLE_RECORD_IN_CD = 3635;
	RET_PLAYER_BOARD_HEAD_ICON_NOT_EXIST = 3701;
	RET_PLAYER_BOARD_HEAD_ICON_LOCKED = 3702;
	RET_PLAYER_BOARD_HEAD_ICON_ALREADY_UNLOCKED = 3703;
	RET_PLAYER_BOARD_DISPLAY_AVATAR_NOT_EXIST = 3704;
	RET_PLAYER_BOARD_DISPLAY_AVATAR_EXCEED_LIMIT = 3705;
	RET_PLAYER_BOARD_DISPLAY_REPEATED_AVATAR = 3706;
	RET_PLAYER_BOARD_DISPLAY_AVATAR_SAME_POS = 3707;
	RET_PLAYER_BOARD_DISPLAY_AVATAR_LOCKED = 3708;
	RET_SIGNATURE_LENGTH_EXCEED_LIMIT = 3709;
	RET_SIGNATURE_SENSITIVE_WORDS = 3710;
	RET_PLAYER_BOARD_ASSIST_AVATAR_NOT_EXIST = 3712;
	RET_PLAYER_BOARD_ASSIST_AVATAR_LOCKED = 3713;
	RET_SIGNATURE_UTF8_ERROR = 3714;
	RET_PLAYER_BOARD_ASSIST_AVATAR_CNT_ERROR = 3715;
	RET_PLAYER_BOARD_PERSONAL_CARD_NOT_EXIST = 3716;
	RET_PLAYER_BOARD_PERSONAL_CARD_LOCKED = 3717;
	RET_PLAYER_BOARD_PERSONAL_NO_CHANGE = 3718;
	RET_BATTLE_PASS_TIER_NOT_VALID = 3801;
	RET_BATTLE_PASS_LEVEL_NOT_MEET = 3802;
	RET_BATTLE_PASS_REWARD_TAKE_ALREADY = 3803;
	RET_BATTLE_PASS_NOT_PREMIUM = 3804;
	RET_BATTLE_PASS_NOT_DOING = 3805;
	RET_BATTLE_PASS_LEVEL_INVALID = 3806;
	RET_BATTLE_PASS_NOT_UNLOCK = 3807;
	RET_BATTLE_PASS_NO_REWARD = 3808;
	RET_BATTLE_PASS_QUEST_NOT_VALID = 3809;
	RET_BATTLE_PASS_NOT_CHOOSE_OPTIONAL = 3810;
	RET_BATTLE_PASS_NOT_TAKE_REWARD = 3811;
	RET_BATTLE_PASS_OPTIONAL_NOT_VALID = 3812;
	RET_BATTLE_PASS_BUY_ALREADY = 3813;
	RET_BATTLE_PASS_NEAR_END = 3814;
	RET_MUSIC_LOCKED = 3901;
	RET_MUSIC_NOT_EXIST = 3902;
	RET_MUSIC_UNLOCK_FAILED = 3903;
	RET_PUNK_LORD_LACK_SUMMON_TIMES = 4001;
	RET_PUNK_LORD_ATTACKING_MONSTER_LIMIT = 4002;
	RET_PUNK_LORD_MONSTER_NOT_EXIST = 4003;
	RET_PUNK_LORD_MONSTER_ALREADY_SHARED = 4004;
	RET_PUNK_LORD_MONSTER_EXPIRED = 4005;
	RET_PUNK_LORD_SELF_MONSTER_ATTACK_LIMIT = 4006;
	RET_PUNK_LORD_LACK_SUPPORT_TIMES = 4007;
	RET_PUNK_LORD_MONSTER_ALREADY_KILLED = 4008;
	RET_PUNK_LORD_MONSTER_ATTACKER_LIMIT = 4009;
	RET_PUNK_LORD_WORLD_LEVLE_NOT_VALID = 4010;
	RET_PUNK_LORD_REWARD_LEVLE_NOT_EXIST = 4011;
	RET_PUNK_LORD_POINT_NOT_MEET = 4012;
	RET_PUNK_LORD_IN_ATTACKING = 4013;
	RET_PUNK_LORD_OPERATION_IN_CD = 4014;
	RET_PUNK_LORD_REWARD_ALREADY_TAKEN = 4015;
	RET_PUNK_LORD_OVER_BONUS_REWARD_LIMIT = 4016;
	RET_PUNK_LORD_NOT_IN_SCHEDULE = 4017;
	RET_PUNK_LORD_MONSTER_NOT_ATTACKED = 4018;
	RET_PUNK_LORD_MONSTER_NOT_KILLED = 4019;
	RET_PUNK_LORD_MONSTER_KILLED_SCORE_ALREADY_TAKE = 4020;
	RET_PUNK_LORD_REWARD_LEVLE_ALREADY_TAKE = 4021;
	RET_DAILY_ACTIVE_LEVEL_INVALID = 4101;
	RET_DAILY_ACTIVE_LEVEL_REWARD_ALREADY_TAKEN = 4102;
	RET_DAILY_ACTIVE_LEVEL_AP_NOT_ENOUGH = 4103;
	RET_DAILY_MEET_PAM = 4201;
	RET_REPLAY_ID_NOT_MATCH = 4251;
	RET_REPLAY_REQ_NOT_VALID = 4252;
	RET_FIGHT_ACTIVITY_DIFFICULTY_LEVEL_NOT_PASSED = 4301;
	RET_FIGHT_ACTIVITY_DIFFICULTY_LEVEL_REWARD_ALREADY_TAKE = 4302;
	RET_FIGHT_ACTIVITY_STAGE_NOT_OPEN = 4303;
	RET_FIGHT_ACTIVITY_LEVEL_NOT_UNLOCK = 4304;
	RET_TRAIN_VISITOR_VISITOR_NOT_EXIST = 4351;
	RET_TRAIN_VISITOR_BEHAVIOR_NOT_EXIST = 4352;
	RET_TRAIN_VISITOR_BEHAVIOR_FINISHED = 4353;
	RET_TRAIN_VISITOR_ALL_BEHAVIOR_REWARD_TAKEN = 4354;
	RET_TRAIN_VISITOR_GET_ON_MISSION_NOT_FINISH = 4355;
	RET_TRAIN_VISITOR_NOT_GET_OFF_OR_BE_TRAIN_MEMBER = 4356;
	RET_TEXT_JOIN_UNKNOW_IS_OVERRIDE = 4401;
	RET_TEXT_JOIN_ID_NOT_EXIST = 4402;
	RET_TEXT_JOIN_CAN_NOT_OVERRIDE = 4403;
	RET_TEXT_JOIN_ITEM_ID_ERROR = 4404;
	RET_TEXT_JOIN_SENSITIVE_CHECK_ERROR = 4405;
	RET_TEXT_JOIN_MUST_OVERRIDE = 4406;
	RET_TEXT_JOIN_TEXT_EMPTY = 4407;
	RET_TEXT_JOIN_TEXT_FORMAT_ERROR = 4408;
	RET_TEXT_JOIN_TEXT_UTF8_ERROR = 4409;
	RET_TEXT_JOIN_BATCH_REQ_ID_REPEAT = 4410;
	RET_TEXT_JOIN_TYPE_NOT_SUPPORT_BATCH_REQ = 4411;
	RET_TEXT_JOIN_AVATAR_ID_NOT_EXIST = 4412;
	RET_TEXT_JOIN_UNKNOW_TYPE = 4413;
	RET_PAM_MISSION_MISSION_ID_ERROR = 4451;
	RET_PAM_MISSION_MISSION_EXPIRE = 4452;
	RET_CHAT_TYPE_NOT_EXIST = 4501;
	RET_MSG_TYPE_NOT_EXIST = 4502;
	RET_CHAT_NO_TARGET_UID = 4503;
	RET_CHAT_MSG_EMPTY = 4504;
	RET_CHAT_MSG_EXCEED_LIMIT = 4505;
	RET_CHAT_MSG_SENSITIVE_CHECK_ERROR = 4506;
	RET_CHAT_MSG_UTF8_ERROR = 4507;
	RET_CHAT_FORBID_SWITCH_OPEN = 4508;
	RET_CHAT_FORBID = 4509;
	RET_CHAT_MSG_INCLUDE_SPECIAL_STR = 4510;
	RET_CHAT_MSG_EMOJI_NOT_EXIST = 4511;
	RET_CHAT_MSG_EMOJI_GENDER_NOT_MATCH = 4512;
	RET_CHAT_MSG_EMOJI_NOT_MARKED = 4513;
	RET_CHAT_MSG_EMOJI_ALREADY_MARKED = 4514;
	RET_CHAT_MSG_EMOJI_MARKED_MAX_LIMIT = 4515;
	RET_BOXING_CLUB_CHALLENGE_NOT_OPEN = 4601;
	RET_MUSEUM_NOT_OPEN = 4651;
	RET_MUSEUM_TURN_CNT_NOT_MATCH = 4652;
	RET_MUSEUM_PHASE_NOT_REACH = 4653;
	RET_MUSEUM_UNKNOW_STUFF = 4654;
	RET_MUSEUM_UNKNOW_AREA = 4655;
	RET_MUSEUM_UNKNOW_POS = 4656;
	RET_MUSEUM_STUFF_ALREADY_IN_AREA = 4657;
	RET_MUSEUM_STUFF_NOT_IN_AREA = 4658;
	RET_MUSEUM_GET_NPC_REPEAT = 4659;
	RET_MUSEUM_GET_NPC_UNLOCK = 4660;
	RET_MUSEUM_GET_NPC_NOT_ENOUGH = 4661;
	RET_MUSEUM_CHANGE_STUFF_AREA_ERROR = 4662;
	RET_MUSEUM_NOT_INIT = 4663;
	RET_MUSEUM_EVENT_ERROR = 4664;
	RET_MUSEUM_UNKNOW_CHOOSE_EVENT_ID = 4665;
	RET_MUSEUM_EVENT_ORDER_NOT_MATCH = 4666;
	RET_MUSEUM_EVENT_PHASE_NOT_UNLOCK = 4667;
	RET_MUSEUM_EVENT_MISSION_NOT_FOUND = 4668;
	RET_MUSEUM_AREA_LEVEL_UP_ALREADY = 4669;
	RET_MUSEUM_STUFF_ALREADY_USED = 4670;
	RET_MUSEUM_EVENT_ROUND_NOT_UNLOCK = 4671;
	RET_MUSEUM_STUFF_IN_AREA = 4672;
	RET_MUSEUM_STUFF_DISPATCH = 4673;
	RET_MUSEUM_IS_END = 4674;
	RET_MUSEUM_STUFF_LEAVING = 4675;
	RET_MUSEUM_EVENT_MISSION_NOT_FINISH = 4678;
	RET_MUSEUM_COLLECT_REWARD_NOT_EXIST = 4679;
	RET_MUSEUM_COLLECT_REWARD_ALREADY_TAKEN = 4680;
	RET_MUSEUM_ACCEPT_MISSION_MAX_LIMIT = 4681;
	RET_ROGUE_CHALLENGE_NOT_OPEN = 4701;
	RET_ROGUE_CHALLENGE_ASSIS_REFRESH_LIMIT = 4702;
	RET_ALLEY_NOT_INIT = 4721;
	RET_ALLEY_NOT_OPEN = 4722;
	RET_ALLEY_MAP_NOT_EXIST = 4724;
	RET_ALLEY_EMPTY_POS_LIST = 4725;
	RET_ALLEY_LINE_POS_INVALID = 4726;
	RET_ALLEY_SHOP_NOT_UNLOCK = 4727;
	RET_ALLEY_DEPOT_FULL = 4728;
	RET_ALLEY_SHOP_NOT_INCLUDE = 4729;
	RET_ALLEY_EVENT_NOT_UNLOCK = 4730;
	RET_ALLEY_EVENT_NOT_REFRESH = 4731;
	RET_ALLEY_EVENT_STATE_DOING = 4732;
	RET_ALLEY_EVENT_STATE_FINISH = 4733;
	RET_ALLEY_EVENT_ERROR = 4734;
	RET_ALLEY_REWARD_LEVEL_ERROR = 4735;
	RET_ALLEY_REWARD_PRESTIGE_NOT_ENOUGH = 4736;
	RET_ALLEY_SHIP_EMPTY = 4737;
	RET_ALLEY_SHIP_ID_DISMATCH = 4738;
	RET_ALLEY_SHIP_NOT_EXIST = 4739;
	RET_ALLEY_SHIP_NOT_UNLOCK = 4740;
	RET_ALLEY_GOODS_NOT_EXIST = 4741;
	RET_ALLEY_GOODS_NOT_UNLOCK = 4742;
	RET_ALLEY_PROFIT_NOT_POSITIVE = 4743;
	RET_ALLEY_SPECIAL_ORDER_DISMATCH = 4744;
	RET_ALLEY_ORDER_GOODS_OVER_LIMIT = 4745;
	RET_ALLEY_SPECIAL_ORDER_CONDITION_NOT_MEET = 4746;
	RET_ALLEY_DEPOT_SIZE_OVER_LIMIT = 4747;
	RET_ALLEY_GOODS_NOT_ENOUGH = 4748;
	RET_ALLEY_ORDER_INDEX_INVALID = 4749;
	RET_ALLEY_REWARD_ALREADY_TAKE = 4750;
	RET_ALLEY_REWARD_NOT_EXIST = 4751;
	RET_ALLEY_MAIN_MISSION_NOT_DOING = 4752;
	RET_ALLEY_CRITICAL_EVENT_NOT_FINISH = 4753;
	RET_ALLEY_SHOP_GOODS_NOT_VALID = 4754;
	RET_ALLEY_SLASH_NOT_OPEN = 4755;
	RET_ALLEY_PLACING_ANCHOR_INVALID = 4756;
	RET_ALLEY_PLACING_GOODS_INDEX_INVALID = 4757;
	RET_ALLEY_SAVE_MAP_TOO_QUICK = 4758;
	RET_ALLEY_MAP_NOT_LINK = 4759;
	RET_ALLEY_FUNDS_NOT_LOWER_BASE = 4760;
	RET_ALLEY_EVENT_NOT_FINISH = 4761;
	RET_ALLEY_NORMAL_ORDER_NOT_MEET = 4762;
	RET_PLAYER_RETURN_NOT_OPEN = 4801;
	RET_PLAYER_RETURN_IS_SIGNED = 4802;
	RET_PLAYER_RETURN_POINT_NOT_ENOUGH = 4803;
	RET_PLAYER_RETURN_CONDITION_INVALID = 4804;
	RET_PLAYER_RETURN_HAS_SIGNED = 4805;
	RET_PLAYER_RETURN_REWARD_TAKEN = 4806;
	RET_PLAYER_RETURN_RELIC_TAKEN = 4807;
	RET_AETHER_DIVIDE_NO_LINEUP = 4851;
	RET_AETHER_DIVIDE_LINEUP_INVALID = 4852;
	RET_CHAT_BUBBLE_ID_ERROR = 4901;
	RET_CHAT_BUBBLE_ID_NOT_UNLOCK = 4902;
	RET_PHONE_THEME_ID_ERROR = 4903;
	RET_PHONE_THEME_ID_NOT_UNLOCK = 4904;
	RET_CHAT_BUBBLE_SELECT_IS_CURRENT = 4905;
	RET_PHONE_THEME_SELECT_IS_CURRENT = 4906;
	RET_PHONE_CASE_ID_ERROR = 4907;
	RET_PHONE_CASE_ID_NOT_UNLOCK = 4908;
	RET_PHONE_CASE_SELECT_IS_CURRENT = 4909;
	RET_CHESS_ROGUE_CONFIG_NOT_FOUND = 4951;
	RET_CHESS_ROGUE_CONFIG_INVALID = 4952;
	RET_CHESS_ROGUE_NO_VALID_ROOM = 4963;
	RET_CHESS_ROGUE_NO_CELL_INFO = 4964;
	RET_CHESS_ROGUE_CELL_NOT_FINISH = 4965;
	RET_CHESS_ROGUE_CELL_IS_LOCKED = 4966;
	RET_CHESS_ROGUE_SCHEDULE_NOT_MATCH = 4967;
	RET_CHESS_ROGUE_STATUS_FAIL = 4968;
	RET_CHESS_ROGUE_AREA_NOT_EXIST = 4969;
	RET_CHESS_ROGUE_LINEUP_FAIL = 4970;
	RET_CHESS_ROGUE_AEON_FAIL = 4980;
	RET_CHESS_ROGUE_ENTER_CELL_FAIL = 4981;
	RET_CHESS_ROGUE_ROLL_DICE_FAIL = 4982;
	RET_CHESS_ROGUE_DICE_STATUS_FAIL = 4983;
	RET_CHESS_ROGUE_DICE_CNT_NOT_FULL = 4984;
	RET_CHESS_ROGUE_UNLOCK = 4985;
	RET_CHESS_ROGUE_PICK_AVATAR_FAIL = 4986;
	RET_CHESS_ROGUE_AVATAR_INVALID = 4987;
	RET_CHESS_ROGUE_CELL_CAN_NOT_SELECT = 4988;
	RET_CHESS_ROGUE_DICE_CONFIRMED = 4989;
	RET_CHESS_ROGUE_NOUS_DICE_NOT_MATCH = 4990;
	RET_CHESS_ROGUE_NOUS_DICE_RARITY_FAIL = 4991;
	RET_CHESS_ROGUE_NOUS_DICE_SURFACE_DUPLICATE = 4992;
	RET_CHESS_ROGUE_NOT_IN_ROGUE = 4993;
	RET_CHESS_ROGUE_NOUS_DICE_BRANCH_LIMIT = 4994;
	RET_HELIOBUS_NOT_OPEN = 5101;
	RET_HELIOBUS_SNS_POST_NOT_UNLOCK = 5102;
	RET_HELIOBUS_SNS_ALREADY_READ = 5103;
	RET_HELIOBUS_SNS_ALREADY_LIKED = 5104;
	RET_HELIOBUS_SNS_ALREADY_COMMENTED = 5105;
	RET_HELIOBUS_SNS_IN_MISSION = 5106;
	RET_HELIOBUS_SNS_ALREADY_POSTED = 5107;
	RET_HELIOBUS_SNS_NOT_DOING_MISSION = 5108;
	RET_HELIOBUS_REWARD_LEVEL_MAX = 5109;
	RET_HELIOBUS_INCOME_NOT_ENOUGH = 5110;
	RET_HELIOBUS_SNS_COMMENT_NOT_UNLOCK = 5111;
	RET_HELIOBUS_CHALLENGE_NOT_UNLOCK = 5112;
	RET_HELIOBUS_CHALLENGE_ID_ERROR = 5113;
	RET_HELIOBUS_SKILL_NOT_UNLOCK = 5114;
	RET_HELIOBUS_ACCEPT_POST_MISSION_FAIL = 5115;
	RET_HELIOBUS_SKILL_NOT_SELECTED = 5116;
	RET_HELIOBUS_PLANE_TYPE_INVALID = 5117;
	RET_REDDOT_PARAM_INVALID = 5151;
	RET_REDDOT_ACTIVITY_NOT_OPEN = 5152;
	RET_ROGUE_ENDLESS_ACTIVITY_CONFIG_ERROR = 5201;
	RET_ROGUE_ENDLESS_ACTIVITY_NOT_OPEN = 5202;
	RET_ROGUE_ENDLESS_ACTIVITY_OVER_BONUS_REWARD_LIMIT = 5203;
	RET_ROGUE_ENDLESS_ACTIVITY_SCORE_NOT_MEET = 5204;
	RET_ROGUE_ENDLESS_ACTIVITY_REWARD_LEVLE_ALREADY_TAKE = 5205;
	RET_HEART_DIAL_SCRIPT_NOT_FOUND = 5251;
	RET_HEART_DIAL_SCRIPT_EMOTION_THE_SAME = 5252;
	RET_HEART_DIAL_SCRIPT_STEP_NOT_NORMAL = 5253;
	RET_HEART_DIAL_SCRIPT_CONDITION_NOT_MATCH = 5254;
	RET_HEART_DIAL_SCRIPT_SUBMIT_ITEM_NUM_NOT_MATCH = 5255;
	RET_HEART_DIAL_SCRIPT_SUBMIT_ITEM_ID_NOT_MATCH = 5256;
	RET_HEART_DIAL_DIALOGUE_NOT_FOUND = 5257;
	RET_HEART_DIAL_DIALOGUE_ALREADY_PERFORMED = 5258;
	RET_HEART_DIAL_NPC_NOT_FOUND = 5259;
	RET_HEART_DIAL_TRACE_CONFIG_NOT_FOUND = 5260;
	RET_HEART_DIAL_FLOOR_TRACE_EXIST = 5261;
	RET_HEART_DIAL_TRACE_FLOOR_NOT_MATCH = 5262;
	RET_TRAVEL_BROCHURE_CONFIG_ERROR = 5301;
	RET_TRAVEL_BROCHURE_PARAM_INVALID = 5302;
	RET_TRAVEL_BROCHURE_LOCKED = 5303;
	RET_TRAVEL_BROCHURE_CANNOT_OPERATE = 5304;
	RET_TRAVEL_BROCHURE_WORLD_ID_NOT_MATCH = 5305;
	RET_TRAVEL_BROCHURE_HAS_NO_WORLD_BOOK = 5306;
	RET_TRAVEL_BROCHURE_PAGE_FULL = 5307;
	RET_MAP_ROTATION_NOT_IN_REGION = 5351;
	RET_MAP_ROTATION_ROTATER_ALREADY_DEPLOYED = 5352;
	RET_MAP_ROTATION_ENERGY_NOT_ENOUGH = 5353;
	RET_MAP_ROTATION_ENTITY_NOT_ON_CUR_POSE = 5354;
	RET_MAP_ROTATION_ROTATER_NOT_DEPLOYED = 5355;
	RET_MAP_ROTATION_POSE_ROTATER_MISMATCH = 5356;
	RET_MAP_ROTATION_ROTATER_NOT_REMOVABLE = 5357;
	RET_MAP_ROTATION_ROTATER_DISPOSABLE = 5358;
	RET_SPACE_ZOO_ACTIVITY_CAT_NOT_FOUND = 5401;
	RET_SPACE_ZOO_ACTIVITY_CAT_PARAM_INVALID = 5402;
	RET_SPACE_ZOO_ACTIVITY_CAT_ITEM_NOT_ENOUGH = 5403;
	RET_SPACE_ZOO_ACTIVITY_CAT_BAG_FULL = 5404;
	RET_SPACE_ZOO_ACTIVITY_CAT_NOT_TO_MUTATE = 5405;
	RET_SPACE_ZOO_ACTIVITY_CAT_STATE_ERROR = 5406;
	RET_SPACE_ZOO_ACTIVITY_CAT_CATTERY_LOCKED = 5407;
	RET_SPACE_ZOO_ACTIVITY_CAT_OUT_NOW = 5408;
	RET_SPACE_ZOO_ACTIVITY_CAT_CONFIG_NOT_FOUND = 5409;
	RET_SPACE_ZOO_ACTIVITY_CAT_FEATURE_NOT_FOUND = 5410;
	RET_SPACE_ZOO_ACTIVITY_CAT_ADD_CAT_ERROR = 5411;
	RET_SPACE_ZOO_ACTIVITY_CAT_MONEY_NOT_ENOUGH = 5412;
	RET_SPACE_ZOO_ACTIVITY_CAT_COND_NOT_MATCH = 5413;
	RET_STRONG_CHALLENGE_ACTIVITY_STAGE_CFG_MISS = 5501;
	RET_STRONG_CHALLENGE_ACTIVITY_STAGE_NOT_OPEN = 5502;
	RET_STRONG_CHALLENGE_ACTIVITY_BUFF_ERROR = 5503;
	RET_ROLL_SHOP_NOT_FOUND = 5551;
	RET_ROLL_SHOP_GROUP_EMPTY = 5552;
	RET_ROLL_SHOP_EMPTY = 5553;
	RET_ROLL_SHOP_GACHA_REQ_DUPLICATED = 5554;
	RET_ROLL_SHOP_RANDOM_ERROR = 5555;
	RET_ROLL_SHOP_GROUP_TYPE_NOT_FOUND = 5556;
	RET_ROLL_SHOP_HAS_STORED_REWARD_ALREADY = 5557;
	RET_ROLL_SHOP_NO_STORED_REWARD = 5558;
	RET_ROLL_SHOP_NOT_IN_VALID_SCENE = 5559;
	RET_ROLL_SHOP_INVALID_ROLL_SHOP_TYPE = 5560;
	RET_ACTIVITY_RAID_COLLECTION_PREV_NOT_FINISH = 5601;
	RET_ACTIVITY_RAID_COLLECTION_GROUP_ENTER_NEXT_UNAVAILABLE = 5602;
	RET_ACTIVITY_RAID_COLLECTION_IS_LAST = 5603;
	RET_ACTIVITY_RAID_COLLECTION_IS_NOT_NEXT = 5604;
	RET_OFFERING_NOT_UNLOCK = 5651;
	RET_OFFERING_LEVEL_NOT_UNLOCK = 5652;
	RET_OFFERING_REACH_MAX_LEVEL = 5653;
	RET_OFFERING_ITEM_NOT_ENOUGH = 5654;
	RET_OFFERING_LONGTAIL_NOT_OPEN = 5655;
	RET_OFFERING_REWARD_CONDITION = 5656;
	RET_DRINK_MAKER_CHAT_INVALID = 5701;
	RET_DRINK_MAKER_PARAM_INVALID = 5702;
	RET_DRINK_MAKER_PARAM_NOT_UNLOCK = 5703;
	RET_DRINK_MAKER_CONFIG_NOT_FOUND = 5704;
	RET_DRINK_MAKER_NOT_LAST_CHAT = 5705;
	RET_DRINK_MAKER_DAY_AND_FREE_PHASE_NOT_OPEN = 5706;
	RET_MONOPOLY_NOT_OPEN = 5751;
	RET_MONOPOLY_CONFIG_ERROR = 5752;
	RET_MONOPOLY_DICE_NOT_ENOUGH = 5753;
	RET_MONOPOLY_CUR_CELL_NOT_FINISH = 5754;
	RET_MONOPOLY_COIN_NOT_ENOUGH = 5755;
	RET_MONOPOLY_CELL_WAIT_PENDING = 5756;
	RET_MONOPOLY_CELL_STATE_ERROR = 5757;
	RET_MONOPOLY_CELL_CONTENT_ERROR = 5758;
	RET_MONOPOLY_ITEM_NOT_ENOUGH = 5759;
	RET_MONOPOLY_CELL_CONTENT_CANNOT_GIVEUP = 5760;
	RET_MONOPOLY_ASSET_LEVEL_INVALID = 5761;
	RET_MONOPOLY_TURN_NOT_FINISH = 5762;
	RET_MONOPOLY_GUIDE_NOT_FINISH = 5763;
	RET_MONOPOLY_RAFFLE_REWARD_REISSUED = 5764;
	RET_MONOPOLY_NO_GAME_ACTIVE = 5771;
	RET_MONOPOLY_GAME_RATIO_NOT_INCREASABLE = 5772;
	RET_MONOPOLY_GAME_RATIO_MAX = 5773;
	RET_MONOPOLY_GAME_TARGET_RATIO_INVALID = 5774;
	RET_MONOPOLY_GAME_BINGO_FLIP_POS_INVALID = 5775;
	RET_MONOPOLY_GAME_GUESS_ALREADY_CHOOSE = 5776;
	RET_MONOPOLY_GAME_GUESS_CHOOSE_INVALID = 5777;
	RET_MONOPOLY_GAME_GUESS_INFORMATION_ALREADY_BOUGHT = 5778;
	RET_MONOPOLY_GAME_RAISE_RATIO_NOT_UNLOCK = 5779;
	RET_MONOPOLY_FRIEND_NOT_SYNCED = 5785;
	RET_MONOPOLY_GET_FRIEND_RANKING_LIST_IN_CD = 5786;
	RET_MONOPOLY_LIKE_TARGET_NOT_FRIEND = 5787;
	RET_MONOPOLY_DAILY_ALREADY_LIKED = 5788;
	RET_MONOPOLY_SOCIAL_EVENT_STATUS_NOT_MATCH = 5789;
	RET_MONOPOLY_SOCIAL_EVENT_SERVER_CACHE_NOT_EXIST = 5790;
	RET_MONOPOLY_ACTIVITY_ID_NOT_MATCH = 5791;
	RET_MONOPOLY_RAFFLE_POOL_NOT_EXIST = 5792;
	RET_MONOPOLY_RAFFLE_POOL_TIME_NOT_MATCH = 5793;
	RET_MONOPOLY_RAFFLE_POOL_PHASE_NOT_MEET = 5794;
	RET_MONOPOLY_RAFFLE_POOL_SHOW_TIME_NOT_MEET = 5795;
	RET_MONOPOLY_RAFFLE_TICKET_NOT_FOUND = 5796;
	RET_MONOPOLY_RAFFLE_TICKET_TIME_NOT_MEET = 5797;
	RET_MONOPOLY_RAFFLE_TICKET_REWARD_ALREADY_TAKEN = 5798;
	RET_MONOPOLY_RAFFLE_POOL_NOT_IN_RAFFLE_TIME = 5799;
	RET_MONOPOLY_MBTI_REPORT_REWARD_ALREADY_TAKEN = 5800;
	RET_EVOLVE_BUILD_LEVEL_GAMING = 5801;
	RET_EVEOLVE_BUILD_LEVEL_BAN_RANDOM = 5802;
	RET_EVOLVE_BUILD_FIRST_REWARD_ALREADY_TAKEN = 5803;
	RET_EVOLVE_BUILD_LEVEL_UNFINISH = 5804;
	RET_EVOLVE_BUILD_SHOP_ABILITY_MAX_LEVEL = 5805;
	RET_EVOLVE_BUILD_SHOP_ABILITY_MIN_LEVEL = 5806;
	RET_EVOLVE_BUILD_SHOP_ABILITY_NOT_GET = 5807;
	RET_EVOLVE_BUILD_LEVEL_LOCK = 5808;
	RET_EVOLVE_BUILD_EXP_NOT_ENOUGH = 5809;
	RET_EVOLVE_BUILD_SHOP_ABILITY_LEVEL_ERROR = 5810;
	RET_EVOLVE_BUILD_ACTIVITY_NOT_OPEN = 5811;
	RET_EVOLVE_BUILD_SHOP_ABILITY_EMPTY = 5812;
	RET_EVOLVE_BUILD_LEVEL_NOT_START = 5813;
	RET_EVOLVE_BUILD_SHOP_LOCK = 5814;
	RET_EVOLVE_BUILD_REWARD_LOCK = 5815;
	RET_EVOLVE_BUILD_REWARD_LEVEL_MAX = 5816;
	RET_EVOLVE_BUILD_REWARD_ALREADY_ALL_TAKEN = 5717;
	RET_CLOCK_PARK_CONFIG_ERROR = 5851;
	RET_CLOCK_PARK_EFFECT_ERROR = 5852;
	RET_CLOCK_PARK_SCRIPT_ALREADY_UNLOCK = 5853;
	RET_CLOCK_PARK_SCRIPT_UNLOCK_CONDITION_NOT_MEET = 5854;
	RET_CLOCK_PARK_TALENT_ALREADY_UNLOCK = 5855;
	RET_CLOCK_PARK_SCRIPT_LOCKED = 5856;
	RET_CLOCK_PARK_HAS_ONGOING_SCRIPT = 5857;
	RET_CLOCK_PARK_NO_ONGOING_SCRIPT = 5858;
	RET_CLOCK_PARK_DICE_PLACEMENT_ERROR = 5859;
	RET_CLOCK_PARK_MISMATCH_STATUS = 5860;
	RET_CLOCK_PARK_NO_BUFF = 5861;
	RET_CLOCK_PARK_SLOT_MACHINE_GACHA_REQ_DUPLICATED = 5862;
	RET_CLOCK_PARK_SLOT_MACHINE_COST_NOT_ENOUGH = 5863;
	RET_CLOCK_PARK_SLOT_MACHINE_GACHA_CNT_EXCEED_LIMIT = 5864;
	RET_CLOCK_PARK_NOT_OPEN = 5865;
	RET_TOURN_ROGUE_STATUS_MISMATCH = 5901;
	RET_MAGIC_ROGUE_STATUS_MISMATCH = 5902;
	RET_AUTO_MOUNT_MAGIC_UNIT_NO_MATCHED_MAGIC_SCEPTER = 5903;
	RET_MAGIC_UNIT_WORKBENCH_REFORGE_GEN_FAIL = 5904;
	RET_MATCH_ALREADY_IN_MATCH = 6201;
	RET_MATCH_NOT_IN_MATCH = 6202;
	RET_MATCH_PLAY_NOT_OPEN = 6203;
	RET_CROSS_STATE_ERROR = 6204;
	RET_MATCH_VERSION_NOT_EQUAL = 6205;
	RET_MATCH_PLAYER_NOT_IN_LOBBY_ROOM = 6206;
	RET_LOBBY_STATE_NOT_MATCH = 6207;
	RET_LOBBY_ROOM_NOT_EXIST = 6208;
	RET_LOBBY_ROOM_PALYER_FULL = 6209;
	RET_LOBBY_ROOM_PALYER_NOT_READY = 6210;
	RET_LOBBY_ROOM_PALYER_FIGHTING = 6211;
	RET_FIGHT_ROOM_NOT_EXIST = 6250;
	RET_FIGHT_MATCH3_PLAYER_STATE_ERR = 6251;
	RET_FIGHT_MATCH3_ROOM_STATE_ERR = 6252;
	RET_CROSS_STATE_TIME_OUT = 6253;
	RET_LOBBY_START_FIGHT_DISABLE = 6254;
	RET_LOBBY_START_FIGHT_PLAYER_LACK = 6255;
	RET_MATCH_CLIENT_DATA_VERSION_LOW = 6256;
	RET_LOBBY_START_MATCH_DISABLE = 6257;
	RET_LOBBY_INTERACT_IN_CD = 6258;
	RET_LOBBY_OWNER_STATE_ERR = 6259;
	RET_SWORD_TRAINING_NO_ACTIVE_GAME = 6301;
	RET_SWORD_TRAINING_NO_PENDING_ACTION_MATCH = 6302;
	RET_SWORD_TRAINING_PARTNER_ABILITY_INVALID = 6303;
	RET_SWORD_TRAINING_SKILL_ALREADY_LEARNED = 6304;
	RET_SWORD_TRAINING_CONDITION_NOT_MEET = 6305;
	RET_SWORD_TRAINING_PARENT_SKILL_NOT_LEARNED = 6306;
	RET_SWORD_TRAINING_SKILL_TYPE_NOT_UNLOCK = 6307;
	RET_SWORD_TRAINING_GAME_ALREADY_EXIST = 6308;
	RET_SWORD_TRAINING_ENDING_HINT_NOT_MATCH = 6309;
	RET_SWORD_TRAINING_STORYLINE_CONFIG_NOT_FOUND = 6310;
	RET_SWORD_TRAINING_STORY_CONFIG_NOT_FOUND = 6311;
	RET_SWORD_TRAINING_UNLOCK_NOT_FINISH = 6312;
	RET_SWORD_TRAINING_OPTION_MISMATCH = 6313;
	RET_SWORD_TRAINING_RESTORE_WITHOUT_EXAM_FAILED = 6314;
	RET_SWORD_TRAINING_NO_RESTORE_GAME_AVAILABLE = 6315;
	RET_SWORD_TRAINING_ENDING_STORY_NOT_MATCH = 6316;
	RET_SWORD_TRAINING_ENDING_NOT_FINISH = 6317;
	RET_SWORD_TRAINING_ENDING_REWARD_TAKEN = 6318;
	RET_SWORD_TRAINING_COMBAT_RANK_NOT_CHANGE = 6319;
	RET_SWORD_TRAINING_DIRECT_BATTLE_DISABLE = 6320;
	RET_FIGHT_FEST_PHASE_NOT_MATCH = 6351;
	RET_FIGHT_FEST_SCORE_RACE_ALREADY_FINISH = 6352;
	RET_FIGHT_FEST_CHALLENGE_LOCKED = 6353;
	RET_FIGHT_FEST_COACH_SKILL_LOCKED = 6354;
	RET_FIGHT_FEST_COACH_SKILL_EQUIP_TYPE_EXISTED = 6355;
	RET_FIGHT_FEST_SCORE_RACE_MISSION_DOIND = 6356;
	RET_FIGHT_FEST_COACH_SKILL_NO_EQUIP = 6357;
	RET_PET_NOT_EXIST = 6401;
	RET_PET_ALREADY_SUMMONED = 6402;
	RET_PET_NOT_SUMMONED = 6403;
	RET_MUSIC_RHYTHM_LEVEL_TIME_TOO_SHORT = 6451;
	RET_MUSIC_RHYTHM_NOT_IN_LEVEL = 6452;
	RET_MUSIC_RHYTHM_PRE_DIFFICULTY_NOT_PASS = 6453;
	RET_MUSIC_RHYTHM_SONG_LIMITED = 6454;
	RET_MUSIC_RHYTHM_SONG_LOCKED = 6455;
	RET_MUSIC_RHYTHM_TRACK_LOCKED = 6456;
	RET_MUSIC_RHYTHM_LEVEL_NOT_UNLOCK = 6457;
	RET_MUSIC_RHYTHM_SONG_SFX_LOCKED = 6458;
	RET_TRAIN_PARTY_COIN_NOT_ENOUGH = 6501;
	RET_TRAIN_PARTY_DIY_TAG_NOT_MATCH = 6502;
	RET_TRAIN_PARTY_USE_CARD_MOBILITY_NOT_ENOUGH = 6503;
	RET_TRAIN_PARTY_AREA_UNLOCK_COIN_NOT_ENOUGH = 6504;
	RET_TAROT_BOOK_ENERGY_NOT_ENOUGH = 6601;
	RET_TAROT_BOOK_PACK_NOT_AVAILABLE = 6602;
	RET_TAROT_BOOK_STORY_ALREADY_UNLOCK = 6603;
	RET_TAROT_BOOK_CARD_NOT_ENOUGH = 6604;
	RET_TAROT_BOOK_CLUE_NOT_ENOUGH = 6605;
	RET_TAROT_BOOK_UNLOCK_STORY_CARD_NOT_SAME = 6606;
	RET_TAROT_BOOK_STORY_NOT_UNLOCK = 6607;
	RET_TAROT_BOOK_STORY_ALREADY_FINISH = 6608;
	RET_TAROT_BOOK_INTERACTION_ALREADY_FINISH = 6609;
	RET_CHIMERA_CHIMERA_NOT_UNLOCK = 6621;
	RET_CHIMERA_CHIMERA_DUPLICATED = 6622;
	RET_CHIMERA_CHIMERA_TYPE_ERROR = 6623;
	RET_CHIMERA_WORK_MISMATCH_ROUND = 6624;
	RET_CHIMERA_WORK_ROUND_OPTION_NOT_MEET = 6625;
	RET_CHIMERA_ENDLESS_NOT_UNLOCK = 6626;
	RET_CHIMERA_IN_ENDLESS = 6627;
	RET_CHIMERA_NOT_IN_ENDLESS = 6628;
	RET_CHIMERA_CHIMERA_FALL_IN_ENDLESS = 6629;
	RET_PLANET_FES_AVATAR_NOT_EXIST = 6641;
	RET_PLANET_FES_LAND_NOT_EXIST = 6642;
	RET_PLANET_FES_ITEM_NOT_ENOUGH = 6643;
	RET_PLANET_FES_LAND_ALREADY_UNLOCK = 6644;
	RET_PLANET_FES_WORK_AVATAR_REPEAT = 6645;
	RET_PLANET_FES_WORK_AVATAR_TYPE_NOT_MATCH = 6646;
	RET_PLANET_FES_ACTIVITY_NOT_OPEN = 6647;
	RET_PLANET_FES_SKILLTREE_PHASE_NOT_UNLOCK = 6648;
	RET_PLANET_FES_SKILL_NOT_UNLOCK = 6649;
	RET_PLANET_FES_CONFIG_ERROR = 6650;
	RET_PLANET_FES_NOT_IN_BUSINESS_DAY = 6651;
	RET_PLANET_FES_EVENT_LOCKED = 6652;
	RET_PLANET_FES_EVENT_FINISHED = 6653;
	RET_PLANET_FES_EVENT_IN_CD = 6654;
	RET_PLANET_FES_EVENT_ALREADY_IN_STATE = 6655;
	RET_PLANET_FES_EVENT_WORK_AVATAR_LESS_THAN_PAM_EVENT_NUM = 6656;
	RET_PLANET_FES_EVENT_PROCESSING_CANNOT_DISAPPEAR = 6657;
	RET_PLANET_FES_EVENT_OPTION_PHASE_WRONG = 6658;
	RET_PLANET_FES_FUNCTION_NOT_UNLOCK = 6659;
	RET_PLANET_FES_REWARD_ALREADY_TAKEN = 6660;
	RET_PLANET_FES_EVENT_GAME_NOT_ACTIVE = 6661;
	RET_PLANET_FES_REGION_PROGRESS_NOT_ENOUGH = 6662;
	RET_PLANET_FES_FRIEND_ITEM_NOT_ENOUGH = 6663;
	RET_PLANET_FES_PIECE_PERMISSION_BAN = 6664;
	RET_PLANET_FES_PIECE_OFFER_NOT_EXIST = 6665;
	RET_PLANET_FES_PIECE_APPLY_IN_STACK_TOO_MUCH = 6666;
	RET_PLANET_FES_PIECE_APPLY_NOT_EXIST = 6667;
	RET_PLANET_FES_GET_FRIEND_RANKING_LIST_IN_CD = 6668;
	RET_PLANET_FES_GIVE_PIECE_OWNED_BY_TARGET = 6669;
	RET_PLANET_FES_LEVEL_MAX = 6670;
	RET_MARBLE_SEAL_ALREADY_UNLOCKED = 6701;
	RET_MARBLE_SEAL_SHOP_ITEM_NOT_ENOUGH = 6702;
	RET_MARBLE_SEAL_LOCKED = 6703;
	RET_STORY_TOKEN_NOT_SAME_ACTIVITY = 6751;
	RET_STORY_TOKEN_TARGET_MISSION_NOT_FINISH = 6752;
	RET_STORY_TOKEN_REWARD_ALREADY_TAKEN = 6753;
	RET_STORY_TOKEN_ACTIVITY_NOT_OPEN = 6754;
}
enum CmdActivityType {
	CmdActivityTypeNone = 0;
	CmdTakeTrialActivityRewardCsReq = 2666;
	CmdGetMaterialSubmitActivityDataCsReq = 2691;
	CmdLeaveTrialActivityScRsp = 2664;
	CmdStartTrialActivityCsReq = 2621;
	CmdEnterTrialActivityStageScRsp = 2669;
	CmdSubmitMaterialSubmitActivityMaterialCsReq = 2657;
	CmdGetActivityScheduleConfigScRsp = 2606;
	CmdAvatarDeliverRewardTakeRewardScRsp = 2616;
	CmdCurTrialActivityScNotify = 2601;
	CmdTakeTrialActivityRewardScRsp = 2699;
	CmdGetTrialActivityDataCsReq = 2663;
	CmdTakeMaterialSubmitActivityRewardCsReq = 2610;
	CmdGetAvatarDeliverRewardActivityDataCsReq = 2640;
	CmdLeaveTrialActivityCsReq = 2633;
	CmdTrialActivityDataChangeScNotify = 2678;
	CmdGetActivityScheduleConfigCsReq = 2635;
	CmdSubmitMaterialSubmitActivityMaterialScRsp = 2625;
	CmdGetLoginActivityScRsp = 2613;
	CmdTakeLoginActivityRewardScRsp = 2609;
	CmdGetAvatarDeliverRewardActivityDataScRsp = 2659;
	CmdEnterTrialActivityStageCsReq = 2696;
	CmdTakeLoginActivityRewardCsReq = 2647;
	CmdAvatarDeliverRewardChooseAvatarScRsp = 2667;
	CmdGetTrialActivityDataScRsp = 2604;
	CmdAvatarDeliverRewardChooseAvatarCsReq = 2627;
	CmdStartTrialActivityScRsp = 2608;
	CmdTakeMaterialSubmitActivityRewardScRsp = 2607;
	CmdGetLoginActivityCsReq = 2611;
	CmdAvatarDeliverRewardTakeRewardCsReq = 2655;
	CmdGetMaterialSubmitActivityDataScRsp = 2693;
}
enum TrialActivityStatus {
	TRIAL_ACTIVITY_STATUS_NONE = 0;
	TRIAL_ACTIVITY_STATUS_FINISH = 1;
}
enum CmdAdventureType {
	CmdAdventureTypeNone = 0;
	CmdFarmElementSweepCsReq = 1395;
	CmdCocoonSweepScRsp = 1330;
	CmdQuickStartFarmElementCsReq = 1370;
	CmdEnterAdventureScRsp = 1313;
	CmdCocoonSweepCsReq = 1326;
	CmdFarmElementSweepScRsp = 1318;
	CmdQuickStartFarmElementScRsp = 1389;
	CmdGetFarmStageGachaInfoScRsp = 1309;
	CmdQuickStartCocoonStageScRsp = 1306;
	CmdGetFarmStageGachaInfoCsReq = 1347;
	CmdEnterAdventureCsReq = 1311;
	CmdQuickStartCocoonStageCsReq = 1335;
}
enum CmdAetherDivideType {
	CmdAetherDivideTypeNone = 0;
	CmdSwitchAetherDivideLineUpSlotCsReq = 4835;
	CmdGetAetherDivideInfoCsReq = 4816;
	CmdEquipAetherDividePassiveSkillCsReq = 4807;
	CmdAetherDivideTainerInfoScNotify = 4833;
	CmdAetherDivideSpiritExpUpScRsp = 4849;
	CmdEquipAetherDividePassiveSkillScRsp = 4838;
	CmdGetAetherDivideChallengeInfoCsReq = 4826;
	CmdStartAetherDivideSceneBattleScRsp = 4809;
	CmdClearAetherDividePassiveSkillCsReq = 4850;
	CmdSetAetherDivideLineUpCsReq = 4846;
	CmdStartAetherDivideSceneBattleCsReq = 4841;
	CmdGetAetherDivideChallengeInfoScRsp = 4808;
	CmdSwitchAetherDivideLineUpSlotScRsp = 4822;
	CmdAetherDivideTakeChallengeRewardScRsp = 4825;
	CmdAetherDivideRefreshEndlessScNotify = 4821;
	CmdAetherDivideFinishChallengeScNotify = 4830;
	CmdStartAetherDivideStageBattleScRsp = 4811;
	CmdAetherDivideTakeChallengeRewardCsReq = 4802;
	CmdAetherDivideLineupScNotify = 4834;
	CmdStartAetherDivideChallengeBattleScRsp = 4845;
	CmdStartAetherDivideStageBattleCsReq = 4837;
	CmdAetherDivideSpiritInfoScNotify = 4805;
	CmdEnterAetherDivideSceneCsReq = 4842;
	CmdStartAetherDivideChallengeBattleCsReq = 4829;
	CmdLeaveAetherDivideSceneCsReq = 4814;
	CmdSetAetherDivideLineUpScRsp = 4813;
	CmdAetherDivideSpiritExpUpCsReq = 4804;
	CmdAetherDivideRefreshEndlessScRsp = 4831;
	CmdAetherDivideRefreshEndlessCsReq = 4819;
	CmdAetherDivideSkillItemScNotify = 4844;
	CmdClearAetherDividePassiveSkillScRsp = 4848;
	CmdEnterAetherDivideSceneScRsp = 4818;
	CmdLeaveAetherDivideSceneScRsp = 4806;
	CmdGetAetherDivideInfoScRsp = 4832;
}
enum CmdAlleyType {
	CmdAlleyTypeNone = 0;
	CmdTakePrestigeRewardCsReq = 4795;
	CmdAlleyOrderChangedScNotify = 4757;
	CmdSaveLogisticsCsReq = 4737;
	CmdSaveLogisticsScRsp = 4765;
	CmdPrestigeLevelUpCsReq = 4710;
	CmdAlleyShopLevelScNotify = 4782;
	CmdLogisticsScoreRewardSyncInfoScNotify = 4768;
	CmdAlleyShipUsedCountScNotify = 4753;
	CmdAlleyPlacingGameCsReq = 4736;
	CmdAlleyFundsScNotify = 4771;
	CmdAlleyGuaranteedFundsCsReq = 4724;
	CmdGetAlleyInfoCsReq = 4711;
	CmdGetAlleyInfoScRsp = 4713;
	CmdLogisticsInfoScNotify = 4752;
	CmdLogisticsGameCsReq = 4747;
	CmdLogisticsGameScRsp = 4709;
	CmdAlleyPlacingGameScRsp = 4750;
	CmdAlleyGuaranteedFundsScRsp = 4784;
	CmdAlleyTakeEventRewardScRsp = 4728;
	CmdAlleyEventChangeNotify = 4726;
	CmdTakePrestigeRewardScRsp = 4718;
	CmdRefreshAlleyOrderCsReq = 4791;
	CmdAlleyTakeEventRewardCsReq = 4775;
	CmdRefreshAlleyOrderScRsp = 4793;
	CmdAlleyShipmentEventEffectsScNotify = 4722;
	CmdGetSaveLogisticsMapScRsp = 4792;
	CmdActivityRaidPlacingGameScRsp = 4794;
	CmdActivityRaidPlacingGameCsReq = 4760;
	CmdAlleyEventEffectNotify = 4730;
	CmdPrestigeLevelUpScRsp = 4707;
	CmdLogisticsDetonateStarSkiffCsReq = 4783;
	CmdLogisticsDetonateStarSkiffScRsp = 4758;
	CmdStartAlleyEventCsReq = 4770;
	CmdStartAlleyEventScRsp = 4789;
	CmdGetSaveLogisticsMapCsReq = 4786;
	CmdAlleyShipUnlockScNotify = 4751;
}
enum GBPHKKMOLMF {
	LEFT = 0;
	RIGHT = 1;
	UP = 2;
	DOWN = 3;
	LEFT_UP = 4;
	LEFT_DOWN = 5;
	RIGHT_UP = 6;
	RIGHT_DOWN = 7;
}
enum AlleyEventType {
	ALLEY_EVENT_TYPE_NONE = 0;
	ALLEY_MAIN_EVENT = 1;
	ALLEY_CRITICAL_EVENT = 2;
	ALLEY_DAILY_EVENT = 3;
}
enum AlleyEventState {
	ALLEY_STATE_NONE = 0;
	ALLEY_EVENT_DOING = 1;
	ALLEY_EVENT_FINISH = 2;
	ALLEY_EVENT_REWARDED = 3;
}
enum CmdArchiveType {
	CmdArchiveTypeNone = 0;
	CmdGetArchiveDataScRsp = 2313;
	CmdGetArchiveDataCsReq = 2311;
	CmdGetUpdatedArchiveDataCsReq = 2347;
	CmdGetUpdatedArchiveDataScRsp = 2309;
}
enum CmdAvatarType {
	CmdAvatarTypeNone = 0;
	CmdGrowthTargetAvatarChangedScNotify = 353;
	CmdDressRelicAvatarCsReq = 377;
	CmdSetGrowthTargetAvatarCsReq = 386;
	CmdAddAvatarScNotify = 336;
	CmdAvatarExpUpScRsp = 309;
	CmdUnlockSkilltreeCsReq = 335;
	CmdMarkAvatarScRsp = 352;
	CmdGetPreAvatarListCsReq = 375;
	CmdSetGrowthTargetAvatarScRsp = 392;
	CmdRankUpAvatarScRsp = 373;
	CmdPromoteAvatarScRsp = 389;
	CmdGetPreAvatarGrowthInfoScRsp = 384;
	CmdRankUpAvatarCsReq = 350;
	CmdTakeOffAvatarSkinCsReq = 382;
	CmdTakePromotionRewardScRsp = 310;
	CmdDressAvatarSkinCsReq = 307;
	CmdMarkAvatarCsReq = 365;
	CmdGetAvatarDataScRsp = 313;
	CmdDressAvatarSkinScRsp = 371;
	CmdPromoteAvatarCsReq = 370;
	CmdDressAvatarScRsp = 330;
	CmdGetAvatarDataCsReq = 311;
	CmdAvatarExpUpCsReq = 347;
	CmdTakeOffAvatarSkinScRsp = 351;
	CmdTakePromotionRewardCsReq = 325;
	CmdGetPreAvatarListScRsp = 328;
	CmdGetPreAvatarGrowthInfoCsReq = 324;
	CmdTakeOffEquipmentScRsp = 318;
	CmdUnlockSkilltreeScRsp = 306;
	CmdTakeOffEquipmentCsReq = 395;
	CmdTakeOffRelicScRsp = 357;
	CmdAddMultiPathAvatarScNotify = 322;
	CmdUnlockAvatarSkinScNotify = 337;
	CmdDressRelicAvatarScRsp = 391;
	CmdDressAvatarCsReq = 326;
	CmdTakeOffRelicCsReq = 393;
}
enum GrowthTartgetFuncType {
	GROWTH_TARGET_FUNCTION_TYPE_INCLUDE_ALL_SKILLTREE = 0;
}
enum AddAvatarSrcState {
	ADD_AVATAR_SRC_NONE = 0;
	ADD_AVATAR_SRC_GACHA = 1;
	ADD_AVATAR_SRC_ROGUE = 2;
}
enum GrowthTargetState {
	GROWTH_TARGET_AVATAR_NONE = 0;
	GROWTH_TARGET_AVATAR_PRE = 1;
	GROWTH_TARGET_AVATAR_UP = 2;
	GROWTH_TARGET_AVATAR_LOCK = 3;
	GROWTH_TARGET_AVATAR_UNLOCK = 4;
	GROWTH_TARGET_AVATAR_LOCK_AND_UP = 5;
}
enum CmdBattleType {
	CmdBattleTypeNone = 0;
	CmdBattleLogReportCsReq = 130;
	CmdPVEBattleResultScRsp = 113;
	CmdServerSimulateBattleFinishScNotify = 118;
	CmdReBattleAfterBattleLoseCsNotify = 136;
	CmdQuitBattleScRsp = 109;
	CmdGetCurBattleInfoCsReq = 135;
	CmdSyncClientResVersionScRsp = 189;
	CmdBattleLogReportScRsp = 195;
	CmdGetCurBattleInfoScRsp = 106;
	CmdQuitBattleCsReq = 147;
	CmdRebattleByClientCsNotify = 150;
	CmdPVEBattleResultCsReq = 111;
	CmdSyncClientResVersionCsReq = 170;
	CmdQuitBattleScNotify = 126;
}
enum CmdBattleCollegeType {
	CmdBattleCollegeTypeNone = 0;
	CmdGetBattleCollegeDataCsReq = 5711;
	CmdStartBattleCollegeCsReq = 5709;
	CmdBattleCollegeDataChangeScNotify = 5747;
	CmdGetBattleCollegeDataScRsp = 5713;
	CmdStartBattleCollegeScRsp = 5735;
}
enum CmdBattlePassType {
	CmdBattlePassTypeNone = 0;
	CmdBuyBpLevelScRsp = 3070;
	CmdTakeAllRewardCsReq = 3089;
	CmdTakeBpRewardScRsp = 3035;
	CmdBuyBpLevelCsReq = 3006;
	CmdTakeAllRewardScRsp = 3026;
	CmdTakeBpRewardCsReq = 3009;
	CmdBattlePassInfoNotify = 3011;
}
enum BpTierType {
	BP_TIER_TYPE_NONE = 0;
	BP_TIER_TYPE_FREE = 1;
	BP_TIER_TYPE_PREMIUM_1 = 2;
	BP_TIER_TYPE_PREMIUM_2 = 3;
}
enum BpRewardType {
	BP_REWARAD_TYPE_NONE = 0;
	BP_REWARAD_TYPE_FREE = 1;
	BP_REWARAD_TYPE_PREMIUM_1 = 2;
	BP_REWARAD_TYPE_PREMIUM_2 = 3;
	BP_REWARAD_TYPE_PREMIUM_OPTIONAL = 4;
}
enum CmdBenefitActivityType {
	CmdBenefitActivityTypeNone = 0;
	CmdJoinBenefitActivityCsReq = 4891;
	CmdGetBenefitActivityInfoCsReq = 4892;
	CmdTakeBenefitActivityRewardScRsp = 4856;
	CmdJoinBenefitActivityScRsp = 4859;
	CmdTakeBenefitActivityRewardCsReq = 4864;
	CmdGetBenefitActivityInfoScRsp = 4868;
}
enum CmdBoxingClubType {
	CmdBoxingClubTypeNone = 0;
	CmdSetBoxingClubResonanceLineupCsReq = 4236;
	CmdChooseBoxingClubResonanceCsReq = 4295;
	CmdChooseBoxingClubStageOptionalBuffScRsp = 4277;
	CmdGiveUpBoxingClubChallengeScRsp = 4289;
	CmdGiveUpBoxingClubChallengeCsReq = 4270;
	CmdChooseBoxingClubResonanceScRsp = 4218;
	CmdStartBoxingClubBattleCsReq = 4235;
	CmdMatchBoxingClubOpponentCsReq = 4247;
	CmdBoxingClubChallengeUpdateScNotify = 4230;
	CmdSetBoxingClubResonanceLineupScRsp = 4250;
	CmdMatchBoxingClubOpponentScRsp = 4209;
	CmdBoxingClubRewardScNotify = 4226;
	CmdGetBoxingClubInfoScRsp = 4213;
	CmdStartBoxingClubBattleScRsp = 4206;
	CmdChooseBoxingClubStageOptionalBuffCsReq = 4273;
	CmdGetBoxingClubInfoCsReq = 4211;
}
enum CmdChallengeType {
	CmdChallengeTypeNone = 0;
	CmdLeaveChallengeCsReq = 1735;
	CmdChallengeSettleNotify = 1770;
	CmdLeaveChallengeScRsp = 1706;
	CmdGetChallengeScRsp = 1713;
	CmdRestartChallengePhaseCsReq = 1707;
	CmdStartChallengeScRsp = 1709;
	CmdStartChallengeCsReq = 1747;
	CmdGetChallengeGroupStatisticsScRsp = 1793;
	CmdTakeChallengeRewardCsReq = 1773;
	CmdRestartChallengePhaseScRsp = 1771;
	CmdChallengeBossPhaseSettleNotify = 1737;
	CmdGetChallengeCsReq = 1711;
	CmdGetCurChallengeCsReq = 1730;
	CmdGetCurChallengeScRsp = 1795;
	CmdChallengeLineupNotify = 1718;
	CmdGetChallengeGroupStatisticsCsReq = 1791;
	CmdStartPartialChallengeCsReq = 1757;
	CmdTakeChallengeRewardScRsp = 1777;
	CmdStartPartialChallengeScRsp = 1725;
	CmdEnterChallengeNextPhaseScRsp = 1751;
	CmdEnterChallengeNextPhaseCsReq = 1782;
}
enum ChallengeStatus {
	CHALLENGE_UNKNOWN = 0;
	CHALLENGE_DOING = 1;
	CHALLENGE_FINISH = 2;
	CHALLENGE_FAILED = 3;
}
enum CmdChatType {
	CmdChatTypeNone = 0;
	CmdGetChatEmojiListScRsp = 3930;
	CmdMarkChatEmojiCsReq = 3995;
	CmdSendMsgCsReq = 3911;
	CmdGetPrivateChatHistoryScRsp = 3906;
	CmdSendMsgScRsp = 3913;
	CmdMarkChatEmojiScRsp = 3918;
	CmdGetChatFriendHistoryScRsp = 3989;
	CmdPrivateMsgOfflineUsersScNotify = 3909;
	CmdBatchMarkChatEmojiScRsp = 3950;
	CmdGetPrivateChatHistoryCsReq = 3935;
	CmdRevcMsgScNotify = 3947;
	CmdBatchMarkChatEmojiCsReq = 3936;
	CmdGetLoginChatInfoCsReq = 3973;
	CmdGetLoginChatInfoScRsp = 3977;
	CmdGetChatFriendHistoryCsReq = 3970;
	CmdGetChatEmojiListCsReq = 3926;
}
enum CmdChessRogueType {
	CmdChessRogueTypeNone = 0;
	CmdChessRogueNousEditDiceCsReq = 5417;
	CmdChessRogueUpdateActionPointScNotify = 5495;
	CmdChessRogueFinishCurRoomNotify = 5594;
	CmdSelectChessRogueNousSubStoryScRsp = 5459;
	CmdChessRogueNousGetRogueTalentInfoScRsp = 5529;
	CmdEnhanceChessRogueBuffScRsp = 5575;
	CmdChessRogueRollDiceCsReq = 5452;
	CmdGetChessRogueStoryInfoCsReq = 5450;
	CmdChessRogueNousEnableRogueTalentScRsp = 5404;
	CmdChessRogueUpdateMoneyInfoScNotify = 5433;
	CmdChessRogueNousDiceSurfaceUnlockNotify = 5418;
	CmdChessRogueGoAheadCsReq = 5587;
	CmdChessRogueEnterCellCsReq = 5568;
	CmdChessRogueMoveCellNotify = 5414;
	CmdChessRogueLeaveCsReq = 5480;
	CmdChessRogueSelectCellCsReq = 5579;
	CmdChessRogueGoAheadScRsp = 5465;
	CmdChessRoguePickAvatarScRsp = 5520;
	CmdGetChessRogueStoryInfoScRsp = 5599;
	CmdGetChessRogueNousStoryInfoCsReq = 5467;
	CmdFinishChessRogueNousSubStoryScRsp = 5526;
	CmdGetChessRogueStoryAeonTalkInfoCsReq = 5559;
	CmdSelectChessRogueSubStoryCsReq = 5460;
	CmdChessRogueReRollDiceCsReq = 5573;
	CmdChessRogueSelectBpCsReq = 5514;
	CmdChessRogueEnterCellScRsp = 5443;
	CmdChessRogueUpdateReviveInfoScNotify = 5534;
	CmdChessRogueSkipTeachingLevelCsReq = 5501;
	CmdChessRogueUpdateAllowedSelectCellScNotify = 5541;
	CmdChessRogueQueryBpScRsp = 5421;
	CmdChessRogueQueryCsReq = 5451;
	CmdChessRogueCheatRollCsReq = 5593;
	CmdChessRogueEnterNextLayerScRsp = 5447;
	CmdChessRogueQueryScRsp = 5498;
	CmdChessRogueNousEnableRogueTalentCsReq = 5589;
	CmdChessRogueConfirmRollCsReq = 5584;
	CmdChessRogueQuitCsReq = 5492;
	CmdGetChessRogueNousStoryInfoScRsp = 5532;
	CmdChessRogueGiveUpCsReq = 5515;
	CmdChessRogueConfirmRollScRsp = 5563;
	CmdEnterChessRogueAeonRoomScRsp = 5530;
	CmdSyncChessRogueNousSubStoryScNotify = 5581;
	CmdChessRogueUpdateDicePassiveAccumulateValueScNotify = 5539;
	CmdChessRogueReviveAvatarCsReq = 5516;
	CmdChessRogueLeaveScRsp = 5524;
	CmdSyncChessRogueNousMainStoryScNotify = 5482;
	CmdChessRogueEnterCsReq = 5577;
	CmdSelectChessRogueNousSubStoryCsReq = 5415;
	CmdGetChessRogueStoryAeonTalkInfoScRsp = 5592;
	CmdChessRogueStartScRsp = 5527;
	CmdChessRogueGiveUpScRsp = 5449;
	CmdSelectChessRogueSubStoryScRsp = 5428;
	CmdChessRogueSkipTeachingLevelScRsp = 5546;
	CmdChessRogueQueryBpCsReq = 5502;
	CmdFinishChessRogueSubStoryScRsp = 5525;
	CmdChessRogueCellUpdateNotify = 5567;
	CmdChessRogueUpdateAeonModifierValueScNotify = 5471;
	CmdFinishChessRogueSubStoryCsReq = 5556;
	CmdChessRogueChangeyAeonDimensionNotify = 5402;
	CmdChessRogueUpdateUnlockLevelScNotify = 5493;
	CmdChessRogueNousEditDiceScRsp = 5408;
	CmdChessRogueGiveUpRollScRsp = 5422;
	CmdChessRogueUpdateDiceInfoScNotify = 5597;
	CmdChessRogueQueryAeonDimensionsScRsp = 5485;
	CmdChessRogueLayerAccountInfoNotify = 5550;
	CmdChessRoguePickAvatarCsReq = 5521;
	CmdChessRogueUpdateBoardScNotify = 5531;
	CmdChessRogueEnterScRsp = 5552;
	CmdChessRogueSelectBpScRsp = 5569;
	CmdChessRogueGiveUpRollCsReq = 5458;
	CmdEnhanceChessRogueBuffCsReq = 5504;
	CmdSyncChessRogueMainStoryFinishScNotify = 5505;
	CmdGetChessRogueBuffEnhanceInfoScRsp = 5469;
	CmdChessRogueQueryAeonDimensionsCsReq = 5441;
	CmdFinishChessRogueNousSubStoryCsReq = 5479;
	CmdChessRogueQuitScRsp = 5506;
	CmdChessRogueStartCsReq = 5591;
	CmdChessRogueCheatRollScRsp = 5455;
	CmdSyncChessRogueNousValueScNotify = 5453;
	CmdChessRogueEnterNextLayerCsReq = 5487;
	CmdChessRogueQuestFinishNotify = 5555;
	CmdChessRogueRollDiceScRsp = 5499;
	CmdChessRogueReRollDiceScRsp = 5543;
	CmdEnterChessRogueAeonRoomCsReq = 5519;
	CmdChessRogueUpdateLevelBaseInfoScNotify = 5456;
	CmdChessRogueReviveAvatarScRsp = 5598;
	CmdChessRogueNousDiceUpdateNotify = 5562;
	CmdChessRogueSelectCellScRsp = 5462;
	CmdChessRogueNousGetRogueTalentInfoCsReq = 5565;
	CmdGetChessRogueBuffEnhanceInfoCsReq = 5472;
}
enum ChessRogueDiceStatus {
	CHESS_ROGUE_DICE_IDLE = 0;
	CHESS_ROGUE_DICE_ROLLED = 1;
	CHESS_ROGUE_DICE_CONFIRMED = 2;
	CHESS_ROGUE_DICE_GIVEUP = 3;
}
enum ChessRogueDiceType {
	CHESS_ROGUE_DICE_FIXED = 0;
	CHESS_ROGUE_DICE_EDITABLE = 1;
}
enum ChessRogueBoardCellStatus {
	IDLE = 0;
	SELECTED = 1;
	PROCESSING = 2;
	FINISH = 3;
}
enum ChessRogueCellSpecialType {
	CHESS_ROGUE_CELL_SPECIAL_TYPE_NONE = 0;
	CHESS_ROGUE_CELL_SPECIAL_TYPE_LOCKED = 1;
	CHESS_ROGUE_CELL_SPECIAL_TYPE_REPLICATE = 2;
	CHESS_ROGUE_CELL_SPECIAL_TYPE_PROTECTED = 3;
	CHESS_ROGUE_CELL_SPECIAL_TYPE_SEED = 4;
	CHESS_ROGUE_CELL_SPECIAL_TYPE_STAMP = 5;
}
enum ChessRogueLevelStatus {
	CHESS_ROGUE_LEVEL_IDLE = 0;
	CHESS_ROGUE_LEVEL_PROCESSING = 1;
	CHESS_ROGUE_LEVEL_PENDING = 2;
	CHESS_ROGUE_LEVEL_FINISH = 3;
	CHESS_ROGUE_LEVEL_FAILED = 4;
	CHESS_ROGUE_LEVEL_FORCE_FINISH = 5;
}
enum ChessRogueQuitReason {
	CHESS_ROGUE_ACCOUNT_BY_NONE = 0;
	CHESS_ROGUE_ACCOUNT_BY_NORMAL_FINISH = 1;
	CHESS_ROGUE_ACCOUNT_BY_NORMAL_QUIT = 2;
	CHESS_ROGUE_ACCOUNT_BY_DIALOG = 3;
	CHESS_ROGUE_ACCOUNT_BY_FAILED = 4;
	CHESS_ROGUE_ACCOUNT_BY_CUSTOM_OP = 5;
}
enum ChessRogueBuffSourceType {
	CHESS_ROGUE_BUFF_SOURCE_TYPE_NONE = 0;
	CHESS_ROGUE_BUFF_SOURCE_TYPE_SELECT = 1;
	CHESS_ROGUE_BUFF_SOURCE_TYPE_ENHANCE = 2;
	CHESS_ROGUE_BUFF_SOURCE_TYPE_MIRACLE = 3;
	CHESS_ROGUE_BUFF_SOURCE_TYPE_DIALOGUE = 4;
	CHESS_ROGUE_BUFF_SOURCE_TYPE_BONUS = 5;
	CHESS_ROGUE_BUFF_SOURCE_TYPE_SHOP = 6;
	CHESS_ROGUE_BUFF_SOURCE_TYPE_DICE = 7;
	CHESS_ROGUE_BUFF_SOURCE_TYPE_AEON = 8;
	CHESS_ROGUE_BUFF_SOURCE_TYPE_MAZE_SKILL = 9;
	CHESS_ROGUE_BUFF_SOURCE_TYPE_LEVEL_MECHANISM = 10;
}
enum ChessRogueMiracleSourceType {
	CHESS_ROGUE_MIRACLE_SOURCE_TYPE_NONE = 0;
	CHESS_ROGUE_MIRACLE_SOURCE_TYPE_SELECT = 1;
	CHESS_ROGUE_MIRACLE_SOURCE_TYPE_DIALOGUE = 2;
	CHESS_ROGUE_MIRACLE_SOURCE_TYPE_BONUS = 3;
	CHESS_ROGUE_MIRACLE_SOURCE_TYPE_USE = 4;
	CHESS_ROGUE_MIRACLE_SOURCE_TYPE_RESET = 5;
	CHESS_ROGUE_MIRACLE_SOURCE_TYPE_REPLACE = 6;
	CHESS_ROGUE_MIRACLE_SOURCE_TYPE_TRADE = 7;
	CHESS_ROGUE_MIRACLE_SOURCE_TYPE_GET = 8;
	CHESS_ROGUE_MIRACLE_SOURCE_TYPE_SHOP = 9;
	CHESS_ROGUE_MIRACLE_SOURCE_TYPE_MAZE_SKILL = 10;
	CHESS_ROGUE_MIRACLE_SOURCE_TYPE_LEVEL_MECHANISM = 11;
}
enum ChessRogueUpdateLevelStatus {
	CHESS_ROGUE_UPDATE_LEVEL_STATUS_BY_NONE = 0;
	CHESS_ROGUE_UPDATE_LEVEL_STATUS_BY_DIALOG = 1;
}
enum ChessRogueCellUpdateReason {
	CHESS_ROGUE_CELL_UPDATE_REASON_NONE = 0;
	CHESS_ROGUE_CELL_UPDATE_REASON_MODIFIER = 1;
}
enum ChessRogueAeonType {
	CHESS_ROGUE_AEON_TYPE_NONE = 0;
	CHESS_ROGUE_AEON_TYPE_KNIGHT = 1;
	CHESS_ROGUE_AEON_TYPE_MEMORY = 2;
	CHESS_ROGUE_AEON_TYPE_WARLOCK = 3;
	CHESS_ROGUE_AEON_TYPE_PRIEST = 4;
	CHESS_ROGUE_AEON_TYPE_ROGUE = 5;
	CHESS_ROGUE_AEON_TYPE_WARRIOR = 6;
	CHESS_ROGUE_AEON_TYPE_HAPPY = 7;
	CHESS_ROGUE_AEON_TYPE_BREED = 8;
}
enum ChessRogueDiceSourceType {
	CHESS_ROGUE_DICE_SOURCE_TYPE_NONE = 0;
	CHESS_ROGUE_DICE_SOURCE_TYPE_NORMAL = 1;
	CHESS_ROGUE_DICE_SOURCE_TYPE_REPEAT = 2;
	CHESS_ROGUE_DICE_SOURCE_TYPE_CHEAT = 3;
}
enum ChessRogueNousMainStoryStatus {
	CHESS_ROGUE_NOUS_MAIN_STORY_STATUS_NONE = 0;
	CHESS_ROGUE_NOUS_MAIN_STORY_STATUS_UNLOCK = 1;
	CHESS_ROGUE_NOUS_MAIN_STORY_STATUS_FINISH = 2;
	CHESS_ROGUE_NOUS_MAIN_STORY_STATUS_CAN_TRIGGER = 3;
}
enum ChessRogueNousDicePhase {
	NONE = 0;
	PHASE_ONE = 1;
	PHASE_TWO = 2;
}
enum CmdChimeraType {
	CmdChimeraTypeNone = 0;
	CmdChimeraGetDataCsReq = 8177;
	CmdChimeraFinishEndlessRoundScRsp = 8178;
	CmdChimeraDoFinalRoundScRsp = 8163;
	CmdChimeraFinishRoundCsReq = 8174;
	CmdChimeraStartEndlessScRsp = 8171;
	CmdChimeraGetDataScRsp = 8176;
	CmdChimeraRoundWorkStartScRsp = 8172;
	CmdChimeraFinishEndlessRoundCsReq = 8170;
	CmdChimeraSetLineupCsReq = 8180;
	CmdChimeraSetLineupScRsp = 8164;
	CmdChimeraQuitEndlessScRsp = 8175;
	CmdChimeraDoFinalRoundCsReq = 8173;
	CmdChimeraRoundWorkStartCsReq = 8165;
	CmdChimeraFinishRoundScRsp = 8169;
	CmdChimeraStartEndlessCsReq = 8179;
	CmdChimeraQuitEndlessCsReq = 8167;
}
enum OAPDMKKKEOL {
	CHIMERA_LAST_PHASE_FINISH_NONE = 0;
	CHIMERA_LAST_PHASE_FINISH_NORMAL = 1;
	CHIMERA_LAST_PHASE_FINISH_SKIP = 2;
	CHIMERA_LAST_PHASE_FINISH_FORCE = 3;
}
enum BIAKDFELJFM {
	CHIMERA_ROUND_WORK_END_NONE = 0;
	CHIMERA_ROUND_WORK_END_SUCC = 1;
	CHIMERA_ROUND_WORK_END_FAIL = 2;
	CHIMERA_ROUND_WORK_END_LEAVE = 3;
}
enum CmdClockParkType {
	CmdClockParkTypeNone = 0;
	CmdClockParkStartScriptCsReq = 7229;
	CmdClockParkUseBuffScRsp = 7222;
	CmdClockParkQuitScriptScRsp = 7213;
	CmdClockParkBattleEndScNotify = 7250;
	CmdClockParkQuitScriptCsReq = 7246;
	CmdClockParkGetInfoCsReq = 7242;
	CmdClockParkGetInfoScRsp = 7218;
	CmdClockParkHandleWaitOperationScRsp = 7232;
	CmdClockParkGetOngoingScriptInfoCsReq = 7228;
	CmdClockParkStartScriptScRsp = 7245;
	CmdClockParkFinishScriptScNotify = 7237;
	CmdClockParkGetOngoingScriptInfoScRsp = 7210;
	CmdClockParkUnlockTalentScRsp = 7209;
	CmdClockParkHandleWaitOperationCsReq = 7216;
	CmdClockParkUseBuffCsReq = 7235;
	CmdClockParkUnlockTalentCsReq = 7241;
}
enum ClockParkPlayStatus {
	CLOCK_PARK_PLAY_NONE = 0;
	CLOCK_PARK_PLAY_NORMAL_DEATH = 1;
	CLOCK_PARK_PLAY_NORMAL_PASS = 2;
	CLOCK_PARK_PLAY_FINISH_SCRIPT = 5;
}
enum MissionStatus {
	MISSION_NONE = 0;
	MISSION_DOING = 1;
	MISSION_FINISH = 2;
	MISSION_PREPARED = 3;
}
enum MessageSectionStatus {
	MESSAGE_SECTION_NONE = 0;
	MESSAGE_SECTION_DOING = 1;
	MESSAGE_SECTION_FINISH = 2;
	MESSAGE_SECTION_FROZEN = 3;
}
enum MessageGroupStatus {
	MESSAGE_GROUP_NONE = 0;
	MESSAGE_GROUP_DOING = 1;
	MESSAGE_GROUP_FINISH = 2;
	MESSAGE_GROUP_FROZEN = 3;
}
enum BattleRecordType {
	BATTLE_RECORD_NONE = 0;
	BATTLE_RECORD_CHALLENGE = 1;
	BATTLE_RECORD_ROGUE = 2;
}
enum RebattleType {
	REBATTLE_TYPE_NONE = 0;
	REBATTLE_TYPE_REBATTLE_MIDWAY = 1;
	REBATTLE_TYPE_REBATTLE_LOSE = 2;
	REBATTLE_TYPE_REBATTLE_MIDWAY_LINEUP = 3;
	REBATTLE_TYPE_REBATTLE_LOSE_LINEUP = 4;
	REBATTLE_TYPE_QUIT_MIDWAY = 5;
	REBATTLE_TYPE_QUIT_LOSE = 6;
}
enum ContentPackageStatus {
	ContentPackageStatus_None = 0;
	ContentPackageStatus_Init = 1;
	ContentPackageStatus_Doing = 2;
	ContentPackageStatus_Finished = 3;
	ContentPackageStatus_Release = 4;
}
enum CmdContentPackageType {
	CmdContentPackageTypeNone = 0;
	CmdContentPackageGetDataScRsp = 7518;
	CmdContentPackageUnlockCsReq = 7506;
	CmdContentPackageUnlockScRsp = 7541;
	CmdContentPackageTransferScNotify = 7509;
	CmdContentPackageSyncDataScNotify = 7514;
	CmdContentPackageGetDataCsReq = 7542;
}
enum CmdDailyActiveType {
	CmdDailyActiveTypeNone = 0;
	CmdTakeAllApRewardScRsp = 3370;
	CmdTakeAllApRewardCsReq = 3306;
	CmdGetDailyActiveInfoScRsp = 3309;
	CmdTakeApRewardScRsp = 3313;
	CmdDailyActiveInfoNotify = 3335;
	CmdTakeApRewardCsReq = 3311;
	CmdGetDailyActiveInfoCsReq = 3347;
}
enum CmdDebugType {
	CmdDebugTypeNone = 0;
	CmdGetServerLogSettingsScRsp = 2468;
	CmdGetServerLogSettingsCsReq = 2492;
	CmdUpdateServerLogSettingsCsReq = 2464;
	CmdGetServerGraphDataCsReq = 2459;
	CmdGetServerGraphDataScRsp = 2479;
	CmdUpdateServerLogSettingsScRsp = 2456;
	CmdServerLogScNotify = 2491;
}
enum ServerLogTag {
	SERVER_LOG_TAG_DEFAULT = 0;
	SERVER_LOG_TAG_ROGUE = 1;
	SERVER_LOG_TAG_SCENE = 3;
	SERVER_LOG_TAG_BATTLE = 4;
	SERVER_LOG_TAG_CPP_GAMECORE = 5;
	SERVER_LOG_TAG_LEVEL_GRAPH = 6;
	SERVER_LOG_TAG_PLANET_FES = 7;
}
enum ServerLogLevel {
	SERVER_LOG_LEVEL_NONE = 0;
	SERVER_LOG_LEVEL_DEBUG = 1;
	SERVER_LOG_LEVEL_INFO = 2;
	SERVER_LOG_LEVEL_WARN = 3;
	SERVER_LOG_LEVEL_ERROR = 4;
}
enum OJIDJNDHDGA {
	READY = 0;
	SUSPEND = 1;
	SUCC = 2;
	FAIL = 3;
}
enum CmdDrinkMakerType {
	CmdDrinkMakerTypeNone = 0;
	CmdDrinkMakerChallengeScRsp = 6987;
	CmdMakeMissionDrinkScRsp = 6991;
	CmdDrinkMakerDayEndScNotify = 6990;
	CmdMakeDrinkScRsp = 6984;
	CmdGetDrinkMakerDataScRsp = 6996;
	CmdDrinkMakerUpdateTipsNotify = 6995;
	CmdMakeDrinkCsReq = 7000;
	CmdGetDrinkMakerDataCsReq = 6997;
	CmdEndDrinkMakerSequenceScRsp = 6989;
	CmdMakeMissionDrinkCsReq = 6999;
	CmdDrinkMakerChallengeCsReq = 6998;
	CmdEndDrinkMakerSequenceCsReq = 6994;
}
enum CmdEraFlipperType {
	CmdEraFlipperTypeNone = 0;
	CmdChangeEraFlipperDataScRsp = 6556;
	CmdChangeEraFlipperDataCsReq = 6564;
	CmdGetEraFlipperDataCsReq = 6592;
	CmdGetEraFlipperDataScRsp = 6568;
	CmdEraFlipperDataChangeScNotify = 6578;
	CmdEnterEraFlipperRegionScRsp = 6595;
	CmdResetEraFlipperDataCsReq = 6591;
	CmdEnterEraFlipperRegionCsReq = 6579;
	CmdResetEraFlipperDataScRsp = 6559;
}
enum CmdEvolveBuild {
	CmdEvolveBuildNone = 0;
	CmdEvolveBuildStartLevelCsReq = 7114;
	CmdEvolveBuildReRandomStageCsReq = 7132;
	CmdEvolveBuildShopAbilityDownCsReq = 7148;
	CmdEvolveBuildQueryInfoCsReq = 7142;
	CmdEvolveBuildShopAbilityDownScRsp = 7135;
	CmdEvolveBuildStartStageScRsp = 7109;
	CmdEvolveBuildStartStageCsReq = 7141;
	CmdEvolveBuildLeaveScRsp = 7110;
	CmdEvolveBuildStartLevelScRsp = 7106;
	CmdEvolveBuildReRandomStageScRsp = 7146;
	CmdEvolveBuildShopAbilityResetCsReq = 7111;
	CmdEvolveBuildGiveupScRsp = 7145;
	CmdEvolveBuildShopAbilityResetScRsp = 7104;
	CmdEvolveBuildFinishScNotify = 7116;
	CmdEvolveBuildCoinNotify = 7149;
	CmdEvolveBuildGiveupCsReq = 7129;
	CmdEvolveBuildLeaveCsReq = 7128;
	CmdEvolveBuildQueryInfoScRsp = 7118;
	CmdEvolveBuildTakeExpRewardCsReq = 7122;
	CmdEvolveBuildUnlockInfoNotify = 7105;
	CmdEvolveBuildTakeExpRewardScRsp = 7137;
	CmdEvolveBuildShopAbilityUpCsReq = 7138;
	CmdEvolveBuildShopAbilityUpScRsp = 7150;
}
enum OIJLBLOOHJG {
	EVOLVE_PERIOD_NONE = 0;
	EVOLVE_PERIOD_FIRST = 1;
	EVOLVE_PERIOD_SECOND = 2;
	EVOLVE_PERIOD_THIRD = 3;
	EVOLVE_PERIOD_EXTRA = 4;
}
enum DLHCMCNIHII {
	EVOLVE_BATTLE_RESULT_NONE = 0;
	EVOLVE_BATTLE_RESULT_WIN = 1;
	EVOLVE_BATTLE_RESULT_ALL_AVATAR_DEAD = 2;
	EVOLVE_BATTLE_RESULT_NO_DEAD_LINE = 3;
	EVOLVE_BATTLE_RESULT_QUIT = 4;
}
enum CmdExpeditionType {
	CmdExpeditionTypeNone = 0;
	CmdAcceptExpeditionCsReq = 2547;
	CmdAcceptMultipleExpeditionCsReq = 2577;
	CmdCancelExpeditionScRsp = 2506;
	CmdGetExpeditionDataScRsp = 2513;
	CmdGetExpeditionDataCsReq = 2511;
	CmdAcceptActivityExpeditionCsReq = 2530;
	CmdTakeExpeditionRewardScRsp = 2589;
	CmdAcceptMultipleExpeditionScRsp = 2591;
	CmdTakeMultipleExpeditionRewardScRsp = 2557;
	CmdTakeMultipleExpeditionRewardCsReq = 2593;
	CmdAcceptExpeditionScRsp = 2509;
	CmdTakeExpeditionRewardCsReq = 2570;
	CmdCancelActivityExpeditionScRsp = 2536;
	CmdTakeActivityExpeditionRewardCsReq = 2550;
	CmdTakeActivityExpeditionRewardScRsp = 2573;
	CmdAcceptActivityExpeditionScRsp = 2595;
	CmdTakeMultipleActivityExpeditionRewardCsReq = 2525;
	CmdExpeditionDataChangeScNotify = 2526;
	CmdCancelExpeditionCsReq = 2535;
	CmdCancelActivityExpeditionCsReq = 2518;
	CmdTakeMultipleActivityExpeditionRewardScRsp = 2510;
}
enum CmdFantasticStoryActivityType {
	CmdFantasticStoryActivityTypeNone = 0;
	CmdFantasticStoryActivityBattleEndScNotify = 4906;
	CmdEnterFantasticStoryActivityStageCsReq = 4909;
	CmdGetFantasticStoryActivityDataScRsp = 4913;
	CmdEnterFantasticStoryActivityStageScRsp = 4935;
	CmdGetFantasticStoryActivityDataCsReq = 4911;
	CmdFinishChapterScNotify = 4947;
}
enum CmdFeverTimeActivityType {
	CmdFeverTimeActivityTypeNone = 0;
	CmdEnterFeverTimeActivityStageScRsp = 7156;
	CmdEnterFeverTimeActivityStageCsReq = 7154;
	CmdGetFeverTimeActivityDataCsReq = 7157;
	CmdGetFeverTimeActivityDataScRsp = 7158;
	CmdFeverTimeActivityBattleEndScNotify = 7159;
}
enum FeverTimeBattleRank {
	FEVER_TIME_BATTLE_RANK_C = 0;
	FEVER_TIME_BATTLE_RANK_B = 1;
	FEVER_TIME_BATTLE_RANK_A = 2;
	FEVER_TIME_BATTLE_RANK_S = 3;
	FEVER_TIME_BATTLE_RANK_SS = 4;
}
enum CmdFightType {
	CmdFightTypeNone = 0;
	CmdFightLeaveScNotify = 30047;
	CmdFightHeartBeatScRsp = 30006;
	CmdFightEnterScRsp = 30013;
	CmdFightGeneralScRsp = 30026;
	CmdFightHeartBeatCsReq = 30035;
	CmdFightGeneralCsReq = 30089;
	CmdFightGeneralScNotify = 30030;
	CmdFightEnterCsReq = 30011;
	CmdFightKickOutScNotify = 30009;
	CmdFightSessionStopScNotify = 30070;
}
enum CmdFightActivityType {
	CmdFightActivityTypeNone = 0;
	CmdFightActivityDataChangeScNotify = 3647;
	CmdTakeFightActivityRewardCsReq = 3606;
	CmdGetFightActivityDataCsReq = 3611;
	CmdEnterFightActivityStageScRsp = 3635;
	CmdEnterFightActivityStageCsReq = 3609;
	CmdGetFightActivityDataScRsp = 3613;
	CmdTakeFightActivityRewardScRsp = 3670;
}
enum CmdFightFestType {
	CmdFightFestTypeNone = 0;
	CmdGetFightFestDataScRsp = 7268;
	CmdGetFightFestDataCsReq = 7292;
	CmdStartFightFestScRsp = 7256;
	CmdFightFestScoreUpdateNotify = 7291;
	CmdFightFestUpdateCoinNotify = 7295;
	CmdFightFestUnlockSkillNotify = 7259;
	CmdStartFightFestCsReq = 7264;
	CmdFightFestUpdateChallengeRecordNotify = 7279;
}
enum HGDAPJPKFFB {
	FIGHT_FEST_BATTLE_RANK_C = 0;
	FIGHT_FEST_BATTLE_RANK_B = 1;
	FIGHT_FEST_BATTLE_RANK_A = 2;
	FIGHT_FEST_BATTLE_RANK_S = 3;
	FIGHT_FEST_BATTLE_RANK_SS = 4;
}
enum APLOAGDIBKI {
	FIGHT_FEST_TYPE_NONE = 0;
	FIGHT_FEST_TYPE_MAIN = 1;
	FIGHT_FEST_TYPE_SCORE = 2;
	FIGHT_FEST_TYPE_CHALLENGE = 3;
	FIGHT_FEST_TYPE_TEACH = 4;
}
enum CmdFightMarbleType {
	CmdFightMarbleTypeNone = 0;
}
enum MJBIKBCPKAI {
	FightMarbleEventTypeNone = 0;
	FightMarbleEventTypePlayerEnd = 1;
	FightMarbleEventTypeGameEnd = 2;
}
enum JOMKPEGEFMP {
	MARBLE_TEAM_TYPE_NONE = 0;
	MARBLE_TEAM_TYPE_TEAM_A = 1;
	MARBLE_TEAM_TYPE_TEAM_B = 2;
}
enum EEIBHJPNJCF {
	MARBLE_PLAYER_STATE_Default = 0;
	MARBLE_PLAYER_STATE_Leave = 1;
	MARBLE_PLAYER_STATE_KickOut = 2;
}
enum IMPKPKAMIAF {
	MARBLE_SYNC_TYPE_NONE = 0;
	MARBLE_SYNC_TYPE_LOADING = 1;
	MARBLE_SYNC_TYPE_PERFORMANCE = 2;
	MARBLE_SYNC_TYPE_ROUND_START = 3;
	MARBLE_SYNC_TYPE_ROUND_END = 4;
	MARBLE_SYNC_TYPE_SWITCH_ROUND = 6;
	MARBLE_SYNC_TYPE_USE_TECH = 7;
	MARBLE_SYNC_TYPE_SIMULATE_START = 8;
	MARBLE_SYNC_TYPE_EMOJI = 9;
	MARBLE_SYNC_TYPE_ACHIEVEMENT = 10;
}
enum PAJNHIAGODD {
	MARBLE_FRAME_TYPE_NONE = 0;
	MARBLE_FRAME_TYPE_ACTION_START = 1;
	MARBLE_FRAME_TYPE_ACTION_END = 2;
	MARBLE_FRAME_TYPE_ROUND_START = 3;
	MARBLE_FRAME_TYPE_ROUND_END = 4;
	MARBLE_FRAME_TYPE_REVIVE = 5;
	MARBLE_FRAME_TYPE_HP_CHANGE = 6;
	MARBLE_FRAME_TYPE_LAUNCH = 7;
	MARBLE_FRAME_TYPE_STOP = 8;
	MARBLE_FRAME_TYPE_COLLIDE = 9;
	MARBLE_FRAME_TYPE_EFFECT = 10;
	MARBLE_FRAME_TYPE_BUFF_TEXT = 11;
	MARBLE_FRAME_TYPE_SKILL_UI = 12;
	MARBLE_FRAME_TYPE_ABSORB = 13;
	MARBLE_FRAME_TYPE_ON_OFF_FIELD = 14;
	MARBLE_FRAME_TYPE_DEAD = 15;
	MARBLE_FRAME_TYPE_USE_TECH = 16;
	MARBLE_FRAME_TYPE_TECH_ACTIVE = 17;
	MARBLE_FRAME_TYPE_GHOST_FIRE = 18;
	MARBLE_FRAME_TYPE_TRIGGER = 19;
	MARBLE_FRAME_TYPE_SWALLOW = 20;
	MARBLE_FRAME_TYPE_RADIUS = 21;
	MARBLE_FRAME_TYPE_HIDE_LINE = 22;
	MARBLE_FRAME_TYPE_TEAM_SCORE = 23;
	MARBLE_FRAME_TYPE_EMOJI_PACKAGE = 24;
	MARBLE_FRAME_TYPE_CHANGE_SPEED = 25;
	MARBLE_FRAME_TYPE_ADD_SHIELD = 26;
}
enum LKKAJCACIJI {
	MARBLE_FACTION_TYPE_NONE = 0;
	MARBLE_FACTION_TYPE_ALL = 1;
	MARBLE_FACTION_TYPE_ENEMY = 2;
	MARBLE_FACTION_TYPE_ALLY = 3;
	MARBLE_FACTION_TYPE_FIELD = 4;
}
enum FIPPKLCOEGJ {
	MARBLE_HP_CHANGE_TYPE_NONE = 0;
	MARBLE_HP_CHANGE_TYPE_CRITICAL = 1;
	MARBLE_HP_CHANGE_TYPE_SPINE = 2;
}
enum PPIFFKJEJJA {
	Marble_Game_Phase_None = 0;
	Marble_Game_Phase_Ready = 1;
	Marble_Game_Phase_Delay = 2;
	Marble_Game_Phase_Loading = 3;
	Marble_Game_Phase_LoadFinish = 4;
	Marble_Game_Phase_Performance = 5;
	Marble_Game_Phase_PerformanceFinish = 6;
	Marble_Game_Phase_RoundA = 7;
	Marble_Game_Phase_RoundB = 8;
	Marble_Game_Phase_Simulate = 9;
	Marble_Game_Phase_SimulateFinish = 10;
	Marble_Game_Phase_Tech = 11;
	Marble_Game_Phase_TechUI = 12;
	Marble_Game_Phase_TechFinish = 13;
	Marble_Game_Phase_Finish = 14;
	Marble_Game_Phase_PreRound = 15;
}
enum CmdFightMathc3Type {
	CmdFightMathc3TypeNone = 0;
	CmdFightMatch3SwapScRsp = 30170;
	CmdFightMatch3TurnStartScNotify = 30109;
	CmdFightMatch3DataCsReq = 30111;
	CmdFightMatch3ForceUpdateNotify = 30118;
	CmdFightMatch3SwapCsReq = 30106;
	CmdFightMatch3ChatScRsp = 30130;
	CmdFightMatch3TurnEndScNotify = 30135;
	CmdFightMatch3DataScRsp = 30113;
	CmdFightMatch3StartCountDownScNotify = 30147;
	CmdFightMatch3ChatCsReq = 30126;
	CmdFightMatch3OpponentDataScNotify = 30189;
	CmdFightMatch3ChatScNotify = 30195;
}
enum DGFCBOFAOIA {
	MATCH3_STATE_IDLE = 0;
	MATCH3_STATE_START = 1;
	MATCH3_STATE_MATCH = 2;
	MATCH3_STATE_GAME = 3;
	MATCH3_STATE_HALFTIME = 4;
	MATCH3_STATE_OVER = 5;
}
enum NPPNFPPENMC {
	MATCH3_PLAYER_STATE_ALIVE = 0;
	MATCH3_PLAYER_STATE_DYING = 1;
	MATCH3_PLAYER_STATE_DEAD = 2;
	MATCH3_PLAYER_STATE_LEAVE = 3;
}
enum BFILLIOBMFN {
	EVENT_BEGIN = 0;
	EVENT_BREAK = 1;
	EVENT_FALL = 2;
	EVENT_REFRESH = 3;
	EVENT_BIRD_SKILL = 4;
	EVENT_ENV = 5;
	EVENT_SHUFFLE = 6;
	EVENT_SETTLE_TAG = 7;
}
enum CmdFriendType {
	CmdFriendTypeNone = 0;
	CmdNewAssistHistoryNotify = 2983;
	CmdAddBlacklistCsReq = 2977;
	CmdSyncApplyFriendScNotify = 2926;
	CmdSetFriendMarkCsReq = 2914;
	CmdGetFriendListInfoScRsp = 2913;
	CmdGetPlatformPlayerInfoScRsp = 2987;
	CmdGetAssistHistoryCsReq = 2975;
	CmdGetFriendAssistListCsReq = 2917;
	CmdTakeAssistRewardScRsp = 2968;
	CmdGetFriendLoginInfoCsReq = 2956;
	CmdGetFriendLoginInfoScRsp = 2981;
	CmdGetPlayerDetailInfoScRsp = 2909;
	CmdApplyFriendCsReq = 2970;
	CmdApplyFriendScRsp = 2989;
	CmdGetAssistListCsReq = 2922;
	CmdSearchPlayerCsReq = 2965;
	CmdGetAssistHistoryScRsp = 2928;
	CmdReportPlayerCsReq = 2971;
	CmdSetFriendMarkScRsp = 2941;
	CmdGetFriendBattleRecordDetailScRsp = 2999;
	CmdSetFriendRemarkNameScRsp = 2907;
	CmdDeleteFriendScRsp = 2950;
	CmdSyncHandleFriendScNotify = 2918;
	CmdSearchPlayerScRsp = 2952;
	CmdAddBlacklistScRsp = 2991;
	CmdGetFriendRecommendListInfoCsReq = 2957;
	CmdGetFriendAssistListScRsp = 2963;
	CmdGetFriendApplyListInfoScRsp = 2906;
	CmdSyncDeleteFriendScNotify = 2973;
	CmdReportPlayerScRsp = 2982;
	CmdGetCurAssistScRsp = 2984;
	CmdGetFriendChallengeDetailCsReq = 2996;
	CmdGetFriendApplyListInfoCsReq = 2935;
	CmdDeleteFriendCsReq = 2936;
	CmdGetAssistListScRsp = 2986;
	CmdDeleteBlacklistScRsp = 2937;
	CmdGetCurAssistCsReq = 2924;
	CmdGetFriendBattleRecordDetailCsReq = 2966;
	CmdSetForbidOtherApplyFriendCsReq = 3000;
	CmdSetForbidOtherApplyFriendScRsp = 2946;
	CmdSetAssistScRsp = 2953;
	CmdSetAssistCsReq = 2992;
	CmdDeleteBlacklistCsReq = 2951;
	CmdGetFriendDevelopmentInfoScRsp = 2908;
	CmdGetFriendChallengeLineupCsReq = 2904;
	CmdGetFriendChallengeDetailScRsp = 2969;
	CmdGetFriendListInfoCsReq = 2911;
	CmdCurAssistChangedNotify = 2960;
	CmdGetPlayerDetailInfoCsReq = 2947;
	CmdGetFriendChallengeLineupScRsp = 2978;
	CmdHandleFriendScRsp = 2995;
	CmdGetFriendRecommendListInfoScRsp = 2925;
	CmdGetPlatformPlayerInfoCsReq = 2994;
	CmdTakeAssistRewardCsReq = 2958;
	CmdGetFriendDevelopmentInfoCsReq = 2921;
	CmdSyncAddBlacklistScNotify = 2993;
	CmdHandleFriendCsReq = 2930;
	CmdSetFriendRemarkNameCsReq = 2910;
}
enum FriendOnlineStatus {
	FRIEND_ONLINE_STATUS_OFFLINE = 0;
	FRIEND_ONLINE_STATUS_ONLINE = 1;
}
enum FriendApplySource {
	FRIEND_APPLY_SOURCE_NONE = 0;
	FRIEND_APPLY_SOURCE_SEARCH = 1;
	FRIEND_APPLY_SOURCE_RECOMMEND = 2;
	FRIEND_APPLY_SOURCE_ASSIST = 3;
	FRIEND_APPLY_SOURCE_RECOMMEND_ASSIST = 4;
	FRIEND_APPLY_SOURCE_PSN_FRIEND = 5;
	FRIEND_APPLY_SOURCE_ASSIST_REWARD = 6;
}
enum CmdGachaType {
	CmdGachaTypeNone = 0;
	CmdDoGachaCsReq = 1947;
	CmdDoGachaScRsp = 1909;
	CmdSetGachaDecideItemCsReq = 1926;
	CmdGetGachaCeilingScRsp = 1906;
	CmdGetGachaCeilingCsReq = 1935;
	CmdExchangeGachaCeilingCsReq = 1970;
	CmdGachaDecideItemChangeScNotify = 1995;
	CmdExchangeGachaCeilingScRsp = 1989;
	CmdGetGachaInfoCsReq = 1911;
	CmdSetGachaDecideItemScRsp = 1930;
	CmdGetGachaInfoScRsp = 1913;
}
enum CmdHeartdialType {
	CmdHeartdialTypeNone = 0;
	CmdChangeScriptEmotionScRsp = 6309;
	CmdFinishEmotionDialoguePerformanceCsReq = 6370;
	CmdHeartDialScriptChangeScNotify = 6326;
	CmdHeartDialTraceScriptCsReq = 6330;
	CmdSubmitEmotionItemCsReq = 6335;
	CmdChangeScriptEmotionCsReq = 6347;
	CmdSubmitEmotionItemScRsp = 6306;
	CmdHeartDialTraceScriptScRsp = 6395;
	CmdGetHeartDialInfoScRsp = 6313;
	CmdFinishEmotionDialoguePerformanceScRsp = 6389;
	CmdGetHeartDialInfoCsReq = 6311;
}
enum HeartDialEmotionType {
	HEART_DIAL_EMOTION_TYPE_PEACE = 0;
	HEART_DIAL_EMOTION_TYPE_ANGER = 1;
	HEART_DIAL_EMOTION_TYPE_HAPPY = 2;
	HEART_DIAL_EMOTION_TYPE_SAD = 3;
}
enum HeartDialStepType {
	HEART_DIAL_STEP_TYPE_MISSING = 0;
	HEART_DIAL_STEP_TYPE_FULL = 1;
	HEART_DIAL_STEP_TYPE_LOCK = 2;
	HEART_DIAL_STEP_TYPE_UNLOCK = 3;
	HEART_DIAL_STEP_TYPE_NORMAL = 4;
	HEART_DIAL_STEP_TYPE_CONTROL = 5;
}
enum HeartDialUnlockStatus {
	HEART_DIAL_UNLOCK_STATUS_LOCK = 0;
	HEART_DIAL_UNLOCK_STATUS_UNLOCK_SINGLE = 1;
	HEART_DIAL_UNLOCK_STATUS_UNLOCK_ALL = 2;
}
enum CmdHeliobusType {
	CmdHeliobusTypeNone = 0;
	CmdHeliobusSnsCommentScRsp = 5830;
	CmdHeliobusSnsLikeCsReq = 5870;
	CmdHeliobusStartRaidScRsp = 5871;
	CmdHeliobusActivityDataScRsp = 5813;
	CmdHeliobusEnterBattleCsReq = 5825;
	CmdHeliobusSnsLikeScRsp = 5889;
	CmdHeliobusEnterBattleScRsp = 5810;
	CmdHeliobusSnsUpdateScNotify = 5895;
	CmdHeliobusUnlockSkillScNotify = 5873;
	CmdHeliobusStartRaidCsReq = 5807;
	CmdHeliobusSelectSkillCsReq = 5877;
	CmdHeliobusSelectSkillScRsp = 5891;
	CmdHeliobusUpgradeLevelCsReq = 5836;
	CmdHeliobusSnsCommentCsReq = 5826;
	CmdHeliobusActivityDataCsReq = 5811;
	CmdHeliobusLineupUpdateScNotify = 5851;
	CmdHeliobusInfoChangedScNotify = 5818;
	CmdHeliobusChallengeUpdateScNotify = 5882;
	CmdHeliobusSnsReadCsReq = 5847;
	CmdHeliobusUpgradeLevelScRsp = 5850;
	CmdHeliobusSnsReadScRsp = 5809;
	CmdHeliobusSnsPostCsReq = 5835;
	CmdHeliobusSnsPostScRsp = 5806;
}
enum CmdItemType {
	CmdItemTypeNone = 0;
	CmdMarkItemCsReq = 575;
	CmdExpUpRelicCsReq = 573;
	CmdGetRelicFilterPlanScRsp = 517;
	CmdMarkRelicFilterPlanScRsp = 521;
	CmdModifyRelicFilterPlanCsReq = 578;
	CmdDestroyItemCsReq = 592;
	CmdModifyRelicFilterPlanScRsp = 596;
	CmdSetTurnFoodSwitchScRsp = 560;
	CmdUseItemCsReq = 570;
	CmdComposeItemScRsp = 550;
	CmdBatchRankUpEquipmentScRsp = 527;
	CmdGetBagCsReq = 511;
	CmdAddEquipmentScNotify = 537;
	CmdMarkItemScRsp = 528;
	CmdDiscardRelicCsReq = 587;
	CmdRelicReforgeCsReq = 533;
	CmdUseItemScRsp = 589;
	CmdAddRelicFilterPlanScRsp = 504;
	CmdDeleteRelicFilterPlanCsReq = 569;
	CmdExchangeHcoinCsReq = 507;
	CmdAddRelicFilterPlanCsReq = 563;
	CmdLockRelicScRsp = 593;
	CmdComposeLimitNumCompleteNotify = 522;
	CmdExpUpEquipmentScRsp = 518;
	CmdExchangeHcoinScRsp = 571;
	CmdGetBagScRsp = 513;
	CmdRelicFilterPlanClearNameScNotify = 508;
	CmdRechargeSuccNotify = 510;
	CmdRelicReforgeConfirmScRsp = 540;
	CmdSetTurnFoodSwitchCsReq = 568;
	CmdRelicReforgeConfirmCsReq = 501;
	CmdComposeSelectedRelicScRsp = 551;
	CmdComposeLimitNumUpdateNotify = 586;
	CmdLockRelicCsReq = 591;
	CmdGetRecyleTimeCsReq = 565;
	CmdPromoteEquipmentCsReq = 547;
	CmdRankUpEquipmentScRsp = 530;
	CmdSellItemScRsp = 525;
	CmdRankUpEquipmentCsReq = 526;
	CmdExpUpRelicScRsp = 577;
	CmdRelicReforgeScRsp = 564;
	CmdPromoteEquipmentScRsp = 509;
	CmdDeleteRelicFilterPlanScRsp = 566;
	CmdMarkRelicFilterPlanCsReq = 599;
	CmdGetRelicFilterPlanCsReq = 541;
	CmdSellItemCsReq = 557;
	CmdGetRecyleTimeScRsp = 552;
	CmdGetMarkItemListScRsp = 584;
	CmdBatchRankUpEquipmentCsReq = 559;
	CmdCancelMarkItemNotify = 583;
	CmdComposeItemCsReq = 536;
	CmdSyncTurnFoodNotify = 558;
	CmdLockEquipmentCsReq = 535;
	CmdLockEquipmentScRsp = 506;
	CmdGeneralVirtualItemDataNotify = 594;
	CmdDestroyItemScRsp = 553;
	CmdDiscardRelicScRsp = 556;
	CmdExpUpEquipmentCsReq = 595;
	CmdComposeSelectedRelicCsReq = 582;
	CmdGetMarkItemListCsReq = 524;
}
enum ICPINEHOLML {
	RELIC_DISCARD_TYPE_SINGLE = 0;
	RELIC_DISCARD_TYPE_BATCH = 1;
	RELIC_DISCARD_TYPE_SMART = 2;
}
enum TurnFoodSwitch {
	TURN_FOOD_SWITCH_NONE = 0;
	TURN_FOOD_SWITCH_ATTACK = 1;
	TURN_FOOD_SWITCH_DEFINE = 2;
}
enum CmdJukeboxType {
	CmdJukeboxTypeNone = 0;
	CmdPlayBackGroundMusicScRsp = 3109;
	CmdGetJukeboxDataCsReq = 3111;
	CmdTrialBackGroundMusicCsReq = 3170;
	CmdUnlockBackGroundMusicCsReq = 3135;
	CmdPlayBackGroundMusicCsReq = 3147;
	CmdUnlockBackGroundMusicScRsp = 3106;
	CmdTrialBackGroundMusicScRsp = 3189;
	CmdGetJukeboxDataScRsp = 3113;
}
enum CmdLineupType {
	CmdLineupTypeNone = 0;
	CmdReplaceLineupCsReq = 771;
	CmdJoinLineupScRsp = 706;
	CmdSyncLineupNotify = 795;
	CmdGetLineupAvatarDataScRsp = 736;
	CmdGetStageLineupScRsp = 713;
	CmdSwapLineupCsReq = 726;
	CmdGetCurLineupDataScRsp = 709;
	CmdSwitchLineupIndexScRsp = 791;
	CmdQuitLineupCsReq = 770;
	CmdChangeLineupLeaderCsReq = 750;
	CmdGetLineupAvatarDataCsReq = 718;
	CmdJoinLineupCsReq = 735;
	CmdVirtualLineupTrialAvatarChangeScNotify = 737;
	CmdChangeLineupLeaderScRsp = 773;
	CmdGetAllLineupDataScRsp = 710;
	CmdGetCurLineupDataCsReq = 747;
	CmdGetStageLineupCsReq = 711;
	CmdQuitLineupScRsp = 789;
	CmdReplaceLineupScRsp = 782;
	CmdGetAllLineupDataCsReq = 725;
	CmdVirtualLineupDestroyNotify = 707;
	CmdSetLineupNameCsReq = 793;
	CmdSwitchLineupIndexCsReq = 777;
	CmdSetLineupNameScRsp = 757;
	CmdExtraLineupDestroyNotify = 751;
	CmdSwapLineupScRsp = 730;
}
enum PBPAHLPFNDA {
	LINEUP_TYPE_NONE = 0;
	LINEUP_TYPE_PRESET = 1;
	LINEUP_TYPE_VIRTUAL = 2;
	LINEUP_TYPE_EXTRA = 3;
	LINEUP_TYPE_STORY_LINE = 4;
}
enum ExtraLineupType {
	LINEUP_NONE = 0;
	LINEUP_CHALLENGE = 1;
	LINEUP_ROGUE = 2;
	LINEUP_CHALLENGE_2 = 3;
	LINEUP_CHALLENGE_3 = 4;
	LINEUP_ROGUE_CHALLENGE = 5;
	LINEUP_STAGE_TRIAL = 6;
	LINEUP_ROGUE_TRIAL = 7;
	LINEUP_ACTIVITY = 8;
	LINEUP_BOXING_CLUB = 9;
	LINEUP_TREASURE_DUNGEON = 11;
	LINEUP_CHESS_ROGUE = 12;
	LINEUP_HELIOBUS = 13;
	LINEUP_TOURN_ROGUE = 14;
	LINEUP_RELIC_ROGUE = 15;
	LINEUP_ARCADE_ROGUE = 16;
	LINEUP_MAGIC_ROGUE = 17;
}
enum SyncLineupReason {
	SYNC_REASON_NONE = 0;
	SYNC_REASON_MP_ADD = 1;
	SYNC_REASON_MP_ADD_PROP_HIT = 2;
	SYNC_REASON_HP_ADD = 3;
	SYNC_REASON_HP_ADD_PROP_HIT = 4;
}
enum CmdLobbyType {
	CmdLobbyTypeNone = 0;
	CmdLobbyKickOutCsReq = 7378;
	CmdLobbyCreateCsReq = 7392;
	CmdLobbyQuitCsReq = 7363;
	CmdLobbyInviteCsReq = 7382;
	CmdLobbyJoinCsReq = 7364;
	CmdLobbySyncInfoScNotify = 7366;
	CmdLobbyGetInfoCsReq = 7400;
	CmdLobbyModifyPlayerInfoCsReq = 7379;
	CmdLobbyStartFightScRsp = 7359;
	CmdLobbyInteractScNotify = 7387;
	CmdLobbyStartFightCsReq = 7391;
	CmdLobbyGetInfoScRsp = 7398;
	CmdLobbyInteractCsReq = 7385;
	CmdLobbyQuitScRsp = 7357;
	CmdLobbyInteractScRsp = 7372;
	CmdLobbyKickOutScRsp = 7360;
	CmdLobbyInviteScNotify = 7388;
	CmdLobbyInviteScRsp = 7396;
	CmdLobbyJoinScRsp = 7356;
	CmdLobbyCreateScRsp = 7368;
	CmdLobbyModifyPlayerInfoScRsp = 7395;
}
enum CmdMailType {
	CmdMailTypeNone = 0;
	CmdDelMailScRsp = 806;
	CmdMarkReadMailCsReq = 847;
	CmdNewMailScNotify = 826;
	CmdGetMailCsReq = 811;
	CmdDelMailCsReq = 835;
	CmdGetMailScRsp = 813;
	CmdTakeMailAttachmentScRsp = 889;
	CmdTakeMailAttachmentCsReq = 870;
	CmdMarkReadMailScRsp = 809;
}
enum MailType {
	MAIL_TYPE_NORMAL = 0;
	MAIL_TYPE_STAR = 1;
}
enum CmdMapRotationType {
	CmdMapRotationTypeNone = 0;
	CmdInteractChargerScRsp = 6809;
	CmdEnterMapRotationRegionScRsp = 6813;
	CmdLeaveMapRotationRegionScNotify = 6873;
	CmdDeployRotaterCsReq = 6835;
	CmdDeployRotaterScRsp = 6806;
	CmdRemoveRotaterCsReq = 6893;
	CmdGetMapRotationDataCsReq = 6895;
	CmdRemoveRotaterScRsp = 6857;
	CmdEnterMapRotationRegionCsReq = 6811;
	CmdRotateMapCsReq = 6870;
	CmdUpdateEnergyScNotify = 6877;
	CmdLeaveMapRotationRegionScRsp = 6830;
	CmdResetMapRotationRegionCsReq = 6836;
	CmdResetMapRotationRegionScRsp = 6850;
	CmdGetMapRotationDataScRsp = 6818;
	CmdUpdateMapRotationDataScNotify = 6891;
	CmdLeaveMapRotationRegionCsReq = 6826;
	CmdRotateMapScRsp = 6889;
	CmdUpdateRotaterScNotify = 6825;
	CmdInteractChargerCsReq = 6847;
}
enum CmdMarbleType {
	CmdMarbleTypeNone = 0;
	CmdMarbleLevelFinishScRsp = 8274;
	CmdMarbleGetDataScRsp = 8286;
	CmdMarblePvpDataUpdateScNotify = 8281;
	CmdMarbleShopBuyScRsp = 8279;
	CmdMarbleUpdateShownSealScRsp = 8288;
	CmdMarbleUpdateShownSealCsReq = 8280;
	CmdMarbleGetDataCsReq = 8287;
	CmdMarbleLevelFinishCsReq = 8290;
	CmdMarbleShopBuyCsReq = 8284;
	CmdMarbleUnlockSealScNotify = 8289;
}
enum CmdMarkChestType {
	CmdMarkChestTypeNone = 0;
	CmdUpdateMarkChestCsReq = 8200;
	CmdGetMarkChestCsReq = 8197;
	CmdUpdateMarkChestScRsp = 8184;
	CmdGetMarkChestScRsp = 8196;
	CmdMarkChestChangedScNotify = 8194;
}
enum CmdMatchType {
	CmdMatchTypeNone = 0;
	CmdStartMatchCsReq = 7342;
	CmdMatchResultScNotify = 7341;
	CmdCancelMatchCsReq = 7314;
	CmdCancelMatchScRsp = 7306;
	CmdGetCrossInfoCsReq = 7309;
	CmdGetCrossInfoScRsp = 7329;
	CmdStartMatchScRsp = 7318;
}
enum CmdMatchThreeModuleType {
	CmdMatchThreeModuleTypeNone = 0;
	CmdMatchThreeGetDataScRsp = 7418;
	CmdMatchThreeLevelEndCsReq = 7414;
	CmdMatchThreeLevelEndScRsp = 7406;
	CmdMatchThreeSetBirdPosCsReq = 7409;
	CmdMatchThreeSetBirdPosScRsp = 7429;
	CmdMatchThreeSyncDataScNotify = 7441;
	CmdMatchThreeGetDataCsReq = 7442;
}
enum MatchThreeStatisticsType {
	MatchThreeStatistics_None = 0;
	MatchThreeStatistics_First = 1;
	MatchThreeStatistics_Second = 2;
	MatchThreeStatistics_Third = 3;
	MatchThreeStatistics_Fruit = 4;
	MatchThreeStatistics_Skill = 5;
	MatchThreeStatistics_Defeat = 6;
	MatchThreeStatistics_Bomb = 7;
	MatchThreeStatistics_Damage = 8;
	MatchThreeStatistics_Energy = 9;
	MatchThreeStatistics_SwapBomb = 10;
}
enum CmdMessageType {
	CmdMessageTypeNone = 0;
	CmdFinishPerformSectionIdCsReq = 2726;
	CmdFinishItemIdScRsp = 2706;
	CmdFinishSectionIdScRsp = 2789;
	CmdFinishSectionIdCsReq = 2770;
	CmdFinishItemIdCsReq = 2735;
	CmdGetNpcMessageGroupScRsp = 2713;
	CmdGetNpcMessageGroupCsReq = 2711;
	CmdGetMissionMessageInfoScRsp = 2718;
	CmdGetMissionMessageInfoCsReq = 2795;
	CmdGetNpcStatusCsReq = 2747;
	CmdGetNpcStatusScRsp = 2709;
	CmdFinishPerformSectionIdScRsp = 2730;
}
enum CmdMiscModuleType {
	CmdMiscModuleTypeNone = 0;
	CmdSubmitOrigamiItemScRsp = 4177;
	CmdUpdateMovieRacingDataScRsp = 4182;
	CmdTakePictureCsReq = 4135;
	CmdCancelCacheNotifyCsReq = 4126;
	CmdGetShareDataScRsp = 4109;
	CmdDifficultyAdjustmentUpdateDataCsReq = 4192;
	CmdGetShareDataCsReq = 4147;
	CmdDifficultyAdjustmentGetDataCsReq = 4122;
	CmdDifficultyAdjustmentGetDataScRsp = 4186;
	CmdShareScRsp = 4113;
	CmdMazeKillDirectScRsp = 4184;
	CmdGetMovieRacingDataCsReq = 4110;
	CmdSecurityReportScRsp = 4118;
	CmdSubmitOrigamiItemCsReq = 4173;
	CmdGetGunPlayDataScRsp = 4137;
	CmdTakePictureScRsp = 4106;
	CmdUpdateMovieRacingDataCsReq = 4171;
	CmdMazeKillDirectCsReq = 4124;
	CmdTriggerVoiceScRsp = 4150;
	CmdUpdateGunPlayDataScRsp = 4152;
	CmdDifficultyAdjustmentUpdateDataScRsp = 4153;
	CmdGetMovieRacingDataScRsp = 4107;
	CmdCancelCacheNotifyScRsp = 4130;
	CmdShareCsReq = 4111;
	CmdGetGunPlayDataCsReq = 4151;
	CmdSecurityReportCsReq = 4195;
	CmdTriggerVoiceCsReq = 4136;
	CmdUpdateGunPlayDataCsReq = 4165;
}
enum CancelCacheType {
	CACHE_NOTIFY_TYPE_NONE = 0;
	CACHE_NOTIFY_TYPE_RECYCLE = 1;
	CACHE_NOTIFY_TYPE_RECHARGE = 2;
}
enum MovieRacingType {
	MOVIE_RACING_OVER_TAKE = 0;
	MOVIE_RACING_OVER_TAKE_ENDLESS = 1;
	MOVIE_RACING_SHOOTING = 2;
	MOVIE_RACING_SHOOTING_ENDLESS = 3;
}
enum DifficultyAdjustmentType {
	DIFFICULTY_AJUSTMENT_TYPE_DEFAULT = 0;
	DIFFICULTY_AJUSTMENT_TYPE_EASY = 1;
}
enum GIILENMKCAH {
	DIFFICULTY_AJUSTMENT_SOURCE_NONE = 0;
	DIFFICULTY_AJUSTMENT_SOURCE_RAID = 1;
	DIFFICULTY_AJUSTMENT_SOURCE_EVENT = 2;
}
enum MNIJHMEPGNN {
	MAZE_KILL_SOURCE_NONE = 0;
	MAZE_KILL_SOURCE_SWITCH_HAND = 1;
	MAZE_KILL_SOURCE_TIME_LINE = 2;
}
enum CmdMissionType {
	CmdMissionTypeNone = 0;
	CmdGetMainMissionCustomValueScRsp = 1284;
	CmdTeleportToMissionResetPointScRsp = 1252;
	CmdMissionGroupWarnScNotify = 1218;
	CmdStartFinishSubMissionScNotify = 1222;
	CmdSyncTaskScRsp = 1270;
	CmdFinishTalkMissionCsReq = 1247;
	CmdFinishCosumeItemMissionCsReq = 1236;
	CmdSyncTaskCsReq = 1206;
	CmdMissionRewardScNotify = 1235;
	CmdAcceptMainMissionCsReq = 1292;
	CmdStartFinishMainMissionScNotify = 1286;
	CmdMissionAcceptScNotify = 1275;
	CmdTeleportToMissionResetPointCsReq = 1265;
	CmdGetMissionStatusCsReq = 1225;
	CmdGetMissionStatusScRsp = 1210;
	CmdFinishCosumeItemMissionScRsp = 1250;
	CmdGetMainMissionCustomValueCsReq = 1224;
	CmdUpdateTrackMainMissionIdCsReq = 1283;
	CmdGetMissionDataCsReq = 1211;
	CmdUpdateTrackMainMissionIdScRsp = 1258;
	CmdSubMissionRewardScNotify = 1237;
	CmdFinishTalkMissionScRsp = 1209;
	CmdAcceptMainMissionScRsp = 1253;
	CmdGetMissionDataScRsp = 1213;
	CmdFinishedMissionScNotify = 1268;
}
enum MissionSyncRecord {
	MISSION_SYNC_RECORD_NONE = 0;
	MISSION_SYNC_RECORD_MAIN_MISSION_ACCEPT = 1;
	MISSION_SYNC_RECORD_MAIN_MISSION_START = 2;
	MISSION_SYNC_RECORD_MAIN_MISSION_FINISH = 3;
	MISSION_SYNC_RECORD_MAIN_MISSION_DELETE = 4;
	MISSION_SYNC_RECORD_MISSION_ACCEPT = 11;
	MISSION_SYNC_RECORD_MISSION_START = 12;
	MISSION_SYNC_RECORD_MISSION_FINISH = 13;
	MISSION_SYNC_RECORD_MISSION_DELETE = 14;
	MISSION_SYNC_RECORD_MISSION_PROGRESS = 15;
}
enum GJPKMNEFCFO {
	MAIN_MISSION_SYNC_NONE = 0;
	MAIN_MISSION_SYNC_MCV = 1;
}
enum TrackMainMissionUpdateReasonId {
	TRACK_MAIN_MISSION_UPDATE_NONE = 0;
	TRACK_MAIN_MISSION_UPDATE_AUTO = 1;
	TRACK_MAIN_MISSION_UPDATE_MANUAL = 2;
	TRACK_MAIN_MISSION_UPDATE_LOGIN_REPORT = 3;
}
enum CmdMonopolyType {
	CmdMonopolyTypeNone = 0;
	CmdMonopolyActionResultScNotify = 7047;
	CmdMonopolyGuessChooseScRsp = 7094;
	CmdMonopolyUpgradeAssetScRsp = 7082;
	CmdGetMonopolyFriendRankingListCsReq = 7004;
	CmdMonopolyCheatDiceCsReq = 7065;
	CmdMonopolyLikeCsReq = 7096;
	CmdDailyFirstEnterMonopolyActivityScRsp = 7050;
	CmdMonopolyRollRandomCsReq = 7073;
	CmdGetSocialEventServerCacheCsReq = 7001;
	CmdMonopolyTakeRaffleTicketRewardScRsp = 7032;
	CmdMonopolyLikeScRsp = 7069;
	CmdMonopolyGetDailyInitItemCsReq = 7049;
	CmdMonopolyLikeScNotify = 7066;
	CmdMonopolyDailySettleScNotify = 7063;
	CmdMonopolyBuyGoodsScRsp = 7007;
	CmdMonopolyRollRandomScRsp = 7077;
	CmdMonopolyMoveCsReq = 7089;
	CmdMonopolyGiveUpCurContentScRsp = 7037;
	CmdMonopolyGuessDrawScNotify = 7081;
	CmdMonopolyConditionUpdateScNotify = 7045;
	CmdMonopolyEventSelectFriendCsReq = 7008;
	CmdMonopolyGameBingoFlipCardScRsp = 7028;
	CmdMonopolyClickCellScRsp = 7003;
	CmdMonopolyTakePhaseRewardScRsp = 7031;
	CmdMonopolyTakePhaseRewardCsReq = 7020;
	CmdGetMbtiReportScRsp = 7021;
	CmdMonopolyCheatDiceScRsp = 7052;
	CmdMonopolyGetRegionProgressCsReq = 7076;
	CmdGetMonopolyInfoScRsp = 7013;
	CmdMonopolyGameBingoFlipCardCsReq = 7075;
	CmdMonopolyClickCellCsReq = 7042;
	CmdMonopolyGuessChooseCsReq = 7060;
	CmdGetMonopolyInfoCsReq = 7011;
	CmdMonopolyConfirmRandomScRsp = 7025;
	CmdMonopolyEventLoadUpdateScNotify = 7074;
	CmdMonopolyCellUpdateNotify = 7009;
	CmdMonopolyBuyGoodsCsReq = 7010;
	CmdMonopolyReRollRandomCsReq = 7091;
	CmdMonopolyTakeRaffleTicketRewardCsReq = 7012;
	CmdMonopolySelectOptionScRsp = 7095;
	CmdMonopolyContentUpdateScNotify = 7022;
	CmdMonopolySelectOptionCsReq = 7030;
	CmdGetMbtiReportCsReq = 7099;
	CmdMonopolyConfirmRandomCsReq = 7057;
	CmdMonopolyGuessBuyInformationCsReq = 7087;
	CmdMonopolyRollDiceCsReq = 7006;
	CmdMonopolySttUpdateScNotify = 7098;
	CmdGetMonopolyFriendRankingListScRsp = 7078;
	CmdMonopolyScrachRaffleTicketCsReq = 7019;
	CmdMonopolyGameRaiseRatioCsReq = 7086;
	CmdMonopolyUpgradeAssetCsReq = 7071;
	CmdMonopolyGameSettleScNotify = 7053;
	CmdDeleteSocialEventServerCacheScRsp = 7027;
	CmdMonopolyGuessBuyInformationScRsp = 7056;
	CmdGetMonopolyDailyReportCsReq = 7038;
	CmdMonopolyGetDailyInitItemScRsp = 7088;
	CmdMonopolyRollDiceScRsp = 7070;
	CmdMonopolyQuizDurationChangeScNotify = 7100;
	CmdMonopolyGetRaffleTicketScRsp = 7016;
	CmdMonopolyGetRaffleTicketCsReq = 7055;
	CmdMonopolyGetRafflePoolInfoScRsp = 7085;
	CmdMonopolyGetRafflePoolInfoCsReq = 7015;
	CmdGetMonopolyMbtiReportRewardCsReq = 7061;
	CmdGetMonopolyDailyReportScRsp = 7062;
	CmdMonopolyClickMbtiReportCsReq = 7054;
	CmdMonopolyReRollRandomScRsp = 7093;
	CmdGetSocialEventServerCacheScRsp = 7040;
	CmdMonopolyGameGachaCsReq = 7024;
	CmdGetMonopolyMbtiReportRewardScRsp = 7080;
	CmdMonopolyGameRaiseRatioScRsp = 7092;
	CmdMonopolyClickMbtiReportScRsp = 7090;
	CmdMonopolyAcceptQuizCsReq = 7083;
	CmdMonopolyGetRegionProgressScRsp = 7043;
	CmdMonopolyScrachRaffleTicketScRsp = 7044;
	CmdMonopolyGameCreateScNotify = 7068;
	CmdMonopolyMoveScRsp = 7026;
	CmdMonopolyGiveUpCurContentCsReq = 7051;
	CmdMonopolyAcceptQuizScRsp = 7058;
	CmdMonopolyEventSelectFriendScRsp = 7033;
	CmdDailyFirstEnterMonopolyActivityCsReq = 7036;
	CmdMonopolySocialEventEffectScNotify = 7064;
	CmdMonopolyGameGachaScRsp = 7084;
	CmdDeleteSocialEventServerCacheCsReq = 7059;
}
enum GOJOINDBKIK {
	MONOPOLY_SOCIAL_EVENT_STATUS_NONE = 0;
	MONOPOLY_SOCIAL_EVENT_STATUS_WAITING_SELECT_FRIEND = 1;
}
enum IHGJLLNGDKL {
	MONOPOLY_CELL_STATE_IDLE = 0;
	MONOPOLY_CELL_STATE_BARRIER = 1;
	MONOPOLY_CELL_STATE_GROUND = 2;
	MONOPOLY_CELL_STATE_FINISH = 3;
}
enum GKEJFKAKENM {
	MONOPOLY_ACTION_RESULT_SOURCE_TYPE_NONE = 0;
	MONOPOLY_ACTION_RESULT_SOURCE_TYPE_EFFECT = 1;
	MONOPOLY_ACTION_RESULT_SOURCE_TYPE_ASSET_BONUS = 2;
	MONOPOLY_ACTION_RESULT_SOURCE_TYPE_ASSET_TAX = 3;
	MONOPOLY_ACTION_RESULT_SOURCE_TYPE_ASSET_UPGRADE = 4;
	MONOPOLY_ACTION_RESULT_SOURCE_TYPE_GAME_SETTLE = 5;
	MONOPOLY_ACTION_RESULT_SOURCE_TYPE_BUY_GOODS = 6;
	MONOPOLY_ACTION_RESULT_SOURCE_TYPE_CLICK = 7;
	MONOPOLY_ACTION_RESULT_SOURCE_TYPE_SOCIAL_EVENT = 8;
	MONOPOLY_ACTION_RESULT_SOURCE_TYPE_LIKE = 9;
	MONOPOLY_ACTION_RESULT_SOURCE_TYPE_QUIZ_GAME_SETTLE = 10;
}
enum CmdMultiplayerType {
	CmdMultiplayerTypeNone = 0;
	CmdMultiplayerFightGameFinishScNotify = 1089;
	CmdMultiplayerFightGameStateScRsp = 1013;
	CmdMultiplayerFightGiveUpCsReq = 1035;
	CmdMultiplayerGetFightGateCsReq = 1047;
	CmdMultiplayerFightGameStartScNotify = 1070;
	CmdMultiplayerFightGameStateCsReq = 1011;
	CmdMultiplayerGetFightGateScRsp = 1009;
	CmdMultiplayerFightGiveUpScRsp = 1006;
	CmdMultiplayerMatch3FinishScNotify = 1026;
}
enum CmdMultipleDropType {
	CmdMultipleDropTypeNone = 0;
	CmdMultipleDropInfoNotify = 4606;
	CmdGetMultipleDropInfoScRsp = 4613;
	CmdGetPlayerReturnMultiDropInfoCsReq = 4609;
	CmdMultipleDropInfoScNotify = 4647;
	CmdGetMultipleDropInfoCsReq = 4611;
	CmdGetPlayerReturnMultiDropInfoScRsp = 4635;
}
enum CmdMuseumType {
	CmdMuseumTypeNone = 0;
	CmdGetMuseumInfoCsReq = 4311;
	CmdMuseumRandomEventQueryCsReq = 4325;
	CmdMuseumTargetMissionFinishNotify = 4337;
	CmdMuseumTargetRewardNotify = 4365;
	CmdSetStuffToAreaCsReq = 4335;
	CmdGetMuseumInfoScRsp = 4313;
	CmdRemoveStuffFromAreaScRsp = 4389;
	CmdMuseumRandomEventSelectScRsp = 4371;
	CmdMuseumRandomEventStartScNotify = 4357;
	CmdGetStuffScNotify = 4326;
	CmdUpgradeAreaStatScRsp = 4377;
	CmdMuseumTakeCollectRewardScRsp = 4322;
	CmdGetExhibitScNotify = 4330;
	CmdBuyNpcStuffScRsp = 4309;
	CmdBuyNpcStuffCsReq = 4347;
	CmdMuseumDispatchFinishedScNotify = 4382;
	CmdFinishCurTurnCsReq = 4395;
	CmdFinishCurTurnScRsp = 4318;
	CmdMuseumRandomEventQueryScRsp = 4310;
	CmdUpgradeAreaScRsp = 4350;
	CmdRemoveStuffFromAreaCsReq = 4370;
	CmdMuseumTakeCollectRewardCsReq = 4352;
	CmdUpgradeAreaStatCsReq = 4373;
	CmdUpgradeAreaCsReq = 4336;
	CmdSetStuffToAreaScRsp = 4306;
	CmdMuseumTargetStartNotify = 4351;
	CmdMuseumFundsChangedScNotify = 4393;
	CmdMuseumRandomEventSelectCsReq = 4307;
	CmdMuseumInfoChangedScNotify = 4391;
}
enum MuseumRandomEventState {
	MUSEUM_RANDOM_EVENT_STATE_NONE = 0;
	MUSEUM_RANDOM_EVENT_STATE_START = 1;
	MUSEUM_RANDOM_EVENT_STATE_PROCESSING = 2;
	MUSEUM_RANDOM_EVENT_STATE_FINISH = 3;
}
enum KAMLGLMNJGJ {
	WORK_POS_NONE = 0;
	WORK_POS_1 = 1;
	WORK_POS_2 = 2;
	WORK_POS_3 = 3;
}
enum StatType {
	STAT_TYPE_NONE = 0;
	STAT_TYPE_ART = 1;
	STAT_TYPE_CULTURE = 2;
	STAT_TYPE_POPULAR = 3;
}
enum GetStuffType {
	UNKNOW = 0;
	MISSION_REWARD = 1;
	EVENT_BUY_STUFF = 2;
	MARKET_BUY_STUFF = 3;
	QUEST_REWARD = 4;
	INITIAL = 5;
	PHASE_FINISH_REWARD = 6;
}
enum CmdMusicRhythmType {
	CmdMusicRhythmTypeNone = 0;
	CmdMusicRhythmSaveSongConfigDataCsReq = 7574;
	CmdMusicRhythmUnlockSongSfxScNotify = 7594;
	CmdMusicRhythmStartLevelCsReq = 7586;
	CmdMusicRhythmSaveSongConfigDataScRsp = 7589;
	CmdMusicRhythmFinishLevelScRsp = 7600;
	CmdMusicRhythmFinishLevelCsReq = 7585;
	CmdMusicRhythmDataScRsp = 7598;
	CmdMusicRhythmUnlockSongNotify = 7592;
	CmdMusicRhythmMaxDifficultyLevelsUnlockNotify = 7575;
	CmdMusicRhythmStartLevelScRsp = 7581;
	CmdMusicRhythmDataCsReq = 7573;
	CmdMusicRhythmUnlockTrackScNotify = 7577;
}
enum EPGDHHHDJDC {
	STATUS_CLOSE = 0;
	STATUS_OPEN = 1;
}
enum CmdOfferingType {
	CmdOfferingTypeNone = 0;
	CmdOfferingInfoScNotify = 6939;
	CmdGetOfferingInfoScRsp = 6936;
	CmdTakeOfferingRewardScRsp = 6929;
	CmdSubmitOfferingItemScRsp = 6924;
	CmdSubmitOfferingItemCsReq = 6940;
	CmdTakeOfferingRewardCsReq = 6934;
	CmdGetOfferingInfoCsReq = 6937;
}
enum OfferingState {
	OFFERING_STATE_NONE = 0;
	OFFERING_STATE_LOCK = 1;
	OFFERING_STATE_OPEN = 2;
}
enum CmdPamMissionType {
	CmdPamMissionTypeNone = 0;
	CmdAcceptedPamMissionExpireScRsp = 4013;
	CmdSyncAcceptedPamMissionNotify = 4047;
	CmdAcceptedPamMissionExpireCsReq = 4011;
}
enum CmdPamSkinType {
	CmdPamSkinTypeNone = 0;
	CmdGetPamSkinDataScRsp = 8136;
	CmdSelectPamSkinCsReq = 8140;
	CmdUnlockPamSkinScNotify = 8134;
	CmdSelectPamSkinScRsp = 8124;
	CmdGetPamSkinDataCsReq = 8137;
}
enum CmdPetType {
	CmdPetTypeNone = 0;
	CmdCurPetChangedScNotify = 7611;
	CmdSummonPetScRsp = 7604;
	CmdRecallPetCsReq = 7605;
	CmdGetPetDataCsReq = 7625;
	CmdGetPetDataScRsp = 7621;
	CmdRecallPetScRsp = 7603;
	CmdSummonPetCsReq = 7616;
}
enum CDEFBKPCPPA {
	PET_OPERATION_TYPE_NONE = 0;
	PET_OPERATION_TYPE_SUMMON = 1;
	PET_OPERATION_TYPE_RECALL = 2;
}
enum CmdPhoneType {
	CmdPhoneTypeNone = 0;
	CmdUnlockChatBubbleScNotify = 5135;
	CmdSelectPhoneCaseScRsp = 5130;
	CmdSelectChatBubbleCsReq = 5147;
	CmdGetPhoneDataScRsp = 5113;
	CmdUnlockPhoneCaseScNotify = 5195;
	CmdGetPhoneDataCsReq = 5111;
	CmdSelectPhoneThemeCsReq = 5106;
	CmdSelectPhoneCaseCsReq = 5126;
	CmdSelectChatBubbleScRsp = 5109;
	CmdSelectPhoneThemeScRsp = 5170;
	CmdUnlockPhoneThemeScNotify = 5189;
}
enum CmdPlanetFesType {
	CmdPlanetFesTypeNone = 0;
	CmdPlanetFesBusinessDayRefreshEventCsReq = 8211;
	CmdPlanetFesChooseAvatarEventOptionCsReq = 8226;
	CmdPlanetFesTakeQuestRewardCsReq = 8248;
	CmdPlanetFesUpgradeSkillLevelScRsp = 8243;
	CmdPlanetFesAvatarLevelUpCsReq = 8238;
	CmdPlanetFesBuyLandScRsp = 8228;
	CmdPlanetFesStartMiniGameScRsp = 8221;
	CmdPlanetFesGetBusinessDayInfoScRsp = 8237;
	CmdPlanetFesSetCustomKeyValueScRsp = 8236;
	CmdPlanetFesGameBingoFlipScRsp = 8223;
	CmdPlanetFesFriendRankingInfoChangeScNotify = 8224;
	CmdPlanetFesGameBingoFlipCsReq = 8239;
	CmdPlanetFesTakeQuestRewardScRsp = 8235;
	CmdPlanetFesDeliverPamCargoCsReq = 8249;
	CmdPlanetFesTakeRegionPhaseRewardCsReq = 8234;
	CmdPlanetFesSetAvatarWorkCsReq = 8209;
	CmdPlanetFesCollectIncomeCsReq = 8206;
	CmdPlanetFesDeliverPamCargoScRsp = 8205;
	CmdPlanetFesBonusEventInteractScRsp = 8217;
	CmdPlanetFesDoGachaCsReq = 8213;
	CmdGetPlanetFesDataCsReq = 8242;
	CmdPlanetFesGetFriendRankingInfoListCsReq = 8247;
	CmdPlanetFesGetFriendRankingInfoListScRsp = 8220;
	CmdPlanetFesSetCustomKeyValueCsReq = 8215;
	CmdPlanetFesUpgradeFesLevelCsReq = 8212;
	CmdPlanetFesAvatarLevelUpScRsp = 8250;
	CmdPlanetFesClientStatusScRsp = 8216;
	CmdPlanetFesBonusEventInteractCsReq = 8227;
	CmdPlanetFesUpgradeSkillLevelCsReq = 8244;
	CmdPlanetFesDealAvatarEventOptionItemScRsp = 8233;
	CmdPlanetFesCollectIncomeScRsp = 8241;
	CmdPlanetFesBusinessDayRefreshEventScRsp = 8204;
	CmdPlanetFesCollectAllIncomeCsReq = 8232;
	CmdPlanetFesUpgradeFesLevelScRsp = 8240;
	CmdPlanetFesCollectAllIncomeScRsp = 8246;
	CmdPlanetFesUseItemScRsp = 8225;
	CmdPlanetFesBuyLandCsReq = 8245;
	CmdPlanetFesDoGachaScRsp = 8207;
	CmdPlanetFesTakeRegionPhaseRewardScRsp = 8219;
	CmdGetPlanetFesDataScRsp = 8218;
	CmdPlanetFesStartMiniGameCsReq = 8231;
	CmdPlanetFesGetAvatarStatCsReq = 8201;
	CmdPlanetFesUseItemCsReq = 8202;
	CmdPlanetFesSyncChangeScNotify = 8214;
	CmdPlanetFesGetAvatarStatScRsp = 8203;
	CmdPlanetFesClientStatusCsReq = 8210;
	CmdPlanetFesChooseAvatarEventOptionScRsp = 8208;
	CmdPlanetFesDealAvatarEventOptionItemCsReq = 8230;
	CmdPlanetFesGetBusinessDayInfoCsReq = 8222;
	CmdPlanetFesSetAvatarWorkScRsp = 8229;
}
enum GMFEJEFIBBI {
	PLANET_FES_QUEST_NONE = 0;
	PLANET_FES_QUEST_DOING = 1;
	PLANET_FES_QUEST_FINISH = 2;
	PLANET_FES_QUEST_CLOSE = 3;
}
enum DFHEJCIJBEJ {
	PLANET_FES_BUSINESS_EVENT_CHANGE_REASON_NONE = 0;
	PLANET_FES_BUSINESS_EVENT_AVATAR_CHANGE = 1;
	PLANET_FES_BUSINESS_EVENT_FINISH_GAME = 2;
}
enum IOCPJFKGKDG {
	PLANET_FES_CUSTOM_KEY_NONE = 0;
	PLANET_FES_CUSTOM_KEY_UNLOCK_INFINITE_BUSINESS_DAY_PERFORMANCE = 1;
	PLANET_FES_CUSTOM_KEY_BUSINESS_DAY_START_PERFORMANCE_LAST_SEEN_DAY = 2;
	PLANET_FES_CUSTOM_KEY_BUSINESS_DAY_UNLOCK_PERFORMANCE_LAST_SEEN_DAY = 3;
}
enum CmdPlanetFesExtType {
	CmdPlanetFesExtTypeNone = 0;
	CmdPlanetFesLargeBonusInteractScRsp = 8328;
	CmdPlanetFesHandleCardPieceApplyCsReq = 8318;
	CmdPlanetFesApplyCardPieceScRsp = 8335;
	CmdPlanetFesApplyCardPieceCsReq = 8319;
	CmdPlanetFesChangeCardPieceApplyPermissionScRsp = 8299;
	CmdPlanetFesChangeCardPieceApplyPermissionCsReq = 8331;
	CmdPlanetFesGetOfferedCardPieceScRsp = 8322;
	CmdPlanetFesGetExtraCardPieceInfoScRsp = 8308;
	CmdPlanetFesHandleCardPieceApplyScRsp = 8300;
	CmdPlanetFesGiveCardPieceScRsp = 8303;
	CmdPlanetFesGiveCardPieceCsReq = 8336;
	CmdPlanetFesGetFriendCardPieceScRsp = 8296;
	CmdPlanetFesLargeBonusInteractCsReq = 8297;
	CmdPlanetFesGetExtraCardPieceInfoCsReq = 8332;
	CmdPlanetFesGetOfferedCardPieceCsReq = 8306;
	CmdPlanetFesGetFriendCardPieceCsReq = 8304;
}
enum AOPKIFDMADI {
	PLANET_FES_LARGE_BONUS_INTERACT_START = 0;
	PLANET_FES_LARGE_BONUS_INTERACT_REPORT = 1;
	PLANET_FES_LARGE_BONUS_INTERACT_FINISH = 2;
}
enum CmdPlayerType {
	CmdPlayerTypeNone = 0;
	CmdClientObjUploadScRsp = 74;
	CmdSetPlayerInfoScRsp = 94;
	CmdUpdatePlayerSettingScRsp = 85;
	CmdServerAnnounceNotify = 86;
	CmdSetGameplayBirthdayCsReq = 63;
	CmdClientObjDownloadDataScNotify = 20;
	CmdPlayerGetTokenScRsp = 6;
	CmdPlayerHeartBeatCsReq = 99;
	CmdMonthCardRewardNotify = 69;
	CmdGmTalkScNotify = 89;
	CmdGetLevelRewardTakenListScRsp = 71;
	CmdQueryProductInfoCsReq = 56;
	CmdSetNicknameScRsp = 10;
	CmdPlayerLoginCsReq = 11;
	CmdRegionStopScNotify = 93;
	CmdReserveStaminaExchangeScRsp = 76;
	CmdAntiAddictScNotify = 57;
	CmdAceAntiCheaterCsReq = 78;
	CmdGetLevelRewardTakenListCsReq = 7;
	CmdGetBasicInfoScRsp = 41;
	CmdSetMultipleAvatarPathsCsReq = 90;
	CmdGetMultiPathAvatarInfoScRsp = 49;
	CmdDailyRefreshNotify = 17;
	CmdSetGameplayBirthdayScRsp = 4;
	CmdGetLevelRewardCsReq = 82;
	CmdSetMultipleAvatarPathsScRsp = 34;
	CmdRetcodeNotify = 66;
	CmdGetAuthkeyCsReq = 77;
	CmdGateServerScNotify = 8;
	CmdSetAvatarPathScRsp = 42;
	CmdUpdatePlayerSettingCsReq = 15;
	CmdGetSecretKeyInfoScRsp = 59;
	CmdReserveStaminaExchangeCsReq = 44;
	CmdPlayerLoginFinishScRsp = 67;
	CmdGetBasicInfoCsReq = 14;
	CmdGmTalkCsReq = 30;
	CmdPlayerGetTokenCsReq = 35;
	CmdGetAuthkeyScRsp = 91;
	CmdGetMultiPathAvatarInfoCsReq = 3;
	CmdGetVideoVersionKeyScRsp = 16;
	CmdSetAvatarPathCsReq = 62;
	CmdSetGenderScRsp = 68;
	CmdFeatureSwitchClosedScNotify = 33;
	CmdSetGenderCsReq = 58;
	CmdAceAntiCheaterScRsp = 96;
	CmdGetVideoVersionKeyCsReq = 55;
	CmdClientDownloadDataScNotify = 100;
	CmdSetRedPointStatusScNotify = 12;
	CmdUpdateFeatureSwitchScNotify = 46;
	CmdQueryProductInfoScRsp = 81;
	CmdSetNicknameCsReq = 25;
	CmdPlayerLoginFinishCsReq = 27;
	CmdGetGameStateServiceConfigScRsp = 39;
	CmdUnlockAvatarPathCsReq = 45;
	CmdPlayerKickOutScNotify = 26;
	CmdUpdatePsnSettingsInfoCsReq = 98;
	CmdGmTalkScRsp = 95;
	CmdStaminaInfoScNotify = 43;
	CmdPlayerLogoutCsReq = 47;
	CmdGetLevelRewardScRsp = 51;
	CmdUnlockAvatarPathScRsp = 54;
	CmdPlayerLoginScRsp = 13;
	CmdAvatarPathChangedNotify = 88;
	CmdPlayerHeartBeatScRsp = 21;
	CmdUpdatePsnSettingsInfoScRsp = 61;
	CmdSetPlayerInfoCsReq = 60;
	CmdSetLanguageCsReq = 52;
	CmdExchangeStaminaScRsp = 73;
	CmdClientObjUploadCsReq = 31;
	CmdGetGameStateServiceConfigCsReq = 97;
	CmdGetSecretKeyInfoCsReq = 40;
	CmdPlayerLogoutScRsp = 9;
	CmdSetLanguageScRsp = 22;
	CmdExchangeStaminaCsReq = 50;
}
enum ILPMNLDGEAK {
	AUTHKEY_SIGN_TYPE_NONE = 0;
	AUTHKEY_SIGN_TYPE_DEFAULT = 1;
	AUTHKEY_SIGN_TYPE_RSA = 2;
}
	enum KickType {
		KICK_SQUEEZED = 0;
		KICK_BLACK = 1;
		KICK_CHANGE_PWD = 2;
		KICK_LOGIN_WHITE_TIMEOUT = 3;
		KICK_ACE_ANTI_CHEATER = 4;
		KICK_BY_GM = 5;
	}
enum CmdPlayerBoardType {
	CmdPlayerBoardTypeNone = 0;
	CmdGetPlayerBoardDataScRsp = 2813;
	CmdSetIsDisplayAvatarInfoScRsp = 2889;
	CmdSetDisplayAvatarCsReq = 2835;
	CmdSetSignatureScRsp = 2895;
	CmdSetIsDisplayAvatarInfoCsReq = 2870;
	CmdGetPlayerBoardDataCsReq = 2811;
	CmdSetPersonalCardScRsp = 2873;
	CmdSetPersonalCardCsReq = 2850;
	CmdUnlockHeadIconScNotify = 2826;
	CmdSetSignatureCsReq = 2830;
	CmdSetDisplayAvatarScRsp = 2806;
	CmdSetAssistAvatarScRsp = 2836;
	CmdSetHeadIconCsReq = 2847;
	CmdSetHeadIconScRsp = 2809;
	CmdSetAssistAvatarCsReq = 2818;
}
enum CmdPlayerReturnType {
	CmdPlayerReturnTypeNone = 0;
	CmdPlayerReturnTakeRewardCsReq = 4570;
	CmdPlayerReturnForceFinishScNotify = 4595;
	CmdPlayerReturnInfoQueryScRsp = 4530;
	CmdPlayerReturnStartScNotify = 4511;
	CmdPlayerReturnSignCsReq = 4513;
	CmdPlayerReturnTakeRelicScRsp = 4536;
	CmdPlayerReturnInfoQueryCsReq = 4526;
	CmdPlayerReturnTakeRelicCsReq = 4518;
	CmdPlayerReturnTakeRewardScRsp = 4589;
	CmdPlayerReturnTakePointRewardScRsp = 4506;
	CmdPlayerReturnTakePointRewardCsReq = 4535;
	CmdPlayerReturnSignScRsp = 4547;
	CmdPlayerReturnPointChangeScNotify = 4509;
}
enum NOBPMMNFENJ {
	PLAYER_RETURN_NONE = 0;
	PLAYER_RETURN_PROCESSING = 1;
	PLAYER_RETURN_FINISH = 2;
}
enum CmdPlotType {
	CmdPlotTypeNone = 0;
	CmdFinishPlotScRsp = 1113;
	CmdFinishPlotCsReq = 1111;
}
enum CmdPunkLordType {
	CmdPunkLordTypeNone = 0;
	CmdGetPunkLordMonsterDataCsReq = 3211;
	CmdPunkLordRaidTimeOutScNotify = 3257;
	CmdSharePunkLordMonsterCsReq = 3235;
	CmdGetPunkLordDataScRsp = 3291;
	CmdPunkLordMonsterKilledNotify = 3252;
	CmdGetPunkLordBattleRecordScRsp = 3224;
	CmdGetPunkLordDataCsReq = 3277;
	CmdSummonPunkLordMonsterCsReq = 3270;
	CmdGetKilledPunkLordMonsterDataScRsp = 3251;
	CmdGetKilledPunkLordMonsterDataCsReq = 3282;
	CmdGetPunkLordMonsterDataScRsp = 3213;
	CmdPunkLordDataChangeNotify = 3292;
	CmdTakeKilledPunkLordMonsterScoreCsReq = 3222;
	CmdTakePunkLordPointRewardScRsp = 3250;
	CmdTakeKilledPunkLordMonsterScoreScRsp = 3286;
	CmdPunkLordMonsterInfoScNotify = 3273;
	CmdTakePunkLordPointRewardCsReq = 3236;
	CmdSharePunkLordMonsterScRsp = 3206;
	CmdStartPunkLordRaidScRsp = 3209;
	CmdGetPunkLordBattleRecordCsReq = 3253;
	CmdStartPunkLordRaidCsReq = 3247;
	CmdSummonPunkLordMonsterScRsp = 3289;
	CmdPunkLordBattleResultScNotify = 3271;
}
enum NLEFPBICECN {
	PUNK_LORD_OPERATION_NONE = 0;
	PUNK_LORD_OPERATION_REFRESH = 1;
	PUNK_LORD_OPERATION_SHARE = 2;
	PUNK_LORD_OPERATION_START_RAID = 3;
	PUNK_LORD_OPERATION_GET_BATTLE_RECORD = 4;
}
enum CmdQuestType {
	CmdQuestTypeNone = 0;
	CmdBatchGetQuestDataCsReq = 973;
	CmdTakeQuestOptionalRewardCsReq = 918;
	CmdGetQuestDataCsReq = 911;
	CmdGetQuestRecordCsReq = 970;
	CmdGetQuestDataScRsp = 913;
	CmdFinishQuestScRsp = 995;
	CmdTakeQuestOptionalRewardScRsp = 936;
	CmdTakeQuestRewardCsReq = 947;
	CmdFinishQuestCsReq = 930;
	CmdTakeQuestRewardScRsp = 909;
	CmdBatchGetQuestDataScRsp = 977;
	CmdGetQuestRecordScRsp = 989;
	CmdQuestRecordScNotify = 926;
}
enum QuestStatus {
	QUEST_NONE = 0;
	QUEST_DOING = 1;
	QUEST_FINISH = 2;
	QUEST_CLOSE = 3;
	QUEST_DELETE = 4;
}
enum CmdRaidType {
	CmdRaidTypeNone = 0;
	CmdGetChallengeRaidInfoCsReq = 2206;
	CmdRaidKickByServerScNotify = 2225;
	CmdGetSaveRaidCsReq = 2273;
	CmdTakeChallengeRaidRewardScRsp = 2226;
	CmdSetClientRaidTargetCountScRsp = 2250;
	CmdLeaveRaidCsReq = 2247;
	CmdGetRaidInfoCsReq = 2295;
	CmdStartRaidCsReq = 2211;
	CmdSetClientRaidTargetCountCsReq = 2236;
	CmdGetRaidInfoScRsp = 2218;
	CmdDelSaveRaidScNotify = 2257;
	CmdStartRaidScRsp = 2213;
	CmdGetAllSaveRaidCsReq = 2291;
	CmdTakeChallengeRaidRewardCsReq = 2289;
	CmdRaidInfoNotify = 2235;
	CmdGetSaveRaidScRsp = 2277;
	CmdLeaveRaidScRsp = 2209;
	CmdGetAllSaveRaidScRsp = 2293;
	CmdGetChallengeRaidInfoScRsp = 2270;
	CmdChallengeRaidNotify = 2230;
}
enum RaidStatus {
	RAID_STATUS_NONE = 0;
	RAID_STATUS_DOING = 1;
	RAID_STATUS_FINISH = 2;
	RAID_STATUS_FAILED = 3;
}
enum FOCHDFJANPC {
	RAID_TARGET_STATUS_NONE = 0;
	RAID_TARGET_STATUS_DOING = 1;
	RAID_TARGET_STATUS_FINISH = 2;
}
enum EGKFNDOOPNN {
	RAID_KICK_REASON_NONE = 0;
	RAID_KICK_REASON_ACTIVITY_SCHEDULE_FINISH = 1;
}
enum CmdRaidCollectionType {
	CmdRaidCollectionTypeNone = 0;
	CmdRaidCollectionDataScNotify = 6960;
	CmdRaidCollectionDataCsReq = 6957;
	CmdRaidCollectionEnterNextRaidScRsp = 6954;
	CmdRaidCollectionDataScRsp = 6956;
	CmdRaidCollectionEnterNextRaidCsReq = 6944;
}
enum CmdRechargeGiftType {
	CmdRechargeGiftTypeNone = 0;
	CmdTakeRechargeBenefitRewardCsReq = 8371;
	CmdTakeRechargeGiftRewardCsReq = 8380;
	CmdTakeRechargeBenefitRewardScRsp = 8370;
	CmdSyncRechargeBenefitInfoScNotify = 8379;
	CmdGetRechargeBenefitInfoScRsp = 8369;
	CmdTakeRechargeGiftRewardScRsp = 8364;
	CmdGetRechargeBenefitInfoCsReq = 8374;
	CmdGetRechargeGiftInfoCsReq = 8377;
	CmdGetRechargeGiftInfoScRsp = 8376;
}
	enum IPKPKDCEBKI {
		NotReach = 0;
		Received = 1;
		CanReceive = 2;
	}
enum CmdRecommendType {
	CMD_RECOMMEND_TYPE_NONE = 0;
	CmdGetBigDataAllRecommendCsReq = 2428;
	CmdGetBigDataAllRecommendScRsp = 2410;
	CmdGetChallengeRecommendLineupListCsReq = 2441;
	CmdGetBigDataRecommendCsReq = 2429;
	CmdGetBigDataRecommendScRsp = 2445;
	CmdGetChallengeRecommendLineupListScRsp = 2409;
}
enum BigDataRecommendType {
	BIG_DATA_RECOMMEND_TYPE_NONE = 0;
	BIG_DATA_RECOMMEND_TYPE_EQUIPMENT = 1;
	BIG_DATA_RECOMMEND_TYPE_RELIC_SUIT = 2;
	BIG_DATA_RECOMMEND_TYPE_RELIC_AVATAR = 3;
	BIG_DATA_RECOMMEND_TYPE_AVATAR_RELIC = 4;
}
enum CmdRedDotType {
	CmdRedDotTypeNone = 0;
	CmdUpdateRedDotDataScRsp = 5909;
	CmdGetAllRedDotDataCsReq = 5911;
	CmdGetSingleRedDotParamGroupScRsp = 5906;
	CmdUpdateRedDotDataCsReq = 5947;
	CmdGetSingleRedDotParamGroupCsReq = 5935;
	CmdGetAllRedDotDataScRsp = 5913;
}
enum OJLJHFNFDKP {
	UPDATE_REDDOT_NONE = 0;
	UPDATE_REDDOT_ADD = 1;
	UPDATE_REDDOT_REPLACE = 2;
}
enum CmdRelicSmartWearType {
	CmdRelicSmartWearTypeNone = 0;
	CmdRelicSmartWearGetPlanScRsp = 8266;
	CmdRelicSmartWearAddPlanCsReq = 8270;
	CmdRelicSmartWearDeletePlanScRsp = 8261;
	CmdRelicSmartWearGetPlanCsReq = 8267;
	CmdRelicSmartWearDeletePlanCsReq = 8269;
	CmdRelicSmartWearAddPlanScRsp = 8254;
	CmdRelicSmartWearUpdatePinRelicScNotify = 8263;
	CmdRelicSmartWearGetPinRelicScRsp = 8265;
	CmdRelicSmartWearUpdatePlanScRsp = 8259;
	CmdRelicSmartWearGetPinRelicCsReq = 8257;
	CmdRelicSmartWearUpdatePlanCsReq = 8264;
	CmdRelicSmartWearPinRelicScRsp = 8268;
	CmdRelicSmartWearPinRelicCsReq = 8260;
}
enum CmdReplayType {
	CmdReplayTypeNone = 0;
	CmdGetReplayTokenCsReq = 3511;
	CmdGetReplayTokenScRsp = 3513;
	CmdGetPlayerReplayInfoCsReq = 3547;
	CmdGetPlayerReplayInfoScRsp = 3509;
}
enum CmdRndOptionType {
	CmdRndOptionTypeNone = 0;
	CmdGetRndOptionCsReq = 3411;
	CmdDailyFirstMeetPamScRsp = 3409;
	CmdDailyFirstMeetPamCsReq = 3447;
	CmdGetRndOptionScRsp = 3413;
}
enum CmdRogueType {
	CmdRogueTypeNone = 0;
	CmdGetRogueInfoCsReq = 1811;
	CmdTakeRogueScoreRewardScRsp = 1807;
	CmdGetRogueTalentInfoScRsp = 1854;
	CmdSyncRoguePickAvatarInfoScNotify = 1802;
	CmdSyncRogueSeasonFinishScNotify = 1828;
	CmdExchangeRogueRewardKeyScRsp = 1821;
	CmdEnableRogueTalentScRsp = 1834;
	CmdGetRogueAeonInfoScRsp = 1803;
	CmdGetRogueBuffEnhanceInfoCsReq = 1871;
	CmdOpenRogueChestScRsp = 1866;
	CmdGetRogueInfoScRsp = 1813;
	CmdReviveRogueAvatarScRsp = 1825;
	CmdGetRogueAeonInfoCsReq = 1842;
	CmdEnterRogueMapRoomCsReq = 1868;
	CmdSyncRogueStatusScNotify = 1823;
	CmdSyncRogueGetItemScNotify = 1832;
	CmdSyncRogueAeonLevelUpRewardScNotify = 1885;
	CmdSyncRogueRewardInfoScNotify = 1879;
	CmdTakeRogueAeonLevelRewardCsReq = 1819;
	CmdGetRogueScoreRewardInfoScRsp = 1831;
	CmdSyncRogueVirtualItemInfoScNotify = 1872;
	CmdReviveRogueAvatarCsReq = 1857;
	CmdTakeRogueScoreRewardCsReq = 1810;
	CmdGetRogueTalentInfoCsReq = 1845;
	CmdSyncRogueAreaUnlockScNotify = 1812;
	CmdTakeRogueAeonLevelRewardScRsp = 1844;
	CmdFinishAeonDialogueGroupCsReq = 1849;
	CmdStartRogueScRsp = 1809;
	CmdEnterRogueCsReq = 1835;
	CmdEnableRogueTalentCsReq = 1890;
	CmdFinishAeonDialogueGroupScRsp = 1888;
	CmdQuitRogueCsReq = 1853;
	CmdPickRogueAvatarScRsp = 1891;
	CmdOpenRogueChestCsReq = 1869;
	CmdEnterRogueScRsp = 1806;
	CmdExchangeRogueRewardKeyCsReq = 1899;
	CmdSyncRogueFinishScNotify = 1873;
	CmdSyncRogueExploreWinScNotify = 1875;
	CmdSyncRogueAeonScNotify = 1816;
	CmdGetRogueBuffEnhanceInfoScRsp = 1882;
	CmdEnterRogueMapRoomScRsp = 1860;
	CmdLeaveRogueCsReq = 1870;
	CmdQuitRogueScRsp = 1824;
	CmdGetRogueScoreRewardInfoCsReq = 1820;
	CmdGetRogueInitialScoreScRsp = 1887;
	CmdPickRogueAvatarCsReq = 1877;
	CmdEnhanceRogueBuffCsReq = 1851;
	CmdSyncRogueReviveInfoScNotify = 1892;
	CmdStartRogueCsReq = 1847;
	CmdLeaveRogueScRsp = 1889;
	CmdGetRogueInitialScoreCsReq = 1894;
	CmdSyncRogueMapRoomScNotify = 1856;
	CmdEnhanceRogueBuffScRsp = 1837;
}
enum RogueStatus {
	ROGUE_STATUS_NONE = 0;
	ROGUE_STATUS_DOING = 1;
	ROGUE_STATUS_PENDING = 2;
	ROGUE_STATUS_ENDLESS = 3;
	ROGUE_STATUS_FINISH = 4;
}
enum RogueRoomStatus {
	ROGUE_ROOM_STATUS_NONE = 0;
	ROGUE_ROOM_STATUS_LOCK = 1;
	ROGUE_ROOM_STATUS_UNLOCK = 2;
	ROGUE_ROOM_STATUS_PLAY = 3;
	ROGUE_ROOM_STATUS_FINISH = 4;
}
enum RogueAreaStatus {
	ROGUE_AREA_STATUS_LOCK = 0;
	ROGUE_AREA_STATUS_UNLOCK = 1;
	ROGUE_AREA_STATUS_FIRST_PASS = 2;
	ROGUE_AREA_STATUS_CLOSE = 3;
}
enum RogueBuffSourceType {
	ROGUE_BUFF_SOURCE_TYPE_NONE = 0;
	ROGUE_BUFF_SOURCE_TYPE_SELECT = 1;
	ROGUE_BUFF_SOURCE_TYPE_ENHANCE = 2;
	ROGUE_BUFF_SOURCE_TYPE_MIRACLE = 3;
	ROGUE_BUFF_SOURCE_TYPE_DIALOGUE = 4;
	ROGUE_BUFF_SOURCE_TYPE_BONUS = 5;
	ROGUE_BUFF_SOURCE_TYPE_MAZE_SKILL = 6;
	ROGUE_BUFF_SOURCE_TYPE_SHOP = 7;
	ROGUE_BUFF_SOURCE_TYPE_LEVEL_MECHANISM = 8;
	ROGUE_BUFF_SOURCE_TYPE_ENDLESS_LEVEL_START = 9;
}
enum RogueMiracleSourceType {
	ROGUE_MIRACLE_SOURCE_TYPE_NONE = 0;
	ROGUE_MIRACLE_SOURCE_TYPE_SELECT = 1;
	ROGUE_MIRACLE_SOURCE_TYPE_DIALOGUE = 2;
	ROGUE_MIRACLE_SOURCE_TYPE_BONUS = 3;
	ROGUE_MIRACLE_SOURCE_TYPE_USE = 4;
	ROGUE_MIRACLE_SOURCE_TYPE_RESET = 5;
	ROGUE_MIRACLE_SOURCE_TYPE_REPLACE = 6;
	ROGUE_MIRACLE_SOURCE_TYPE_TRADE = 7;
	ROGUE_MIRACLE_SOURCE_TYPE_GET = 8;
	ROGUE_MIRACLE_SOURCE_TYPE_SHOP = 9;
	ROGUE_MIRACLE_SOURCE_TYPE_MAZE_SKILL = 10;
	ROGUE_MIRACLE_SOURCE_TYPE_LEVEL_MECHANISM = 11;
	ROGUE_MIRACLE_SOURCE_TYPE_ENDLESS_LEVEL_START = 12;
}
enum RogueDialogueResult {
	ROGUE_DIALOGUE_RESULT_SUCC = 0;
	ROGUE_DIALOGUE_RESULT_FAIL = 1;
}
enum CmdRogueArcadeType {
	CmdRogueArcadeTypeNone = 0;
	CmdRogueArcadeGetInfoScRsp = 7695;
	CmdRogueArcadeLeaveScRsp = 7656;
	CmdRogueArcadeRestartCsReq = 7691;
	CmdRogueArcadeStartScRsp = 7668;
	CmdRogueArcadeRestartScRsp = 7659;
	CmdRogueArcadeGetInfoCsReq = 7679;
	CmdRogueArcadeStartCsReq = 7692;
	CmdRogueArcadeLeaveCsReq = 7664;
}
enum CmdRogueCommonType {
	CmdRogueCommonTypeNone = 0;
	CmdCommonRogueQueryScRsp = 5666;
	CmdGetRogueAdventureRoomInfoCsReq = 5650;
	CmdGetRogueCommonDialogueDataCsReq = 5621;
	CmdRogueWorkbenchGetInfoScRsp = 5616;
	CmdGetRogueCollectionCsReq = 5619;
	CmdSyncRogueCommonVirtualItemInfoScNotify = 5641;
	CmdGetEnhanceCommonRogueBuffInfoCsReq = 5610;
	CmdGetRogueShopBuffInfoCsReq = 5606;
	CmdUpdateRogueAdventureRoomScoreScRsp = 5614;
	CmdRogueWorkbenchGetInfoCsReq = 5655;
	CmdTakeRogueEventHandbookRewardScRsp = 5656;
	CmdCommonRogueUpdateScNotify = 5699;
	CmdPrepareRogueAdventureRoomScRsp = 5647;
	CmdGetRogueShopBuffInfoScRsp = 5670;
	CmdRogueDoGambleCsReq = 5642;
	CmdGetRogueCommonDialogueDataScRsp = 5608;
	CmdSyncRogueHandbookDataUpdateScNotify = 5668;
	CmdBuyRogueShopBuffScRsp = 5695;
	CmdGetRogueShopMiracleInfoCsReq = 5609;
	CmdGetRogueShopFormulaInfoScRsp = 5634;
	CmdSyncRogueCommonPendingActionScNotify = 5700;
	CmdGetRogueHandbookDataCsReq = 5683;
	CmdSelectRogueCommonDialogueOptionCsReq = 5633;
	CmdSyncRogueCommonDialogueOptionFinishScNotify = 5627;
	CmdTakeRogueMiracleHandbookRewardScRsp = 5694;
	CmdSyncRogueCommonActionResultScNotify = 5681;
	CmdRogueDoGambleScRsp = 5603;
	CmdGetRogueCollectionScRsp = 5644;
	CmdBuyRogueShopMiracleScRsp = 5626;
	CmdSyncRogueAdventureRoomInfoScNotify = 5611;
	CmdRogueGetGambleInfoCsReq = 5638;
	CmdRogueWorkbenchHandleFuncScRsp = 5632;
	CmdRogueGetGambleInfoScRsp = 5662;
	CmdPrepareRogueAdventureRoomCsReq = 5613;
	CmdGetRogueAdventureRoomInfoScRsp = 5673;
	CmdEnhanceCommonRogueBuffScRsp = 5682;
	CmdSetRogueExhibitionScRsp = 5631;
	CmdCommonRogueComponentUpdateScNotify = 5667;
	CmdBuyRogueShopMiracleCsReq = 5689;
	CmdStopRogueAdventureRoomScRsp = 5637;
	CmdRogueWorkbenchHandleFuncCsReq = 5612;
	CmdRogueNpcDisappearCsReq = 5618;
	CmdBuyRogueShopFormulaScRsp = 5639;
	CmdTakeRogueEventHandbookRewardCsReq = 5687;
	CmdSetRogueExhibitionCsReq = 5620;
	CmdSetRogueCollectionCsReq = 5676;
	CmdSyncRogueCommonDialogueDataScNotify = 5659;
	CmdSelectRogueCommonDialogueOptionScRsp = 5664;
	CmdRogueNpcDisappearScRsp = 5636;
	CmdGetRogueExhibitionCsReq = 5615;
	CmdSetRogueCollectionScRsp = 5643;
	CmdTakeRogueMiracleHandbookRewardCsReq = 5660;
	CmdBuyRogueShopBuffCsReq = 5630;
	CmdGetRogueShopFormulaInfoCsReq = 5690;
	CmdHandleRogueCommonPendingActionCsReq = 5678;
	CmdBuyRogueShopFormulaCsReq = 5697;
	CmdGetRogueHandbookDataScRsp = 5658;
	CmdStopRogueAdventureRoomCsReq = 5651;
	CmdHandleRogueCommonPendingActionScRsp = 5696;
	CmdGetRogueExhibitionScRsp = 5685;
	CmdCommonRogueQueryCsReq = 5669;
	CmdFinishRogueCommonDialogueCsReq = 5601;
	CmdRogueDebugReplaySaveScNotify = 5654;
	CmdEnhanceCommonRogueBuffCsReq = 5671;
	CmdGetEnhanceCommonRogueBuffInfoScRsp = 5607;
	CmdFinishRogueCommonDialogueScRsp = 5640;
	CmdGetRogueShopMiracleInfoScRsp = 5635;
	CmdUpdateRogueAdventureRoomScoreCsReq = 5646;
}
enum RogueAdventureRoomStatus {
	ROGUE_ADVENTURE_ROOM_STATUS_NONE = 0;
	ROGUE_ADVENTURE_ROOM_STATUS_PREPARE = 1;
	ROGUE_ADVENTURE_ROOM_STATUS_STARTED = 2;
	ROGUE_ADVENTURE_ROOM_STATUS_STOPPED = 3;
}
enum RogueCommonBuffSelectSourceType {
	ROGUE_COMMON_BUFF_SELECT_SOURCE_TYPE_NONE = 0;
	ROGUE_COMMON_BUFF_SELECT_SOURCE_TYPE_DICE_ROLL = 1;
	ROGUE_COMMON_BUFF_SELECT_SOURCE_TYPE_AEON = 2;
	ROGUE_COMMON_BUFF_SELECT_SOURCE_TYPE_BOARD_EVENT = 3;
	ROGUE_COMMON_BUFF_SELECT_SOURCE_TYPE_LEVEL_MECHANISM = 4;
}
enum RogueUnlockFunctionType {
	ROGUE_UNLOCK_FUNCTION_TYPE_MIRACLE = 0;
	ROGUE_UNLOCK_FUNCTION_TYPE_SHOW_HINT = 1;
	ROGUE_UNLOCK_FUNCTION_TYPE_COSMOS_BAN_AEON = 2;
	ROGUE_UNLOCK_FUNTION_TYPE_EXHIBITION = 3;
	ROGUE_UNLOCK_FUNTION_TYPE_COLLECTION = 4;
	ROGUE_UNLOCK_FUNTION_TYPE_TOURN_GOD_MODE = 5;
}
enum RogueCommonMiracleSelectSourceType {
	ROGUE_COMMON_MIRACLE_SELECT_SOURCE_TYPE_NONE = 0;
	ROGUE_COMMON_MIRACLE_SELECT_SOURCE_TYPE_DICE_ROLL = 1;
	ROGUE_COMMON_MIRACLE_SELECT_SOURCE_TYPE_AEON = 2;
	ROGUE_COMMON_MIRACLE_SELECT_SOURCE_TYPE_BOARD_EVENT = 3;
	ROGUE_COMMON_MIRACLE_SELECT_SOURCE_TYPE_LEVEL_MECHANISM = 4;
}
enum RogueCommonBuffDisplayType {
	ROGUE_COMMON_BUFF_DISPLAY_TYPE_NONE = 0;
	ROGUE_COMMON_BUFF_DISPLAY_TYPE_ADD = 1;
	ROGUE_COMMON_BUFF_DISPLAY_TYPE_REMOVE = 2;
}
enum RogueCommonMiracleDisplayType {
	ROGUE_COMMON_MIRACLE_DISPLAY_TYPE_NONE = 0;
	ROGUE_COMMON_MIRACLE_DISPLAY_TYPE_ADD = 1;
	ROGUE_COMMON_MIRACLE_DISPLAY_TYPE_REMOVE = 2;
	ROGUE_COMMON_MIRACLE_DISPLAY_TYPE_REPAIR = 3;
}
enum RogueCommonItemDisplayType {
	ROGUE_COMMON_ITEM_DISPLAY_TYPE_NONE = 0;
	ROGUE_COMMON_ITEM_DISPLAY_TYPE_ADD = 1;
	ROGUE_COMMON_ITEM_DISPLAY_TYPE_REMOVE = 2;
}
enum RogueCommonActionResultDisplayType {
	ROGUE_COMMON_ACTION_RESULT_DISPLAY_TYPE_NONE = 0;
	ROGUE_COMMON_ACTION_RESULT_DISPLAY_TYPE_SINGLE = 1;
	ROGUE_COMMON_ACTION_RESULT_DISPLAY_TYPE_MULTI = 2;
}
enum RogueCommonActionResultSourceType {
	ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_NONE = 0;
	ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_SELECT = 1;
	ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_ENHANCE = 2;
	ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MIRACLE = 3;
	ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_DIALOGUE = 4;
	ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_BONUS = 5;
	ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_SHOP = 6;
	ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_DICE = 7;
	ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_AEON = 8;
	ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_BOARD_EVENT = 9;
	ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MAZE_SKILL = 10;
	ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_LEVEL_MECHANISM = 11;
	ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_BUFF = 12;
	ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_REFORGE = 13;
	ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MAGIC_UNIT_COMPOSE = 14;
	ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MAGIC_UNIT_REFORGE = 15;
}
enum NDKLJJIIMGM {
	kTitanBlessSelectNone = 0;
	kSelectTitanBlessType = 1;
	kSelectTitanBlessEnhance = 2;
}
enum RogueTalentStatus {
	ROGUE_TALENT_STATUS_LOCK = 0;
	ROGUE_TALENT_STATUS_UNLOCK = 1;
	ROGUE_TALENT_STATUS_ENABLE = 2;
}
enum RogueCollectionExhibitionOperateType {
	ROGUE_COLLECTION_OPERATE_NONE = 0;
	ROGUE_COLLECTION_OPERATE_SET = 1;
	ROGUE_COLLECTION_OPERATE_UNSET = 2;
}
enum RogueBoothStatus {
	ROGUE_BOOTH_NONE = 0;
	ROGUE_BOOTH_EMPTY = 1;
	ROGUE_BOOTH_DISPLAY = 2;
}
enum RogueCollectionStatus {
	ROGUE_COLLECTION_NONE = 0;
	ROGUE_COLLECTION_UNLOCKED = 1;
	ROGUE_COLLECTION_DISPLAY = 2;
}
enum RogueExhibitionStatus {
	ROGUE_EXHIBITION_NONE = 0;
	ROGUE_EXHIBITION_UNLOCKED = 1;
	ROGUE_EXHIBITION_DISPLAY = 2;
}
enum CmdRogueEndless {
	CmdRogueEndlessNone = 0;
	CmdGetRogueEndlessActivityDataCsReq = 6004;
	CmdTakeRogueEndlessActivityPointRewardScRsp = 6005;
	CmdTakeRogueEndlessActivityAllBonusRewardScRsp = 6010;
	CmdEnterRogueEndlessActivityStageScRsp = 6007;
	CmdTakeRogueEndlessActivityPointRewardCsReq = 6002;
	CmdGetRogueEndlessActivityDataScRsp = 6006;
	CmdRogueEndlessActivityBattleEndScNotify = 6008;
	CmdEnterRogueEndlessActivityStageCsReq = 6009;
	CmdTakeRogueEndlessActivityAllBonusRewardCsReq = 6003;
}
enum CmdRogueMagic {
	CmdRogueMagicNone = 0;
	CmdRogueMagicStartCsReq = 7711;
	CmdRogueMagicEnableTalentCsReq = 7775;
	CmdRogueMagicScepterTakeOffUnitCsReq = 7765;
	CmdRogueMagicEnterCsReq = 7747;
	CmdRogueMagicAreaUpdateScNotify = 7750;
	CmdRogueMagicStartScRsp = 7713;
	CmdRogueMagicReviveAvatarScRsp = 7710;
	CmdRogueMagicAutoDressInUnitCsReq = 7794;
	CmdRogueMagicEnterRoomScRsp = 7730;
	CmdRogueMagicSetAutoDressInMagicUnitScRsp = 7758;
	CmdRogueMagicEnterLayerScRsp = 7718;
	CmdRogueMagicLeaveScRsp = 7706;
	CmdRogueMagicQueryScRsp = 7771;
	CmdRogueMagicReviveCostUpdateScNotify = 7757;
	CmdRogueMagicGetTalentInfoScRsp = 7784;
	CmdRogueMagicScepterTakeOffUnitScRsp = 7752;
	CmdRogueMagicGetMiscRealTimeDataCsReq = 7768;
	CmdRogueMagicScepterDressInUnitScRsp = 7737;
	CmdRogueMagicEnterLayerCsReq = 7795;
	CmdRogueMagicGetTalentInfoCsReq = 7724;
	CmdRogueMagicQueryCsReq = 7707;
	CmdRogueMagicSettleScRsp = 7789;
	CmdRogueMagicUnitReforgeCsReq = 7792;
	CmdRogueMagicGetMiscRealTimeDataScRsp = 7760;
	CmdRogueMagicAutoDressInUnitScRsp = 7787;
	CmdRogueMagicUnitComposeScRsp = 7786;
	CmdRogueMagicStoryInfoUpdateScNotify = 7756;
	CmdRogueMagicBattleFailSettleInfoScNotify = 7793;
	CmdRogueMagicUnitComposeCsReq = 7722;
	CmdRogueMagicEnableTalentScRsp = 7728;
	CmdRogueMagicAutoDressInMagicUnitChangeScNotify = 7781;
	CmdRogueMagicLevelInfoUpdateScNotify = 7736;
	CmdRogueMagicScepterDressInUnitCsReq = 7751;
	CmdRogueMagicLeaveCsReq = 7735;
	CmdRogueMagicReviveAvatarCsReq = 7725;
	CmdRogueMagicSettleCsReq = 7770;
	CmdRogueMagicEnterScRsp = 7709;
	CmdRogueMagicEnterRoomCsReq = 7726;
	CmdRogueMagicUnitReforgeScRsp = 7753;
	CmdRogueMagicSetAutoDressInMagicUnitCsReq = 7783;
}
enum RogueMagicLevelStatus {
	ROGUE_MAGIC_LEVEL_STATUS_NONE = 0;
	ROGUE_MAGIC_LEVEL_STATUS_PROCESSING = 1;
	ROGUE_MAGIC_LEVEL_STATUS_FINISHED = 2;
	ROGUE_MAGIC_LEVEL_STATUS_SETTLED = 3;
}
enum RogueMagicLayerStatus {
	ROGUE_MAGIC_LAYER_STATUS_NONE = 0;
	ROGUE_MAGIC_LAYER_STATUS_PROCESSING = 1;
	ROGUE_MAGIC_LAYER_STATUS_FINISH = 2;
}
enum RogueMagicRoomStatus {
	ROGUE_MAGIC_ROOM_STATUS_NONE = 0;
	ROGUE_MAGIC_ROOM_STATUS_INITED = 1;
	ROGUE_MAGIC_ROOM_STATUS_PROCESSING = 2;
	ROGUE_MAGIC_ROOM_STATUS_FINISH = 3;
}
enum RogueMagicSettleReason {
	ROGUE_MAGIC_SETTLE_REASON_NONE = 0;
	ROGUE_MAGIC_SETTLE_REASON_WIN = 1;
	ROGUE_MAGIC_SETTLE_REASON_FAIL = 2;
	ROGUE_MAGIC_SETTLE_REASON_INTERRUPT = 3;
}
enum CmdRogueModifierType {
	CmdRogueModifierTypeNone = 0;
	CmdRogueModifierSelectCellCsReq = 5309;
	CmdRogueModifierStageStartNotify = 5330;
	CmdRogueModifierAddNotify = 5347;
	CmdRogueModifierUpdateNotify = 5389;
	CmdRogueModifierSelectCellScRsp = 5335;
	CmdRogueModifierDelNotify = 5326;
}
enum RogueModifierSourceType {
	ROGUE_MODIFIER_SOURCE_NONE = 0;
	ROGUE_MODIFIER_SOURCE_DICE_ROLL = 1;
	ROGUE_MODIFIER_SOURCE_AEON = 2;
	ROGUE_MODIFIER_SOURCE_BOARD_EVENT = 3;
	ROGUE_MODIFIER_SOURCE_DIALOG_EVENT = 4;
	ROGUE_MODIFIER_SOURCE_MIRACLE = 5;
	ROGUE_MODIFIER_SOURCE_CELL_MARK = 6;
	ROGUE_MODIFIER_SOURCE_AEON_TALENT = 7;
	ROGUE_MODIFIER_SOURCE_BOSS_DECAY = 8;
	ROGUE_MODIFIER_SOURCE_DICE_BRANCH = 9;
}
enum RogueModifierContentType {
	ROGUE_MODIFIER_CONTENT_DEFINITE = 0;
	ROGUE_MODIFIER_CONTENT_RANDOM = 1;
}
enum CmdRogueTournType {
	CmdRogueTournTypeNone = 0;
	CmdRogueTournGetSeasonTalentInfoScRsp = 6070;
	CmdRogueTournTitanUpdateTitanBlessProgressScNotify = 6087;
	CmdRogueTournEnterRogueCocoonSceneCsReq = 6067;
	CmdRogueTournGetSeasonTalentInfoCsReq = 6069;
	CmdRogueTournConfirmSettleCsReq = 6042;
	CmdRogueTournRenameArchiveScRsp = 6045;
	CmdRogueTournTakeExpRewardCsReq = 6035;
	CmdRogueTournGetPermanentTalentInfoScRsp = 6077;
	CmdRogueTournBattleFailSettleInfoScNotify = 6085;
	CmdRogueTournEnterRoomCsReq = 6040;
	CmdRogueTournEnableSeasonTalentCsReq = 6038;
	CmdRogueTournEnterLayerScRsp = 6096;
	CmdRogueTournEnableSeasonTalentScRsp = 6018;
	CmdRogueTournReEnterRogueCocoonStageScRsp = 6062;
	CmdRogueTournResetPermanentTalentScRsp = 6032;
	CmdRogueTournReEnterRogueCocoonStageCsReq = 6057;
	CmdRogueTournGetAllArchiveCsReq = 6051;
	CmdRogueTournRenameArchiveCsReq = 6081;
	CmdRogueTournReviveCostUpdateScNotify = 6024;
	CmdRogueTournLeaveRogueCocoonSceneCsReq = 6061;
	CmdRogueTournGetSettleInfoScRsp = 6076;
	CmdRogueTournGetMiscRealTimeDataCsReq = 6073;
	CmdRogueTournStartCsReq = 6019;
	CmdRogueTournSettleScRsp = 6028;
	CmdRogueTournDeleteArchiveScRsp = 6063;
	CmdRogueTournSettleCsReq = 6036;
	CmdRogueTournExpNotify = 6027;
	CmdRogueTournReviveAvatarScRsp = 6091;
	CmdRogueTournGetCurRogueCocoonInfoCsReq = 6060;
	CmdRogueTournQueryScRsp = 6017;
	CmdRogueTournReviveAvatarCsReq = 6020;
	CmdRogueTournGetMiscRealTimeDataScRsp = 6043;
	CmdRogueTournEnterRogueCocoonSceneScRsp = 6022;
	CmdRogueTournLeaveScRsp = 6056;
	CmdRogueTournGetCurRogueCocoonInfoScRsp = 6014;
	CmdRogueTournEnablePermanentTalentScRsp = 6084;
	CmdRogueTournGetArchiveRepositoryCsReq = 6037;
	CmdRogueTournEnterCsReq = 6088;
	CmdRogueTournWeekChallengeUpdateScNotify = 6031;
	CmdRogueTournAreaUpdateScNotify = 6083;
	CmdRogueTournGetPermanentTalentInfoCsReq = 6065;
	CmdRogueTournStartScRsp = 6023;
	CmdRogueTournLeaveCsReq = 6074;
	CmdRogueTournTakeExpRewardScRsp = 6095;
	CmdRogueTournEnterRoomScRsp = 6034;
	CmdRogueTournEnablePermanentTalentCsReq = 6094;
	CmdRogueTournEnterScRsp = 6021;
	CmdRogueTournQueryCsReq = 6046;
	CmdRogueTournClearArchiveNameScNotify = 6050;
	CmdRogueTournDifficultyCompNotify = 6100;
	CmdRogueTournLevelInfoUpdateScNotify = 6079;
	CmdRogueTournLeaveRogueCocoonSceneScRsp = 6093;
	CmdRogueTournDeleteArchiveCsReq = 6047;
	CmdRogueTournEnterLayerCsReq = 6068;
	CmdRogueTournGetArchiveRepositoryScRsp = 6011;
	CmdRogueTournGetAllArchiveScRsp = 6092;
	CmdRogueTournConfirmSettleScRsp = 6099;
	CmdRogueTournHandBookNotify = 6090;
	CmdRogueTournResetPermanentTalentCsReq = 6075;
	CmdRogueTournGetSettleInfoCsReq = 6078;
}
enum RogueTournLevelStatus {
	ROGUE_TOURN_LEVEL_STATUS_NONE = 0;
	ROGUE_TOURN_LEVEL_STATUS_PROCESSING = 1;
	ROGUE_TOURN_LEVEL_STATUS_FINISHED = 2;
	ROGUE_TOURN_LEVEL_STATUS_SETTLED = 3;
}
enum RogueTournLayerStatus {
	ROGUE_TOURN_LAYER_STATUS_NONE = 0;
	ROGUE_TOURN_LAYER_STATUS_PROCESSING = 1;
	ROGUE_TOURN_LAYER_STATUS_FINISH = 2;
}
enum RogueTournRoomStatus {
	ROGUE_TOURN_ROOM_STATUS_NONE = 0;
	ROGUE_TOURN_ROOM_STATUS_INITED = 1;
	ROGUE_TOURN_ROOM_STATUS_PROCESSING = 2;
	ROGUE_TOURN_ROOM_STATUS_FINISH = 3;
}
enum RogueTournSettleReason {
	ROGUE_TOURN_SETTLE_REASON_NONE = 0;
	ROGUE_TOURN_SETTLE_REASON_WIN = 1;
	ROGUE_TOURN_SETTLE_REASON_FAIL = 2;
	ROGUE_TOURN_SETTLE_REASON_INTERRUPT = 3;
}
enum RogueTournHandbookType {
	ROGUE_TOURN_HANDBOOK_NONE = 0;
	ROGUE_TOURN_HANDBOOK_SIMPLE_MIRACLE = 1;
	ROGUE_TOURN_HANDBOOK_HEX_MIRACLE = 2;
	ROGUE_TOURN_HANDBOOK_BUFF = 3;
	ROGUE_TOURN_HANDBOOK_EVENT = 4;
	ROGUE_TOURN_HANDBOOK_FORMULA = 5;
	ROGUE_TOURN_HANDBOOK_TITAN_BLESS = 6;
}
enum CmdRollShopType {
	CmdRollShopTypeNone = 0;
	CmdTakeRollShopRewardCsReq = 6914;
	CmdGetRollShopInfoCsReq = 6917;
	CmdDoGachaInRollShopCsReq = 6920;
	CmdGetRollShopInfoScRsp = 6916;
	CmdTakeRollShopRewardScRsp = 6909;
	CmdDoGachaInRollShopScRsp = 6904;
}
enum CmdSceneType {
	CmdSceneTypeNone = 0;
	CmdSceneCastSkillCsReq = 1435;
	CmdUnlockedAreaMapScNotify = 1439;
	CmdReturnLastTownCsReq = 1410;
	CmdSceneReviveAfterRebattleScRsp = 1437;
	CmdSceneUpdatePositionVersionNotify = 1418;
	CmdUnlockTeleportNotify = 1479;
	CmdEntityBindPropScRsp = 1468;
	CmdDeleteSummonUnitScRsp = 1497;
	CmdSetCurInteractEntityScRsp = 1453;
	CmdEnteredSceneChangeScNotify = 1488;
	CmdActivateFarmElementScRsp = 1446;
	CmdRefreshTriggerByClientScRsp = 1454;
	CmdSpringRefreshScRsp = 1457;
	CmdSetGroupCustomSaveDataScRsp = 1408;
	CmdDeactivateFarmElementCsReq = 1456;
	CmdGameplayCounterCountDownScRsp = 1431;
	CmdUpdateMechanismBarScNotify = 1499;
	CmdSceneEntityMoveCsReq = 1411;
	CmdSceneGroupRefreshScNotify = 1498;
	CmdStartCocoonStageCsReq = 1428;
	CmdSceneEntityTeleportScRsp = 1427;
	CmdSetCurInteractEntityCsReq = 1492;
	CmdGameplayCounterRecoverCsReq = 1461;
	CmdGetEnteredSceneScRsp = 1449;
	CmdSceneEnterStageCsReq = 1471;
	CmdSyncEntityBuffChangeListScNotify = 1436;
	CmdRefreshTriggerByClientCsReq = 1445;
	CmdSetClientPausedScRsp = 1494;
	CmdSceneCastSkillCostMpCsReq = 1450;
	CmdActivateFarmElementCsReq = 1500;
	CmdGetUnlockTeleportScRsp = 1443;
	CmdGetCurSceneInfoScRsp = 1489;
	CmdSpringRefreshCsReq = 1493;
	CmdGetSceneMapInfoCsReq = 1432;
	CmdSceneEntityMoveScRsp = 1413;
	CmdEnterSectionScRsp = 1452;
	CmdSceneCastSkillScRsp = 1406;
	CmdEnterSectionCsReq = 1465;
	CmdStartCocoonStageScRsp = 1483;
	CmdGameplayCounterUpdateScNotify = 1474;
	CmdLastSpringRefreshTimeNotify = 1425;
	CmdInteractPropScRsp = 1409;
	CmdSetClientPausedCsReq = 1460;
	CmdEntityBindPropCsReq = 1458;
	CmdRefreshTriggerByClientScNotify = 1490;
	CmdUpdateGroupPropertyScRsp = 1405;
	CmdGroupStateChangeScRsp = 1462;
	CmdSceneEntityMoveScNotify = 1495;
	CmdEnterSceneScRsp = 1455;
	CmdGameplayCounterRecoverScRsp = 1480;
	CmdDeleteSummonUnitCsReq = 1434;
	CmdInteractPropCsReq = 1447;
	CmdGameplayCounterCountDownCsReq = 1420;
	CmdSceneCastSkillMpUpdateScNotify = 1477;
	CmdGetEnteredSceneCsReq = 1403;
	CmdReturnLastTownScRsp = 1407;
	CmdDeactivateFarmElementScRsp = 1481;
	CmdTrainWorldIdChangeScNotify = 1448;
	CmdGetSceneMapInfoScRsp = 1419;
	CmdChangePropTimelineInfoCsReq = 1426;
	CmdScenePlaneEventScNotify = 1412;
	CmdGetCurSceneInfoCsReq = 1470;
	CmdChangePropTimelineInfoScRsp = 1430;
	CmdSavePointsInfoNotify = 1475;
	CmdSyncServerSceneChangeNotify = 1444;
	CmdEnterSceneCsReq = 1467;
	CmdGroupStateChangeCsReq = 1438;
	CmdSceneEntityTeleportCsReq = 1459;
	CmdGroupStateChangeScNotify = 1442;
	CmdUpdateGroupPropertyCsReq = 1402;
	CmdEnterSceneByServerScNotify = 1416;
	CmdSceneReviveAfterRebattleCsReq = 1451;
	CmdReEnterLastElementStageCsReq = 1401;
	CmdSetGroupCustomSaveDataCsReq = 1421;
	CmdRecoverAllLineupScRsp = 1484;
	CmdGetUnlockTeleportCsReq = 1476;
	CmdSceneEnterStageScRsp = 1482;
	CmdReEnterLastElementStageScRsp = 1440;
	CmdOpenChestScNotify = 1415;
	CmdUpdateFloorSavedValueNotify = 1485;
	CmdSceneCastSkillCostMpScRsp = 1473;
	CmdRecoverAllLineupCsReq = 1424;
}
enum SkillExtraTag {
	SCENE_CAST_SKILL_NONE = 0;
	SCENE_CAST_SKILL_PROJECTILE_HIT = 1;
	SCENE_CAST_SKILL_PROJECTILE_LIFETIME_FINISH = 2;
}
enum MonsterBattleType {
	MONSTER_BATTLE_TYPE_NONE = 0;
	MONSTER_BATTLE_TYPE_TRIGGER_BATTLE = 1;
	MONSTER_BATTLE_TYPE_DIRECT_DIE_SIMULATE_BATTLE = 2;
	MONSTER_BATTLE_TYPE_DIRECT_DIE_SKIP_BATTLE = 3;
	MONSTER_BATTLE_TYPE_NO_BATTLE = 4;
}
enum SceneEntityBuffChangeType {
	SCENE_ENTITY_BUFF_CHANGE_TYPE_DEFAULT = 0;
	SCENE_ENTITY_BUFF_CHANGE_TYPE_ADD_MAZEBUFF = 1;
	SCENE_ENTITY_BUFF_CHANGE_TYPE_ADD_ADV_MODIFIER = 2;
}
enum EnterSceneReason {
	ENTER_SCENE_REASON_NONE = 0;
	ENTER_SCENE_REASON_CHALLENGE_TIMEOUT = 1;
	ENTER_SCENE_REASON_ROGUE_TIMEOUT = 2;
	ENTER_SCENE_REASON_CHANGE_STORYLINE = 3;
	ENTER_SCENE_REASON_DIMENSION_MERGE = 4;
}
enum ChestType {
	MAP_INFO_CHEST_TYPE_NONE = 0;
	MAP_INFO_CHEST_TYPE_NORMAL = 101;
	MAP_INFO_CHEST_TYPE_CHALLENGE = 102;
	MAP_INFO_CHEST_TYPE_PUZZLE = 104;
}
enum GameplayCounterUpdateReason {
	GAMEPLAY_COUNTER_UPDATE_REASON_NONE = 0;
	GAMEPLAY_COUNTER_UPDATE_REASON_ACTIVATE = 1;
	GAMEPLAY_COUNTER_UPDATE_REASON_DEACTIVATE = 2;
	GAMEPLAY_COUNTER_UPDATE_REASON_CHANGE = 3;
}
enum SceneGroupRefreshType {
	SCENE_GROUP_REFRESH_TYPE_NONE = 0;
	SCENE_GROUP_REFRESH_TYPE_LOADED = 1;
	SCENE_GROUP_REFRESH_TYPE_UNLOAD = 2;
}
enum CmdServerPrefsType {
	CmdServerPrefsTypeNone = 0;
	CmdUpdateServerPrefsDataScRsp = 6106;
	CmdUpdateServerPrefsDataCsReq = 6135;
	CmdGetServerPrefsDataCsReq = 6147;
	CmdGetAllServerPrefsDataCsReq = 6111;
	CmdGetAllServerPrefsDataScRsp = 6113;
	CmdGetServerPrefsDataScRsp = 6109;
}
enum CmdShopType {
	CmdShopTypeNone = 0;
	CmdGetShopListScRsp = 1513;
	CmdBuyGoodsScRsp = 1509;
	CmdTakeCityShopRewardCsReq = 1535;
	CmdTakeCityShopRewardScRsp = 1506;
	CmdGetShopListCsReq = 1511;
	CmdBuyGoodsCsReq = 1547;
	CmdCityShopInfoScNotify = 1570;
}
enum CmdSpaceZooType {
	CmdSpaceZooTypeNone = 0;
	CmdSpaceZooDataCsReq = 6711;
	CmdSpaceZooBornCsReq = 6747;
	CmdSpaceZooBornScRsp = 6709;
	CmdSpaceZooTakeScRsp = 6773;
	CmdSpaceZooExchangeItemCsReq = 6718;
	CmdSpaceZooOpCatteryCsReq = 6770;
	CmdSpaceZooOpCatteryScRsp = 6789;
	CmdSpaceZooDeleteCatCsReq = 6726;
	CmdSpaceZooExchangeItemScRsp = 6736;
	CmdSpaceZooDeleteCatScRsp = 6730;
	CmdSpaceZooMutateCsReq = 6735;
	CmdSpaceZooDataScRsp = 6713;
	CmdSpaceZooMutateScRsp = 6706;
	CmdSpaceZooTakeCsReq = 6750;
	CmdSpaceZooCatUpdateNotify = 6795;
}
enum CmdStarFightType {
	CmdStarFightTypeNone = 0;
	CmdGetStarFightDataScRsp = 7166;
	CmdStarFightDataChangeNotify = 7168;
	CmdGetStarFightDataCsReq = 7164;
	CmdStartStarFightLevelScRsp = 7167;
	CmdStartStarFightLevelCsReq = 7169;
}
enum CmdStoryLineType {
	CmdStoryLineTypeNone = 0;
	CmdChangeStoryLineFinishScNotify = 6206;
	CmdStoryLineInfoScNotify = 6247;
	CmdGetStoryLineInfoCsReq = 6211;
	CmdGetStoryLineInfoScRsp = 6213;
	CmdStoryLineTrialAvatarChangeScNotify = 6270;
}
enum ChangeStoryLineAction {
	ChangeStoryLineAction_None = 0;
	ChangeStoryLineAction_FinishAction = 1;
	ChangeStoryLineAction_Client = 2;
	ChangeStoryLineAction_CustomOP = 3;
}
enum CmdStoryTokenType {
	CmdStoryTokenTypeNone = 0;
	CmdTakeStoryTokenActivityRewardCsReq = 8360;
	CmdGetStoryTokenActivityDataScRsp = 8356;
	CmdGetStoryTokenActivityDataCsReq = 8357;
	CmdTakeStoryTokenActivityRewardScRsp = 8344;
}
enum CmdStrongChallengeActivityType {
	CmdStrongChallengeActivityTypeNone = 0;
	CmdGetStrongChallengeActivityDataCsReq = 6611;
	CmdEnterStrongChallengeActivityStageScRsp = 6609;
	CmdEnterStrongChallengeActivityStageCsReq = 6647;
	CmdStrongChallengeActivityBattleEndScNotify = 6635;
	CmdGetStrongChallengeActivityDataScRsp = 6613;
}
enum CmdSummonActivityType {
	CmdSummonActivityTypeNone = 0;
	CmdSummonActivityBattleEndScNotify = 7568;
	CmdGetSummonActivityDataScRsp = 7566;
	CmdEnterSummonActivityStageCsReq = 7569;
	CmdEnterSummonActivityStageScRsp = 7567;
	CmdGetSummonActivityDataCsReq = 7564;
}
enum CmdSwitchHandType {
	CmdSwitchHandTypeNone = 0;
	CmdSwitchHandDataCsReq = 8117;
	CmdSwitchHandDataScRsp = 8116;
	CmdSwitchHandResetGameScRsp = 8103;
	CmdSwitchHandResetHandPosScRsp = 8115;
	CmdSwitchHandUpdateScRsp = 8111;
	CmdSwitchHandUpdateCsReq = 8119;
	CmdSwitchHandCoinUpdateScRsp = 8118;
	CmdSwitchHandFinishCsReq = 8114;
	CmdSwitchHandCoinUpdateCsReq = 8110;
	CmdSwitchHandStartScRsp = 8104;
	CmdSwitchHandResetHandPosCsReq = 8107;
	CmdSwitchHandFinishScRsp = 8109;
	CmdSwitchHandStartCsReq = 8120;
	CmdSwitchHandResetGameCsReq = 8113;
}
enum HandPropType {
	SWITCH_HAND_OP_PROP_TYPE_NONE = 0;
	SWITCH_HAND_OP_PROP_TYPE_CATCH = 1;
	SWITCH_HAND_OP_PROP_TYPE_LIFT = 2;
}
enum CmdSwordTrainingType {
	CmdSwordTrainingTypeNone = 0;
	CmdSwordTrainingMarkEndingViewedScRsp = 7451;
	CmdSwordTrainingMarkEndingViewedCsReq = 7490;
	CmdSwordTrainingStoryBattleScRsp = 7467;
	CmdSwordTrainingExamResultConfirmScRsp = 7475;
	CmdSwordTrainingGiveUpGameCsReq = 7461;
	CmdSwordTrainingDailyPhaseConfirmScRsp = 7479;
	CmdSwordTrainingSelectEndingScRsp = 7494;
	CmdSwordTrainingStoryBattleCsReq = 7477;
	CmdSwordTrainingStoryConfirmScRsp = 7487;
	CmdSwordTrainingRestoreGameScRsp = 7481;
	CmdSwordTrainingResumeGameScRsp = 7470;
	CmdSwordTrainingTurnActionCsReq = 7456;
	CmdSwordTrainingTurnActionScRsp = 7491;
	CmdGetSwordTrainingDataScRsp = 7464;
	CmdSwordTrainingDailyPhaseConfirmCsReq = 7459;
	CmdSwordTrainingStartGameCsReq = 7498;
	CmdSwordTrainingExamResultConfirmCsReq = 7452;
	CmdSwordTrainingLearnSkillScRsp = 7500;
	CmdSwordTrainingDialogueSelectOptionScRsp = 7478;
	CmdSwordTrainingUnlockSyncScNotify = 7476;
	CmdSwordTrainingStoryConfirmCsReq = 7472;
	CmdSwordTrainingGiveUpGameScRsp = 7454;
	CmdSwordTrainingRestoreGameCsReq = 7469;
	CmdSwordTrainingGameSyncChangeScNotify = 7492;
	CmdSwordTrainingLearnSkillCsReq = 7488;
	CmdSwordTrainingResumeGameCsReq = 7497;
	CmdEnterSwordTrainingExamScRsp = 7457;
	CmdEnterSwordTrainingExamCsReq = 7463;
	CmdSwordTrainingGameSettleScNotify = 7455;
	CmdSwordTrainingActionTurnSettleScNotify = 7471;
	CmdSwordTrainingSetSkillTraceScRsp = 7462;
	CmdSwordTrainingStartGameScRsp = 7485;
	CmdSwordTrainingSetSkillTraceCsReq = 7486;
	CmdSwordTrainingSelectEndingCsReq = 7483;
	CmdSwordTrainingDialogueSelectOptionCsReq = 7495;
	CmdGetSwordTrainingDataCsReq = 7468;
}
enum PKHJBPMIBBA {
	SWORD_TRAIN_GAME_SOURCE_TYPE_NONE = 0;
	SWORD_TRAIN_GAME_SOURCE_TYPE_TURN_SETTLE = 1;
	SWORD_TRAIN_GAME_SOURCE_TYPE_STATUS_UPGRADE = 2;
	SWORD_TRAIN_GAME_SOURCE_TYPE_ACTION = 3;
	SWORD_TRAIN_GAME_SOURCE_TYPE_ACTION_HINT = 4;
	SWORD_TRAIN_GAME_SOURCE_TYPE_STORY = 5;
	SWORD_TRAIN_GAME_SOURCE_TYPE_EXAM_BONUS = 6;
	SWORD_TRAIN_GAME_SOURCE_TYPE_DIALOGUE = 7;
}
enum SwordTrainingDailyPhaseType {
	SWORD_TRAINING_DAILY_PHASE_TYPE_NONE = 0;
	SWORD_TRAINING_DAILY_PHASE_TYPE_MORNING = 1;
	SWORD_TRAINING_DAILY_PHASE_TYPE_NOON = 2;
	SWORD_TRAINING_DAILY_PHASE_TYPE_AFTERNOON = 3;
	SWORD_TRAINING_DAILY_PHASE_TYPE_EVENING = 4;
}
enum HDIJJMDPILE {
	SWORD_TRAINING_STATUS_TYPE_NONE = 0;
	SWORD_TRAINING_STATUS_TYPE_POWER = 1;
	SWORD_TRAINING_STATUS_TYPE_AGILITY = 2;
	SWORD_TRAINING_STATUS_TYPE_TOUGHNESS = 3;
	SWORD_TRAINING_STATUS_TYPE_PERCEPTION = 4;
	_SWORD_TRAINING_STATUS_TYPE_MAX = 5;
}
enum HDMKPHALALG {
	SWORD_TRAINING_GAME_SETTLE_NONE = 0;
	SWORD_TRAINING_GAME_SETTLE_FINISH = 1;
	SWORD_TRAINING_GAME_SETTLE_GIVE_UP = 2;
	SWORD_TRAINING_GAME_SETTLE_BATTLE_FAILED = 3;
	SWORD_TRAINING_GAME_SETTLE_FORCE = 4;
	SWORD_TRAINING_GAME_SETTLE_BY_RESTORE = 5;
}
enum CmdPlayerSync {
	CmdPlayerSyncNone = 0;
	CmdPlayerSyncScNotify = 611;
}
enum CmdTalkRewardType {
	CmdTalkRewardTypeNone = 0;
	CmdFinishFirstTalkByPerformanceNpcScRsp = 2150;
	CmdFinishFirstTalkByPerformanceNpcCsReq = 2136;
	CmdGetFirstTalkNpcScRsp = 2106;
	CmdFinishFirstTalkNpcScRsp = 2189;
	CmdGetNpcTakenRewardCsReq = 2111;
	CmdGetNpcTakenRewardScRsp = 2113;
	CmdSelectInclinationTextScRsp = 2130;
	CmdFinishFirstTalkNpcCsReq = 2170;
	CmdGetFirstTalkByPerformanceNpcScRsp = 2118;
	CmdTakeTalkRewardScRsp = 2109;
	CmdTakeTalkRewardCsReq = 2147;
	CmdSelectInclinationTextCsReq = 2126;
	CmdGetFirstTalkNpcCsReq = 2135;
	CmdGetFirstTalkByPerformanceNpcCsReq = 2195;
}
enum CmdTarotBookType {
	CmdTarotBookTypeNone = 0;
	CmdTarotBookGetDataScRsp = 8156;
	CmdTarotBookOpenPackScRsp = 8144;
	CmdTarotBookFinishStoryScRsp = 8151;
	CmdTarotBookOpenPackCsReq = 8160;
	CmdTarotBookGetDataCsReq = 8157;
	CmdTarotBookModifyEnergyScNotify = 8150;
	CmdTarotBookUnlockStoryCsReq = 8154;
	CmdTarotBookFinishStoryCsReq = 8159;
	CmdTarotBookFinishInteractionScRsp = 8147;
	CmdTarotBookUnlockStoryScRsp = 8149;
	CmdTarotBookFinishInteractionCsReq = 8158;
}
enum CmdTelevisionActivityType {
	CmdTelevisionActivityTypeNone = 0;
	CmdGetTelevisionActivityDataCsReq = 6977;
	CmdTelevisionActivityBattleEndScNotify = 6969;
	CmdEnterTelevisionActivityStageCsReq = 6964;
	CmdEnterTelevisionActivityStageScRsp = 6974;
	CmdTelevisionActivityDataChangeScNotify = 6980;
	CmdGetTelevisionActivityDataScRsp = 6976;
}
enum CmdTextJoinType {
	CmdTextJoinTypeNone = 0;
	CmdTextJoinBatchSaveScRsp = 3806;
	CmdTextJoinSaveScRsp = 3813;
	CmdTextJoinQueryCsReq = 3847;
	CmdTextJoinBatchSaveCsReq = 3835;
	CmdTextJoinSaveCsReq = 3811;
	CmdTextJoinQueryScRsp = 3809;
}
enum CmdTrackPhotoActivityType {
	CmdTrackPhotoActivityTypeNone = 0;
	CmdQuitTrackPhotoStageCsReq = 7555;
	CmdGetTrackPhotoActivityDataScRsp = 7556;
	CmdSettleTrackPhotoStageScRsp = 7557;
	CmdStartTrackPhotoStageScRsp = 7552;
	CmdStartTrackPhotoStageCsReq = 7558;
	CmdQuitTrackPhotoStageScRsp = 7553;
	CmdSettleTrackPhotoStageCsReq = 7559;
	CmdGetTrackPhotoActivityDataCsReq = 7554;
}
enum CmdTrainPartyType {
	CmdTrainPartyTypeNone = 0;
	CmdTrainPartyLeaveCsReq = 8010;
	CmdTrainPartyBuildDiyScRsp = 8077;
	CmdTrainPartyGamePlayStartScRsp = 8052;
	CmdTrainPartyAddBuildDynamicBuffScRsp = 8028;
	CmdTrainPartyGamePlaySettleNotify = 8022;
	CmdTrainPartyBuildDiyCsReq = 8073;
	CmdTrainPartyGamePlayStartCsReq = 8065;
	CmdTrainPartyUpdatePosEnvScRsp = 8053;
	CmdTrainPartyAddBuildDynamicBuffCsReq = 8075;
	CmdTrainPartyGetDataCsReq = 8011;
	CmdTrainPartyMoveScNotify = 8035;
	CmdTrainPartyEnterScRsp = 8025;
	CmdTrainPartyEnterCsReq = 8057;
	CmdTrainPartySettleNotify = 8070;
	CmdTrainPartyTakeBuildLevelAwardCsReq = 8024;
	CmdTrainPartyBuildStartStepCsReq = 8036;
	CmdTrainPartyUseCardCsReq = 8047;
	CmdTrainPartyGetDataScRsp = 8013;
	CmdTrainPartyLeaveScRsp = 8007;
	CmdTrainPartyTakeBuildLevelAwardScRsp = 8084;
	CmdTrainPartyBuildStartStepScRsp = 8050;
	CmdTrainPartyUseCardScRsp = 8009;
	CmdTrainPartyHandlePendingActionCsReq = 8095;
	CmdTrainPartyBuildingUpdateNotify = 8091;
	CmdTrainPartyHandlePendingActionScRsp = 8018;
	CmdTrainPartyUpdatePosEnvCsReq = 8092;
	CmdTrainPartySyncUpdateScNotify = 8026;
}
enum BuildGoalStep {
	BuildGoalStepNone = 0;
	BuildGoalStepIdle = 1;
	BuildGoalStepStart = 2;
	BuildGoalStepFinish = 3;
}
enum TrainPartySrc {
	kTrainPartySrcNone = 0;
	kTrainPartySrcCard = 1;
	kTrainPartySrcGrid = 2;
	kTrainPartySrcPam = 3;
	kTrainPartySrcPassenger = 4;
	kTrainPartySrcBuilding = 5;
}
enum TrainPartyEventType {
	kDialogueEventNone = 0;
	kGamePlayStartDialogueEvent = 1;
	kGridDialogueEvent = 2;
	kAfterMeetingDialogueEvent = 3;
}
enum TrainPartyMtSkillBriefType {
	kMtSkillNone = 0;
	kMtSkillModifyBase = 1;
	kMtSkillModifyRatio = 2;
	kMtSkillMultiplyRatio = 3;
	kMtSkillSelfDestroy = 4;
}
enum CateGoryType {
	TRAIN_PARTY_MT_CATEGORY_NONE = 0;
	TRAIN_PARTY_MT_CATEGORY_S = 1;
	TRAIN_PARTY_MT_CATEGORY_A = 2;
	TRAIN_PARTY_MT_CATEGORY_B = 3;
	TRAIN_PARTY_MT_CATEGORY_C = 4;
	TRAIN_PARTY_MT_CATEGORY_D = 5;
	TRAIN_PARTY_MT_CATEGORY_E = 6;
	TRAIN_PARTY_MT_CATEGORY_F = 7;
	TRAIN_PARTY_MT_CATEGORY_G = 8;
}
enum CmdTrainVisitorType {
	CmdTrainVisitorTypeNone = 0;
	CmdGetTrainVisitorBehaviorScRsp = 3709;
	CmdTrainVisitorBehaviorFinishCsReq = 3711;
	CmdTrainVisitorRewardSendNotify = 3706;
	CmdShowNewSupplementVisitorCsReq = 3795;
	CmdGetTrainVisitorBehaviorCsReq = 3747;
	CmdTakeTrainVisitorUntakenBehaviorRewardCsReq = 3726;
	CmdGetTrainVisitorRegisterScRsp = 3789;
	CmdGetTrainVisitorRegisterCsReq = 3770;
	CmdTrainVisitorBehaviorFinishScRsp = 3713;
	CmdTrainRefreshTimeNotify = 3735;
	CmdTakeTrainVisitorUntakenBehaviorRewardScRsp = 3730;
	CmdShowNewSupplementVisitorScRsp = 3718;
}
enum TrainVisitorRewardSendType {
	TRAIN_VISITOR_REWARD_SEND_NONE = 0;
	TRAIN_VISITOR_REWARD_SEND_REGISTER = 1;
	TRAIN_VISITOR_REWARD_SEND_MISSION = 2;
}
enum TrainVisitorStatus {
	TRAIN_VISITOR_STATUS_NONE = 0;
	TRAIN_VISITOR_STATUS_INIT = 1;
	TRAIN_VISITOR_STATUS_GET_ON = 2;
	TRAIN_VISITOR_STATUS_GET_OFF = 3;
	TRAIN_VISITOR_STATUS_BE_TRAIN_MEMBER = 4;
}
enum TrainVisitorRegisterGetType {
	TRAIN_VISITOR_REGISTER_GET_TYPE_NONE = 0;
	TRAIN_VISITOR_REGISTER_GET_TYPE_AUTO = 1;
	TRAIN_VISITOR_REGISTER_GET_TYPE_MANUAL = 2;
}
enum CmdTravelBrochure {
	CmdTravelBrochureNone = 0;
	CmdTravelBrochurePageResetScRsp = 6425;
	CmdTravelBrochureApplyPasterListScRsp = 6407;
	CmdTravelBrochureGetDataScRsp = 6413;
	CmdTravelBrochurePageResetCsReq = 6457;
	CmdTravelBrochureGetDataCsReq = 6411;
	CmdTravelBrochureSetPageDescStatusCsReq = 6491;
	CmdTravelBrochureRemovePasterCsReq = 6426;
	CmdTravelBrochureRemovePasterScRsp = 6430;
	CmdTravelBrochureApplyPasterScRsp = 6489;
	CmdTravelBrochureSetCustomValueCsReq = 6473;
	CmdTravelBrochureUpdatePasterPosCsReq = 6495;
	CmdTravelBrochureSelectMessageCsReq = 6435;
	CmdTravelBrochureApplyPasterListCsReq = 6410;
	CmdTravelBrochureGetPasterScNotify = 6436;
	CmdTravelBrochureSetCustomValueScRsp = 6477;
	CmdTravelBrochureUpdatePasterPosScRsp = 6418;
	CmdTravelBrochureSelectMessageScRsp = 6406;
	CmdTravelBrochureSetPageDescStatusScRsp = 6493;
	CmdTravelBrochurePageUnlockScNotify = 6447;
	CmdTravelBrochureApplyPasterCsReq = 6470;
}
enum HGKKPPLJBOI {
	PAGE_NONE = 0;
	PAGE_UNLOCKED = 1;
	PAGE_INTERACTED = 2;
}
enum DCJAOPDINOI {
	PAGE_DESC_NONE = 0;
	PAGE_DESC_SHOW_DETAIL = 1;
	PAGE_DESC_COLLAPSE = 2;
}
enum CmdTreasureDungeonType {
	CmdTreasureDungeonTypeNone = 0;
	CmdEnterTreasureDungeonCsReq = 4436;
	CmdOpenTreasureDungeonGridCsReq = 4473;
	CmdTreasureDungeonDataScNotify = 4411;
	CmdInteractTreasureDungeonGridScRsp = 4425;
	CmdInteractTreasureDungeonGridCsReq = 4457;
	CmdGetTreasureDungeonActivityDataScRsp = 4418;
	CmdFightTreasureDungeonMonsterScRsp = 4493;
	CmdQuitTreasureDungeonCsReq = 4471;
	CmdFightTreasureDungeonMonsterCsReq = 4491;
	CmdUseTreasureDungeonItemCsReq = 4410;
	CmdOpenTreasureDungeonGridScRsp = 4477;
	CmdQuitTreasureDungeonScRsp = 4482;
	CmdTreasureDungeonFinishScNotify = 4413;
	CmdGetTreasureDungeonActivityDataCsReq = 4495;
	CmdUseTreasureDungeonItemScRsp = 4407;
	CmdEnterTreasureDungeonScRsp = 4450;
}
enum TreasureDungeonRecordType {
	TREASURE_DUNGEON_RECORD_NONE = 0;
	TREASURE_DUNGEON_RECORD_ADD_HP = 1;
	TREASURE_DUNGEON_RECORD_SUB_HP = 2;
	TREASURE_DUNGEON_RECORD_SUB_HP_NO_EXPLORE = 3;
	TREASURE_DUNGEON_RECORD_ADD_ATTACK = 5;
	TREASURE_DUNGEON_RECORD_ADD_DEFENCE = 6;
	TREASURE_DUNGEON_RECORD_ADD_EXPLORE = 9;
	TREASURE_DUNGEON_RECORD_SUB_EXPLORE = 10;
	TREASURE_DUNGEON_RECORD_ADD_EXPLORE_OVERFLOW = 11;
	TREASURE_DUNGEON_RECORD_SUMMON = 15;
	TREASURE_DUNGEON_RECORD_KILL = 16;
	TREASURE_DUNGEON_RECORD_ADD_TRIAL_AVATAR = 20;
	TREASURE_DUNGEON_RECORD_ADD_BUFF = 24;
	TREASURE_DUNGEON_RECORD_UNLOCK_DOOR = 25;
	TREASURE_DUNGEON_RECORD_ENEMY_ENHANCE = 27;
	TREASURE_DUNGEON_RECORD_ENEMY_WEAKEN = 28;
	TREASURE_DUNGEON_RECORD_ENEMY_AURA_REMOVE = 29;
	TREASURE_DUNGEON_RECORD_SPECIAL_MONSTER_RUN = 30;
	TREASURE_DUNGEON_RECORD_SPECIAL_MONSTER_KILL = 31;
	TREASURE_DUNGEON_RECORD_BATTLE_BUFF_TRIGGER_SUCCESS = 33;
	TREASURE_DUNGEON_RECORD_BATTLE_BUFF_TRIGGER_FAIL = 34;
	TREASURE_DUNGEON_RECORD_BATTLE_BUFF_ADD_EXPLORE = 35;
	TREASURE_DUNGEON_RECORD_BATTLE_BUFF_OPEN_GRID = 36;
	TREASURE_DUNGEON_RECORD_BATTLE_BUFF_ADD_ITEM = 37;
	TREASURE_DUNGEON_RECORD_AVATAR_DEAD = 40;
	TREASURE_DUNGEON_RECORD_TRIAL_AVATAR_DEAD = 41;
	TREASURE_DUNGEON_RECORD_ALL_AVATAR_DEAD = 42;
	TREASURE_DUNGEON_RECORD_OPEN_ITEM_CHEST = 43;
}
enum CmdTutorialType {
	CmdTutorialTypeNone = 0;
	CmdFinishTutorialCsReq = 1626;
	CmdUnlockTutorialGuideScRsp = 1689;
	CmdGetTutorialGuideScRsp = 1609;
	CmdFinishTutorialGuideScRsp = 1618;
	CmdGetTutorialGuideCsReq = 1647;
	CmdGetTutorialScRsp = 1613;
	CmdFinishTutorialGuideCsReq = 1695;
	CmdFinishTutorialScRsp = 1630;
	CmdGetTutorialCsReq = 1611;
	CmdUnlockTutorialCsReq = 1635;
	CmdUnlockTutorialScRsp = 1606;
	CmdUnlockTutorialGuideCsReq = 1670;
}
enum TutorialStatus {
	TUTORIAL_NONE = 0;
	TUTORIAL_UNLOCK = 1;
	TUTORIAL_FINISH = 2;
}
enum CmdWaypointType {
	CmdWaypointTypeNone = 0;
	CmdGetWaypointCsReq = 411;
	CmdWaypointShowNewCsNotify = 470;
	CmdGetWaypointScRsp = 413;
	CmdTakeChapterRewardScRsp = 426;
	CmdGetChapterCsReq = 435;
	CmdGetChapterScRsp = 406;
	CmdTakeChapterRewardCsReq = 489;
	CmdSetCurWaypointScRsp = 409;
	CmdSetCurWaypointCsReq = 447;
}
enum MHHLJFEJGNM {
	WAYPOINT_TYPE_NONE = 0;
	WAYPOINT_TYPE_STAGE = 1;
	WAYPOINT_TYPE_PLOT = 2;
}
enum OBFAICFOGMP {
	WAYPOINT_UNLOCK_NONE = 0;
	WAYPOINT_UNLOCK_PRE = 1;
	WAYPOINT_UNLOCK_LEVEL = 2;
}
enum CmdWolfBroType {
	CmdWolfBroTypeNone = 0;
	CmdGetWolfBroGameDataScRsp = 6510;
	CmdWolfBroGameActivateBulletCsReq = 6538;
	CmdQuitWolfBroGameCsReq = 6529;
	CmdWolfBroGameDataChangeScNotify = 6516;
	CmdWolfBroGameUseBulletScRsp = 6546;
	CmdWolfBroGameExplodeMonsterCsReq = 6548;
	CmdStartWolfBroGameScRsp = 6518;
	CmdWolfBroGamePickupBulletScRsp = 6507;
	CmdRestoreWolfBroGameArchiveScRsp = 6509;
	CmdArchiveWolfBroGameCsReq = 6514;
	CmdRestoreWolfBroGameArchiveCsReq = 6541;
	CmdArchiveWolfBroGameScRsp = 6506;
	CmdQuitWolfBroGameScRsp = 6545;
	CmdGetWolfBroGameDataCsReq = 6528;
	CmdStartWolfBroGameCsReq = 6542;
	CmdWolfBroGameActivateBulletScRsp = 6550;
	CmdWolfBroGameUseBulletCsReq = 6532;
	CmdWolfBroGameExplodeMonsterScRsp = 6535;
	CmdWolfBroGamePickupBulletCsReq = 6513;
}
enum CmdWorldUnlockType {
	CmdWorldUnlockTypeNone = 0;
	CmdWorldUnlockScRsp = 7626;
	CmdWorldUnlockCsReq = 7627;
}
enum DJEBIMHNPBM {
	DISPATCH_TYPE_NONE = 0;
	DISPATCH_TYPE_BY_ADDR = 1;
	DISPATCH_TYPE_BY_MOD = 2;
	DISPATCH_TYPE_BY_RAND = 3;
	DISPATCH_TYPE_BY_CHASH = 4;
	DISPATCH_TYPE_BY_STICKY_SESSION = 5;
	DISPATCH_TYPE_BY_OBJECT = 6;
}
